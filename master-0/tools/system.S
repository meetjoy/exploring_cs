
tools/system:     file format elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e0                	mov    %eax,%fs
       b:	8e e8                	mov    %eax,%gs
       d:	0f b2 25 c0 f2 02 00 	lss    0x2f2c0,%esp
      14:	e8 58 00 00 00       	call   71 <setup_idt>
      19:	e8 83 00 00 00       	call   a1 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	0f b2 25 c0 f2 02 00 	lss    0x2f2c0,%esp
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f2                	je     34 <OLDSS+0x4>
      42:	0f 20 c0             	mov    %cr0,%eax
      45:	25 11 00 00 80       	and    $0x80000011,%eax
      4a:	83 c8 02             	or     $0x2,%eax
      4d:	0f 22 c0             	mov    %eax,%cr0
      50:	e8 05 00 00 00       	call   5a <check_x87>
      55:	e9 a6 53 00 00       	jmp    5400 <after_page_tables>

0000005a <check_x87>:
      5a:	db e3                	fninit 
      5c:	9b df e0             	fstsw  %ax
      5f:	3c 00                	cmp    $0x0,%al
      61:	74 0b                	je     6e <check_x87+0x14>
      63:	0f 20 c0             	mov    %cr0,%eax
      66:	83 f0 06             	xor    $0x6,%eax
      69:	0f 22 c0             	mov    %eax,%cr0
      6c:	c3                   	ret    
      6d:	90                   	nop
      6e:	db e4                	fnsetpm(287 only) 
      70:	c3                   	ret    

00000071 <setup_idt>:
      71:	8d 15 28 54 00 00    	lea    0x5428,%edx
      77:	b8 00 00 08 00       	mov    $0x80000,%eax
      7c:	66 89 d0             	mov    %dx,%ax
      7f:	66 ba 00 8e          	mov    $0x8e00,%dx
      83:	8d 3d b8 54 00 00    	lea    0x54b8,%edi
      89:	b9 00 01 00 00       	mov    $0x100,%ecx

0000008e <rp_sidt>:
      8e:	89 07                	mov    %eax,(%edi)
      90:	89 57 04             	mov    %edx,0x4(%edi)
      93:	83 c7 08             	add    $0x8,%edi
      96:	49                   	dec    %ecx
      97:	75 f5                	jne    8e <rp_sidt>
      99:	0f 01 1d aa 54 00 00 	lidtl  0x54aa
      a0:	c3                   	ret    

000000a1 <setup_gdt>:
      a1:	0f 01 15 b2 54 00 00 	lgdtl  0x54b2
      a8:	c3                   	ret    
	...

00001000 <pg0>:
	...

00002000 <pg1>:
	...

00003000 <pg2>:
	...

00004000 <pg3>:
	...

00005000 <tmp_floppy_area>:
	...

00005400 <after_page_tables>:
    5400:	6a 00                	push   $0x0
    5402:	6a 00                	push   $0x0
    5404:	6a 00                	push   $0x0
    5406:	68 12 54 00 00       	push   $0x5412
    540b:	68 00 68 00 00       	push   $0x6800
    5410:	eb 3c                	jmp    544e <setup_paging>

00005412 <L6>:
    5412:	eb fe                	jmp    5412 <L6>

00005414 <int_msg>:
    5414:	55                   	push   %ebp
    5415:	6e                   	outsb  %ds:(%esi),(%dx)
    5416:	6b 6e 6f 77          	imul   $0x77,0x6f(%esi),%ebp
    541a:	6e                   	outsb  %ds:(%esi),(%dx)
    541b:	20 69 6e             	and    %ch,0x6e(%ecx)
    541e:	74 65                	je     5485 <setup_paging+0x37>
    5420:	72 72                	jb     5494 <setup_paging+0x46>
    5422:	75 70                	jne    5494 <setup_paging+0x46>
    5424:	74 0a                	je     5430 <ignore_int+0x8>
    5426:	0d                   	.byte 0xd
	...

00005428 <ignore_int>:
    5428:	50                   	push   %eax
    5429:	51                   	push   %ecx
    542a:	52                   	push   %edx
    542b:	1e                   	push   %ds
    542c:	06                   	push   %es
    542d:	0f a0                	push   %fs
    542f:	b8 10 00 00 00       	mov    $0x10,%eax
    5434:	8e d8                	mov    %eax,%ds
    5436:	8e c0                	mov    %eax,%es
    5438:	8e e0                	mov    %eax,%fs
    543a:	68 14 54 00 00       	push   $0x5414
    543f:	e8 02 38 00 00       	call   8c46 <printk>
    5444:	58                   	pop    %eax
    5445:	0f a1                	pop    %fs
    5447:	07                   	pop    %es
    5448:	1f                   	pop    %ds
    5449:	5a                   	pop    %edx
    544a:	59                   	pop    %ecx
    544b:	58                   	pop    %eax
    544c:	cf                   	iret   
    544d:	90                   	nop

0000544e <setup_paging>:
    544e:	b9 00 14 00 00       	mov    $0x1400,%ecx
    5453:	31 c0                	xor    %eax,%eax
    5455:	31 ff                	xor    %edi,%edi
    5457:	fc                   	cld    
    5458:	f3 ab                	rep stos %eax,%es:(%edi)
    545a:	c7 05 00 00 00 00 07 	movl   $0x1007,0x0
    5461:	10 00 00 
    5464:	c7 05 04 00 00 00 07 	movl   $0x2007,0x4
    546b:	20 00 00 
    546e:	c7 05 08 00 00 00 07 	movl   $0x3007,0x8
    5475:	30 00 00 
    5478:	c7 05 0c 00 00 00 07 	movl   $0x4007,0xc
    547f:	40 00 00 
    5482:	bf fc 4f 00 00       	mov    $0x4ffc,%edi
    5487:	b8 07 f0 ff 00       	mov    $0xfff007,%eax
    548c:	fd                   	std    
    548d:	ab                   	stos   %eax,%es:(%edi)
    548e:	2d 00 10 00 00       	sub    $0x1000,%eax
    5493:	7d f8                	jge    548d <setup_paging+0x3f>
    5495:	fc                   	cld    
    5496:	31 c0                	xor    %eax,%eax
    5498:	0f 22 d8             	mov    %eax,%cr3
    549b:	0f 20 c0             	mov    %cr0,%eax
    549e:	0d 00 00 00 80       	or     $0x80000000,%eax
    54a3:	0f 22 c0             	mov    %eax,%cr0
    54a6:	c3                   	ret    
    54a7:	90                   	nop
	...

000054aa <idt_descr>:
    54aa:	ff 07                	incl   (%edi)
    54ac:	b8 54 00 00 00       	mov    $0x54,%eax
	...

000054b2 <gdt_descr>:
    54b2:	ff 07                	incl   (%edi)
    54b4:	b8                   	.byte 0xb8
    54b5:	5c                   	pop    %esp
	...

000054b8 <idt>:
	...

00005cb8 <gdt>:
	...
    5cc0:	ff 0f                	decl   (%edi)
    5cc2:	00 00                	add    %al,(%eax)
    5cc4:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
    5cca:	00 00                	add    %al,(%eax)
    5ccc:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
	...

000064b8 <fork>:
// __attribute__((always_inline))表示将函数强制设置为内联函数
// int fork(void) __attribute__((always_inline));
//  int pause()系统调用：暂停进程的执行，直到收到一个信号。
// int pause(void) __attribute__((always_inline));
// fork()系统调用函数的定义
_syscall0(int, fork)
    64b8:	83 ec 10             	sub    $0x10,%esp
    64bb:	b8 02 00 00 00       	mov    $0x2,%eax
    64c0:	cd 80                	int    $0x80
    64c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64c6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64cb:	78 06                	js     64d3 <fork+0x1b>
    64cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d1:	eb 10                	jmp    64e3 <fork+0x2b>
    64d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d7:	f7 d8                	neg    %eax
    64d9:	a3 24 68 04 00       	mov    %eax,0x46824
    64de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    64e3:	83 c4 10             	add    $0x10,%esp
    64e6:	c3                   	ret    

000064e7 <pause>:
// pause()系统调用函数的定义
_syscall0(int, pause)
    64e7:	83 ec 10             	sub    $0x10,%esp
    64ea:	b8 1d 00 00 00       	mov    $0x1d,%eax
    64ef:	cd 80                	int    $0x80
    64f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64f5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64fa:	78 06                	js     6502 <pause+0x1b>
    64fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6500:	eb 10                	jmp    6512 <pause+0x2b>
    6502:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6506:	f7 d8                	neg    %eax
    6508:	a3 24 68 04 00       	mov    %eax,0x46824
    650d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6512:	83 c4 10             	add    $0x10,%esp
    6515:	c3                   	ret    

00006516 <setup>:
// int setup(void * BIOS)系统调用,仅用于linux初始化(仅在这个程序中被调用).
_syscall1(int, setup, void *, BIOS)
    6516:	53                   	push   %ebx
    6517:	83 ec 10             	sub    $0x10,%esp
    651a:	8b 54 24 18          	mov    0x18(%esp),%edx
    651e:	b8 00 00 00 00       	mov    $0x0,%eax
    6523:	89 d3                	mov    %edx,%ebx
    6525:	cd 80                	int    $0x80
    6527:	89 44 24 0c          	mov    %eax,0xc(%esp)
    652b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6530:	78 06                	js     6538 <setup+0x22>
    6532:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6536:	eb 10                	jmp    6548 <setup+0x32>
    6538:	8b 44 24 0c          	mov    0xc(%esp),%eax
    653c:	f7 d8                	neg    %eax
    653e:	a3 24 68 04 00       	mov    %eax,0x46824
    6543:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6548:	83 c4 10             	add    $0x10,%esp
    654b:	5b                   	pop    %ebx
    654c:	c3                   	ret    

0000654d <sync>:
// int sync()系统调用：更新文件系统。
_syscall0(int, sync)
    654d:	83 ec 10             	sub    $0x10,%esp
    6550:	b8 24 00 00 00       	mov    $0x24,%eax
    6555:	cd 80                	int    $0x80
    6557:	89 44 24 0c          	mov    %eax,0xc(%esp)
    655b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6560:	78 06                	js     6568 <sync+0x1b>
    6562:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6566:	eb 10                	jmp    6578 <sync+0x2b>
    6568:	8b 44 24 0c          	mov    0xc(%esp),%eax
    656c:	f7 d8                	neg    %eax
    656e:	a3 24 68 04 00       	mov    %eax,0x46824
    6573:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6578:	83 c4 10             	add    $0x10,%esp
    657b:	c3                   	ret    

0000657c <fork_for_process0>:
extern long rd_init(long mem_start, int length);	// 虚拟盘初始化(blk_drv/ramdisk.c)
extern long kernel_mktime(struct tm * tm);			// 计算系统开机启动时间(秒)

// fork系统调用函数,该函数作为static inline表示内联函数，主要用来在进程0里面创建进程1的时候内联，使进程0在生成进程1的时候
// 不使用自己的用户堆栈
static inline long fork_for_process0() {
    657c:	83 ec 10             	sub    $0x10,%esp
	long __res;
	__asm__ volatile (
    657f:	b8 02 00 00 00       	mov    $0x2,%eax
    6584:	cd 80                	int    $0x80
    6586:	89 44 24 0c          	mov    %eax,0xc(%esp)
		"int $0x80\n\t"  														/* 调用系统中断0x80 */
		: "=a" (__res)  														/* 返回值->eax(__res) */
		: "0" (2));  															/* 输入为系统中断调用号__NR_name */
	if (__res >= 0)  															/* 如果返回值>=0,则直接返回该值 */
    658a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    658f:	78 06                	js     6597 <fork_for_process0+0x1b>
		return __res;
    6591:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6595:	eb 10                	jmp    65a7 <fork_for_process0+0x2b>
	errno = -__res;  															/* 否则置出错号,并返回-1 */
    6597:	8b 44 24 0c          	mov    0xc(%esp),%eax
    659b:	f7 d8                	neg    %eax
    659d:	a3 24 68 04 00       	mov    %eax,0x46824
	return -1;
    65a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    65a7:	83 c4 10             	add    $0x10,%esp
    65aa:	c3                   	ret    

000065ab <sprintf>:

// 内核专用sprintf()函数.该函数用于产生格式化信息并输出到指定缓冲区str中.参数'*fmt'指定输出将采用格式.
static int sprintf(char * str, const char *fmt, ...)
{
    65ab:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    65ae:	8d 44 24 24          	lea    0x24(%esp),%eax
    65b2:	83 c0 04             	add    $0x4,%eax
    65b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(str, fmt, args);
    65b9:	8b 44 24 24          	mov    0x24(%esp),%eax
    65bd:	83 ec 04             	sub    $0x4,%esp
    65c0:	ff 74 24 10          	pushl  0x10(%esp)
    65c4:	50                   	push   %eax
    65c5:	ff 74 24 2c          	pushl  0x2c(%esp)
    65c9:	e8 a8 29 00 00       	call   8f76 <vsprintf>
    65ce:	83 c4 10             	add    $0x10,%esp
    65d1:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	return i;
    65d5:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    65d9:	83 c4 1c             	add    $0x1c,%esp
    65dc:	c3                   	ret    

000065dd <time_init>:
#define BCD_TO_BIN(val) ((val) = ((val)&15) + ((val) >> 4) * 10)

// 该函数取CMOS实时钟信息作为开机时间,并保存到全局变量startup_time(秒)中.其中调用的函数kernel_mktime()用于计算从
// 1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
static void time_init(void)
{
    65dd:	83 ec 3c             	sub    $0x3c,%esp
	struct tm time;								// 时间结构tm定义在include/time.h中
	// CMOS的访问速度很慢.为了减小时间误差,在读取了下面循环中所有数值后,若此时CMOS中秒值了变化,那么就重新读取所有值.这样内核
	// 就能把与CMOS时间误差控制在1秒之内.
	do {
		time.tm_sec = CMOS_READ(0);				// 当前时间秒值(均是BCD码值)
    65e0:	b8 80 00 00 00       	mov    $0x80,%eax
    65e5:	ba 70 00 00 00       	mov    $0x70,%edx
    65ea:	ee                   	out    %al,(%dx)
    65eb:	eb 00                	jmp    65ed <time_init+0x10>
    65ed:	eb 00                	jmp    65ef <time_init+0x12>
    65ef:	b8 71 00 00 00       	mov    $0x71,%eax
    65f4:	89 c2                	mov    %eax,%edx
    65f6:	ec                   	in     (%dx),%al
    65f7:	eb 00                	jmp    65f9 <time_init+0x1c>
    65f9:	eb 00                	jmp    65fb <time_init+0x1e>
    65fb:	88 44 24 2f          	mov    %al,0x2f(%esp)
    65ff:	0f b6 44 24 2f       	movzbl 0x2f(%esp),%eax
    6604:	0f b6 c0             	movzbl %al,%eax
    6607:	89 44 24 04          	mov    %eax,0x4(%esp)
		time.tm_min = CMOS_READ(2);				// 当前分钟值.
    660b:	b8 82 00 00 00       	mov    $0x82,%eax
    6610:	ba 70 00 00 00       	mov    $0x70,%edx
    6615:	ee                   	out    %al,(%dx)
    6616:	eb 00                	jmp    6618 <time_init+0x3b>
    6618:	eb 00                	jmp    661a <time_init+0x3d>
    661a:	b8 71 00 00 00       	mov    $0x71,%eax
    661f:	89 c2                	mov    %eax,%edx
    6621:	ec                   	in     (%dx),%al
    6622:	eb 00                	jmp    6624 <time_init+0x47>
    6624:	eb 00                	jmp    6626 <time_init+0x49>
    6626:	88 44 24 2e          	mov    %al,0x2e(%esp)
    662a:	0f b6 44 24 2e       	movzbl 0x2e(%esp),%eax
    662f:	0f b6 c0             	movzbl %al,%eax
    6632:	89 44 24 08          	mov    %eax,0x8(%esp)
		time.tm_hour = CMOS_READ(4);			// 当前小时值.
    6636:	b8 84 00 00 00       	mov    $0x84,%eax
    663b:	ba 70 00 00 00       	mov    $0x70,%edx
    6640:	ee                   	out    %al,(%dx)
    6641:	eb 00                	jmp    6643 <time_init+0x66>
    6643:	eb 00                	jmp    6645 <time_init+0x68>
    6645:	b8 71 00 00 00       	mov    $0x71,%eax
    664a:	89 c2                	mov    %eax,%edx
    664c:	ec                   	in     (%dx),%al
    664d:	eb 00                	jmp    664f <time_init+0x72>
    664f:	eb 00                	jmp    6651 <time_init+0x74>
    6651:	88 44 24 2d          	mov    %al,0x2d(%esp)
    6655:	0f b6 44 24 2d       	movzbl 0x2d(%esp),%eax
    665a:	0f b6 c0             	movzbl %al,%eax
    665d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		time.tm_mday = CMOS_READ(7);			// 一月中的当天日期.
    6661:	b8 87 00 00 00       	mov    $0x87,%eax
    6666:	ba 70 00 00 00       	mov    $0x70,%edx
    666b:	ee                   	out    %al,(%dx)
    666c:	eb 00                	jmp    666e <time_init+0x91>
    666e:	eb 00                	jmp    6670 <time_init+0x93>
    6670:	b8 71 00 00 00       	mov    $0x71,%eax
    6675:	89 c2                	mov    %eax,%edx
    6677:	ec                   	in     (%dx),%al
    6678:	eb 00                	jmp    667a <time_init+0x9d>
    667a:	eb 00                	jmp    667c <time_init+0x9f>
    667c:	88 44 24 2c          	mov    %al,0x2c(%esp)
    6680:	0f b6 44 24 2c       	movzbl 0x2c(%esp),%eax
    6685:	0f b6 c0             	movzbl %al,%eax
    6688:	89 44 24 10          	mov    %eax,0x10(%esp)
		time.tm_mon = CMOS_READ(8);				// 当前月份(1-12)
    668c:	b8 88 00 00 00       	mov    $0x88,%eax
    6691:	ba 70 00 00 00       	mov    $0x70,%edx
    6696:	ee                   	out    %al,(%dx)
    6697:	eb 00                	jmp    6699 <time_init+0xbc>
    6699:	eb 00                	jmp    669b <time_init+0xbe>
    669b:	b8 71 00 00 00       	mov    $0x71,%eax
    66a0:	89 c2                	mov    %eax,%edx
    66a2:	ec                   	in     (%dx),%al
    66a3:	eb 00                	jmp    66a5 <time_init+0xc8>
    66a5:	eb 00                	jmp    66a7 <time_init+0xca>
    66a7:	88 44 24 2b          	mov    %al,0x2b(%esp)
    66ab:	0f b6 44 24 2b       	movzbl 0x2b(%esp),%eax
    66b0:	0f b6 c0             	movzbl %al,%eax
    66b3:	89 44 24 14          	mov    %eax,0x14(%esp)
		time.tm_year = CMOS_READ(9);			// 当前年份.
    66b7:	b8 89 00 00 00       	mov    $0x89,%eax
    66bc:	ba 70 00 00 00       	mov    $0x70,%edx
    66c1:	ee                   	out    %al,(%dx)
    66c2:	eb 00                	jmp    66c4 <time_init+0xe7>
    66c4:	eb 00                	jmp    66c6 <time_init+0xe9>
    66c6:	b8 71 00 00 00       	mov    $0x71,%eax
    66cb:	89 c2                	mov    %eax,%edx
    66cd:	ec                   	in     (%dx),%al
    66ce:	eb 00                	jmp    66d0 <time_init+0xf3>
    66d0:	eb 00                	jmp    66d2 <time_init+0xf5>
    66d2:	88 44 24 2a          	mov    %al,0x2a(%esp)
    66d6:	0f b6 44 24 2a       	movzbl 0x2a(%esp),%eax
    66db:	0f b6 c0             	movzbl %al,%eax
    66de:	89 44 24 18          	mov    %eax,0x18(%esp)
	} while (time.tm_sec != CMOS_READ(0));
    66e2:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    66e6:	b8 80 00 00 00       	mov    $0x80,%eax
    66eb:	ba 70 00 00 00       	mov    $0x70,%edx
    66f0:	ee                   	out    %al,(%dx)
    66f1:	eb 00                	jmp    66f3 <time_init+0x116>
    66f3:	eb 00                	jmp    66f5 <time_init+0x118>
    66f5:	b8 71 00 00 00       	mov    $0x71,%eax
    66fa:	89 c2                	mov    %eax,%edx
    66fc:	ec                   	in     (%dx),%al
    66fd:	eb 00                	jmp    66ff <time_init+0x122>
    66ff:	eb 00                	jmp    6701 <time_init+0x124>
    6701:	88 44 24 29          	mov    %al,0x29(%esp)
    6705:	0f b6 44 24 29       	movzbl 0x29(%esp),%eax
    670a:	0f b6 c0             	movzbl %al,%eax
    670d:	39 c1                	cmp    %eax,%ecx
    670f:	0f 85 cb fe ff ff    	jne    65e0 <time_init+0x3>
	BCD_TO_BIN(time.tm_sec);					// 转换成进进制数值.
    6715:	8b 44 24 04          	mov    0x4(%esp),%eax
    6719:	83 e0 0f             	and    $0xf,%eax
    671c:	89 c1                	mov    %eax,%ecx
    671e:	8b 44 24 04          	mov    0x4(%esp),%eax
    6722:	c1 f8 04             	sar    $0x4,%eax
    6725:	89 c2                	mov    %eax,%edx
    6727:	89 d0                	mov    %edx,%eax
    6729:	c1 e0 02             	shl    $0x2,%eax
    672c:	01 d0                	add    %edx,%eax
    672e:	01 c0                	add    %eax,%eax
    6730:	01 c8                	add    %ecx,%eax
    6732:	89 44 24 04          	mov    %eax,0x4(%esp)
	BCD_TO_BIN(time.tm_min);
    6736:	8b 44 24 08          	mov    0x8(%esp),%eax
    673a:	83 e0 0f             	and    $0xf,%eax
    673d:	89 c1                	mov    %eax,%ecx
    673f:	8b 44 24 08          	mov    0x8(%esp),%eax
    6743:	c1 f8 04             	sar    $0x4,%eax
    6746:	89 c2                	mov    %eax,%edx
    6748:	89 d0                	mov    %edx,%eax
    674a:	c1 e0 02             	shl    $0x2,%eax
    674d:	01 d0                	add    %edx,%eax
    674f:	01 c0                	add    %eax,%eax
    6751:	01 c8                	add    %ecx,%eax
    6753:	89 44 24 08          	mov    %eax,0x8(%esp)
	BCD_TO_BIN(time.tm_hour);
    6757:	8b 44 24 0c          	mov    0xc(%esp),%eax
    675b:	83 e0 0f             	and    $0xf,%eax
    675e:	89 c1                	mov    %eax,%ecx
    6760:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6764:	c1 f8 04             	sar    $0x4,%eax
    6767:	89 c2                	mov    %eax,%edx
    6769:	89 d0                	mov    %edx,%eax
    676b:	c1 e0 02             	shl    $0x2,%eax
    676e:	01 d0                	add    %edx,%eax
    6770:	01 c0                	add    %eax,%eax
    6772:	01 c8                	add    %ecx,%eax
    6774:	89 44 24 0c          	mov    %eax,0xc(%esp)
	BCD_TO_BIN(time.tm_mday);
    6778:	8b 44 24 10          	mov    0x10(%esp),%eax
    677c:	83 e0 0f             	and    $0xf,%eax
    677f:	89 c1                	mov    %eax,%ecx
    6781:	8b 44 24 10          	mov    0x10(%esp),%eax
    6785:	c1 f8 04             	sar    $0x4,%eax
    6788:	89 c2                	mov    %eax,%edx
    678a:	89 d0                	mov    %edx,%eax
    678c:	c1 e0 02             	shl    $0x2,%eax
    678f:	01 d0                	add    %edx,%eax
    6791:	01 c0                	add    %eax,%eax
    6793:	01 c8                	add    %ecx,%eax
    6795:	89 44 24 10          	mov    %eax,0x10(%esp)
	BCD_TO_BIN(time.tm_mon);
    6799:	8b 44 24 14          	mov    0x14(%esp),%eax
    679d:	83 e0 0f             	and    $0xf,%eax
    67a0:	89 c1                	mov    %eax,%ecx
    67a2:	8b 44 24 14          	mov    0x14(%esp),%eax
    67a6:	c1 f8 04             	sar    $0x4,%eax
    67a9:	89 c2                	mov    %eax,%edx
    67ab:	89 d0                	mov    %edx,%eax
    67ad:	c1 e0 02             	shl    $0x2,%eax
    67b0:	01 d0                	add    %edx,%eax
    67b2:	01 c0                	add    %eax,%eax
    67b4:	01 c8                	add    %ecx,%eax
    67b6:	89 44 24 14          	mov    %eax,0x14(%esp)
	BCD_TO_BIN(time.tm_year);
    67ba:	8b 44 24 18          	mov    0x18(%esp),%eax
    67be:	83 e0 0f             	and    $0xf,%eax
    67c1:	89 c1                	mov    %eax,%ecx
    67c3:	8b 44 24 18          	mov    0x18(%esp),%eax
    67c7:	c1 f8 04             	sar    $0x4,%eax
    67ca:	89 c2                	mov    %eax,%edx
    67cc:	89 d0                	mov    %edx,%eax
    67ce:	c1 e0 02             	shl    $0x2,%eax
    67d1:	01 d0                	add    %edx,%eax
    67d3:	01 c0                	add    %eax,%eax
    67d5:	01 c8                	add    %ecx,%eax
    67d7:	89 44 24 18          	mov    %eax,0x18(%esp)
	time.tm_mon--;								// tm_mon中月份范围是0~11.
    67db:	8b 44 24 14          	mov    0x14(%esp),%eax
    67df:	83 e8 01             	sub    $0x1,%eax
    67e2:	89 44 24 14          	mov    %eax,0x14(%esp)
	startup_time = kernel_mktime(&time);		// 计算开机时间.kernel/mktime.c
    67e6:	83 ec 0c             	sub    $0xc,%esp
    67e9:	8d 44 24 10          	lea    0x10(%esp),%eax
    67ed:	50                   	push   %eax
    67ee:	e8 eb 53 00 00       	call   bbde <kernel_mktime>
    67f3:	83 c4 10             	add    $0x10,%esp
    67f6:	a3 04 fb 02 00       	mov    %eax,0x2fb04
}
    67fb:	90                   	nop
    67fc:	83 c4 3c             	add    $0x3c,%esp
    67ff:	c3                   	ret    

00006800 <main>:
struct drive_info { char dummy[32]; } drive_info;	// 用于存放硬盘参数表信息.

// 内核初始化主程序.初始化结束后将以任务0(idle任务即空闲任务)的身份运行.
// 英文注释含义是"这里确实是void,没错.在startup程序(head.s)中就是这样假设的".参见head.h程序代码.
int main(void)										/* This really IS void, no error here. */
{													/* The startup routine assumes (well, ...) this */
    6800:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    6804:	83 e4 f0             	and    $0xfffffff0,%esp
    6807:	ff 71 fc             	pushl  -0x4(%ecx)
    680a:	55                   	push   %ebp
    680b:	89 e5                	mov    %esp,%ebp
    680d:	51                   	push   %ecx
    680e:	83 ec 04             	sub    $0x4,%esp
#ifdef EM
	// 开启仿真协处理器
	__asm__("movl %cr0,%eax \n\t" \
    6811:	0f 20 c0             	mov    %cr0,%eax
    6814:	83 f0 06             	xor    $0x6,%eax
    6817:	0f 22 c0             	mov    %eax,%cr0
	// 首先保存根文件系统设备和交换文件设备号,并根据setup.s程序中获取的信息设置控制台终端屏幕行,列数环境变量TERM,并用其设置初始init进程
	// 中执行etc/rc文件和shell程序使用的环境变量,以及复制内存0x90080处的硬盘表.
	// 其中ROOT_DEV已在前面包含进的include/linux/fs.h文件上被声明为extern_int
	// 而SWAP_DEV在include/linux/mm.h文件内也作了相同声明.这里mm.h文件并没有显式地列在本程序前部,因为前面包含进的include/linux/sched.h
	// 文件中已经含有它.
 	ROOT_DEV = ORIG_ROOT_DEV;										// ROOT_DEV定义在fs/super.c
    681a:	b8 fc 01 09 00       	mov    $0x901fc,%eax
    681f:	0f b7 00             	movzwl (%eax),%eax
    6822:	0f b7 c0             	movzwl %ax,%eax
    6825:	a3 cc 20 03 00       	mov    %eax,0x320cc
 	SWAP_DEV = ORIG_SWAP_DEV;										// SWAP_DEV定义在mm/swap.c
    682a:	b8 fa 01 09 00       	mov    $0x901fa,%eax
    682f:	0f b7 00             	movzwl (%eax),%eax
    6832:	0f b7 c0             	movzwl %ax,%eax
    6835:	a3 a0 11 03 00       	mov    %eax,0x311a0
   	sprintf(term, "TERM=con%dx%d", CON_COLS, CON_ROWS);
    683a:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    683f:	0f b7 00             	movzwl (%eax),%eax
    6842:	0f b7 c0             	movzwl %ax,%eax
    6845:	0f b6 d0             	movzbl %al,%edx
    6848:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    684d:	0f b7 00             	movzwl (%eax),%eax
    6850:	66 c1 e8 08          	shr    $0x8,%ax
    6854:	0f b7 c0             	movzwl %ax,%eax
    6857:	52                   	push   %edx
    6858:	50                   	push   %eax
    6859:	68 c7 29 02 00       	push   $0x229c7
    685e:	68 e0 fa 02 00       	push   $0x2fae0
    6863:	e8 43 fd ff ff       	call   65ab <sprintf>
    6868:	83 c4 10             	add    $0x10,%esp
	envp[1] = term;
    686b:	c7 05 20 e0 02 00 e0 	movl   $0x2fae0,0x2e020
    6872:	fa 02 00 
	envp_rc[1] = term;
    6875:	c7 05 0c e0 02 00 e0 	movl   $0x2fae0,0x2e00c
    687c:	fa 02 00 
    drive_info = DRIVE_INFO;										// 复制内存0x90080处的硬盘参数表.
    687f:	b8 80 00 09 00       	mov    $0x90080,%eax
    6884:	8b 10                	mov    (%eax),%edx
    6886:	89 15 20 07 04 00    	mov    %edx,0x40720
    688c:	8b 50 04             	mov    0x4(%eax),%edx
    688f:	89 15 24 07 04 00    	mov    %edx,0x40724
    6895:	8b 50 08             	mov    0x8(%eax),%edx
    6898:	89 15 28 07 04 00    	mov    %edx,0x40728
    689e:	8b 50 0c             	mov    0xc(%eax),%edx
    68a1:	89 15 2c 07 04 00    	mov    %edx,0x4072c
    68a7:	8b 50 10             	mov    0x10(%eax),%edx
    68aa:	89 15 30 07 04 00    	mov    %edx,0x40730
    68b0:	8b 50 14             	mov    0x14(%eax),%edx
    68b3:	89 15 34 07 04 00    	mov    %edx,0x40734
    68b9:	8b 50 18             	mov    0x18(%eax),%edx
    68bc:	89 15 38 07 04 00    	mov    %edx,0x40738
    68c2:	8b 40 1c             	mov    0x1c(%eax),%eax
    68c5:	a3 3c 07 04 00       	mov    %eax,0x4073c

	// 接着根据机器物理内存容量设置高速缓冲区和主内存的位置和范围.
	// 高速缓存末端地址->buffer_memory_end;机器内存容量->memory_end;主内存开始地址->main_memory_start.
	// 设置物理内存大小
	memory_end = (1 << 20) + (EXT_MEM_K << 10);						// 内存大小=1MB + 扩展内存(k)*1024字节.
    68ca:	b8 02 00 09 00       	mov    $0x90002,%eax
    68cf:	0f b7 00             	movzwl (%eax),%eax
    68d2:	0f b7 c0             	movzwl %ax,%eax
    68d5:	c1 e0 0a             	shl    $0xa,%eax
    68d8:	05 00 00 10 00       	add    $0x100000,%eax
    68dd:	a3 c0 fa 02 00       	mov    %eax,0x2fac0
	memory_end &= 0xfffff000;										// 忽略不到4KB(1页)的内存数.
    68e2:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    68e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    68ec:	a3 c0 fa 02 00       	mov    %eax,0x2fac0
	if (memory_end > 16 * 1024 * 1024)								// 如果内存量超过16MB,则按16MB计.
    68f1:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    68f6:	3d 00 00 00 01       	cmp    $0x1000000,%eax
    68fb:	7e 0a                	jle    6907 <main+0x107>
		memory_end = 16 * 1024 * 1024;
    68fd:	c7 05 c0 fa 02 00 00 	movl   $0x1000000,0x2fac0
    6904:	00 00 01 
	// 根据物理内存的大小设置高速缓冲去的末端大小
	if (memory_end > 12 * 1024 * 1024) 								// 如果内存>12MB,则设置缓冲区末端=4MB
    6907:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    690c:	3d 00 00 c0 00       	cmp    $0xc00000,%eax
    6911:	7e 0c                	jle    691f <main+0x11f>
		buffer_memory_end = 4 * 1024 * 1024;
    6913:	c7 05 c4 fa 02 00 00 	movl   $0x400000,0x2fac4
    691a:	00 40 00 
    691d:	eb 22                	jmp    6941 <main+0x141>
	else if (memory_end > 6 * 1024 * 1024)							// 否则若内存>6MB,则设置缓冲区末端=2MB
    691f:	a1 c0 fa 02 00       	mov    0x2fac0,%eax
    6924:	3d 00 00 60 00       	cmp    $0x600000,%eax
    6929:	7e 0c                	jle    6937 <main+0x137>
		buffer_memory_end = 2 * 1024 * 1024;
    692b:	c7 05 c4 fa 02 00 00 	movl   $0x200000,0x2fac4
    6932:	00 20 00 
    6935:	eb 0a                	jmp    6941 <main+0x141>
	else
		buffer_memory_end = 1 * 1024 * 1024;						// 否则则设置缓冲区末端=1MB
    6937:	c7 05 c4 fa 02 00 00 	movl   $0x100000,0x2fac4
    693e:	00 10 00 
	// 根据高速缓冲区的末端大小设置主内存区的起始地址
	main_memory_start = buffer_memory_end;							// 主内存起始位置 = 缓冲区末端
    6941:	a1 c4 fa 02 00       	mov    0x2fac4,%eax
    6946:	a3 c8 fa 02 00       	mov    %eax,0x2fac8
	// 参见kernel/blk_drv/ramdisk.c.
#ifdef RAMDISK
	main_memory_start += rd_init(main_memory_start, RAMDISK * 1024);
#endif
	// 以下是内核进行所有方面的初始化工作.
	mem_init(main_memory_start, memory_end);						// 主内存区初始化.(mm/memory.c)
    694b:	8b 15 c0 fa 02 00    	mov    0x2fac0,%edx
    6951:	a1 c8 fa 02 00       	mov    0x2fac8,%eax
    6956:	83 ec 08             	sub    $0x8,%esp
    6959:	52                   	push   %edx
    695a:	50                   	push   %eax
    695b:	e8 8c 5f 00 00       	call   c8ec <mem_init>
    6960:	83 c4 10             	add    $0x10,%esp
	trap_init();                                    				// 陷阱门(硬件中断向量)初始化.(kernel/traps.c)
    6963:	e8 54 16 00 00       	call   7fbc <trap_init>
	blk_dev_init();													// 块设备初始化.(blk_drv/ll_rw_blk.c)
    6968:	e8 7f 00 01 00       	call   169ec <blk_dev_init>
	chr_dev_init();													// 字符设备初始化.(chr_drv/tty_io.c)
    696d:	e8 d7 31 01 00       	call   19b49 <chr_dev_init>
 	tty_init();														// tty初始化(chr_drv/tty_io.c)
    6972:	e8 d4 31 01 00       	call   19b4b <tty_init>
	time_init();													// 设置开机启动时间.
    6977:	e8 61 fc ff ff       	call   65dd <time_init>
 	sched_init();													// 调度程序初始化(加载任务0的tr,ldtr)(kernel/sched.c)
    697c:	e8 00 0e 00 00       	call   7781 <sched_init>
	buffer_init(buffer_memory_end);									// 缓冲管理初始化,建内存链表等.(fs/buffer.c)
    6981:	a1 c4 fa 02 00       	mov    0x2fac4,%eax
    6986:	83 ec 0c             	sub    $0xc,%esp
    6989:	50                   	push   %eax
    698a:	e8 cf 8f 00 00       	call   f95e <buffer_init>
    698f:	83 c4 10             	add    $0x10,%esp
	hd_init();														// 硬盘初始化.	(blk_drv/hd.c)
    6992:	e8 6d 1b 01 00       	call   18504 <hd_init>
	floppy_init();													// 软驱初始化.	(blk_drv/floppy.c)
    6997:	e8 12 0d 01 00       	call   176ae <floppy_init>
	sti();															// 所有初始化工作都完了,于是开启中断.
    699c:	fb                   	sti    
	// 打印内核初始化完毕
	Log(LOG_INFO_TYPE, "<<<<< Linux0.12 Kernel Init Finished, Ready Start Process0 >>>>>\n");
    699d:	83 ec 08             	sub    $0x8,%esp
    69a0:	68 d8 29 02 00       	push   $0x229d8
    69a5:	6a 00                	push   $0x0
    69a7:	e8 98 bf 01 00       	call   22944 <Log>
    69ac:	83 c4 10             	add    $0x10,%esp
	// 下面过程通过在堆栈中设置的参数,利用中断返回指令启动任务0执行.
	move_to_user_mode();											// 移到用户模式下执行.(include/asm/system.h)
    69af:	89 e0                	mov    %esp,%eax
    69b1:	6a 17                	push   $0x17
    69b3:	50                   	push   %eax
    69b4:	9c                   	pushf  
    69b5:	6a 0f                	push   $0xf
    69b7:	68 bd 69 00 00       	push   $0x69bd
    69bc:	cf                   	iret   
    69bd:	b8 17 00 00 00       	mov    $0x17,%eax
    69c2:	8e d8                	mov    %eax,%ds
    69c4:	8e c0                	mov    %eax,%es
    69c6:	8e e0                	mov    %eax,%fs
    69c8:	8e e8                	mov    %eax,%gs
	if (!fork_for_process0()) {										/* we count on this going ok */
    69ca:	e8 ad fb ff ff       	call   657c <fork_for_process0>
    69cf:	85 c0                	test   %eax,%eax
    69d1:	75 05                	jne    69d8 <main+0x1d8>
		init();														// 在新建的子进程(任务1即init进程)中执行.
    69d3:	e8 4f 00 00 00       	call   6a27 <init>
	 * 我们就回到这里,一直循环执行'pause()'.
	 */
	// pause()系统调用(kernel/sched.c)会把任务0转换成可中断等待状态,再执行调度函数.但是调度函数只要发现系统中没有其他任务可以运行时就会切换
	// 到任务0,是不信赖于任务0的状态.
	for(;;)
		__asm__("int $0x80"::"a" (__NR_pause):);					// 即执行系统调用pause().
    69d8:	b8 1d 00 00 00       	mov    $0x1d,%eax
    69dd:	cd 80                	int    $0x80
    69df:	eb f7                	jmp    69d8 <main+0x1d8>

000069e1 <printf>:

// 下面函数产生格式化信息并输出到标准输出设备stdout(1),这里是指屏幕上显示.参数'*fmt'指定输出将采用的格式,参见标准C语言书籍.
// 该子程序正好是vsprintf如何使用的一个简单例子.该程序使用vsprintf()将格式化的字符串放入printbuf缓冲区,然后用write()将
// 缓冲区的内容输出到标准设备(1--stdout).vsprintf()函数的实现见kernel/vsprintf.c.
int printf(const char *fmt, ...)
{
    69e1:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    69e4:	8d 44 24 24          	lea    0x24(%esp),%eax
    69e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	write(1, printbuf, i = vsprintf(printbuf, fmt, args));
    69ec:	8b 44 24 20          	mov    0x20(%esp),%eax
    69f0:	83 ec 04             	sub    $0x4,%esp
    69f3:	ff 74 24 10          	pushl  0x10(%esp)
    69f7:	50                   	push   %eax
    69f8:	68 c0 f6 02 00       	push   $0x2f6c0
    69fd:	e8 74 25 00 00       	call   8f76 <vsprintf>
    6a02:	83 c4 10             	add    $0x10,%esp
    6a05:	89 44 24 08          	mov    %eax,0x8(%esp)
    6a09:	83 ec 04             	sub    $0x4,%esp
    6a0c:	ff 74 24 0c          	pushl  0xc(%esp)
    6a10:	68 c0 f6 02 00       	push   $0x2f6c0
    6a15:	6a 01                	push   $0x1
    6a17:	e8 fa bd 01 00       	call   22816 <write>
    6a1c:	83 c4 10             	add    $0x10,%esp
	va_end(args);
	return i;
    6a1f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    6a23:	83 c4 1c             	add    $0x1c,%esp
    6a26:	c3                   	ret    

00006a27 <init>:

// 在main()中已经进行子系统初始化,包括内存管理,各种硬件设备和驱动程序.init()函数在任务0第1次创建的子进程(任务1)中.它首先对第一个将要执行
// 的程序(shell)的环境进行初始化,然后以登录shell方式加载程序并执行之.
void init(void)
{
    6a27:	83 ec 1c             	sub    $0x1c,%esp
	int pid, i, fd;
	// setup()是一个系统调用.用于读取硬盘参数和分区表信息并加载虚拟盘(若存在的话)和安装根文件系统设备.该函数用25行上的宏定义,对就函数是sys_setup(),
	// 在块设备子目录kernel/blk_drv/hd.c.
	setup((void *) &drive_info);
    6a2a:	68 20 07 04 00       	push   $0x40720
    6a2f:	e8 e2 fa ff ff       	call   6516 <setup>
    6a34:	83 c4 04             	add    $0x4,%esp
	// 下面以读写访问方式打开设备"/dev/tty0",它对应终端控制台.由于这是第一次打开文件操作,因此产生的文件句柄号(文件描述符)肯定是0.该句柄是UNIX类操作
	// 系统默认的控制台标准输入句柄stdin.这里再把它以读和写的方式分别打开是为了复制产生标准输出(写)句柄stdout和标准出错输出句柄stderr.函数前面的"(void)"
	// 前缀用于表示强制函数无需返回值.
	(void) open("/dev/tty1", O_RDWR, 0);
    6a37:	83 ec 04             	sub    $0x4,%esp
    6a3a:	6a 00                	push   $0x0
    6a3c:	6a 02                	push   $0x2
    6a3e:	68 1a 2a 02 00       	push   $0x22a1a
    6a43:	e8 4e bd 01 00       	call   22796 <open>
    6a48:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄1号--stdout标准输出设备.
    6a4b:	83 ec 0c             	sub    $0xc,%esp
    6a4e:	6a 00                	push   $0x0
    6a50:	e8 fe bd 01 00       	call   22853 <dup>
    6a55:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄2号--stderr标准出错输出设备.
    6a58:	83 ec 0c             	sub    $0xc,%esp
    6a5b:	6a 00                	push   $0x0
    6a5d:	e8 f1 bd 01 00       	call   22853 <dup>
    6a62:	83 c4 10             	add    $0x10,%esp
	// 进程1执行的用户级代码的开始
	printf("<<<<< Process 1 console fd = %d >>>>>\n", fd);
    6a65:	83 ec 08             	sub    $0x8,%esp
    6a68:	ff 74 24 14          	pushl  0x14(%esp)
    6a6c:	68 24 2a 02 00       	push   $0x22a24
    6a71:	e8 6b ff ff ff       	call   69e1 <printf>
    6a76:	83 c4 10             	add    $0x10,%esp
	// 下面打印缓冲区块数和总字节数,每块1024字节,以及主内存区空闲内存字节数.
	printf("<<<<< %d buffers = %d bytes buffer space >>>>>\n\r", NR_BUFFERS,
    6a79:	a1 c0 20 03 00       	mov    0x320c0,%eax
    6a7e:	c1 e0 0a             	shl    $0xa,%eax
    6a81:	89 c2                	mov    %eax,%edx
    6a83:	a1 c0 20 03 00       	mov    0x320c0,%eax
    6a88:	83 ec 04             	sub    $0x4,%esp
    6a8b:	52                   	push   %edx
    6a8c:	50                   	push   %eax
    6a8d:	68 4c 2a 02 00       	push   $0x22a4c
    6a92:	e8 4a ff ff ff       	call   69e1 <printf>
    6a97:	83 c4 10             	add    $0x10,%esp
			NR_BUFFERS * BLOCK_SIZE);
	printf("<<<<< Free mem: %d bytes >>>>>\n\r", memory_end - main_memory_start);
    6a9a:	8b 15 c0 fa 02 00    	mov    0x2fac0,%edx
    6aa0:	a1 c8 fa 02 00       	mov    0x2fac8,%eax
    6aa5:	29 c2                	sub    %eax,%edx
    6aa7:	89 d0                	mov    %edx,%eax
    6aa9:	83 ec 08             	sub    $0x8,%esp
    6aac:	50                   	push   %eax
    6aad:	68 80 2a 02 00       	push   $0x22a80
    6ab2:	e8 2a ff ff ff       	call   69e1 <printf>
    6ab7:	83 c4 10             	add    $0x10,%esp
	// 下面fork()用于创建一个子进程(任务2).对于被创建的子进程,fork()将返回0值,对于原进程(父进程)则返回子进程的进程号pid.所以第202--206行是子进程执行的内容.
	// 该子进程关闭了句柄0(stdin),以只读方式打开/etc/rc文件,并使用execve()函数将进程自身替换成/bin/sh程序(即shell程序),然后执行/bin/sh程序.所携带的参数
	// 和环境变量分别由argv_rc和envp_rc数组给出.关闭句柄0并立刻打开/etc/rc文件的作用是把标准输入stdin重定向到/etc/rc/文件.这样shell程序/bin/sh就可以运行
	// rc文件中设置的命令.由于这里sh的运行方式是非交互式的,因此在执行完rc文件中的命令后就会立刻退出,进程2也随之结束.并于execve()函数说明请参见fs/exec.c程序.
	// 函数_exit()退出时的出错码1 - 操作未许可;2 -- 文件或目录不存在.
	if (!(pid = fork())) {
    6aba:	e8 f9 f9 ff ff       	call   64b8 <fork>
    6abf:	89 44 24 08          	mov    %eax,0x8(%esp)
    6ac3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6ac8:	75 59                	jne    6b23 <init+0xfc>
		close(0);
    6aca:	83 ec 0c             	sub    $0xc,%esp
    6acd:	6a 00                	push   $0x0
    6acf:	e8 0b bd 01 00       	call   227df <close>
    6ad4:	83 c4 10             	add    $0x10,%esp
		if (open("/etc/rc", O_RDONLY, 0))
    6ad7:	83 ec 04             	sub    $0x4,%esp
    6ada:	6a 00                	push   $0x0
    6adc:	6a 00                	push   $0x0
    6ade:	68 a1 2a 02 00       	push   $0x22aa1
    6ae3:	e8 ae bc 01 00       	call   22796 <open>
    6ae8:	83 c4 10             	add    $0x10,%esp
    6aeb:	85 c0                	test   %eax,%eax
    6aed:	74 0d                	je     6afc <init+0xd5>
			_exit(1);												// 若打开文件失败,则退出(lib/_exit.c).
    6aef:	83 ec 0c             	sub    $0xc,%esp
    6af2:	6a 01                	push   $0x1
    6af4:	e8 8c bc 01 00       	call   22785 <_exit>
    6af9:	83 c4 10             	add    $0x10,%esp
		execve("/bin/sh", argv_rc, envp_rc);						// 替换成/bin/sh程序并执行.
    6afc:	83 ec 04             	sub    $0x4,%esp
    6aff:	68 08 e0 02 00       	push   $0x2e008
    6b04:	68 00 e0 02 00       	push   $0x2e000
    6b09:	68 a0 29 02 00       	push   $0x229a0
    6b0e:	e8 a6 bd 01 00       	call   228b9 <execve>
    6b13:	83 c4 10             	add    $0x10,%esp
		_exit(2);													// 若execve()执行失败则退出.
    6b16:	83 ec 0c             	sub    $0xc,%esp
    6b19:	6a 02                	push   $0x2
    6b1b:	e8 65 bc 01 00       	call   22785 <_exit>
    6b20:	83 c4 10             	add    $0x10,%esp
    }
	// 下面还是父进程（1）执行的语句。wait()等待子进程停止或终止，返回值应是子进程的进程号（pid)。这三句的作用是父进程等待子进程
	// 的结束。&i是存放返回状态信息的位置。如果wait()返回值不等于子进程号，则继续等待。
  	if (pid > 0)
    6b23:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b28:	7e 17                	jle    6b41 <init+0x11a>
		while (pid != wait(&i));
    6b2a:	90                   	nop
    6b2b:	83 ec 0c             	sub    $0xc,%esp
    6b2e:	8d 44 24 10          	lea    0x10(%esp),%eax
    6b32:	50                   	push   %eax
    6b33:	e8 fb bd 01 00       	call   22933 <wait>
    6b38:	83 c4 10             	add    $0x10,%esp
    6b3b:	39 44 24 08          	cmp    %eax,0x8(%esp)
    6b3f:	75 ea                	jne    6b2b <init+0x104>
	// 失败”信息并继续执行。对于所创建的子进程将关闭所有以前还遗留的句柄（stdin、stdout、stderr），新创建一个会话并设置进程组号，
	// 然后重新打开/dev/tty0作为stdin，并复制成stdout和stderr。再次执行系统解释程序/bin/sh。但这次执行所选用的参数和环境数组另
	// 选了一套。然后父进程再次运行wait()等等。如果子进程又停止了执行，则在标准输出上显示出错信息“子进程pid停止了运行，返回码是i”，
	// 然后继续重试下去...，形成“大”死循环。
	while (1) {
		if ((pid = fork()) < 0) {
    6b41:	e8 72 f9 ff ff       	call   64b8 <fork>
    6b46:	89 44 24 08          	mov    %eax,0x8(%esp)
    6b4a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b4f:	79 17                	jns    6b68 <init+0x141>
			printf("Fork failed in init %c\r\n", ' ');
    6b51:	83 ec 08             	sub    $0x8,%esp
    6b54:	6a 20                	push   $0x20
    6b56:	68 a9 2a 02 00       	push   $0x22aa9
    6b5b:	e8 81 fe ff ff       	call   69e1 <printf>
    6b60:	83 c4 10             	add    $0x10,%esp
			continue;
    6b63:	e9 c2 00 00 00       	jmp    6c2a <init+0x203>
		}
		if (!pid) {                             					// 新的子进程。
    6b68:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b6d:	0f 85 80 00 00 00    	jne    6bf3 <init+0x1cc>
			close(0); close(1); close(2);
    6b73:	83 ec 0c             	sub    $0xc,%esp
    6b76:	6a 00                	push   $0x0
    6b78:	e8 62 bc 01 00       	call   227df <close>
    6b7d:	83 c4 10             	add    $0x10,%esp
    6b80:	83 ec 0c             	sub    $0xc,%esp
    6b83:	6a 01                	push   $0x1
    6b85:	e8 55 bc 01 00       	call   227df <close>
    6b8a:	83 c4 10             	add    $0x10,%esp
    6b8d:	83 ec 0c             	sub    $0xc,%esp
    6b90:	6a 02                	push   $0x2
    6b92:	e8 48 bc 01 00       	call   227df <close>
    6b97:	83 c4 10             	add    $0x10,%esp
			setsid();                       						// 创建一新的会话期，见后面说明。
    6b9a:	e8 eb bc 01 00       	call   2288a <setsid>
			(void) open("/dev/tty1", O_RDWR, 0);
    6b9f:	83 ec 04             	sub    $0x4,%esp
    6ba2:	6a 00                	push   $0x0
    6ba4:	6a 02                	push   $0x2
    6ba6:	68 1a 2a 02 00       	push   $0x22a1a
    6bab:	e8 e6 bb 01 00       	call   22796 <open>
    6bb0:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bb3:	83 ec 0c             	sub    $0xc,%esp
    6bb6:	6a 00                	push   $0x0
    6bb8:	e8 96 bc 01 00       	call   22853 <dup>
    6bbd:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bc0:	83 ec 0c             	sub    $0xc,%esp
    6bc3:	6a 00                	push   $0x0
    6bc5:	e8 89 bc 01 00       	call   22853 <dup>
    6bca:	83 c4 10             	add    $0x10,%esp
			_exit(execve("/bin/sh", argv, envp));
    6bcd:	83 ec 04             	sub    $0x4,%esp
    6bd0:	68 1c e0 02 00       	push   $0x2e01c
    6bd5:	68 14 e0 02 00       	push   $0x2e014
    6bda:	68 a0 29 02 00       	push   $0x229a0
    6bdf:	e8 d5 bc 01 00       	call   228b9 <execve>
    6be4:	83 c4 10             	add    $0x10,%esp
    6be7:	83 ec 0c             	sub    $0xc,%esp
    6bea:	50                   	push   %eax
    6beb:	e8 95 bb 01 00       	call   22785 <_exit>
    6bf0:	83 c4 10             	add    $0x10,%esp
		}
		while (1)
			if (pid == wait(&i))
    6bf3:	83 ec 0c             	sub    $0xc,%esp
    6bf6:	8d 44 24 10          	lea    0x10(%esp),%eax
    6bfa:	50                   	push   %eax
    6bfb:	e8 33 bd 01 00       	call   22933 <wait>
    6c00:	83 c4 10             	add    $0x10,%esp
    6c03:	39 44 24 08          	cmp    %eax,0x8(%esp)
    6c07:	74 02                	je     6c0b <init+0x1e4>
    6c09:	eb e8                	jmp    6bf3 <init+0x1cc>
				break;
    6c0b:	90                   	nop
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c0c:	8b 44 24 04          	mov    0x4(%esp),%eax
    6c10:	83 ec 04             	sub    $0x4,%esp
    6c13:	50                   	push   %eax
    6c14:	ff 74 24 10          	pushl  0x10(%esp)
    6c18:	68 c4 2a 02 00       	push   $0x22ac4
    6c1d:	e8 bf fd ff ff       	call   69e1 <printf>
    6c22:	83 c4 10             	add    $0x10,%esp
		sync();
    6c25:	e8 23 f9 ff ff       	call   654d <sync>
		if ((pid = fork()) < 0) {
    6c2a:	e9 12 ff ff ff       	jmp    6b41 <init+0x11a>
    6c2f:	90                   	nop

00006c30 <show_task>:
// 除了SIGKILL和SIGSTOP信号以外其他信号都是可阻塞的.
#define _BLOCKABLE (~(_S(SIGKILL) | _S(SIGSTOP)))

// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
    6c30:	53                   	push   %ebx
    6c31:	83 ec 18             	sub    $0x18,%esp
	int i, j = 4096 - sizeof(struct task_struct);
    6c34:	c7 44 24 08 7c 0b 00 	movl   $0xb7c,0x8(%esp)
    6c3b:	00 

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c3c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c40:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c46:	85 c0                	test   %eax,%eax
    6c48:	74 12                	je     6c5c <show_task+0x2c>
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c4a:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c4e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c54:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6c5a:	eb 05                	jmp    6c61 <show_task+0x31>
    6c5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c61:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c65:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c6b:	8b 9a 2c 02 00 00    	mov    0x22c(%edx),%ebx
    6c71:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c75:	8b 0a                	mov    (%edx),%ecx
    6c77:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c7b:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    6c81:	83 ec 08             	sub    $0x8,%esp
    6c84:	50                   	push   %eax
    6c85:	53                   	push   %ebx
    6c86:	51                   	push   %ecx
    6c87:	52                   	push   %edx
    6c88:	ff 74 24 38          	pushl  0x38(%esp)
    6c8c:	68 e8 2a 02 00       	push   $0x22ae8
    6c91:	e8 b0 1f 00 00       	call   8c46 <printk>
    6c96:	83 c4 20             	add    $0x20,%esp
	i = 0;
    6c99:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6ca0:	00 
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca1:	eb 05                	jmp    6ca8 <show_task+0x78>
		i++;
    6ca3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cac:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6cb0:	7d 17                	jge    6cc9 <show_task+0x99>
    6cb2:	8b 44 24 24          	mov    0x24(%esp),%eax
    6cb6:	8d 90 84 04 00 00    	lea    0x484(%eax),%edx
    6cbc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cc0:	01 d0                	add    %edx,%eax
    6cc2:	0f b6 00             	movzbl (%eax),%eax
    6cc5:	84 c0                	test   %al,%al
    6cc7:	74 da                	je     6ca3 <show_task+0x73>
	printk("%d/%d chars free in kstack\n\r", i, j);
    6cc9:	83 ec 04             	sub    $0x4,%esp
    6ccc:	ff 74 24 0c          	pushl  0xc(%esp)
    6cd0:	ff 74 24 14          	pushl  0x14(%esp)
    6cd4:	68 14 2b 02 00       	push   $0x22b14
    6cd9:	e8 68 1f 00 00       	call   8c46 <printk>
    6cde:	83 c4 10             	add    $0x10,%esp
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
    6ce1:	8b 44 24 24          	mov    0x24(%esp),%eax
    6ce5:	05 ec 0f 00 00       	add    $0xfec,%eax
    6cea:	8b 00                	mov    (%eax),%eax
    6cec:	83 ec 08             	sub    $0x8,%esp
    6cef:	50                   	push   %eax
    6cf0:	68 31 2b 02 00       	push   $0x22b31
    6cf5:	e8 4c 1f 00 00       	call   8c46 <printk>
    6cfa:	83 c4 10             	add    $0x10,%esp
	if (p->p_ysptr || p->p_osptr)
    6cfd:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d01:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    6d07:	85 c0                	test   %eax,%eax
    6d09:	75 0e                	jne    6d19 <show_task+0xe9>
    6d0b:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d0f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    6d15:	85 c0                	test   %eax,%eax
    6d17:	74 5e                	je     6d77 <show_task+0x147>
		printk("   Younger sib=%d, older sib=%d\n\r",
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d19:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d1d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d23:	85 c0                	test   %eax,%eax
    6d25:	74 12                	je     6d39 <show_task+0x109>
			p->p_osptr ? p->p_osptr->pid : -1);
    6d27:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d2b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d31:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    6d37:	eb 05                	jmp    6d3e <show_task+0x10e>
    6d39:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d3e:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d42:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d48:	85 c0                	test   %eax,%eax
    6d4a:	74 12                	je     6d5e <show_task+0x12e>
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d4c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d50:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d56:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6d5c:	eb 05                	jmp    6d63 <show_task+0x133>
    6d5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6d63:	83 ec 04             	sub    $0x4,%esp
    6d66:	52                   	push   %edx
    6d67:	50                   	push   %eax
    6d68:	68 40 2b 02 00       	push   $0x22b40
    6d6d:	e8 d4 1e 00 00       	call   8c46 <printk>
    6d72:	83 c4 10             	add    $0x10,%esp
    6d75:	eb 10                	jmp    6d87 <show_task+0x157>
	else
		printk("\n\r");
    6d77:	83 ec 0c             	sub    $0xc,%esp
    6d7a:	68 62 2b 02 00       	push   $0x22b62
    6d7f:	e8 c2 1e 00 00       	call   8c46 <printk>
    6d84:	83 c4 10             	add    $0x10,%esp
}
    6d87:	90                   	nop
    6d88:	83 c4 18             	add    $0x18,%esp
    6d8b:	5b                   	pop    %ebx
    6d8c:	c3                   	ret    

00006d8d <show_state>:

// 显示所有任务的任务号,进程号,进程状态和内核堆栈空闲字节数(大约).
// NR_TASKS是系统能容纳的最大进程(任务)数量(64个),定义在include/kernel/sched.h
void show_state(void)
{
    6d8d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	printk("\rTask-info:\n\r");
    6d90:	83 ec 0c             	sub    $0xc,%esp
    6d93:	68 65 2b 02 00       	push   $0x22b65
    6d98:	e8 a9 1e 00 00       	call   8c46 <printk>
    6d9d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6da0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6da7:	00 
    6da8:	eb 2f                	jmp    6dd9 <show_state+0x4c>
		if (task[i])
    6daa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dae:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    6db5:	85 c0                	test   %eax,%eax
    6db7:	74 1b                	je     6dd4 <show_state+0x47>
			show_task(i, task[i]);
    6db9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dbd:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    6dc4:	83 ec 08             	sub    $0x8,%esp
    6dc7:	50                   	push   %eax
    6dc8:	ff 74 24 18          	pushl  0x18(%esp)
    6dcc:	e8 5f fe ff ff       	call   6c30 <show_task>
    6dd1:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6dd4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    6dd9:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    6dde:	7e ca                	jle    6daa <show_state+0x1d>
}
    6de0:	90                   	nop
    6de1:	83 c4 1c             	add    $0x1c,%esp
    6de4:	c3                   	ret    

00006de5 <math_state_restore>:
 */
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
    6de5:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    6deb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6df0:	39 c2                	cmp    %eax,%edx
    6df2:	74 4d                	je     6e41 <math_state_restore+0x5c>
		return;
	// 在发送协处理器命令之前要先必WAIT指令.如果上个任务使用了协处理器,则保存其状态.
	__asm__("fwait");
    6df4:	9b                   	fwait
	if (last_task_used_math) {
    6df5:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
    6dfa:	85 c0                	test   %eax,%eax
    6dfc:	74 0b                	je     6e09 <math_state_restore+0x24>
		__asm__("fnsave %0"::"m" (last_task_used_math->tss.i387));
    6dfe:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
    6e03:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
	}
	// 现在,las_task_used_math指向当前任务,以备当前任务被交换出去时使用.此时如果当前任务用过协处理器,则恢复其状态.否则的话说明是第一次使用,
	// 于是就向协处理器发初始化命令,并设置使用协处理器标志.
	last_task_used_math = current;
    6e09:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e0e:	a3 0c fb 02 00       	mov    %eax,0x2fb0c
	if (current->used_math) {
    6e13:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e18:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
    6e1f:	66 85 c0             	test   %ax,%ax
    6e22:	74 0c                	je     6e30 <math_state_restore+0x4b>
		__asm__("frstor %0"::"m" (current->tss.i387));
    6e24:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e29:	dd a0 18 04 00 00    	frstor 0x418(%eax)
    6e2f:	c3                   	ret    
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
    6e30:	db e3                	fninit 
		current->used_math=1;					// 设置已使用协处理器标志.
    6e32:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    6e37:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
    6e3e:	01 00 
    6e40:	c3                   	ret    
		return;
    6e41:	90                   	nop
	}
}
    6e42:	c3                   	ret    

00006e43 <schedule>:
 *
 * 注意!!任务0是个闲置('idle')任务,只有当没有其他任务可以运行时才调用它.它不能被杀死,也不睡眠.任务0中的状态信息'state'是从
 * 来不用的.
 */
void schedule(void)
{
    6e43:	83 ec 20             	sub    $0x20,%esp

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6e46:	c7 44 24 10 bc f2 02 	movl   $0x2f2bc,0x10(%esp)
    6e4d:	00 
    6e4e:	e9 e6 00 00 00       	jmp    6f39 <schedule+0xf6>
		if (*p) {
    6e53:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e57:	8b 00                	mov    (%eax),%eax
    6e59:	85 c0                	test   %eax,%eax
    6e5b:	0f 84 d3 00 00 00    	je     6f34 <schedule+0xf1>
			// 如果设置过任务超时定时timeout,并且已经超时,则复位超时定时值,并且如果任务处于可中断睡眠状态TASK_INTERRUPTIBLE下,将其置为就绪
			// 状态(TASK_RUNNING).
			if ((*p)->timeout && (*p)->timeout < jiffies) {
    6e61:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e65:	8b 00                	mov    (%eax),%eax
    6e67:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
    6e6d:	85 c0                	test   %eax,%eax
    6e6f:	74 3e                	je     6eaf <schedule+0x6c>
    6e71:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e75:	8b 00                	mov    (%eax),%eax
    6e77:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
    6e7d:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    6e82:	39 c2                	cmp    %eax,%edx
    6e84:	73 29                	jae    6eaf <schedule+0x6c>
				(*p)->timeout = 0;
    6e86:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e8a:	8b 00                	mov    (%eax),%eax
    6e8c:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
    6e93:	00 00 00 
				if ((*p)->state == TASK_INTERRUPTIBLE)
    6e96:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e9a:	8b 00                	mov    (%eax),%eax
    6e9c:	8b 00                	mov    (%eax),%eax
    6e9e:	83 f8 01             	cmp    $0x1,%eax
    6ea1:	75 0c                	jne    6eaf <schedule+0x6c>
					(*p)->state = TASK_RUNNING;
    6ea3:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ea7:	8b 00                	mov    (%eax),%eax
    6ea9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			// 如果设置过任务的定时值alarm,并且已经过期(alarm<jiffies),则在信号位图中置SIGALRM信号,即向任务发送SIGALARM信号.然后清alarm.
			// 该信号的默认操作是终止进程.jiffies是系统从开机开始算起的滴答数(10ms/滴答).定义在sched.h中.
			if ((*p)->alarm && (*p)->alarm < jiffies) {
    6eaf:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eb3:	8b 00                	mov    (%eax),%eax
    6eb5:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    6ebb:	85 c0                	test   %eax,%eax
    6ebd:	74 3a                	je     6ef9 <schedule+0xb6>
    6ebf:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ec3:	8b 00                	mov    (%eax),%eax
    6ec5:	8b 90 dc 02 00 00    	mov    0x2dc(%eax),%edx
    6ecb:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    6ed0:	39 c2                	cmp    %eax,%edx
    6ed2:	73 25                	jae    6ef9 <schedule+0xb6>
				(*p)->signal |= (1 << (SIGALRM - 1));
    6ed4:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ed8:	8b 00                	mov    (%eax),%eax
    6eda:	8b 50 0c             	mov    0xc(%eax),%edx
    6edd:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ee1:	8b 00                	mov    (%eax),%eax
    6ee3:	80 ce 20             	or     $0x20,%dh
    6ee6:	89 50 0c             	mov    %edx,0xc(%eax)
				(*p)->alarm = 0;
    6ee9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eed:	8b 00                	mov    (%eax),%eax
    6eef:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    6ef6:	00 00 00 
			}
			// 如果信号位图中除被阻塞的信号外还有其他信号,并且任务处于可中断状态,则置任务为就绪状态.
			// 其中'~(_BLOCKABLE & (*p)->blocked)'用于忽略被阻塞的信号,但SIGKILL和SIGSTOP不能被阻塞.
			if (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) && (*p)->state == TASK_INTERRUPTIBLE)
    6ef9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6efd:	8b 00                	mov    (%eax),%eax
    6eff:	8b 50 0c             	mov    0xc(%eax),%edx
    6f02:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f06:	8b 00                	mov    (%eax),%eax
    6f08:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    6f0e:	25 ff fe fb ff       	and    $0xfffbfeff,%eax
    6f13:	f7 d0                	not    %eax
    6f15:	21 d0                	and    %edx,%eax
    6f17:	85 c0                	test   %eax,%eax
    6f19:	74 19                	je     6f34 <schedule+0xf1>
    6f1b:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f1f:	8b 00                	mov    (%eax),%eax
    6f21:	8b 00                	mov    (%eax),%eax
    6f23:	83 f8 01             	cmp    $0x1,%eax
    6f26:	75 0c                	jne    6f34 <schedule+0xf1>
				(*p)->state = TASK_RUNNING;
    6f28:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f2c:	8b 00                	mov    (%eax),%eax
    6f2e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6f34:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f39:	81 7c 24 10 c0 f1 02 	cmpl   $0x2f1c0,0x10(%esp)
    6f40:	00 
    6f41:	0f 87 0c ff ff ff    	ja     6e53 <schedule+0x10>
		}

	/* this is the scheduler proper: */
	/* 这里是调度程序的主要部分 */
	while (1) {
		c = -1;
    6f47:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    6f4e:	ff 
		next = 0;
    6f4f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    6f56:	00 
		i = NR_TASKS;
    6f57:	c7 44 24 1c 40 00 00 	movl   $0x40,0x1c(%esp)
    6f5e:	00 
		p = &task[NR_TASKS];
    6f5f:	c7 44 24 10 c0 f2 02 	movl   $0x2f2c0,0x10(%esp)
    6f66:	00 
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6f67:	eb 41                	jmp    6faa <schedule+0x167>
			// 当前索引没有进程指针则跳过当前循环
			if (!*--p)
    6f69:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f6e:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f72:	8b 00                	mov    (%eax),%eax
    6f74:	85 c0                	test   %eax,%eax
    6f76:	75 02                	jne    6f7a <schedule+0x137>
				continue;
    6f78:	eb 30                	jmp    6faa <schedule+0x167>
			if ((*p)->state == TASK_RUNNING && (*p)->counter > c)
    6f7a:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f7e:	8b 00                	mov    (%eax),%eax
    6f80:	8b 00                	mov    (%eax),%eax
    6f82:	85 c0                	test   %eax,%eax
    6f84:	75 24                	jne    6faa <schedule+0x167>
    6f86:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f8a:	8b 00                	mov    (%eax),%eax
    6f8c:	8b 40 04             	mov    0x4(%eax),%eax
    6f8f:	39 44 24 14          	cmp    %eax,0x14(%esp)
    6f93:	7d 15                	jge    6faa <schedule+0x167>
				c = (*p)->counter, next = i;
    6f95:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f99:	8b 00                	mov    (%eax),%eax
    6f9b:	8b 40 04             	mov    0x4(%eax),%eax
    6f9e:	89 44 24 14          	mov    %eax,0x14(%esp)
    6fa2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    6fa6:	89 44 24 18          	mov    %eax,0x18(%esp)
		while (--i) {
    6faa:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
    6faf:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    6fb4:	75 b3                	jne    6f69 <schedule+0x126>
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    6fb6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    6fbb:	75 49                	jne    7006 <schedule+0x1c3>
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6fbd:	c7 44 24 10 bc f2 02 	movl   $0x2f2bc,0x10(%esp)
    6fc4:	00 
    6fc5:	eb 30                	jmp    6ff7 <schedule+0x1b4>
			if (*p)
    6fc7:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fcb:	8b 00                	mov    (%eax),%eax
    6fcd:	85 c0                	test   %eax,%eax
    6fcf:	74 21                	je     6ff2 <schedule+0x1af>
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
    6fd1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fd5:	8b 00                	mov    (%eax),%eax
    6fd7:	8b 40 04             	mov    0x4(%eax),%eax
    6fda:	d1 f8                	sar    %eax
    6fdc:	89 c1                	mov    %eax,%ecx
    6fde:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fe2:	8b 00                	mov    (%eax),%eax
    6fe4:	8b 50 08             	mov    0x8(%eax),%edx
    6fe7:	8b 44 24 10          	mov    0x10(%esp),%eax
    6feb:	8b 00                	mov    (%eax),%eax
    6fed:	01 ca                	add    %ecx,%edx
    6fef:	89 50 04             	mov    %edx,0x4(%eax)
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6ff2:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6ff7:	81 7c 24 10 c0 f1 02 	cmpl   $0x2f1c0,0x10(%esp)
    6ffe:	00 
    6fff:	77 c6                	ja     6fc7 <schedule+0x184>
		c = -1;
    7001:	e9 41 ff ff ff       	jmp    6f47 <schedule+0x104>
		if (c) break;
    7006:	90                   	nop
	}
	// 用下面的宏(定义在sched.h中)把当前任务指针current指向任务号为next的任务,并切换到该任务中运行.在146行上next被初始化为0.因此若系统中没有任何
	// 其他任务可运行时,则next始终为0.因此调度函数会在系统空闲时去执行任务0.此时任务0权执行pause()
	switch_to(next);					// 切换到任务号为next的任务,并运行之.
    7007:	8b 44 24 18          	mov    0x18(%esp),%eax
    700b:	c1 e0 04             	shl    $0x4,%eax
    700e:	8d 50 20             	lea    0x20(%eax),%edx
    7011:	8b 44 24 18          	mov    0x18(%esp),%eax
    7015:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    701c:	89 c1                	mov    %eax,%ecx
    701e:	39 0d a0 f1 02 00    	cmp    %ecx,0x2f1a0
    7024:	74 19                	je     703f <schedule+0x1fc>
    7026:	66 89 54 24 0c       	mov    %dx,0xc(%esp)
    702b:	87 0d a0 f1 02 00    	xchg   %ecx,0x2f1a0
    7031:	ff 6c 24 08          	ljmp   *0x8(%esp)
    7035:	39 0d 0c fb 02 00    	cmp    %ecx,0x2fb0c
    703b:	75 02                	jne    703f <schedule+0x1fc>
    703d:	0f 06                	clts   
}
    703f:	90                   	nop
    7040:	83 c4 20             	add    $0x20,%esp
    7043:	c3                   	ret    

00007044 <sys_pause>:
// pause()系统调用.转换当前任务的状态为可中断的等待状态,并重新调试.
// 该系统调用将导致进程进入睡眠状态,直到收到一个信号.该信号用于终止进程或者使进程调用一个信号捕获函数.只有当捕获了一个信号,并且信号捕获处理函数返回,
// pause()才会返回.此时pause()返回值应该是-1,并且errno被置为EINTR.这里还没有完全实现(直到0.95版).
int sys_pause(void)
{
	current->state = TASK_INTERRUPTIBLE;
    7044:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7049:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	schedule();
    704f:	e8 ef fd ff ff       	call   6e43 <schedule>
	return 0;
    7054:	b8 00 00 00 00       	mov    $0x0,%eax
}
    7059:	c3                   	ret    

0000705a <__sleep_on>:
// 是任务结构)会改变,因此为了能修改调用该函数程序中原来就是指针变量的值,就需要传递指针'*p'的指针,即'**p'.
// 参数state是任务睡眠使用的状态:TASK_INTERRUPTIBLE或TASK_INTERRUPTIBLE.处于不可中断睡眠状态(TASK_UNINTERRUPTIBLE)的任务需要内核程序利用
// wake_up()函数明确唤醒之.处于可中断睡眠状态(TASK_INTERRUPTIBLE)可以通过信号,任务起时等手段唤醒(置为就绪状态TASK_RUNNING).
// *** 注意,由于本内核代码不是很成熟,因此下列与睡眠相关的代码存在一些问题,不宜深究.
static inline void __sleep_on(struct task_struct **p, int state)
{
    705a:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
    705d:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7062:	0f 84 ae 00 00 00    	je     7116 <__sleep_on+0xbc>
		return;
	if (current == &(init_task.task))
    7068:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    706d:	3d a0 e1 02 00       	cmp    $0x2e1a0,%eax
    7072:	75 10                	jne    7084 <__sleep_on+0x2a>
		panic("task[0] trying to sleep");
    7074:	83 ec 0c             	sub    $0xc,%esp
    7077:	68 73 2b 02 00       	push   $0x22b73
    707c:	e8 86 1b 00 00       	call   8c07 <panic>
    7081:	83 c4 10             	add    $0x10,%esp
	// 让tmp指向已经在等待队列上的任务(如果有的话),例如inode->i_wait.并且将睡眠队列头的等待指针指向当前任务.这样就把当前任务插入到了*p的等待队列中.然后
	// 将当前任务置为指定的等待状态,并执行重新调度.
	tmp = *p;
    7084:	8b 44 24 20          	mov    0x20(%esp),%eax
    7088:	8b 00                	mov    (%eax),%eax
    708a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	*p = current;
    708e:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    7094:	8b 44 24 20          	mov    0x20(%esp),%eax
    7098:	89 10                	mov    %edx,(%eax)
	current->state = state;
    709a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    709f:	8b 54 24 24          	mov    0x24(%esp),%edx
    70a3:	89 10                	mov    %edx,(%eax)
	// 将当前进程睡眠后立刻调用调度函数进行调度新的进程执行
repeat:	schedule();
    70a5:	e8 99 fd ff ff       	call   6e43 <schedule>
	// 只有当这个等待任务被唤醒时,程序才会返回到这里,表示进程已被明确地唤醒并执行.如果等待队列中还有等待任务,并且队列头指针*p所指向的任务不是当前任务时,说明
	// 在本任务插入等待队列后还有任务进入等待队列.于是我们应该也要唤醒这个任务,而我们自己应按顺序让这些后面进入队列的任务唤醒,因此这里将等待队列头所指任务先
	// 置为就绪状态,而自己则置为不可中断等待状态,即自己要等待这些后续队列的任务被唤醒而执行时来唤醒本任务.然后重新执行调度程序.
	if (*p && *p != current) {
    70aa:	8b 44 24 20          	mov    0x20(%esp),%eax
    70ae:	8b 00                	mov    (%eax),%eax
    70b0:	85 c0                	test   %eax,%eax
    70b2:	74 28                	je     70dc <__sleep_on+0x82>
    70b4:	8b 44 24 20          	mov    0x20(%esp),%eax
    70b8:	8b 10                	mov    (%eax),%edx
    70ba:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    70bf:	39 c2                	cmp    %eax,%edx
    70c1:	74 19                	je     70dc <__sleep_on+0x82>
		(**p).state = 0;
    70c3:	8b 44 24 20          	mov    0x20(%esp),%eax
    70c7:	8b 00                	mov    (%eax),%eax
    70c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->state = TASK_UNINTERRUPTIBLE;
    70cf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    70d4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
		goto repeat;
    70da:	eb c9                	jmp    70a5 <__sleep_on+0x4b>
	}
	// 执行到这里,说明本任务真正被唤醒执行.此时等待队列头指针应该指向本任务,若它为空,则表明调度有问题,于是显示警告信息.最后我们让头指针指向在我们前面进入队列的
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
    70dc:	8b 44 24 20          	mov    0x20(%esp),%eax
    70e0:	8b 00                	mov    (%eax),%eax
    70e2:	85 c0                	test   %eax,%eax
    70e4:	75 10                	jne    70f6 <__sleep_on+0x9c>
		printk("Warning: *P = NULL\n\r");
    70e6:	83 ec 0c             	sub    $0xc,%esp
    70e9:	68 8b 2b 02 00       	push   $0x22b8b
    70ee:	e8 53 1b 00 00       	call   8c46 <printk>
    70f3:	83 c4 10             	add    $0x10,%esp
	if (*p = tmp)
    70f6:	8b 44 24 20          	mov    0x20(%esp),%eax
    70fa:	8b 54 24 0c          	mov    0xc(%esp),%edx
    70fe:	89 10                	mov    %edx,(%eax)
    7100:	8b 44 24 20          	mov    0x20(%esp),%eax
    7104:	8b 00                	mov    (%eax),%eax
    7106:	85 c0                	test   %eax,%eax
    7108:	74 0d                	je     7117 <__sleep_on+0xbd>
		tmp->state = 0;
    710a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    710e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    7114:	eb 01                	jmp    7117 <__sleep_on+0xbd>
		return;
    7116:	90                   	nop
}
    7117:	83 c4 1c             	add    $0x1c,%esp
    711a:	c3                   	ret    

0000711b <interruptible_sleep_on>:

// 将当前任务置为可中断的等待状态(TASK_INIERRUPTIBLE),并放入头指针*p指定的等待队列中.
void interruptible_sleep_on(struct task_struct **p)
{
    711b:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_INTERRUPTIBLE);
    711e:	83 ec 08             	sub    $0x8,%esp
    7121:	6a 01                	push   $0x1
    7123:	ff 74 24 1c          	pushl  0x1c(%esp)
    7127:	e8 2e ff ff ff       	call   705a <__sleep_on>
    712c:	83 c4 10             	add    $0x10,%esp
}
    712f:	90                   	nop
    7130:	83 c4 0c             	add    $0xc,%esp
    7133:	c3                   	ret    

00007134 <sleep_on>:

// 把当前任务置为不可中断的等待状态(TASK_UNINTERRUPTIBLE),并让睡眠队列头指针指向当前任务.只有明确地唤醒时才会返回.该函数提供了进程与中断处理程序之间的
// 同步机制.
void sleep_on(struct task_struct **p)
{
    7134:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_UNINTERRUPTIBLE);
    7137:	83 ec 08             	sub    $0x8,%esp
    713a:	6a 02                	push   $0x2
    713c:	ff 74 24 1c          	pushl  0x1c(%esp)
    7140:	e8 15 ff ff ff       	call   705a <__sleep_on>
    7145:	83 c4 10             	add    $0x10,%esp
}
    7148:	90                   	nop
    7149:	83 c4 0c             	add    $0xc,%esp
    714c:	c3                   	ret    

0000714d <wake_up>:

// 唤醒*p指向的任务.*p是任务等待队列头指针.由于新等待任务是插入在等待队列头指针处的,因此唤醒的是最后进入等待队列的任务.若该任务已经处于停止或
// 僵死状态,则显示警告信息.
void wake_up(struct task_struct **p)
{
    714d:	83 ec 0c             	sub    $0xc,%esp
	if (p && *p) {
    7150:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    7155:	74 50                	je     71a7 <wake_up+0x5a>
    7157:	8b 44 24 10          	mov    0x10(%esp),%eax
    715b:	8b 00                	mov    (%eax),%eax
    715d:	85 c0                	test   %eax,%eax
    715f:	74 46                	je     71a7 <wake_up+0x5a>
		if ((**p).state == TASK_STOPPED)						// 处于停止状态.
    7161:	8b 44 24 10          	mov    0x10(%esp),%eax
    7165:	8b 00                	mov    (%eax),%eax
    7167:	8b 00                	mov    (%eax),%eax
    7169:	83 f8 04             	cmp    $0x4,%eax
    716c:	75 10                	jne    717e <wake_up+0x31>
			printk("wake_up: TASK_STOPPED");
    716e:	83 ec 0c             	sub    $0xc,%esp
    7171:	68 a0 2b 02 00       	push   $0x22ba0
    7176:	e8 cb 1a 00 00       	call   8c46 <printk>
    717b:	83 c4 10             	add    $0x10,%esp
		if ((**p).state == TASK_ZOMBIE)							// 处于僵死状态.
    717e:	8b 44 24 10          	mov    0x10(%esp),%eax
    7182:	8b 00                	mov    (%eax),%eax
    7184:	8b 00                	mov    (%eax),%eax
    7186:	83 f8 03             	cmp    $0x3,%eax
    7189:	75 10                	jne    719b <wake_up+0x4e>
			printk("wake_up: TASK_ZOMBIE");
    718b:	83 ec 0c             	sub    $0xc,%esp
    718e:	68 b6 2b 02 00       	push   $0x22bb6
    7193:	e8 ae 1a 00 00       	call   8c46 <printk>
    7198:	83 c4 10             	add    $0x10,%esp
		(**p).state=0;											// 置为就绪状态TASK_RUNNING.
    719b:	8b 44 24 10          	mov    0x10(%esp),%eax
    719f:	8b 00                	mov    (%eax),%eax
    71a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
}
    71a7:	90                   	nop
    71a8:	83 c4 0c             	add    $0xc,%esp
    71ab:	c3                   	ret    

000071ac <ticks_to_floppy_on>:

// 指定软驱启动到正常运转状态所需等待时间.
// 参数nr -- 软驱号(0--3),返回值为滴答.
// 局部变量selected是选中软驱标志(blk_drv/floppy.c).mask是所选软驱对应的数字输出寄存器中启动马达位.mask高4位是各软驱启动马达标志.
int ticks_to_floppy_on(unsigned int nr)
{
    71ac:	83 ec 1c             	sub    $0x1c,%esp
	extern unsigned char selected;
	unsigned char mask = 0x10 << nr;
    71af:	8b 44 24 20          	mov    0x20(%esp),%eax
    71b3:	ba 10 00 00 00       	mov    $0x10,%edx
    71b8:	89 c1                	mov    %eax,%ecx
    71ba:	d3 e2                	shl    %cl,%edx
    71bc:	89 d0                	mov    %edx,%eax
    71be:	88 44 24 0f          	mov    %al,0xf(%esp)

	// 系统最多有4个软驱.首先预先设置好指定软驱nr停转之前需要经过的时间(100秒).然后取当前DOR寄存器值到临时变量mask中,并把指定软驱的马达
	// 启动标志置位.
	if (nr > 3)
    71c2:	83 7c 24 20 03       	cmpl   $0x3,0x20(%esp)
    71c7:	76 10                	jbe    71d9 <ticks_to_floppy_on+0x2d>
		panic("floppy_on: nr>3");
    71c9:	83 ec 0c             	sub    $0xc,%esp
    71cc:	68 cb 2b 02 00       	push   $0x22bcb
    71d1:	e8 31 1a 00 00       	call   8c07 <panic>
    71d6:	83 c4 10             	add    $0x10,%esp
	moff_timer[nr] = 10000;							/* 100 s = very big :-) */	// 停转维持时间.
    71d9:	8b 44 24 20          	mov    0x20(%esp),%eax
    71dd:	c7 04 85 30 fb 02 00 	movl   $0x2710,0x2fb30(,%eax,4)
    71e4:	10 27 00 00 
	cli();											/* use floppy_off to turn it off */	// 关中断
    71e8:	fa                   	cli    
	mask |= current_DOR;
    71e9:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    71f0:	08 44 24 0f          	or     %al,0xf(%esp)
	// 如果当前没有选择软驱,则首先复位其他软驱的选择位,然后指定软驱选择位.
	if (!selected) {
    71f4:	0f b6 05 58 21 03 00 	movzbl 0x32158,%eax
    71fb:	84 c0                	test   %al,%al
    71fd:	75 0d                	jne    720c <ticks_to_floppy_on+0x60>
		mask &= 0xFC;
    71ff:	80 64 24 0f fc       	andb   $0xfc,0xf(%esp)
		mask |= nr;
    7204:	8b 44 24 20          	mov    0x20(%esp),%eax
    7208:	08 44 24 0f          	or     %al,0xf(%esp)
	}
	// 如果数字输出寄存器的当前值与要求的值不同,则向FDC数字输出端口输出新值(mask),并且如果要求启动的马达还没有启动,则置相应软驱的马达启动
	// 定时器值(HZ/2 = 0.5秒或50个滴答).若已经启动,则再设置启动定时为2个滴答,能满足下面do_floppy_timer()中先递减后判断的要求.执行本次
	// 定时代码的要求即可.此后更新当前数字输出寄存器current_DOR.
	if (mask != current_DOR) {
    720c:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7213:	38 44 24 0f          	cmp    %al,0xf(%esp)
    7217:	74 5c                	je     7275 <ticks_to_floppy_on+0xc9>
		outb(mask, FD_DOR);
    7219:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    721e:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7223:	ee                   	out    %al,(%dx)
		if ((mask ^ current_DOR) & 0xf0)
    7224:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    722b:	32 44 24 0f          	xor    0xf(%esp),%al
    722f:	0f b6 c0             	movzbl %al,%eax
    7232:	25 f0 00 00 00       	and    $0xf0,%eax
    7237:	85 c0                	test   %eax,%eax
    7239:	74 11                	je     724c <ticks_to_floppy_on+0xa0>
			mon_timer[nr] = HZ / 2;
    723b:	8b 44 24 20          	mov    0x20(%esp),%eax
    723f:	c7 04 85 20 fb 02 00 	movl   $0x32,0x2fb20(,%eax,4)
    7246:	32 00 00 00 
    724a:	eb 1f                	jmp    726b <ticks_to_floppy_on+0xbf>
		else if (mon_timer[nr] < 2)
    724c:	8b 44 24 20          	mov    0x20(%esp),%eax
    7250:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7257:	83 f8 01             	cmp    $0x1,%eax
    725a:	7f 0f                	jg     726b <ticks_to_floppy_on+0xbf>
			mon_timer[nr] = 2;
    725c:	8b 44 24 20          	mov    0x20(%esp),%eax
    7260:	c7 04 85 20 fb 02 00 	movl   $0x2,0x2fb20(,%eax,4)
    7267:	02 00 00 00 
		current_DOR = mask;
    726b:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7270:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
	}
	sti();											// 开中断.
    7275:	fb                   	sti    
	return mon_timer[nr];							// 最后返回启动马达所需的时间值.
    7276:	8b 44 24 20          	mov    0x20(%esp),%eax
    727a:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
}
    7281:	83 c4 1c             	add    $0x1c,%esp
    7284:	c3                   	ret    

00007285 <floppy_on>:

// 等待指定软驱马达启动所需的一段时间,然后返回.
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
    7285:	83 ec 0c             	sub    $0xc,%esp
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
    7288:	fa                   	cli    
	while (ticks_to_floppy_on(nr))
    7289:	eb 18                	jmp    72a3 <floppy_on+0x1e>
		sleep_on(nr + wait_motor);
    728b:	8b 44 24 10          	mov    0x10(%esp),%eax
    728f:	c1 e0 02             	shl    $0x2,%eax
    7292:	05 10 fb 02 00       	add    $0x2fb10,%eax
    7297:	83 ec 0c             	sub    $0xc,%esp
    729a:	50                   	push   %eax
    729b:	e8 94 fe ff ff       	call   7134 <sleep_on>
    72a0:	83 c4 10             	add    $0x10,%esp
	while (ticks_to_floppy_on(nr))
    72a3:	83 ec 0c             	sub    $0xc,%esp
    72a6:	ff 74 24 1c          	pushl  0x1c(%esp)
    72aa:	e8 fd fe ff ff       	call   71ac <ticks_to_floppy_on>
    72af:	83 c4 10             	add    $0x10,%esp
    72b2:	85 c0                	test   %eax,%eax
    72b4:	75 d5                	jne    728b <floppy_on+0x6>
	sti();
    72b6:	fb                   	sti    
}
    72b7:	90                   	nop
    72b8:	83 c4 0c             	add    $0xc,%esp
    72bb:	c3                   	ret    

000072bc <floppy_off>:

// 置关闭相应软驱马达停转定时器(3秒).
// 若不使用该函数明确关闭指定的软驱马达,则在马达开启100秒之后也会被关闭.
void floppy_off(unsigned int nr)
{
	moff_timer[nr] = 3 * HZ;
    72bc:	8b 44 24 04          	mov    0x4(%esp),%eax
    72c0:	c7 04 85 30 fb 02 00 	movl   $0x12c,0x2fb30(,%eax,4)
    72c7:	2c 01 00 00 
}
    72cb:	90                   	nop
    72cc:	c3                   	ret    

000072cd <do_floppy_timer>:

// 软盘定时处理子程序.更新马达启动定时值和马达关闭停转时值.该子程序会在时钟定时中断过程中被调用,因此系统每经过一个滴答(10ms)就会被
// 调用一次,随时更新马达开启或停转定时器的值.如果某一个马达停转定时到,则将数字输出寄存器马达启动位复位.
void do_floppy_timer(void)
{
    72cd:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	unsigned char mask = 0x10;
    72d0:	c6 44 24 0b 10       	movb   $0x10,0xb(%esp)

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    72d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    72dc:	00 
    72dd:	e9 be 00 00 00       	jmp    73a0 <do_floppy_timer+0xd3>
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
    72e2:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    72e9:	22 44 24 0b          	and    0xb(%esp),%al
    72ed:	84 c0                	test   %al,%al
    72ef:	0f 84 a1 00 00 00    	je     7396 <do_floppy_timer+0xc9>
			continue;
		if (mon_timer[i]) {								// 如果马达启动定时到则唤醒进程.
    72f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    72f9:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7300:	85 c0                	test   %eax,%eax
    7302:	74 42                	je     7346 <do_floppy_timer+0x79>
			if (!--mon_timer[i])
    7304:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7308:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    730f:	8d 50 ff             	lea    -0x1(%eax),%edx
    7312:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7316:	89 14 85 20 fb 02 00 	mov    %edx,0x2fb20(,%eax,4)
    731d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7321:	8b 04 85 20 fb 02 00 	mov    0x2fb20(,%eax,4),%eax
    7328:	85 c0                	test   %eax,%eax
    732a:	75 6b                	jne    7397 <do_floppy_timer+0xca>
				wake_up(i + wait_motor);
    732c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7330:	c1 e0 02             	shl    $0x2,%eax
    7333:	05 10 fb 02 00       	add    $0x2fb10,%eax
    7338:	83 ec 0c             	sub    $0xc,%esp
    733b:	50                   	push   %eax
    733c:	e8 0c fe ff ff       	call   714d <wake_up>
    7341:	83 c4 10             	add    $0x10,%esp
    7344:	eb 51                	jmp    7397 <do_floppy_timer+0xca>
		} else if (!moff_timer[i]) {					// 如果马达停转定时到则复位相应马达启动位,并且更新数字输出寄存器.
    7346:	8b 44 24 0c          	mov    0xc(%esp),%eax
    734a:	8b 04 85 30 fb 02 00 	mov    0x2fb30(,%eax,4),%eax
    7351:	85 c0                	test   %eax,%eax
    7353:	75 26                	jne    737b <do_floppy_timer+0xae>
			current_DOR &= ~mask;
    7355:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    735a:	f7 d0                	not    %eax
    735c:	89 c2                	mov    %eax,%edx
    735e:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7365:	21 d0                	and    %edx,%eax
    7367:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
			outb(current_DOR, FD_DOR);
    736c:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    7373:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7378:	ee                   	out    %al,(%dx)
    7379:	eb 1c                	jmp    7397 <do_floppy_timer+0xca>
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
    737b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    737f:	8b 04 85 30 fb 02 00 	mov    0x2fb30(,%eax,4),%eax
    7386:	8d 50 ff             	lea    -0x1(%eax),%edx
    7389:	8b 44 24 0c          	mov    0xc(%esp),%eax
    738d:	89 14 85 30 fb 02 00 	mov    %edx,0x2fb30(,%eax,4)
    7394:	eb 01                	jmp    7397 <do_floppy_timer+0xca>
			continue;
    7396:	90                   	nop
	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    7397:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    739c:	d0 64 24 0b          	shlb   0xb(%esp)
    73a0:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    73a5:	0f 8e 37 ff ff ff    	jle    72e2 <do_floppy_timer+0x15>
	}
}
    73ab:	90                   	nop
    73ac:	83 c4 1c             	add    $0x1c,%esp
    73af:	c3                   	ret    

000073b0 <add_timer>:

// 添加定时器.输入参数为指定的定时值(滴答数)和相应的处理程序指针.
// 软盘驱动程序(floppy.c)利用该函数执行启动或关闭马达的延时操作.
// 参数jiffies- 以10毫秒计的滴答数; *fn() - 定时时间到时执行的函数.
void add_timer(long jiffies, void (*fn)(void))
{
    73b0:	83 ec 1c             	sub    $0x1c,%esp
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
    73b3:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    73b8:	0f 84 54 01 00 00    	je     7512 <add_timer+0x162>
		return;
	cli();
    73be:	fa                   	cli    
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
    73bf:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    73c4:	7f 0b                	jg     73d1 <add_timer+0x21>
		(fn)();
    73c6:	8b 44 24 24          	mov    0x24(%esp),%eax
    73ca:	ff d0                	call   *%eax
    73cc:	e9 3e 01 00 00       	jmp    750f <add_timer+0x15f>
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73d1:	c7 44 24 0c 40 fb 02 	movl   $0x2fb40,0xc(%esp)
    73d8:	00 
    73d9:	eb 10                	jmp    73eb <add_timer+0x3b>
			if (!p->fn)
    73db:	8b 44 24 0c          	mov    0xc(%esp),%eax
    73df:	8b 40 04             	mov    0x4(%eax),%eax
    73e2:	85 c0                	test   %eax,%eax
    73e4:	74 12                	je     73f8 <add_timer+0x48>
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73e6:	83 44 24 0c 0c       	addl   $0xc,0xc(%esp)
    73eb:	b8 40 fe 02 00       	mov    $0x2fe40,%eax
    73f0:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    73f4:	72 e5                	jb     73db <add_timer+0x2b>
    73f6:	eb 01                	jmp    73f9 <add_timer+0x49>
				break;
    73f8:	90                   	nop
		// 如果已经用完了定时器数组,则系统崩溃.否则向定时器数据结构填入就信息,并链入链表头.
		if (p >= timer_list + TIME_REQUESTS)
    73f9:	b8 40 fe 02 00       	mov    $0x2fe40,%eax
    73fe:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    7402:	72 10                	jb     7414 <add_timer+0x64>
			panic("No more time requests free");
    7404:	83 ec 0c             	sub    $0xc,%esp
    7407:	68 db 2b 02 00       	push   $0x22bdb
    740c:	e8 f6 17 00 00       	call   8c07 <panic>
    7411:	83 c4 10             	add    $0x10,%esp
		p->fn = fn;
    7414:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7418:	8b 54 24 24          	mov    0x24(%esp),%edx
    741c:	89 50 04             	mov    %edx,0x4(%eax)
		p->jiffies = jiffies;
    741f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7423:	8b 54 24 20          	mov    0x20(%esp),%edx
    7427:	89 10                	mov    %edx,(%eax)
		p->next = next_timer;
    7429:	8b 15 40 fe 02 00    	mov    0x2fe40,%edx
    742f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7433:	89 50 08             	mov    %edx,0x8(%eax)
		next_timer = p;
    7436:	8b 44 24 0c          	mov    0xc(%esp),%eax
    743a:	a3 40 fe 02 00       	mov    %eax,0x2fe40
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    743f:	eb 72                	jmp    74b3 <add_timer+0x103>
			p->jiffies -= p->next->jiffies;
    7441:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7445:	8b 10                	mov    (%eax),%edx
    7447:	8b 44 24 0c          	mov    0xc(%esp),%eax
    744b:	8b 40 08             	mov    0x8(%eax),%eax
    744e:	8b 00                	mov    (%eax),%eax
    7450:	29 c2                	sub    %eax,%edx
    7452:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7456:	89 10                	mov    %edx,(%eax)
			fn = p->fn;
    7458:	8b 44 24 0c          	mov    0xc(%esp),%eax
    745c:	8b 40 04             	mov    0x4(%eax),%eax
    745f:	89 44 24 24          	mov    %eax,0x24(%esp)
			p->fn = p->next->fn;
    7463:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7467:	8b 40 08             	mov    0x8(%eax),%eax
    746a:	8b 50 04             	mov    0x4(%eax),%edx
    746d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7471:	89 50 04             	mov    %edx,0x4(%eax)
			p->next->fn = fn;
    7474:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7478:	8b 40 08             	mov    0x8(%eax),%eax
    747b:	8b 54 24 24          	mov    0x24(%esp),%edx
    747f:	89 50 04             	mov    %edx,0x4(%eax)
			jiffies = p->jiffies;
    7482:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7486:	8b 00                	mov    (%eax),%eax
    7488:	89 44 24 20          	mov    %eax,0x20(%esp)
			p->jiffies = p->next->jiffies;
    748c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7490:	8b 40 08             	mov    0x8(%eax),%eax
    7493:	8b 10                	mov    (%eax),%edx
    7495:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7499:	89 10                	mov    %edx,(%eax)
			p->next->jiffies = jiffies;
    749b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    749f:	8b 40 08             	mov    0x8(%eax),%eax
    74a2:	8b 54 24 20          	mov    0x20(%esp),%edx
    74a6:	89 10                	mov    %edx,(%eax)
			p = p->next;
    74a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ac:	8b 40 08             	mov    0x8(%eax),%eax
    74af:	89 44 24 0c          	mov    %eax,0xc(%esp)
		while (p->next && p->next->jiffies < p->jiffies) {
    74b3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74b7:	8b 40 08             	mov    0x8(%eax),%eax
    74ba:	85 c0                	test   %eax,%eax
    74bc:	74 17                	je     74d5 <add_timer+0x125>
    74be:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74c2:	8b 40 08             	mov    0x8(%eax),%eax
    74c5:	8b 10                	mov    (%eax),%edx
    74c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74cb:	8b 00                	mov    (%eax),%eax
    74cd:	39 c2                	cmp    %eax,%edx
    74cf:	0f 8c 6c ff ff ff    	jl     7441 <add_timer+0x91>
		}
		// 修正上述问题.
		if(p->next && p->next->jiffies >= p->jiffies) {
    74d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74d9:	8b 40 08             	mov    0x8(%eax),%eax
    74dc:	85 c0                	test   %eax,%eax
    74de:	74 2f                	je     750f <add_timer+0x15f>
    74e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74e4:	8b 40 08             	mov    0x8(%eax),%eax
    74e7:	8b 10                	mov    (%eax),%edx
    74e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ed:	8b 00                	mov    (%eax),%eax
    74ef:	39 c2                	cmp    %eax,%edx
    74f1:	7c 1c                	jl     750f <add_timer+0x15f>
			p->next->jiffies -= p->jiffies;
    74f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74f7:	8b 40 08             	mov    0x8(%eax),%eax
    74fa:	8b 08                	mov    (%eax),%ecx
    74fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7500:	8b 10                	mov    (%eax),%edx
    7502:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7506:	8b 40 08             	mov    0x8(%eax),%eax
    7509:	29 d1                	sub    %edx,%ecx
    750b:	89 ca                	mov    %ecx,%edx
    750d:	89 10                	mov    %edx,(%eax)
		}
	}
	sti();
    750f:	fb                   	sti    
    7510:	eb 01                	jmp    7513 <add_timer+0x163>
		return;
    7512:	90                   	nop
}
    7513:	83 c4 1c             	add    $0x1c,%esp
    7516:	c3                   	ret    

00007517 <do_timer>:

// 时钟中断C函数处理程序,在sys_call.s中的timer_interrupt被调用.
// 参数cpl是当前特权级0或3,是时钟中断发生时正被执行的代码选择符中的特权级.cpl=0时表示中断发生时正在执行内核代码,cpl=3时表示中断发生时正在执行用户
// 代码.对于一个进程由于执行时间片用完时,则进行任务切换.并执行一个计时更新工作.
void do_timer(long cpl)
{
    7517:	83 ec 1c             	sub    $0x1c,%esp
	static int blanked = 0;

	// 首先判断是否经过了一定时间而让屏幕黑屏(blankcount).如果blankcount计数不为零,或者黑屏延时间隔时间blankinterval为0的话,那么若已经处理黑屏状态
	// (黑屏标志blanked=1),则让屏幕恢复显示.若blnkcount计数不为零,则递减之,并且复位黑屏标志.
	if (blankcount || !blankinterval) {
    751a:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    751f:	85 c0                	test   %eax,%eax
    7521:	75 09                	jne    752c <do_timer+0x15>
    7523:	a1 24 fe 03 00       	mov    0x3fe24,%eax
    7528:	85 c0                	test   %eax,%eax
    752a:	75 30                	jne    755c <do_timer+0x45>
		if (blanked)
    752c:	a1 44 fe 02 00       	mov    0x2fe44,%eax
    7531:	85 c0                	test   %eax,%eax
    7533:	74 05                	je     753a <do_timer+0x23>
			unblank_screen();
    7535:	e8 82 5f 01 00       	call   1d4bc <unblank_screen>
		if (blankcount)
    753a:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    753f:	85 c0                	test   %eax,%eax
    7541:	74 0d                	je     7550 <do_timer+0x39>
			blankcount--;
    7543:	a1 28 fe 03 00       	mov    0x3fe28,%eax
    7548:	83 e8 01             	sub    $0x1,%eax
    754b:	a3 28 fe 03 00       	mov    %eax,0x3fe28
		blanked = 0;
    7550:	c7 05 44 fe 02 00 00 	movl   $0x0,0x2fe44
    7557:	00 00 00 
    755a:	eb 18                	jmp    7574 <do_timer+0x5d>
	// 否则的话若黑屏标志末置位,则让屏幕黑屏,并且设置黑屏标志.
	} else if (!blanked) {
    755c:	a1 44 fe 02 00       	mov    0x2fe44,%eax
    7561:	85 c0                	test   %eax,%eax
    7563:	75 0f                	jne    7574 <do_timer+0x5d>
		blank_screen();
    7565:	e8 3d 5f 01 00       	call   1d4a7 <blank_screen>
		blanked = 1;
    756a:	c7 05 44 fe 02 00 01 	movl   $0x1,0x2fe44
    7571:	00 00 00 
	}
	// 接着处理硬盘操作超时问题.如果硬盘超时计数递减之后为0,则进行硬盘访问超时处理.
	if (hd_timeout)
    7574:	a1 84 21 03 00       	mov    0x32184,%eax
    7579:	85 c0                	test   %eax,%eax
    757b:	74 1b                	je     7598 <do_timer+0x81>
		if (!--hd_timeout)
    757d:	a1 84 21 03 00       	mov    0x32184,%eax
    7582:	83 e8 01             	sub    $0x1,%eax
    7585:	a3 84 21 03 00       	mov    %eax,0x32184
    758a:	a1 84 21 03 00       	mov    0x32184,%eax
    758f:	85 c0                	test   %eax,%eax
    7591:	75 05                	jne    7598 <do_timer+0x81>
			hd_times_out();							// 硬盘访问超时处理(blk_drv/hd.c).
    7593:	e8 51 0c 01 00       	call   181e9 <hd_times_out>

	// 如果发声计数次数到,则关闭发声.(向0x61口发送命令,复位位0和1.位0控制8253计数器2的工作,位1控制扬声器.
	if (beepcount)									// 扬声器发声时间滴答数(chr_drv/console.c)
    7598:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    759d:	85 c0                	test   %eax,%eax
    759f:	74 1b                	je     75bc <do_timer+0xa5>
		if (!--beepcount)
    75a1:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    75a6:	83 e8 01             	sub    $0x1,%eax
    75a9:	a3 2c fe 03 00       	mov    %eax,0x3fe2c
    75ae:	a1 2c fe 03 00       	mov    0x3fe2c,%eax
    75b3:	85 c0                	test   %eax,%eax
    75b5:	75 05                	jne    75bc <do_timer+0xa5>
			sysbeepstop();
    75b7:	e8 9d 5d 01 00       	call   1d359 <sysbeepstop>

	// 如果当前特权级(cpl)为0(最高,表示是内核程序在工作),则将内核代码时间stime递增;[Linus把内核程序统称为超级用户(superviser)的
	// 程序.这种称呼来自Intel CPU手册.]如果cpl>0,则表示是一般用户程序在工作,增加utime.
	if (cpl)
    75bc:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    75c1:	74 16                	je     75d9 <do_timer+0xc2>
		current->utime++;
    75c3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    75c8:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    75ce:	83 c2 01             	add    $0x1,%edx
    75d1:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
    75d7:	eb 14                	jmp    75ed <do_timer+0xd6>
	else
		current->stime++;
    75d9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    75de:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    75e4:	83 c2 01             	add    $0x1,%edx
    75e7:	89 90 e4 02 00 00    	mov    %edx,0x2e4(%eax)

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
    75ed:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    75f2:	85 c0                	test   %eax,%eax
    75f4:	74 4d                	je     7643 <do_timer+0x12c>
		next_timer->jiffies--;
    75f6:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    75fb:	8b 10                	mov    (%eax),%edx
    75fd:	83 ea 01             	sub    $0x1,%edx
    7600:	89 10                	mov    %edx,(%eax)
		while (next_timer && next_timer->jiffies <= 0) {
    7602:	eb 2b                	jmp    762f <do_timer+0x118>
			void (*fn)(void);						// 这里插入了一个函数指针定义!!

			fn = next_timer->fn;
    7604:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7609:	8b 40 04             	mov    0x4(%eax),%eax
    760c:	89 44 24 0c          	mov    %eax,0xc(%esp)
			next_timer->fn = NULL;
    7610:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7615:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
			next_timer = next_timer->next;
    761c:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7621:	8b 40 08             	mov    0x8(%eax),%eax
    7624:	a3 40 fe 02 00       	mov    %eax,0x2fe40
			(fn)();									// 调用定时处理函数.
    7629:	8b 44 24 0c          	mov    0xc(%esp),%eax
    762d:	ff d0                	call   *%eax
		while (next_timer && next_timer->jiffies <= 0) {
    762f:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    7634:	85 c0                	test   %eax,%eax
    7636:	74 0b                	je     7643 <do_timer+0x12c>
    7638:	a1 40 fe 02 00       	mov    0x2fe40,%eax
    763d:	8b 00                	mov    (%eax),%eax
    763f:	85 c0                	test   %eax,%eax
    7641:	7e c1                	jle    7604 <do_timer+0xed>
		}
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
    7643:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
    764a:	0f b6 c0             	movzbl %al,%eax
    764d:	25 f0 00 00 00       	and    $0xf0,%eax
    7652:	85 c0                	test   %eax,%eax
    7654:	74 05                	je     765b <do_timer+0x144>
		do_floppy_timer();
    7656:	e8 72 fc ff ff       	call   72cd <do_floppy_timer>
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    765b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7660:	8b 50 04             	mov    0x4(%eax),%edx
    7663:	83 ea 01             	sub    $0x1,%edx
    7666:	89 50 04             	mov    %edx,0x4(%eax)
    7669:	8b 40 04             	mov    0x4(%eax),%eax
    766c:	85 c0                	test   %eax,%eax
    766e:	7f 1a                	jg     768a <do_timer+0x173>
	current->counter = 0;
    7670:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7675:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    767c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7681:	74 0a                	je     768d <do_timer+0x176>
	schedule();
    7683:	e8 bb f7 ff ff       	call   6e43 <schedule>
    7688:	eb 04                	jmp    768e <do_timer+0x177>
	if ((--current->counter) > 0) return;
    768a:	90                   	nop
    768b:	eb 01                	jmp    768e <do_timer+0x177>
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    768d:	90                   	nop
}
    768e:	83 c4 1c             	add    $0x1c,%esp
    7691:	c3                   	ret    

00007692 <sys_alarm>:
// 进程数据结构中报警定时值alarm的单位是系统滴答（1滴答为10毫秒），它是系统开机起到设置定时操作时系统滴答值jiffies和转换成滴答
// 单位的定时值之和，即'jiffies + HZ*定时秒值'。而参数给出的是以秒为单位的定时值，因此本函数的主要操作是进行两个单位的转换。
// 其中常数HZ = 100,是内核系统运行频率。定义在inlucde/sched.h上。
// 参数seconds是新的定时时间值，单位是秒。
int sys_alarm(long seconds)
{
    7692:	83 ec 10             	sub    $0x10,%esp
	int old = current->alarm;
    7695:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    769a:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    76a0:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (old)
    76a4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    76a9:	74 1d                	je     76c8 <sys_alarm+0x36>
		old = (old - jiffies) / HZ;
    76ab:	8b 54 24 0c          	mov    0xc(%esp),%edx
    76af:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    76b4:	29 c2                	sub    %eax,%edx
    76b6:	89 d0                	mov    %edx,%eax
    76b8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    76bd:	f7 e2                	mul    %edx
    76bf:	89 d0                	mov    %edx,%eax
    76c1:	c1 e8 05             	shr    $0x5,%eax
    76c4:	89 44 24 0c          	mov    %eax,0xc(%esp)
	current->alarm = (seconds>0)?(jiffies+HZ*seconds):0;
    76c8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    76cd:	7e 12                	jle    76e1 <sys_alarm+0x4f>
    76cf:	8b 44 24 14          	mov    0x14(%esp),%eax
    76d3:	6b c0 64             	imul   $0x64,%eax,%eax
    76d6:	89 c2                	mov    %eax,%edx
    76d8:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    76dd:	01 c2                	add    %eax,%edx
    76df:	eb 05                	jmp    76e6 <sys_alarm+0x54>
    76e1:	ba 00 00 00 00       	mov    $0x0,%edx
    76e6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    76eb:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)
	return (old);
    76f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    76f5:	83 c4 10             	add    $0x10,%esp
    76f8:	c3                   	ret    

000076f9 <sys_getpid>:

// 取当前进程号pid。
int sys_getpid(void)
{
	return current->pid;
    76f9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    76fe:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7704:	c3                   	ret    

00007705 <sys_getppid>:

// 取父进程号ppid。
int sys_getppid(void)
{
	return current->p_pptr->pid;
    7705:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    770a:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    7710:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7716:	c3                   	ret    

00007717 <sys_getuid>:

// 取用户uid。
int sys_getuid(void)
{
	return current->uid;
    7717:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    771c:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    7723:	0f b7 c0             	movzwl %ax,%eax
}
    7726:	c3                   	ret    

00007727 <sys_geteuid>:

// 取有效的用户号euid。
int sys_geteuid(void)
{
	return current->euid;
    7727:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    772c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    7733:	0f b7 c0             	movzwl %ax,%eax
}
    7736:	c3                   	ret    

00007737 <sys_getgid>:

// 取组号gid。
int sys_getgid(void)
{
	return current->gid;
    7737:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    773c:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    7743:	0f b7 c0             	movzwl %ax,%eax
}
    7746:	c3                   	ret    

00007747 <sys_getegid>:

// 取有效的组号egid。
int sys_getegid(void)
{
	return current->egid;
    7747:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    774c:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    7753:	0f b7 c0             	movzwl %ax,%eax
}
    7756:	c3                   	ret    

00007757 <sys_nice>:

// 系统调用功能 -- 降低对CPU的使用优先权（有人会用吗？）。
// 应该限制increment为大于0的值，否则可使优先仅增大！！
int sys_nice(long increment)
{
	if (current->priority-increment > 0)
    7757:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    775c:	8b 40 08             	mov    0x8(%eax),%eax
    775f:	2b 44 24 04          	sub    0x4(%esp),%eax
    7763:	85 c0                	test   %eax,%eax
    7765:	7e 14                	jle    777b <sys_nice+0x24>
		current->priority -= increment;
    7767:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    776c:	8b 50 08             	mov    0x8(%eax),%edx
    776f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7774:	2b 54 24 04          	sub    0x4(%esp),%edx
    7778:	89 50 08             	mov    %edx,0x8(%eax)
	return 0;
    777b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    7780:	c3                   	ret    

00007781 <sched_init>:

// 内核调度程序的初始化子程序
void sched_init(void)
{
    7781:	55                   	push   %ebp
    7782:	57                   	push   %edi
    7783:	56                   	push   %esi
    7784:	53                   	push   %ebx
    7785:	83 ec 10             	sub    $0x10,%esp
		panic("Struct sigaction MUST be 16 bytes");
	// 在全局描述符表中设置初始任务(任务0)的任务状态段描述符和局部数据表描述符.
	// FIRST_TSS_ENTRY和FIRST_LDT_ENTRY的值分别是4和5,定义在include/linux/sched.h中.gdt是一个描述符表数组(include/linux/head.h),
	// 实际上对应程序head.s中的他已描述符表基址(gdt).因此gdt+FIRST_TSS_ENTRY即为gdt[FIRST_TSS_ENTRY](即是gdt[4]),即gdt数组第4项的地址
	// 参见include/asm/system.h
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
    7788:	ba d8 5c 00 00       	mov    $0x5cd8,%edx
    778d:	b9 da 5c 00 00       	mov    $0x5cda,%ecx
    7792:	bb dc 5c 00 00       	mov    $0x5cdc,%ebx
    7797:	be dd 5c 00 00       	mov    $0x5cdd,%esi
    779c:	bf de 5c 00 00       	mov    $0x5cde,%edi
    77a1:	bd df 5c 00 00       	mov    $0x5cdf,%ebp
    77a6:	b8 50 e5 02 00       	mov    $0x2e550,%eax
    77ab:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77b0:	66 89 01             	mov    %ax,(%ecx)
    77b3:	c1 c8 10             	ror    $0x10,%eax
    77b6:	88 03                	mov    %al,(%ebx)
    77b8:	c6 06 89             	movb   $0x89,(%esi)
    77bb:	c6 07 00             	movb   $0x0,(%edi)
    77be:	88 65 00             	mov    %ah,0x0(%ebp)
    77c1:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
    77c4:	ba e0 5c 00 00       	mov    $0x5ce0,%edx
    77c9:	b9 e2 5c 00 00       	mov    $0x5ce2,%ecx
    77ce:	bb e4 5c 00 00       	mov    $0x5ce4,%ebx
    77d3:	be e5 5c 00 00       	mov    $0x5ce5,%esi
    77d8:	bf e6 5c 00 00       	mov    $0x5ce6,%edi
    77dd:	bd e7 5c 00 00       	mov    $0x5ce7,%ebp
    77e2:	b8 38 e5 02 00       	mov    $0x2e538,%eax
    77e7:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77ec:	66 89 01             	mov    %ax,(%ecx)
    77ef:	c1 c8 10             	ror    $0x10,%eax
    77f2:	88 03                	mov    %al,(%ebx)
    77f4:	c6 06 82             	movb   $0x82,(%esi)
    77f7:	c6 07 00             	movb   $0x0,(%edi)
    77fa:	88 65 00             	mov    %ah,0x0(%ebp)
    77fd:	c1 c8 10             	ror    $0x10,%eax
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
    7800:	c7 44 24 08 e8 5c 00 	movl   $0x5ce8,0x8(%esp)
    7807:	00 
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    7808:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    780f:	00 
    7810:	eb 4e                	jmp    7860 <sched_init+0xdf>
		task[i] = NULL;
    7812:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7816:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    781d:	00 00 00 00 
		p->a = p->b = 0;
    7821:	8b 44 24 08          	mov    0x8(%esp),%eax
    7825:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    782c:	8b 44 24 08          	mov    0x8(%esp),%eax
    7830:	8b 50 04             	mov    0x4(%eax),%edx
    7833:	8b 44 24 08          	mov    0x8(%esp),%eax
    7837:	89 10                	mov    %edx,(%eax)
		p++;
    7839:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
		p->a = p->b = 0;
    783e:	8b 44 24 08          	mov    0x8(%esp),%eax
    7842:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    7849:	8b 44 24 08          	mov    0x8(%esp),%eax
    784d:	8b 50 04             	mov    0x4(%eax),%edx
    7850:	8b 44 24 08          	mov    0x8(%esp),%eax
    7854:	89 10                	mov    %edx,(%eax)
		p++;
    7856:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
	for(i = 1; i < NR_TASKS; i++) {
    785b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7860:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    7865:	7e ab                	jle    7812 <sched_init+0x91>
	}
	/* Clear NT, so that we won't have troubles with that later on */
	/* 清除标志寄存器中的位NT,这样以后就不会有麻烦 */
	// EFLAGS中的NT标志位用于控制任务的嵌套调用.当NT位置位时,那么当前中断任务执行IRET指令时就会引起任务切换.NT指出TSS中的back_link字段是否有效.
	// NT=0时无效.
	__asm__("pushfl ; andl $0xffffbfff,(%esp) ; popfl");
    7867:	9c                   	pushf  
    7868:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    786f:	9d                   	popf   
	// 将任务0的TSS段选择符加载到任务寄存器tr.将局部描述符表段选择符加载到局部描述符表寄存器ldtr中.注意!!是将GDT中相应LDT描述符的选择符加载到ldtr.
	// 只明确加这一次,以后新任务LDT的加载,是CPU根据TSS中的LDT项自动加载.
	ltr(0);								// 定义在include/linux/sched.h
    7870:	b8 20 00 00 00       	mov    $0x20,%eax
    7875:	0f 00 d8             	ltr    %ax
	lldt(0);							// 其中参数(0)是任务号.
    7878:	b8 28 00 00 00       	mov    $0x28,%eax
    787d:	0f 00 d0             	lldt   %ax
	// 下面代码用于初始化8253定时器.通道0,选择工作方式3,二进制计数方式.通道0的输出引脚接在中断控制主芯片的IRQ0上,它每10毫秒发出一个IRQ0请求.
	// LATCH是初始定时计数值.
	outb_p(0x36, 0x43);					/* binary, mode 3, LSB/MSB, ch 0 */
    7880:	b8 36 00 00 00       	mov    $0x36,%eax
    7885:	ba 43 00 00 00       	mov    $0x43,%edx
    788a:	ee                   	out    %al,(%dx)
    788b:	eb 00                	jmp    788d <sched_init+0x10c>
    788d:	eb 00                	jmp    788f <sched_init+0x10e>
	outb_p(LATCH & 0xff, 0x40);			/* LSB */	// 定时值低字节
    788f:	b8 9b 00 00 00       	mov    $0x9b,%eax
    7894:	ba 40 00 00 00       	mov    $0x40,%edx
    7899:	ee                   	out    %al,(%dx)
    789a:	eb 00                	jmp    789c <sched_init+0x11b>
    789c:	eb 00                	jmp    789e <sched_init+0x11d>
	outb(LATCH >> 8, 0x40);				/* MSB */	// 定时值高字节
    789e:	b8 2e 00 00 00       	mov    $0x2e,%eax
    78a3:	ba 40 00 00 00       	mov    $0x40,%edx
    78a8:	ee                   	out    %al,(%dx)
	// 设置时钟中断处理程序句柄(设置时钟中断门).修改中断控制器屏蔽码,允许时钟中断.
	// 然后设置系统调用中断门.这两个设置中断描述衔表IDT中描述符的宏定义在文件include/asm/system.h中.两者的区别参见system.h文件开始处的说明.
	set_intr_gate(0x20, &timer_interrupt);
    78a9:	b9 b8 55 00 00       	mov    $0x55b8,%ecx
    78ae:	bb bc 55 00 00       	mov    $0x55bc,%ebx
    78b3:	ba 1c 7a 00 00       	mov    $0x7a1c,%edx
    78b8:	b8 00 00 08 00       	mov    $0x80000,%eax
    78bd:	66 89 d0             	mov    %dx,%ax
    78c0:	66 ba 00 8e          	mov    $0x8e00,%dx
    78c4:	89 01                	mov    %eax,(%ecx)
    78c6:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x01, 0x21);
    78c8:	b8 21 00 00 00       	mov    $0x21,%eax
    78cd:	89 c2                	mov    %eax,%edx
    78cf:	ec                   	in     (%dx),%al
    78d0:	eb 00                	jmp    78d2 <sched_init+0x151>
    78d2:	eb 00                	jmp    78d4 <sched_init+0x153>
    78d4:	88 44 24 07          	mov    %al,0x7(%esp)
    78d8:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    78dd:	0f b6 c0             	movzbl %al,%eax
    78e0:	83 e0 fe             	and    $0xfffffffe,%eax
    78e3:	ba 21 00 00 00       	mov    $0x21,%edx
    78e8:	ee                   	out    %al,(%dx)
	set_system_gate(0x80, &system_call);
    78e9:	b9 b8 58 00 00       	mov    $0x58b8,%ecx
    78ee:	bb bc 58 00 00       	mov    $0x58bc,%ebx
    78f3:	ba 24 79 00 00       	mov    $0x7924,%edx
    78f8:	b8 00 00 08 00       	mov    $0x80000,%eax
    78fd:	66 89 d0             	mov    %dx,%ax
    7900:	66 ba 00 ef          	mov    $0xef00,%dx
    7904:	89 01                	mov    %eax,(%ecx)
    7906:	89 13                	mov    %edx,(%ebx)
}
    7908:	90                   	nop
    7909:	83 c4 10             	add    $0x10,%esp
    790c:	5b                   	pop    %ebx
    790d:	5e                   	pop    %esi
    790e:	5f                   	pop    %edi
    790f:	5d                   	pop    %ebp
    7910:	c3                   	ret    
    7911:	66 90                	xchg   %ax,%ax
    7913:	90                   	nop

00007914 <bad_sys_call>:
    7914:	6a da                	push   $0xffffffda
    7916:	eb 50                	jmp    7968 <ret_from_sys_call>

00007918 <reschedule>:
    7918:	68 68 79 00 00       	push   $0x7968
    791d:	e9 21 f5 ff ff       	jmp    6e43 <schedule>
    7922:	66 90                	xchg   %ax,%ax

00007924 <system_call>:
    7924:	1e                   	push   %ds
    7925:	06                   	push   %es
    7926:	0f a0                	push   %fs
    7928:	50                   	push   %eax
    7929:	52                   	push   %edx
    792a:	51                   	push   %ecx
    792b:	53                   	push   %ebx
    792c:	ba 10 00 00 00       	mov    $0x10,%edx
    7931:	8e da                	mov    %edx,%ds
    7933:	8e c2                	mov    %edx,%es
    7935:	ba 17 00 00 00       	mov    $0x17,%edx
    793a:	8e e2                	mov    %edx,%fs
    793c:	3b 05 9c e1 02 00    	cmp    0x2e19c,%eax
    7942:	73 d0                	jae    7914 <bad_sys_call>
    7944:	8b 1c 85 40 e0 02 00 	mov    0x2e040(,%eax,4),%ebx
    794b:	83 fb 00             	cmp    $0x0,%ebx
    794e:	75 05                	jne    7955 <sys_call>
    7950:	e8 f2 29 00 00       	call   a347 <sys_default>

00007955 <sys_call>:
    7955:	ff d3                	call   *%ebx
    7957:	50                   	push   %eax
    7958:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    795d:	83 38 00             	cmpl   $0x0,(%eax)
    7960:	75 b6                	jne    7918 <reschedule>
    7962:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
    7966:	74 b0                	je     7918 <reschedule>

00007968 <ret_from_sys_call>:
    7968:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    796d:	3b 05 c0 f1 02 00    	cmp    0x2f1c0,%eax
    7973:	74 34                	je     79a9 <ret_from_sys_call+0x41>
    7975:	66 83 7c 24 24 0f    	cmpw   $0xf,0x24(%esp)
    797b:	75 2c                	jne    79a9 <ret_from_sys_call+0x41>
    797d:	66 83 7c 24 30 17    	cmpw   $0x17,0x30(%esp)
    7983:	75 24                	jne    79a9 <ret_from_sys_call+0x41>
    7985:	8b 58 0c             	mov    0xc(%eax),%ebx
    7988:	8b 88 10 02 00 00    	mov    0x210(%eax),%ecx
    798e:	f7 d1                	not    %ecx
    7990:	21 d9                	and    %ebx,%ecx
    7992:	0f bc c9             	bsf    %ecx,%ecx
    7995:	74 12                	je     79a9 <ret_from_sys_call+0x41>
    7997:	0f b3 cb             	btr    %ecx,%ebx
    799a:	89 58 0c             	mov    %ebx,0xc(%eax)
    799d:	41                   	inc    %ecx
    799e:	51                   	push   %ecx
    799f:	e8 47 3f 00 00       	call   b8eb <do_signal>
    79a4:	59                   	pop    %ecx
    79a5:	85 c0                	test   %eax,%eax
    79a7:	75 af                	jne    7958 <sys_call+0x3>
    79a9:	58                   	pop    %eax
    79aa:	5b                   	pop    %ebx
    79ab:	59                   	pop    %ecx
    79ac:	5a                   	pop    %edx
    79ad:	83 c4 04             	add    $0x4,%esp
    79b0:	0f a1                	pop    %fs
    79b2:	07                   	pop    %es
    79b3:	1f                   	pop    %ds
    79b4:	cf                   	iret   
    79b5:	8d 76 00             	lea    0x0(%esi),%esi

000079b8 <coprocessor_error>:
    79b8:	1e                   	push   %ds
    79b9:	06                   	push   %es
    79ba:	0f a0                	push   %fs
    79bc:	6a ff                	push   $0xffffffff
    79be:	52                   	push   %edx
    79bf:	51                   	push   %ecx
    79c0:	53                   	push   %ebx
    79c1:	50                   	push   %eax
    79c2:	b8 10 00 00 00       	mov    $0x10,%eax
    79c7:	8e d8                	mov    %eax,%ds
    79c9:	8e c0                	mov    %eax,%es
    79cb:	b8 17 00 00 00       	mov    $0x17,%eax
    79d0:	8e e0                	mov    %eax,%fs
    79d2:	68 68 79 00 00       	push   $0x7968
    79d7:	e9 a5 91 01 00       	jmp    20b81 <math_error>

000079dc <device_not_available>:
    79dc:	1e                   	push   %ds
    79dd:	06                   	push   %es
    79de:	0f a0                	push   %fs
    79e0:	6a ff                	push   $0xffffffff
    79e2:	52                   	push   %edx
    79e3:	51                   	push   %ecx
    79e4:	53                   	push   %ebx
    79e5:	50                   	push   %eax
    79e6:	b8 10 00 00 00       	mov    $0x10,%eax
    79eb:	8e d8                	mov    %eax,%ds
    79ed:	8e c0                	mov    %eax,%es
    79ef:	b8 17 00 00 00       	mov    $0x17,%eax
    79f4:	8e e0                	mov    %eax,%fs
    79f6:	68 68 79 00 00       	push   $0x7968
    79fb:	0f 06                	clts   
    79fd:	0f 20 c0             	mov    %cr0,%eax
    7a00:	a9 04 00 00 00       	test   $0x4,%eax
    7a05:	0f 84 da f3 ff ff    	je     6de5 <math_state_restore>
    7a0b:	55                   	push   %ebp
    7a0c:	56                   	push   %esi
    7a0d:	57                   	push   %edi
    7a0e:	6a 00                	push   $0x0
    7a10:	e8 77 8f 01 00       	call   2098c <math_emulate>
    7a15:	83 c4 04             	add    $0x4,%esp
    7a18:	5f                   	pop    %edi
    7a19:	5e                   	pop    %esi
    7a1a:	5d                   	pop    %ebp
    7a1b:	c3                   	ret    

00007a1c <timer_interrupt>:
    7a1c:	1e                   	push   %ds
    7a1d:	06                   	push   %es
    7a1e:	0f a0                	push   %fs
    7a20:	6a ff                	push   $0xffffffff
    7a22:	52                   	push   %edx
    7a23:	51                   	push   %ecx
    7a24:	53                   	push   %ebx
    7a25:	50                   	push   %eax
    7a26:	b8 10 00 00 00       	mov    $0x10,%eax
    7a2b:	8e d8                	mov    %eax,%ds
    7a2d:	8e c0                	mov    %eax,%es
    7a2f:	b8 17 00 00 00       	mov    $0x17,%eax
    7a34:	8e e0                	mov    %eax,%fs
    7a36:	ff 05 00 fb 02 00    	incl   0x2fb00
    7a3c:	b0 20                	mov    $0x20,%al
    7a3e:	e6 20                	out    %al,$0x20
    7a40:	8b 44 24 24          	mov    0x24(%esp),%eax
    7a44:	83 e0 03             	and    $0x3,%eax
    7a47:	50                   	push   %eax
    7a48:	e8 ca fa ff ff       	call   7517 <do_timer>
    7a4d:	83 c4 04             	add    $0x4,%esp
    7a50:	e9 13 ff ff ff       	jmp    7968 <ret_from_sys_call>
    7a55:	8d 76 00             	lea    0x0(%esi),%esi

00007a58 <sys_execve>:
    7a58:	8d 44 24 20          	lea    0x20(%esp),%eax
    7a5c:	50                   	push   %eax
    7a5d:	e8 00 9e 00 00       	call   11862 <do_execve>
    7a62:	83 c4 04             	add    $0x4,%esp
    7a65:	c3                   	ret    
    7a66:	66 90                	xchg   %ax,%ax

00007a68 <sys_fork>:
    7a68:	e8 e7 10 00 00       	call   8b54 <find_empty_process>
    7a6d:	85 c0                	test   %eax,%eax
    7a6f:	78 0e                	js     7a7f <sys_fork+0x17>
    7a71:	0f a8                	push   %gs
    7a73:	56                   	push   %esi
    7a74:	57                   	push   %edi
    7a75:	55                   	push   %ebp
    7a76:	50                   	push   %eax
    7a77:	e8 7b 0b 00 00       	call   85f7 <copy_process>
    7a7c:	83 c4 14             	add    $0x14,%esp
    7a7f:	c3                   	ret    

00007a80 <hd_interrupt>:
    7a80:	50                   	push   %eax
    7a81:	51                   	push   %ecx
    7a82:	52                   	push   %edx
    7a83:	1e                   	push   %ds
    7a84:	06                   	push   %es
    7a85:	0f a0                	push   %fs
    7a87:	b8 10 00 00 00       	mov    $0x10,%eax
    7a8c:	8e d8                	mov    %eax,%ds
    7a8e:	8e c0                	mov    %eax,%es
    7a90:	b8 17 00 00 00       	mov    $0x17,%eax
    7a95:	8e e0                	mov    %eax,%fs
    7a97:	b0 20                	mov    $0x20,%al
    7a99:	e6 a0                	out    %al,$0xa0
    7a9b:	eb 00                	jmp    7a9d <hd_interrupt+0x1d>
    7a9d:	eb 00                	jmp    7a9f <hd_interrupt+0x1f>
    7a9f:	31 d2                	xor    %edx,%edx
    7aa1:	89 15 84 21 03 00    	mov    %edx,0x32184
    7aa7:	87 15 80 21 03 00    	xchg   %edx,0x32180
    7aad:	85 d2                	test   %edx,%edx
    7aaf:	75 05                	jne    7ab6 <hd_interrupt+0x36>
    7ab1:	ba 28 80 01 00       	mov    $0x18028,%edx
    7ab6:	e6 20                	out    %al,$0x20
    7ab8:	ff d2                	call   *%edx
    7aba:	0f a1                	pop    %fs
    7abc:	07                   	pop    %es
    7abd:	1f                   	pop    %ds
    7abe:	5a                   	pop    %edx
    7abf:	59                   	pop    %ecx
    7ac0:	58                   	pop    %eax
    7ac1:	cf                   	iret   

00007ac2 <floppy_interrupt>:
    7ac2:	50                   	push   %eax
    7ac3:	51                   	push   %ecx
    7ac4:	52                   	push   %edx
    7ac5:	1e                   	push   %ds
    7ac6:	06                   	push   %es
    7ac7:	0f a0                	push   %fs
    7ac9:	b8 10 00 00 00       	mov    $0x10,%eax
    7ace:	8e d8                	mov    %eax,%ds
    7ad0:	8e c0                	mov    %eax,%es
    7ad2:	b8 17 00 00 00       	mov    $0x17,%eax
    7ad7:	8e e0                	mov    %eax,%fs
    7ad9:	b0 20                	mov    $0x20,%al
    7adb:	e6 20                	out    %al,$0x20
    7add:	31 c0                	xor    %eax,%eax
    7adf:	87 05 54 21 03 00    	xchg   %eax,0x32154
    7ae5:	85 c0                	test   %eax,%eax
    7ae7:	75 05                	jne    7aee <floppy_interrupt+0x2c>
    7ae9:	b8 8d 72 01 00       	mov    $0x1728d,%eax
    7aee:	ff d0                	call   *%eax
    7af0:	0f a1                	pop    %fs
    7af2:	07                   	pop    %es
    7af3:	1f                   	pop    %ds
    7af4:	5a                   	pop    %edx
    7af5:	59                   	pop    %ecx
    7af6:	58                   	pop    %eax
    7af7:	cf                   	iret   

00007af8 <parallel_interrupt>:
    7af8:	50                   	push   %eax
    7af9:	b0 20                	mov    $0x20,%al
    7afb:	e6 20                	out    %al,$0x20
    7afd:	58                   	pop    %eax
    7afe:	cf                   	iret   

00007aff <die>:
void alignment_check(void);					// int46(kernel/asm.s)

// 该子程序用来打印出错中断的名称,出错号,调用程序的EIP,EFLAGS,ESP,fs段寄存器值,段的基址,段的长度,进程号pid,任务号,10字节指令码.如果
// 堆栈在用户数据段,则还打印16字节堆栈内容.这些信息可用于程序调试.
static void die(char * str, long esp_ptr, long nr)
{
    7aff:	56                   	push   %esi
    7b00:	53                   	push   %ebx
    7b01:	83 ec 14             	sub    $0x14,%esp
	long * esp = (long *) esp_ptr;
    7b04:	8b 44 24 24          	mov    0x24(%esp),%eax
    7b08:	89 44 24 08          	mov    %eax,0x8(%esp)
	int i;

	printk("%s: %04x\n\r",str, nr & 0xffff);
    7b0c:	8b 44 24 28          	mov    0x28(%esp),%eax
    7b10:	0f b7 c0             	movzwl %ax,%eax
    7b13:	83 ec 04             	sub    $0x4,%esp
    7b16:	50                   	push   %eax
    7b17:	ff 74 24 28          	pushl  0x28(%esp)
    7b1b:	68 f8 2b 02 00       	push   $0x22bf8
    7b20:	e8 21 11 00 00       	call   8c46 <printk>
    7b25:	83 c4 10             	add    $0x10,%esp
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b28:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b2c:	83 c0 0c             	add    $0xc,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b2f:	8b 30                	mov    (%eax),%esi
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b31:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b35:	83 c0 10             	add    $0x10,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b38:	8b 18                	mov    (%eax),%ebx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b3a:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b3e:	83 c0 08             	add    $0x8,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b41:	8b 08                	mov    (%eax),%ecx
    7b43:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b47:	8b 10                	mov    (%eax),%edx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b49:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b4d:	83 c0 04             	add    $0x4,%eax
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b50:	8b 00                	mov    (%eax),%eax
    7b52:	83 ec 08             	sub    $0x8,%esp
    7b55:	56                   	push   %esi
    7b56:	53                   	push   %ebx
    7b57:	51                   	push   %ecx
    7b58:	52                   	push   %edx
    7b59:	50                   	push   %eax
    7b5a:	68 04 2c 02 00       	push   $0x22c04
    7b5f:	e8 e2 10 00 00       	call   8c46 <printk>
    7b64:	83 c4 20             	add    $0x20,%esp
	printk("fs: %04x\n", _fs());
    7b67:	66 8c e0             	mov    %fs,%ax
    7b6a:	89 c3                	mov    %eax,%ebx
    7b6c:	89 d8                	mov    %ebx,%eax
    7b6e:	0f b7 c0             	movzwl %ax,%eax
    7b71:	83 ec 08             	sub    $0x8,%esp
    7b74:	50                   	push   %eax
    7b75:	68 2a 2c 02 00       	push   $0x22c2a
    7b7a:	e8 c7 10 00 00       	call   8c46 <printk>
    7b7f:	83 c4 10             	add    $0x10,%esp
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
    7b82:	b8 17 00 00 00       	mov    $0x17,%eax
    7b87:	0f 03 c0             	lsl    %ax,%eax
    7b8a:	40                   	inc    %eax
    7b8b:	89 44 24 04          	mov    %eax,0x4(%esp)
    7b8f:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    7b93:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7b98:	05 a0 03 00 00       	add    $0x3a0,%eax
    7b9d:	83 c0 02             	add    $0x2,%eax
    7ba0:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    7ba6:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    7bac:	8d 72 04             	lea    0x4(%edx),%esi
    7baf:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    7bb5:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    7bbb:	83 c3 07             	add    $0x7,%ebx
    7bbe:	8a 33                	mov    (%ebx),%dh
    7bc0:	8a 16                	mov    (%esi),%dl
    7bc2:	c1 e2 10             	shl    $0x10,%edx
    7bc5:	66 8b 10             	mov    (%eax),%dx
    7bc8:	89 d0                	mov    %edx,%eax
    7bca:	89 04 24             	mov    %eax,(%esp)
    7bcd:	8b 04 24             	mov    (%esp),%eax
    7bd0:	83 ec 04             	sub    $0x4,%esp
    7bd3:	51                   	push   %ecx
    7bd4:	50                   	push   %eax
    7bd5:	68 34 2c 02 00       	push   $0x22c34
    7bda:	e8 67 10 00 00       	call   8c46 <printk>
    7bdf:	83 c4 10             	add    $0x10,%esp
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
    7be2:	8b 44 24 08          	mov    0x8(%esp),%eax
    7be6:	83 c0 10             	add    $0x10,%eax
    7be9:	8b 00                	mov    (%eax),%eax
    7beb:	83 f8 17             	cmp    $0x17,%eax
    7bee:	75 71                	jne    7c61 <die+0x162>
		printk("Stack: ");
    7bf0:	83 ec 0c             	sub    $0xc,%esp
    7bf3:	68 49 2c 02 00       	push   $0x22c49
    7bf8:	e8 49 10 00 00       	call   8c46 <printk>
    7bfd:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7c00:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c07:	00 
    7c08:	eb 40                	jmp    7c4a <die+0x14b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
    7c0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    7c15:	8b 44 24 08          	mov    0x8(%esp),%eax
    7c19:	83 c0 0c             	add    $0xc,%eax
    7c1c:	8b 00                	mov    (%eax),%eax
    7c1e:	01 d0                	add    %edx,%eax
    7c20:	89 c2                	mov    %eax,%edx
    7c22:	b8 17 00 00 00       	mov    $0x17,%eax
    7c27:	0f a0                	push   %fs
    7c29:	8e e0                	mov    %eax,%fs
    7c2b:	64 8b 02             	mov    %fs:(%edx),%eax
    7c2e:	0f a1                	pop    %fs
    7c30:	89 c3                	mov    %eax,%ebx
    7c32:	89 d8                	mov    %ebx,%eax
    7c34:	83 ec 08             	sub    $0x8,%esp
    7c37:	50                   	push   %eax
    7c38:	68 51 2c 02 00       	push   $0x22c51
    7c3d:	e8 04 10 00 00       	call   8c46 <printk>
    7c42:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7c45:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7c4a:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    7c4f:	7e b9                	jle    7c0a <die+0x10b>
		printk("\n");
    7c51:	83 ec 0c             	sub    $0xc,%esp
    7c54:	68 55 2c 02 00       	push   $0x22c55
    7c59:	e8 e8 0f 00 00       	call   8c46 <printk>
    7c5e:	83 c4 10             	add    $0x10,%esp
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
    7c61:	b8 00 00 00 00       	mov    $0x0,%eax
    7c66:	66 0f 00 c8          	str    %ax
    7c6a:	83 e8 20             	sub    $0x20,%eax
    7c6d:	c1 e8 04             	shr    $0x4,%eax
    7c70:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
    7c74:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c78:	0f b7 d0             	movzwl %ax,%edx
    7c7b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7c80:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    7c86:	83 ec 04             	sub    $0x4,%esp
    7c89:	52                   	push   %edx
    7c8a:	50                   	push   %eax
    7c8b:	68 57 2c 02 00       	push   $0x22c57
    7c90:	e8 b1 0f 00 00       	call   8c46 <printk>
    7c95:	83 c4 10             	add    $0x10,%esp
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7c98:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c9f:	00 
    7ca0:	eb 40                	jmp    7ce2 <die+0x1e3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
    7ca2:	8b 44 24 08          	mov    0x8(%esp),%eax
    7ca6:	83 c0 04             	add    $0x4,%eax
    7ca9:	8b 00                	mov    (%eax),%eax
    7cab:	8b 54 24 08          	mov    0x8(%esp),%edx
    7caf:	8b 12                	mov    (%edx),%edx
    7cb1:	89 d1                	mov    %edx,%ecx
    7cb3:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7cb7:	01 ca                	add    %ecx,%edx
    7cb9:	0f a0                	push   %fs
    7cbb:	8e e0                	mov    %eax,%fs
    7cbd:	64 8a 02             	mov    %fs:(%edx),%al
    7cc0:	0f a1                	pop    %fs
    7cc2:	89 c3                	mov    %eax,%ebx
    7cc4:	89 d8                	mov    %ebx,%eax
    7cc6:	0f be c0             	movsbl %al,%eax
    7cc9:	0f b6 c0             	movzbl %al,%eax
    7ccc:	83 ec 08             	sub    $0x8,%esp
    7ccf:	50                   	push   %eax
    7cd0:	68 71 2c 02 00       	push   $0x22c71
    7cd5:	e8 6c 0f 00 00       	call   8c46 <printk>
    7cda:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < 10; i++)
    7cdd:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7ce2:	83 7c 24 0c 09       	cmpl   $0x9,0xc(%esp)
    7ce7:	7e b9                	jle    7ca2 <die+0x1a3>
	printk("\n\r");
    7ce9:	83 ec 0c             	sub    $0xc,%esp
    7cec:	68 77 2c 02 00       	push   $0x22c77
    7cf1:	e8 50 0f 00 00       	call   8c46 <printk>
    7cf6:	83 c4 10             	add    $0x10,%esp
	do_exit(11);								/* play segment exception */
    7cf9:	83 ec 0c             	sub    $0xc,%esp
    7cfc:	6a 0b                	push   $0xb
    7cfe:	e8 c7 30 00 00       	call   adca <do_exit>
    7d03:	83 c4 10             	add    $0x10,%esp
}
    7d06:	90                   	nop
    7d07:	83 c4 14             	add    $0x14,%esp
    7d0a:	5b                   	pop    %ebx
    7d0b:	5e                   	pop    %esi
    7d0c:	c3                   	ret    

00007d0d <do_double_fault>:

// 以下这些以do_开头的函数是asm.s中对应中断处理程序调用的C函数.
void do_double_fault(long esp, long error_code)
{
    7d0d:	83 ec 0c             	sub    $0xc,%esp
	die("double fault", esp, error_code);
    7d10:	83 ec 04             	sub    $0x4,%esp
    7d13:	ff 74 24 18          	pushl  0x18(%esp)
    7d17:	ff 74 24 18          	pushl  0x18(%esp)
    7d1b:	68 7a 2c 02 00       	push   $0x22c7a
    7d20:	e8 da fd ff ff       	call   7aff <die>
    7d25:	83 c4 10             	add    $0x10,%esp
}
    7d28:	90                   	nop
    7d29:	83 c4 0c             	add    $0xc,%esp
    7d2c:	c3                   	ret    

00007d2d <do_general_protection>:

void do_general_protection(long esp, long error_code)
{
    7d2d:	83 ec 0c             	sub    $0xc,%esp
	die("general protection", esp, error_code);
    7d30:	83 ec 04             	sub    $0x4,%esp
    7d33:	ff 74 24 18          	pushl  0x18(%esp)
    7d37:	ff 74 24 18          	pushl  0x18(%esp)
    7d3b:	68 87 2c 02 00       	push   $0x22c87
    7d40:	e8 ba fd ff ff       	call   7aff <die>
    7d45:	83 c4 10             	add    $0x10,%esp
}
    7d48:	90                   	nop
    7d49:	83 c4 0c             	add    $0xc,%esp
    7d4c:	c3                   	ret    

00007d4d <do_alignment_check>:

void do_alignment_check(long esp, long error_code)
{
    7d4d:	83 ec 0c             	sub    $0xc,%esp
    die("alignment check", esp, error_code);
    7d50:	83 ec 04             	sub    $0x4,%esp
    7d53:	ff 74 24 18          	pushl  0x18(%esp)
    7d57:	ff 74 24 18          	pushl  0x18(%esp)
    7d5b:	68 9a 2c 02 00       	push   $0x22c9a
    7d60:	e8 9a fd ff ff       	call   7aff <die>
    7d65:	83 c4 10             	add    $0x10,%esp
}
    7d68:	90                   	nop
    7d69:	83 c4 0c             	add    $0xc,%esp
    7d6c:	c3                   	ret    

00007d6d <do_divide_error>:

void do_divide_error(long esp, long error_code)
{
    7d6d:	83 ec 0c             	sub    $0xc,%esp
	die("divide error", esp, error_code);
    7d70:	83 ec 04             	sub    $0x4,%esp
    7d73:	ff 74 24 18          	pushl  0x18(%esp)
    7d77:	ff 74 24 18          	pushl  0x18(%esp)
    7d7b:	68 aa 2c 02 00       	push   $0x22caa
    7d80:	e8 7a fd ff ff       	call   7aff <die>
    7d85:	83 c4 10             	add    $0x10,%esp
}
    7d88:	90                   	nop
    7d89:	83 c4 0c             	add    $0xc,%esp
    7d8c:	c3                   	ret    

00007d8d <do_int3>:
// 参数是进入中断后被顺序压入堆栈的寄存器值.参见asm.s程序.
void do_int3(long * esp, long error_code,
		long fs, long es, long ds,
		long ebp, long esi, long edi,
		long edx, long ecx, long ebx, long eax)
{
    7d8d:	83 ec 1c             	sub    $0x1c,%esp
	int tr;

	__asm__("str %%ax":"=a" (tr):"0" (0));		// 取任务寄存器值->tr
    7d90:	b8 00 00 00 00       	mov    $0x0,%eax
    7d95:	66 0f 00 c8          	str    %ax
    7d99:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7d9d:	83 ec 0c             	sub    $0xc,%esp
    7da0:	ff 74 24 4c          	pushl  0x4c(%esp)
    7da4:	ff 74 24 54          	pushl  0x54(%esp)
    7da8:	ff 74 24 5c          	pushl  0x5c(%esp)
    7dac:	ff 74 24 64          	pushl  0x64(%esp)
    7db0:	68 b8 2c 02 00       	push   $0x22cb8
    7db5:	e8 8c 0e 00 00       	call   8c46 <printk>
    7dba:	83 c4 20             	add    $0x20,%esp
		eax, ebx, ecx, edx);
	printk("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7dbd:	8b 44 24 20          	mov    0x20(%esp),%eax
    7dc1:	83 ec 0c             	sub    $0xc,%esp
    7dc4:	50                   	push   %eax
    7dc5:	ff 74 24 44          	pushl  0x44(%esp)
    7dc9:	ff 74 24 50          	pushl  0x50(%esp)
    7dcd:	ff 74 24 50          	pushl  0x50(%esp)
    7dd1:	68 e0 2c 02 00       	push   $0x22ce0
    7dd6:	e8 6b 0e 00 00       	call   8c46 <printk>
    7ddb:	83 c4 20             	add    $0x20,%esp
		esi, edi, ebp, (long) esp);
	printk("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",
    7dde:	83 ec 0c             	sub    $0xc,%esp
    7de1:	ff 74 24 18          	pushl  0x18(%esp)
    7de5:	ff 74 24 38          	pushl  0x38(%esp)
    7de9:	ff 74 24 40          	pushl  0x40(%esp)
    7ded:	ff 74 24 48          	pushl  0x48(%esp)
    7df1:	68 08 2d 02 00       	push   $0x22d08
    7df6:	e8 4b 0e 00 00       	call   8c46 <printk>
    7dfb:	83 c4 20             	add    $0x20,%esp
		ds, es, fs, tr);
	printk("EIP: %8x   CS: %4x  EFLAGS: %8x\n\r", esp[0], esp[1], esp[2]);
    7dfe:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e02:	83 c0 08             	add    $0x8,%eax
    7e05:	8b 08                	mov    (%eax),%ecx
    7e07:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e0b:	83 c0 04             	add    $0x4,%eax
    7e0e:	8b 10                	mov    (%eax),%edx
    7e10:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e14:	8b 00                	mov    (%eax),%eax
    7e16:	51                   	push   %ecx
    7e17:	52                   	push   %edx
    7e18:	50                   	push   %eax
    7e19:	68 2c 2d 02 00       	push   $0x22d2c
    7e1e:	e8 23 0e 00 00       	call   8c46 <printk>
    7e23:	83 c4 10             	add    $0x10,%esp
}
    7e26:	90                   	nop
    7e27:	83 c4 1c             	add    $0x1c,%esp
    7e2a:	c3                   	ret    

00007e2b <do_nmi>:

void do_nmi(long esp, long error_code)
{
    7e2b:	83 ec 0c             	sub    $0xc,%esp
	die("nmi", esp, error_code);
    7e2e:	83 ec 04             	sub    $0x4,%esp
    7e31:	ff 74 24 18          	pushl  0x18(%esp)
    7e35:	ff 74 24 18          	pushl  0x18(%esp)
    7e39:	68 4e 2d 02 00       	push   $0x22d4e
    7e3e:	e8 bc fc ff ff       	call   7aff <die>
    7e43:	83 c4 10             	add    $0x10,%esp
}
    7e46:	90                   	nop
    7e47:	83 c4 0c             	add    $0xc,%esp
    7e4a:	c3                   	ret    

00007e4b <do_debug>:

void do_debug(long esp, long error_code)
{
    7e4b:	83 ec 0c             	sub    $0xc,%esp
	die("debug", esp, error_code);
    7e4e:	83 ec 04             	sub    $0x4,%esp
    7e51:	ff 74 24 18          	pushl  0x18(%esp)
    7e55:	ff 74 24 18          	pushl  0x18(%esp)
    7e59:	68 52 2d 02 00       	push   $0x22d52
    7e5e:	e8 9c fc ff ff       	call   7aff <die>
    7e63:	83 c4 10             	add    $0x10,%esp
}
    7e66:	90                   	nop
    7e67:	83 c4 0c             	add    $0xc,%esp
    7e6a:	c3                   	ret    

00007e6b <do_overflow>:

void do_overflow(long esp, long error_code)
{
    7e6b:	83 ec 0c             	sub    $0xc,%esp
	die("overflow", esp, error_code);
    7e6e:	83 ec 04             	sub    $0x4,%esp
    7e71:	ff 74 24 18          	pushl  0x18(%esp)
    7e75:	ff 74 24 18          	pushl  0x18(%esp)
    7e79:	68 58 2d 02 00       	push   $0x22d58
    7e7e:	e8 7c fc ff ff       	call   7aff <die>
    7e83:	83 c4 10             	add    $0x10,%esp
}
    7e86:	90                   	nop
    7e87:	83 c4 0c             	add    $0xc,%esp
    7e8a:	c3                   	ret    

00007e8b <do_bounds>:

void do_bounds(long esp, long error_code)
{
    7e8b:	83 ec 0c             	sub    $0xc,%esp
	die("bounds", esp, error_code);
    7e8e:	83 ec 04             	sub    $0x4,%esp
    7e91:	ff 74 24 18          	pushl  0x18(%esp)
    7e95:	ff 74 24 18          	pushl  0x18(%esp)
    7e99:	68 61 2d 02 00       	push   $0x22d61
    7e9e:	e8 5c fc ff ff       	call   7aff <die>
    7ea3:	83 c4 10             	add    $0x10,%esp
}
    7ea6:	90                   	nop
    7ea7:	83 c4 0c             	add    $0xc,%esp
    7eaa:	c3                   	ret    

00007eab <do_invalid_op>:

void do_invalid_op(long esp, long error_code)
{
    7eab:	83 ec 0c             	sub    $0xc,%esp
	die("invalid operand", esp, error_code);
    7eae:	83 ec 04             	sub    $0x4,%esp
    7eb1:	ff 74 24 18          	pushl  0x18(%esp)
    7eb5:	ff 74 24 18          	pushl  0x18(%esp)
    7eb9:	68 68 2d 02 00       	push   $0x22d68
    7ebe:	e8 3c fc ff ff       	call   7aff <die>
    7ec3:	83 c4 10             	add    $0x10,%esp
}
    7ec6:	90                   	nop
    7ec7:	83 c4 0c             	add    $0xc,%esp
    7eca:	c3                   	ret    

00007ecb <do_device_not_available>:

void do_device_not_available(long esp, long error_code)
{
    7ecb:	83 ec 0c             	sub    $0xc,%esp
	die("device not available", esp, error_code);
    7ece:	83 ec 04             	sub    $0x4,%esp
    7ed1:	ff 74 24 18          	pushl  0x18(%esp)
    7ed5:	ff 74 24 18          	pushl  0x18(%esp)
    7ed9:	68 78 2d 02 00       	push   $0x22d78
    7ede:	e8 1c fc ff ff       	call   7aff <die>
    7ee3:	83 c4 10             	add    $0x10,%esp
}
    7ee6:	90                   	nop
    7ee7:	83 c4 0c             	add    $0xc,%esp
    7eea:	c3                   	ret    

00007eeb <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(long esp, long error_code)
{
    7eeb:	83 ec 0c             	sub    $0xc,%esp
	die("coprocessor segment overrun", esp, error_code);
    7eee:	83 ec 04             	sub    $0x4,%esp
    7ef1:	ff 74 24 18          	pushl  0x18(%esp)
    7ef5:	ff 74 24 18          	pushl  0x18(%esp)
    7ef9:	68 8d 2d 02 00       	push   $0x22d8d
    7efe:	e8 fc fb ff ff       	call   7aff <die>
    7f03:	83 c4 10             	add    $0x10,%esp
}
    7f06:	90                   	nop
    7f07:	83 c4 0c             	add    $0xc,%esp
    7f0a:	c3                   	ret    

00007f0b <do_invalid_TSS>:

void do_invalid_TSS(long esp, long error_code)
{
    7f0b:	83 ec 0c             	sub    $0xc,%esp
	die("invalid TSS", esp, error_code);
    7f0e:	83 ec 04             	sub    $0x4,%esp
    7f11:	ff 74 24 18          	pushl  0x18(%esp)
    7f15:	ff 74 24 18          	pushl  0x18(%esp)
    7f19:	68 a9 2d 02 00       	push   $0x22da9
    7f1e:	e8 dc fb ff ff       	call   7aff <die>
    7f23:	83 c4 10             	add    $0x10,%esp
}
    7f26:	90                   	nop
    7f27:	83 c4 0c             	add    $0xc,%esp
    7f2a:	c3                   	ret    

00007f2b <do_segment_not_present>:

void do_segment_not_present(long esp, long error_code)
{
    7f2b:	83 ec 0c             	sub    $0xc,%esp
	die("segment not present", esp, error_code);
    7f2e:	83 ec 04             	sub    $0x4,%esp
    7f31:	ff 74 24 18          	pushl  0x18(%esp)
    7f35:	ff 74 24 18          	pushl  0x18(%esp)
    7f39:	68 b5 2d 02 00       	push   $0x22db5
    7f3e:	e8 bc fb ff ff       	call   7aff <die>
    7f43:	83 c4 10             	add    $0x10,%esp
}
    7f46:	90                   	nop
    7f47:	83 c4 0c             	add    $0xc,%esp
    7f4a:	c3                   	ret    

00007f4b <do_stack_segment>:

void do_stack_segment(long esp, long error_code)
{
    7f4b:	83 ec 0c             	sub    $0xc,%esp
	die("stack segment", esp, error_code);
    7f4e:	83 ec 04             	sub    $0x4,%esp
    7f51:	ff 74 24 18          	pushl  0x18(%esp)
    7f55:	ff 74 24 18          	pushl  0x18(%esp)
    7f59:	68 c9 2d 02 00       	push   $0x22dc9
    7f5e:	e8 9c fb ff ff       	call   7aff <die>
    7f63:	83 c4 10             	add    $0x10,%esp
}
    7f66:	90                   	nop
    7f67:	83 c4 0c             	add    $0xc,%esp
    7f6a:	c3                   	ret    

00007f6b <do_coprocessor_error>:

void do_coprocessor_error(long esp, long error_code)
{
    7f6b:	83 ec 0c             	sub    $0xc,%esp
	if (last_task_used_math != current)
    7f6e:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    7f74:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    7f79:	39 c2                	cmp    %eax,%edx
    7f7b:	75 1a                	jne    7f97 <do_coprocessor_error+0x2c>
		return;
	die("coprocessor error", esp, error_code);
    7f7d:	83 ec 04             	sub    $0x4,%esp
    7f80:	ff 74 24 18          	pushl  0x18(%esp)
    7f84:	ff 74 24 18          	pushl  0x18(%esp)
    7f88:	68 d7 2d 02 00       	push   $0x22dd7
    7f8d:	e8 6d fb ff ff       	call   7aff <die>
    7f92:	83 c4 10             	add    $0x10,%esp
    7f95:	eb 01                	jmp    7f98 <do_coprocessor_error+0x2d>
		return;
    7f97:	90                   	nop
}
    7f98:	83 c4 0c             	add    $0xc,%esp
    7f9b:	c3                   	ret    

00007f9c <do_reserved>:

void do_reserved(long esp, long error_code)
{
    7f9c:	83 ec 0c             	sub    $0xc,%esp
	die("reserved (15,17-47) error", esp, error_code);
    7f9f:	83 ec 04             	sub    $0x4,%esp
    7fa2:	ff 74 24 18          	pushl  0x18(%esp)
    7fa6:	ff 74 24 18          	pushl  0x18(%esp)
    7faa:	68 e9 2d 02 00       	push   $0x22de9
    7faf:	e8 4b fb ff ff       	call   7aff <die>
    7fb4:	83 c4 10             	add    $0x10,%esp
}
    7fb7:	90                   	nop
    7fb8:	83 c4 0c             	add    $0xc,%esp
    7fbb:	c3                   	ret    

00007fbc <trap_init>:
// 下面是异常(陷阱)中断程序初始化子程序.设置它们的中断调用门(中断向量).
// set_trap_gate()与set_system_gate()都使用了中断描述符表IDT中的陷阱门(Trap Gate),它们之间的主要区别在于前者设置的特权级为0,
// 后者是3.因此断点陷阱中断int3,溢出中断overflow和边界出错中断bounds可以由任何程序调用.这两个函数均是嵌入式汇编宏程序,参见
// include/asm/system.h
void trap_init(void)
{
    7fbc:	53                   	push   %ebx
    7fbd:	83 ec 10             	sub    $0x10,%esp
	int i;

	set_trap_gate(0, &divide_error);							// 设置除操作出错的中断向量值.
    7fc0:	b9 b8 54 00 00       	mov    $0x54b8,%ecx
    7fc5:	bb bc 54 00 00       	mov    $0x54bc,%ebx
    7fca:	ba c3 82 00 00       	mov    $0x82c3,%edx
    7fcf:	b8 00 00 08 00       	mov    $0x80000,%eax
    7fd4:	66 89 d0             	mov    %dx,%ax
    7fd7:	66 ba 00 8f          	mov    $0x8f00,%dx
    7fdb:	89 01                	mov    %eax,(%ecx)
    7fdd:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(1, &debug);
    7fdf:	b9 c0 54 00 00       	mov    $0x54c0,%ecx
    7fe4:	bb c4 54 00 00       	mov    $0x54c4,%ebx
    7fe9:	ba f8 82 00 00       	mov    $0x82f8,%edx
    7fee:	b8 00 00 08 00       	mov    $0x80000,%eax
    7ff3:	66 89 d0             	mov    %dx,%ax
    7ff6:	66 ba 00 8f          	mov    $0x8f00,%dx
    7ffa:	89 01                	mov    %eax,(%ecx)
    7ffc:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(2, &nmi);
    7ffe:	b9 c8 54 00 00       	mov    $0x54c8,%ecx
    8003:	bb cc 54 00 00       	mov    $0x54cc,%ebx
    8008:	ba ff 82 00 00       	mov    $0x82ff,%edx
    800d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8012:	66 89 d0             	mov    %dx,%ax
    8015:	66 ba 00 8f          	mov    $0x8f00,%dx
    8019:	89 01                	mov    %eax,(%ecx)
    801b:	89 13                	mov    %edx,(%ebx)
	set_system_gate(3, &int3);									/* int3-5 can be called from all */
    801d:	b9 d0 54 00 00       	mov    $0x54d0,%ecx
    8022:	bb d4 54 00 00       	mov    $0x54d4,%ebx
    8027:	ba 06 83 00 00       	mov    $0x8306,%edx
    802c:	b8 00 00 08 00       	mov    $0x80000,%eax
    8031:	66 89 d0             	mov    %dx,%ax
    8034:	66 ba 00 ef          	mov    $0xef00,%dx
    8038:	89 01                	mov    %eax,(%ecx)
    803a:	89 13                	mov    %edx,(%ebx)
	set_system_gate(4, &overflow);
    803c:	b9 d8 54 00 00       	mov    $0x54d8,%ecx
    8041:	bb dc 54 00 00       	mov    $0x54dc,%ebx
    8046:	ba 0d 83 00 00       	mov    $0x830d,%edx
    804b:	b8 00 00 08 00       	mov    $0x80000,%eax
    8050:	66 89 d0             	mov    %dx,%ax
    8053:	66 ba 00 ef          	mov    $0xef00,%dx
    8057:	89 01                	mov    %eax,(%ecx)
    8059:	89 13                	mov    %edx,(%ebx)
	set_system_gate(5, &bounds);
    805b:	b9 e0 54 00 00       	mov    $0x54e0,%ecx
    8060:	bb e4 54 00 00       	mov    $0x54e4,%ebx
    8065:	ba 14 83 00 00       	mov    $0x8314,%edx
    806a:	b8 00 00 08 00       	mov    $0x80000,%eax
    806f:	66 89 d0             	mov    %dx,%ax
    8072:	66 ba 00 ef          	mov    $0xef00,%dx
    8076:	89 01                	mov    %eax,(%ecx)
    8078:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(6, &invalid_op);
    807a:	b9 e8 54 00 00       	mov    $0x54e8,%ecx
    807f:	bb ec 54 00 00       	mov    $0x54ec,%ebx
    8084:	ba 1b 83 00 00       	mov    $0x831b,%edx
    8089:	b8 00 00 08 00       	mov    $0x80000,%eax
    808e:	66 89 d0             	mov    %dx,%ax
    8091:	66 ba 00 8f          	mov    $0x8f00,%dx
    8095:	89 01                	mov    %eax,(%ecx)
    8097:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(7, &device_not_available);					// 函数未实现
    8099:	b9 f0 54 00 00       	mov    $0x54f0,%ecx
    809e:	bb f4 54 00 00       	mov    $0x54f4,%ebx
    80a3:	ba dc 79 00 00       	mov    $0x79dc,%edx
    80a8:	b8 00 00 08 00       	mov    $0x80000,%eax
    80ad:	66 89 d0             	mov    %dx,%ax
    80b0:	66 ba 00 8f          	mov    $0x8f00,%dx
    80b4:	89 01                	mov    %eax,(%ecx)
    80b6:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(8, &double_fault);
    80b8:	b9 f8 54 00 00       	mov    $0x54f8,%ecx
    80bd:	bb fc 54 00 00       	mov    $0x54fc,%ebx
    80c2:	ba 45 83 00 00       	mov    $0x8345,%edx
    80c7:	b8 00 00 08 00       	mov    $0x80000,%eax
    80cc:	66 89 d0             	mov    %dx,%ax
    80cf:	66 ba 00 8f          	mov    $0x8f00,%dx
    80d3:	89 01                	mov    %eax,(%ecx)
    80d5:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(9, &coprocessor_segment_overrun);
    80d7:	b9 00 55 00 00       	mov    $0x5500,%ecx
    80dc:	bb 04 55 00 00       	mov    $0x5504,%ebx
    80e1:	ba 22 83 00 00       	mov    $0x8322,%edx
    80e6:	b8 00 00 08 00       	mov    $0x80000,%eax
    80eb:	66 89 d0             	mov    %dx,%ax
    80ee:	66 ba 00 8f          	mov    $0x8f00,%dx
    80f2:	89 01                	mov    %eax,(%ecx)
    80f4:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(10, &invalid_TSS);
    80f6:	b9 08 55 00 00       	mov    $0x5508,%ecx
    80fb:	bb 0c 55 00 00       	mov    $0x550c,%ebx
    8100:	ba 7c 83 00 00       	mov    $0x837c,%edx
    8105:	b8 00 00 08 00       	mov    $0x80000,%eax
    810a:	66 89 d0             	mov    %dx,%ax
    810d:	66 ba 00 8f          	mov    $0x8f00,%dx
    8111:	89 01                	mov    %eax,(%ecx)
    8113:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(11, &segment_not_present);
    8115:	b9 10 55 00 00       	mov    $0x5510,%ecx
    811a:	bb 14 55 00 00       	mov    $0x5514,%ebx
    811f:	ba 83 83 00 00       	mov    $0x8383,%edx
    8124:	b8 00 00 08 00       	mov    $0x80000,%eax
    8129:	66 89 d0             	mov    %dx,%ax
    812c:	66 ba 00 8f          	mov    $0x8f00,%dx
    8130:	89 01                	mov    %eax,(%ecx)
    8132:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(12, &stack_segment);
    8134:	b9 18 55 00 00       	mov    $0x5518,%ecx
    8139:	bb 1c 55 00 00       	mov    $0x551c,%ebx
    813e:	ba 8a 83 00 00       	mov    $0x838a,%edx
    8143:	b8 00 00 08 00       	mov    $0x80000,%eax
    8148:	66 89 d0             	mov    %dx,%ax
    814b:	66 ba 00 8f          	mov    $0x8f00,%dx
    814f:	89 01                	mov    %eax,(%ecx)
    8151:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(13, &general_protection);
    8153:	b9 20 55 00 00       	mov    $0x5520,%ecx
    8158:	bb 24 55 00 00       	mov    $0x5524,%ebx
    815d:	ba 91 83 00 00       	mov    $0x8391,%edx
    8162:	b8 00 00 08 00       	mov    $0x80000,%eax
    8167:	66 89 d0             	mov    %dx,%ax
    816a:	66 ba 00 8f          	mov    $0x8f00,%dx
    816e:	89 01                	mov    %eax,(%ecx)
    8170:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
    8172:	b9 28 55 00 00       	mov    $0x5528,%ecx
    8177:	bb 2c 55 00 00       	mov    $0x552c,%ebx
    817c:	ba 03 d3 00 00       	mov    $0xd303,%edx
    8181:	b8 00 00 08 00       	mov    $0x80000,%eax
    8186:	66 89 d0             	mov    %dx,%ax
    8189:	66 ba 00 8f          	mov    $0x8f00,%dx
    818d:	89 01                	mov    %eax,(%ecx)
    818f:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(15, &reserved);
    8191:	b9 30 55 00 00       	mov    $0x5530,%ecx
    8196:	bb 34 55 00 00       	mov    $0x5534,%ebx
    819b:	ba 29 83 00 00       	mov    $0x8329,%edx
    81a0:	b8 00 00 08 00       	mov    $0x80000,%eax
    81a5:	66 89 d0             	mov    %dx,%ax
    81a8:	66 ba 00 8f          	mov    $0x8f00,%dx
    81ac:	89 01                	mov    %eax,(%ecx)
    81ae:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
    81b0:	b9 38 55 00 00       	mov    $0x5538,%ecx
    81b5:	bb 3c 55 00 00       	mov    $0x553c,%ebx
    81ba:	ba b8 79 00 00       	mov    $0x79b8,%edx
    81bf:	b8 00 00 08 00       	mov    $0x80000,%eax
    81c4:	66 89 d0             	mov    %dx,%ax
    81c7:	66 ba 00 8f          	mov    $0x8f00,%dx
    81cb:	89 01                	mov    %eax,(%ecx)
    81cd:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(17, &alignment_check);
    81cf:	b9 40 55 00 00       	mov    $0x5540,%ecx
    81d4:	bb 44 55 00 00       	mov    $0x5544,%ebx
    81d9:	ba 98 83 00 00       	mov    $0x8398,%edx
    81de:	b8 00 00 08 00       	mov    $0x80000,%eax
    81e3:	66 89 d0             	mov    %dx,%ax
    81e6:	66 ba 00 8f          	mov    $0x8f00,%dx
    81ea:	89 01                	mov    %eax,(%ecx)
    81ec:	89 13                	mov    %edx,(%ebx)
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    81ee:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
    81f5:	00 
    81f6:	eb 36                	jmp    822e <trap_init+0x272>
		set_trap_gate(i, &reserved);
    81f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    81fc:	c1 e0 03             	shl    $0x3,%eax
    81ff:	8d 88 b8 54 00 00    	lea    0x54b8(%eax),%ecx
    8205:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8209:	c1 e0 03             	shl    $0x3,%eax
    820c:	05 b8 54 00 00       	add    $0x54b8,%eax
    8211:	8d 58 04             	lea    0x4(%eax),%ebx
    8214:	ba 29 83 00 00       	mov    $0x8329,%edx
    8219:	b8 00 00 08 00       	mov    $0x80000,%eax
    821e:	66 89 d0             	mov    %dx,%ax
    8221:	66 ba 00 8f          	mov    $0x8f00,%dx
    8225:	89 01                	mov    %eax,(%ecx)
    8227:	89 13                	mov    %edx,(%ebx)
	for (i = 18; i < 48; i++)
    8229:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    822e:	83 7c 24 0c 2f       	cmpl   $0x2f,0xc(%esp)
    8233:	7e c3                	jle    81f8 <trap_init+0x23c>
	// 设置协处理器中断0x2d(45)陷阱门描述符,并允许其产生中断请求.设置并行口中断描述符.
	set_trap_gate(45, &irq13);
    8235:	b9 20 56 00 00       	mov    $0x5620,%ecx
    823a:	bb 24 56 00 00       	mov    $0x5624,%ebx
    823f:	ba 30 83 00 00       	mov    $0x8330,%edx
    8244:	b8 00 00 08 00       	mov    $0x80000,%eax
    8249:	66 89 d0             	mov    %dx,%ax
    824c:	66 ba 00 8f          	mov    $0x8f00,%dx
    8250:	89 01                	mov    %eax,(%ecx)
    8252:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21)&0xfb, 0x21);								// 允许8259A主芯片的IRQ2中断请求(连接从芯片)
    8254:	b8 21 00 00 00       	mov    $0x21,%eax
    8259:	89 c2                	mov    %eax,%edx
    825b:	ec                   	in     (%dx),%al
    825c:	eb 00                	jmp    825e <trap_init+0x2a2>
    825e:	eb 00                	jmp    8260 <trap_init+0x2a4>
    8260:	88 44 24 0b          	mov    %al,0xb(%esp)
    8264:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    8269:	0f b6 c0             	movzbl %al,%eax
    826c:	25 fb 00 00 00       	and    $0xfb,%eax
    8271:	ba 21 00 00 00       	mov    $0x21,%edx
    8276:	ee                   	out    %al,(%dx)
    8277:	eb 00                	jmp    8279 <trap_init+0x2bd>
    8279:	eb 00                	jmp    827b <trap_init+0x2bf>
	outb(inb_p(0xA1)&0xdf, 0xA1);								// 允许8259A从芯片的IRQ13中断请求(协处理器中断)
    827b:	b8 a1 00 00 00       	mov    $0xa1,%eax
    8280:	89 c2                	mov    %eax,%edx
    8282:	ec                   	in     (%dx),%al
    8283:	eb 00                	jmp    8285 <trap_init+0x2c9>
    8285:	eb 00                	jmp    8287 <trap_init+0x2cb>
    8287:	88 44 24 0a          	mov    %al,0xa(%esp)
    828b:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
    8290:	0f b6 c0             	movzbl %al,%eax
    8293:	25 df 00 00 00       	and    $0xdf,%eax
    8298:	ba a1 00 00 00       	mov    $0xa1,%edx
    829d:	ee                   	out    %al,(%dx)
	set_trap_gate(39, &parallel_interrupt);						// 设置并行口1的中断0x27陷阱门描述符.
    829e:	b9 f0 55 00 00       	mov    $0x55f0,%ecx
    82a3:	bb f4 55 00 00       	mov    $0x55f4,%ebx
    82a8:	ba f8 7a 00 00       	mov    $0x7af8,%edx
    82ad:	b8 00 00 08 00       	mov    $0x80000,%eax
    82b2:	66 89 d0             	mov    %dx,%ax
    82b5:	66 ba 00 8f          	mov    $0x8f00,%dx
    82b9:	89 01                	mov    %eax,(%ecx)
    82bb:	89 13                	mov    %edx,(%ebx)
}
    82bd:	90                   	nop
    82be:	83 c4 10             	add    $0x10,%esp
    82c1:	5b                   	pop    %ebx
    82c2:	c3                   	ret    

000082c3 <divide_error>:
    82c3:	68 6d 7d 00 00       	push   $0x7d6d

000082c8 <no_error_code>:
    82c8:	87 04 24             	xchg   %eax,(%esp)
    82cb:	53                   	push   %ebx
    82cc:	51                   	push   %ecx
    82cd:	52                   	push   %edx
    82ce:	57                   	push   %edi
    82cf:	56                   	push   %esi
    82d0:	55                   	push   %ebp
    82d1:	1e                   	push   %ds
    82d2:	06                   	push   %es
    82d3:	0f a0                	push   %fs
    82d5:	6a 00                	push   $0x0
    82d7:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    82db:	52                   	push   %edx
    82dc:	ba 10 00 00 00       	mov    $0x10,%edx
    82e1:	8e da                	mov    %edx,%ds
    82e3:	8e c2                	mov    %edx,%es
    82e5:	8e e2                	mov    %edx,%fs
    82e7:	ff d0                	call   *%eax
    82e9:	83 c4 08             	add    $0x8,%esp
    82ec:	0f a1                	pop    %fs
    82ee:	07                   	pop    %es
    82ef:	1f                   	pop    %ds
    82f0:	5d                   	pop    %ebp
    82f1:	5e                   	pop    %esi
    82f2:	5f                   	pop    %edi
    82f3:	5a                   	pop    %edx
    82f4:	59                   	pop    %ecx
    82f5:	5b                   	pop    %ebx
    82f6:	58                   	pop    %eax
    82f7:	cf                   	iret   

000082f8 <debug>:
    82f8:	68 8d 7d 00 00       	push   $0x7d8d
    82fd:	eb c9                	jmp    82c8 <no_error_code>

000082ff <nmi>:
    82ff:	68 2b 7e 00 00       	push   $0x7e2b
    8304:	eb c2                	jmp    82c8 <no_error_code>

00008306 <int3>:
    8306:	68 8d 7d 00 00       	push   $0x7d8d
    830b:	eb bb                	jmp    82c8 <no_error_code>

0000830d <overflow>:
    830d:	68 6b 7e 00 00       	push   $0x7e6b
    8312:	eb b4                	jmp    82c8 <no_error_code>

00008314 <bounds>:
    8314:	68 8b 7e 00 00       	push   $0x7e8b
    8319:	eb ad                	jmp    82c8 <no_error_code>

0000831b <invalid_op>:
    831b:	68 ab 7e 00 00       	push   $0x7eab
    8320:	eb a6                	jmp    82c8 <no_error_code>

00008322 <coprocessor_segment_overrun>:
    8322:	68 eb 7e 00 00       	push   $0x7eeb
    8327:	eb 9f                	jmp    82c8 <no_error_code>

00008329 <reserved>:
    8329:	68 9c 7f 00 00       	push   $0x7f9c
    832e:	eb 98                	jmp    82c8 <no_error_code>

00008330 <irq13>:
    8330:	50                   	push   %eax
    8331:	30 c0                	xor    %al,%al
    8333:	e6 f0                	out    %al,$0xf0
    8335:	b0 20                	mov    $0x20,%al
    8337:	e6 20                	out    %al,$0x20
    8339:	eb 00                	jmp    833b <irq13+0xb>
    833b:	eb 00                	jmp    833d <irq13+0xd>
    833d:	e6 a0                	out    %al,$0xa0
    833f:	58                   	pop    %eax
    8340:	e9 73 f6 ff ff       	jmp    79b8 <coprocessor_error>

00008345 <double_fault>:
    8345:	68 0d 7d 00 00       	push   $0x7d0d

0000834a <error_code>:
    834a:	87 44 24 04          	xchg   %eax,0x4(%esp)
    834e:	87 1c 24             	xchg   %ebx,(%esp)
    8351:	51                   	push   %ecx
    8352:	52                   	push   %edx
    8353:	57                   	push   %edi
    8354:	56                   	push   %esi
    8355:	55                   	push   %ebp
    8356:	1e                   	push   %ds
    8357:	06                   	push   %es
    8358:	0f a0                	push   %fs
    835a:	50                   	push   %eax
    835b:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    835f:	50                   	push   %eax
    8360:	b8 10 00 00 00       	mov    $0x10,%eax
    8365:	8e d8                	mov    %eax,%ds
    8367:	8e c0                	mov    %eax,%es
    8369:	8e e0                	mov    %eax,%fs
    836b:	ff d3                	call   *%ebx
    836d:	83 c4 08             	add    $0x8,%esp
    8370:	0f a1                	pop    %fs
    8372:	07                   	pop    %es
    8373:	1f                   	pop    %ds
    8374:	5d                   	pop    %ebp
    8375:	5e                   	pop    %esi
    8376:	5f                   	pop    %edi
    8377:	5a                   	pop    %edx
    8378:	59                   	pop    %ecx
    8379:	5b                   	pop    %ebx
    837a:	58                   	pop    %eax
    837b:	cf                   	iret   

0000837c <invalid_TSS>:
    837c:	68 0b 7f 00 00       	push   $0x7f0b
    8381:	eb c7                	jmp    834a <error_code>

00008383 <segment_not_present>:
    8383:	68 2b 7f 00 00       	push   $0x7f2b
    8388:	eb c0                	jmp    834a <error_code>

0000838a <stack_segment>:
    838a:	68 4b 7f 00 00       	push   $0x7f4b
    838f:	eb b9                	jmp    834a <error_code>

00008391 <general_protection>:
    8391:	68 2d 7d 00 00       	push   $0x7d2d
    8396:	eb b2                	jmp    834a <error_code>

00008398 <alignment_check>:
    8398:	68 4d 7d 00 00       	push   $0x7d4d
    839d:	eb ab                	jmp    834a <error_code>

0000839f <verify_area>:
// 可以通过设置该标志来达到使用本函数同样的目的.该函数对当前进程逻辑地址从addr到addr + size这一段范围以页为单位执行写操作前
// 的检测操作.由于检测判断是以页面为单位进行操作,因此程序首先需要找出addr所在页面开始地址start,然后start加上进程数据段基址,
// 使这个start变换成CPU 4GB线性空间中的地址.最后循环调用write_verify()对指定大小的内存空间进行写前验证.若页面是只读的,
// 则执行共享检验和复制页面操作(写时复制).
void verify_area(void * addr, int size)
{
    839f:	53                   	push   %ebx
    83a0:	83 ec 18             	sub    $0x18,%esp
	unsigned long start;

	// 首先将起始地址start调整为其所在页的左边界开始位置,同时相应地调整验证区域大小.下句中的start & 0xfff用来获得指定起始位置addr
	// (也即start)在所在页面中的偏移值,原验证范围size加上这个偏移值即扩展成以addr所在页面起始位置开始的范围值.因此在30行上也需要
	// 把验证开始位置start调整成页面边界值.
	start = (unsigned long) addr;
    83a3:	8b 44 24 20          	mov    0x20(%esp),%eax
    83a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	size += start & 0xfff;
    83ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    83af:	25 ff 0f 00 00       	and    $0xfff,%eax
    83b4:	89 c2                	mov    %eax,%edx
    83b6:	8b 44 24 24          	mov    0x24(%esp),%eax
    83ba:	01 d0                	add    %edx,%eax
    83bc:	89 44 24 24          	mov    %eax,0x24(%esp)
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
    83c0:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    83c7:	ff 
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
    83c8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    83cd:	05 a8 03 00 00       	add    $0x3a8,%eax
    83d2:	83 c0 02             	add    $0x2,%eax
    83d5:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    83db:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    83e1:	8d 5a 04             	lea    0x4(%edx),%ebx
    83e4:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    83ea:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    83f0:	83 c1 07             	add    $0x7,%ecx
    83f3:	8a 31                	mov    (%ecx),%dh
    83f5:	8a 13                	mov    (%ebx),%dl
    83f7:	c1 e2 10             	shl    $0x10,%edx
    83fa:	66 8b 10             	mov    (%eax),%dx
    83fd:	89 d0                	mov    %edx,%eax
    83ff:	89 44 24 08          	mov    %eax,0x8(%esp)
    8403:	8b 44 24 08          	mov    0x8(%esp),%eax
    8407:	01 44 24 0c          	add    %eax,0xc(%esp)
	while (size > 0) {
    840b:	eb 1f                	jmp    842c <verify_area+0x8d>
		size -= 4096;
    840d:	81 6c 24 24 00 10 00 	subl   $0x1000,0x24(%esp)
    8414:	00 
		write_verify(start);				// include/linux/sched.h
    8415:	83 ec 0c             	sub    $0xc,%esp
    8418:	ff 74 24 18          	pushl  0x18(%esp)
    841c:	e8 64 3f 00 00       	call   c385 <write_verify>
    8421:	83 c4 10             	add    $0x10,%esp
		start += 4096;
    8424:	81 44 24 0c 00 10 00 	addl   $0x1000,0xc(%esp)
    842b:	00 
	while (size > 0) {
    842c:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    8431:	7f da                	jg     840d <verify_area+0x6e>
	}
}
    8433:	90                   	nop
    8434:	83 c4 18             	add    $0x18,%esp
    8437:	5b                   	pop    %ebx
    8438:	c3                   	ret    

00008439 <copy_mem>:
// 复制内存页表.
// 参数nr是新任务号;p是新任务数据结构指针.该函数为新任务在线性地址空间中设置代码段和数据段基址,限长,并复制页表.由于Linux系统采用写时
// 复制(copy on write)技术,因此这里仅为新进程设置自己的页目录表项和页表项,而没有实际为新进程分配物理内存页面.此时新进程与其父进程
// 共享所有内存页面.操作成功返回0,否则返回出错号.
int copy_mem(int nr, struct task_struct * p)
{
    8439:	56                   	push   %esi
    843a:	53                   	push   %ebx
    843b:	83 ec 34             	sub    $0x34,%esp

	// 首先取当前进程局部描述符表中代码段描述符和数据段描述符项中的段限长(字节数).
	// 0x0f是代码段选择符;0x17是数据段选择符.然后取当前进程代码段和数据段的线性地址空间中的基地址.由于Linux0.12内核还不支持代码和数据段分立的情况,
	// 因此这里需要检查代码段和数据段基址是否都相同,并且要求数据段的长度至少不小于代码段的长度,否则内核显示出错信息,并停止运行.
	// get_limit()和get_base()定义在include/linux/sched.h.
	code_limit = get_limit(0x0f);
    843e:	b8 0f 00 00 00       	mov    $0xf,%eax
    8443:	0f 03 c0             	lsl    %ax,%eax
    8446:	40                   	inc    %eax
    8447:	89 44 24 2c          	mov    %eax,0x2c(%esp)
    844b:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    844f:	89 44 24 28          	mov    %eax,0x28(%esp)
	data_limit = get_limit(0x17);
    8453:	b8 17 00 00 00       	mov    $0x17,%eax
    8458:	0f 03 c0             	lsl    %ax,%eax
    845b:	40                   	inc    %eax
    845c:	89 44 24 24          	mov    %eax,0x24(%esp)
    8460:	8b 44 24 24          	mov    0x24(%esp),%eax
    8464:	89 44 24 20          	mov    %eax,0x20(%esp)
	old_code_base = get_base(current->ldt[1]);
    8468:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    846d:	05 a0 03 00 00       	add    $0x3a0,%eax
    8472:	83 c0 02             	add    $0x2,%eax
    8475:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    847b:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    8481:	8d 5a 04             	lea    0x4(%edx),%ebx
    8484:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    848a:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
    8490:	83 c1 07             	add    $0x7,%ecx
    8493:	8a 31                	mov    (%ecx),%dh
    8495:	8a 13                	mov    (%ebx),%dl
    8497:	c1 e2 10             	shl    $0x10,%edx
    849a:	66 8b 10             	mov    (%eax),%dx
    849d:	89 d0                	mov    %edx,%eax
    849f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    84a3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    84a7:	89 44 24 18          	mov    %eax,0x18(%esp)
	old_data_base = get_base(current->ldt[2]);
    84ab:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    84b0:	05 a8 03 00 00       	add    $0x3a8,%eax
    84b5:	83 c0 02             	add    $0x2,%eax
    84b8:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    84be:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    84c4:	8d 72 04             	lea    0x4(%edx),%esi
    84c7:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
    84cd:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    84d3:	83 c1 07             	add    $0x7,%ecx
    84d6:	8a 31                	mov    (%ecx),%dh
    84d8:	8a 16                	mov    (%esi),%dl
    84da:	c1 e2 10             	shl    $0x10,%edx
    84dd:	66 8b 10             	mov    (%eax),%dx
    84e0:	89 d0                	mov    %edx,%eax
    84e2:	89 44 24 14          	mov    %eax,0x14(%esp)
    84e6:	8b 44 24 14          	mov    0x14(%esp),%eax
    84ea:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (old_data_base != old_code_base)
    84ee:	8b 44 24 10          	mov    0x10(%esp),%eax
    84f2:	3b 44 24 18          	cmp    0x18(%esp),%eax
    84f6:	74 10                	je     8508 <copy_mem+0xcf>
		panic("We don't support separate I&D");
    84f8:	83 ec 0c             	sub    $0xc,%esp
    84fb:	68 04 2e 02 00       	push   $0x22e04
    8500:	e8 02 07 00 00       	call   8c07 <panic>
    8505:	83 c4 10             	add    $0x10,%esp
	if (data_limit < code_limit)
    8508:	8b 44 24 20          	mov    0x20(%esp),%eax
    850c:	3b 44 24 28          	cmp    0x28(%esp),%eax
    8510:	73 10                	jae    8522 <copy_mem+0xe9>
		panic("Bad data_limit");
    8512:	83 ec 0c             	sub    $0xc,%esp
    8515:	68 22 2e 02 00       	push   $0x22e22
    851a:	e8 e8 06 00 00       	call   8c07 <panic>
    851f:	83 c4 10             	add    $0x10,%esp
	// 然后设置创建中的新进程在线性地址空间中的基地址等于(64MB*其任务号),并用该值设置新进程局部描述符表中段描述符中的基地址.接着设置新进程的页目录
	// 表项和页表项,即复制当前进程(父进程)的页目录表项和页表项.此时子进程共享父进程的内存页面.
	// 正常情况下copy_page_tables()返回0,否则表示出错,则释放刚申请的页表项.
	new_data_base = new_code_base = nr * TASK_SIZE;
    8522:	8b 44 24 40          	mov    0x40(%esp),%eax
    8526:	c1 e0 1a             	shl    $0x1a,%eax
    8529:	89 44 24 0c          	mov    %eax,0xc(%esp)
    852d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8531:	89 44 24 08          	mov    %eax,0x8(%esp)
	p->start_code = new_code_base;
    8535:	8b 44 24 44          	mov    0x44(%esp),%eax
    8539:	8b 54 24 0c          	mov    0xc(%esp),%edx
    853d:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)
	set_base(p->ldt[1], new_code_base);
    8543:	8b 44 24 44          	mov    0x44(%esp),%eax
    8547:	05 a0 03 00 00       	add    $0x3a0,%eax
    854c:	8d 48 02             	lea    0x2(%eax),%ecx
    854f:	8b 44 24 44          	mov    0x44(%esp),%eax
    8553:	05 a0 03 00 00       	add    $0x3a0,%eax
    8558:	8d 58 04             	lea    0x4(%eax),%ebx
    855b:	8b 44 24 44          	mov    0x44(%esp),%eax
    855f:	05 a0 03 00 00       	add    $0x3a0,%eax
    8564:	8d 70 07             	lea    0x7(%eax),%esi
    8567:	8b 44 24 0c          	mov    0xc(%esp),%eax
    856b:	89 c2                	mov    %eax,%edx
    856d:	66 89 11             	mov    %dx,(%ecx)
    8570:	c1 ca 10             	ror    $0x10,%edx
    8573:	88 13                	mov    %dl,(%ebx)
    8575:	88 36                	mov    %dh,(%esi)
    8577:	89 d0                	mov    %edx,%eax
    8579:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_base(p->ldt[2], new_data_base);
    857d:	8b 44 24 44          	mov    0x44(%esp),%eax
    8581:	05 a8 03 00 00       	add    $0x3a8,%eax
    8586:	8d 48 02             	lea    0x2(%eax),%ecx
    8589:	8b 44 24 44          	mov    0x44(%esp),%eax
    858d:	05 a8 03 00 00       	add    $0x3a8,%eax
    8592:	8d 58 04             	lea    0x4(%eax),%ebx
    8595:	8b 44 24 44          	mov    0x44(%esp),%eax
    8599:	05 a8 03 00 00       	add    $0x3a8,%eax
    859e:	8d 70 07             	lea    0x7(%eax),%esi
    85a1:	8b 44 24 08          	mov    0x8(%esp),%eax
    85a5:	89 c2                	mov    %eax,%edx
    85a7:	66 89 11             	mov    %dx,(%ecx)
    85aa:	c1 ca 10             	ror    $0x10,%edx
    85ad:	88 13                	mov    %dl,(%ebx)
    85af:	88 36                	mov    %dh,(%esi)
    85b1:	89 d0                	mov    %edx,%eax
    85b3:	89 04 24             	mov    %eax,(%esp)
	if (copy_page_tables(old_data_base, new_data_base, data_limit)) {
    85b6:	8b 44 24 20          	mov    0x20(%esp),%eax
    85ba:	83 ec 04             	sub    $0x4,%esp
    85bd:	50                   	push   %eax
    85be:	ff 74 24 10          	pushl  0x10(%esp)
    85c2:	ff 74 24 1c          	pushl  0x1c(%esp)
    85c6:	e8 b6 38 00 00       	call   be81 <copy_page_tables>
    85cb:	83 c4 10             	add    $0x10,%esp
    85ce:	85 c0                	test   %eax,%eax
    85d0:	74 1a                	je     85ec <copy_mem+0x1b3>
		free_page_tables(new_data_base, data_limit);
    85d2:	83 ec 08             	sub    $0x8,%esp
    85d5:	ff 74 24 28          	pushl  0x28(%esp)
    85d9:	ff 74 24 14          	pushl  0x14(%esp)
    85dd:	e8 6a 37 00 00       	call   bd4c <free_page_tables>
    85e2:	83 c4 10             	add    $0x10,%esp
		return -ENOMEM;
    85e5:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    85ea:	eb 05                	jmp    85f1 <copy_mem+0x1b8>
	}
	return 0;
    85ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
    85f1:	83 c4 34             	add    $0x34,%esp
    85f4:	5b                   	pop    %ebx
    85f5:	5e                   	pop    %esi
    85f6:	c3                   	ret    

000085f7 <copy_process>:
// 其中参数nr是调用find_empty_process()分配的任务数组项号.
int copy_process(int nr, long ebp, long edi, long esi, long gs, long none,
		long ebx, long ecx, long edx, long orig_eax,
		long fs, long es, long ds,
		long eip, long cs, long eflags, long esp, long ss)
{
    85f7:	55                   	push   %ebp
    85f8:	57                   	push   %edi
    85f9:	56                   	push   %esi
    85fa:	53                   	push   %ebx
    85fb:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct file *f;

	// 首先为新任务数据结构分配内存.如果内存分配出错,则返回出错码并退出.然后将新任务结构指针放入任务数组的nr项中.其中nr为任务号,由前面
	// find_empty_process()返回.接着把当前进程任务结构复制到刚申请到的内存页面p开始处.
	p = (struct task_struct *) get_free_page();
    85fe:	e8 5e 4a 00 00       	call   d061 <get_free_page>
    8603:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!p)
    8607:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    860c:	75 0a                	jne    8618 <copy_process+0x21>
		return -EAGAIN;
    860e:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8613:	e9 34 05 00 00       	jmp    8b4c <copy_process+0x555>
	task[nr] = p;
    8618:	8b 44 24 30          	mov    0x30(%esp),%eax
    861c:	8b 54 24 08          	mov    0x8(%esp),%edx
    8620:	89 14 85 c0 f1 02 00 	mov    %edx,0x2f1c0(,%eax,4)
	*p = *current;							/* NOTE! this doesn't copy the supervisor stack */	/* 注意!这样不会复制超级用户堆栈(只复制进程结构) */
    8627:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    862c:	8b 54 24 08          	mov    0x8(%esp),%edx
    8630:	89 c3                	mov    %eax,%ebx
    8632:	b8 21 01 00 00       	mov    $0x121,%eax
    8637:	89 d7                	mov    %edx,%edi
    8639:	89 de                	mov    %ebx,%esi
    863b:	89 c1                	mov    %eax,%ecx
    863d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	//	memcpy(p, current, sizeof(struct task_struct));
	// 随后对复制来的进程结构内容进行一些修改,作为新进程的任务结构.先将新进程的状态置为不可中断等待状态,以防止内核调试其执行.然后设置新进程
	// 的进程号pid,并初始化进程运行时间片值等于其priorty值(一般为16个嘀嗒).接着复位新进程的信号位图,报警定时值,会话(session)领导标志
	// leader,进程及其子进程在内核和用户态运行时间统计值,还设置进程开始运行的系统时间start_time.
	p->state = TASK_UNINTERRUPTIBLE;
    863f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8643:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	p->pid = last_pid;						// 新进程号.也由find_empty_process()得到.
    8649:	8b 15 48 fe 02 00    	mov    0x2fe48,%edx
    864f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8653:	89 90 2c 02 00 00    	mov    %edx,0x22c(%eax)
	p->counter = p->priority;				// 运行时间片值(嘀嗒数).
    8659:	8b 44 24 08          	mov    0x8(%esp),%eax
    865d:	8b 50 08             	mov    0x8(%eax),%edx
    8660:	8b 44 24 08          	mov    0x8(%esp),%eax
    8664:	89 50 04             	mov    %edx,0x4(%eax)
	p->signal = 0;							// 信号位图.
    8667:	8b 44 24 08          	mov    0x8(%esp),%eax
    866b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	p->alarm = 0;							// 报警定时值(嘀嗒数).
    8672:	8b 44 24 08          	mov    0x8(%esp),%eax
    8676:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    867d:	00 00 00 
	p->leader = 0;							/* process leadership doesn't inherit */	/* 进程的领导权是不能继承的 */
    8680:	8b 44 24 08          	mov    0x8(%esp),%eax
    8684:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
    868b:	00 00 00 
	p->utime = p->stime = 0;				// 用户态时间和核心态运行时间.
    868e:	8b 44 24 08          	mov    0x8(%esp),%eax
    8692:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
    8699:	00 00 00 
    869c:	8b 44 24 08          	mov    0x8(%esp),%eax
    86a0:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    86a6:	8b 44 24 08          	mov    0x8(%esp),%eax
    86aa:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
	p->cutime = p->cstime = 0;				// 子进程用户态和核心态运行时间.
    86b0:	8b 44 24 08          	mov    0x8(%esp),%eax
    86b4:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
    86bb:	00 00 00 
    86be:	8b 44 24 08          	mov    0x8(%esp),%eax
    86c2:	8b 90 ec 02 00 00    	mov    0x2ec(%eax),%edx
    86c8:	8b 44 24 08          	mov    0x8(%esp),%eax
    86cc:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
	p->start_time = jiffies;				// 进程开始运行时间(当前时间滴答数).
    86d2:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    86d7:	89 c2                	mov    %eax,%edx
    86d9:	8b 44 24 08          	mov    0x8(%esp),%eax
    86dd:	89 90 f0 02 00 00    	mov    %edx,0x2f0(%eax)
	// 再修改任务状态段TSS数据.由于系统给任务结构p分配了1页新内存,所以(PAGE_SIZE + (long) p)让esp0正好指向该页顶端.ss0:esp0用作程序在内核
	// 态执行时的栈.另外,在第3章中我们已经知道,每个任务在GDT表中都有两个段描述符,一个是任务的TSS段描述符,另一个是任务的LDT表段描述符.下面语句就是
	// 把GDT中本任务LDT段描述符的选择符保存在本任务的TSS段.当CPU执行切换任务时,会自动从TSS中把LDT段描述符的选择符加载到ldtr寄存器中.
	p->tss.back_link = 0;
    86e3:	8b 44 24 08          	mov    0x8(%esp),%eax
    86e7:	c7 80 b0 03 00 00 00 	movl   $0x0,0x3b0(%eax)
    86ee:	00 00 00 
	p->tss.esp0 = PAGE_SIZE + (long) p;		// 任务内核态栈指针.
    86f1:	8b 44 24 08          	mov    0x8(%esp),%eax
    86f5:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
    86fb:	8b 44 24 08          	mov    0x8(%esp),%eax
    86ff:	89 90 b4 03 00 00    	mov    %edx,0x3b4(%eax)
	p->tss.ss0 = 0x10;              		// 内核态栈的段选择符(与内核数据段相同).
    8705:	8b 44 24 08          	mov    0x8(%esp),%eax
    8709:	c7 80 b8 03 00 00 10 	movl   $0x10,0x3b8(%eax)
    8710:	00 00 00 
	p->tss.eip = eip;						// 指令代码指针.
    8713:	8b 44 24 08          	mov    0x8(%esp),%eax
    8717:	8b 54 24 64          	mov    0x64(%esp),%edx
    871b:	89 90 d0 03 00 00    	mov    %edx,0x3d0(%eax)
	p->tss.eflags = eflags;					// 标志寄存器.
    8721:	8b 44 24 08          	mov    0x8(%esp),%eax
    8725:	8b 54 24 6c          	mov    0x6c(%esp),%edx
    8729:	89 90 d4 03 00 00    	mov    %edx,0x3d4(%eax)
	p->tss.eax = 0;							// 这是当fork()返回时新进程会返回0的原因所在.
    872f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8733:	c7 80 d8 03 00 00 00 	movl   $0x0,0x3d8(%eax)
    873a:	00 00 00 
	p->tss.ecx = ecx;
    873d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8741:	8b 54 24 4c          	mov    0x4c(%esp),%edx
    8745:	89 90 dc 03 00 00    	mov    %edx,0x3dc(%eax)
	p->tss.edx = edx;
    874b:	8b 44 24 08          	mov    0x8(%esp),%eax
    874f:	8b 54 24 50          	mov    0x50(%esp),%edx
    8753:	89 90 e0 03 00 00    	mov    %edx,0x3e0(%eax)
	p->tss.ebx = ebx;
    8759:	8b 44 24 08          	mov    0x8(%esp),%eax
    875d:	8b 54 24 48          	mov    0x48(%esp),%edx
    8761:	89 90 e4 03 00 00    	mov    %edx,0x3e4(%eax)
	p->tss.esp = esp;
    8767:	8b 44 24 08          	mov    0x8(%esp),%eax
    876b:	8b 54 24 70          	mov    0x70(%esp),%edx
    876f:	89 90 e8 03 00 00    	mov    %edx,0x3e8(%eax)
	p->tss.ebp = ebp;
    8775:	8b 44 24 08          	mov    0x8(%esp),%eax
    8779:	8b 54 24 34          	mov    0x34(%esp),%edx
    877d:	89 90 ec 03 00 00    	mov    %edx,0x3ec(%eax)
	p->tss.esi = esi;
    8783:	8b 44 24 08          	mov    0x8(%esp),%eax
    8787:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    878b:	89 90 f0 03 00 00    	mov    %edx,0x3f0(%eax)
	p->tss.edi = edi;
    8791:	8b 44 24 08          	mov    0x8(%esp),%eax
    8795:	8b 54 24 38          	mov    0x38(%esp),%edx
    8799:	89 90 f4 03 00 00    	mov    %edx,0x3f4(%eax)
	p->tss.es = es & 0xffff;				// 段寄存器仅16位有效.
    879f:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    87a3:	0f b7 d0             	movzwl %ax,%edx
    87a6:	8b 44 24 08          	mov    0x8(%esp),%eax
    87aa:	89 90 f8 03 00 00    	mov    %edx,0x3f8(%eax)
	p->tss.cs = cs & 0xffff;
    87b0:	8b 44 24 68          	mov    0x68(%esp),%eax
    87b4:	0f b7 d0             	movzwl %ax,%edx
    87b7:	8b 44 24 08          	mov    0x8(%esp),%eax
    87bb:	89 90 fc 03 00 00    	mov    %edx,0x3fc(%eax)
	p->tss.ss = ss & 0xffff;
    87c1:	8b 44 24 74          	mov    0x74(%esp),%eax
    87c5:	0f b7 d0             	movzwl %ax,%edx
    87c8:	8b 44 24 08          	mov    0x8(%esp),%eax
    87cc:	89 90 00 04 00 00    	mov    %edx,0x400(%eax)
	p->tss.ds = ds & 0xffff;
    87d2:	8b 44 24 60          	mov    0x60(%esp),%eax
    87d6:	0f b7 d0             	movzwl %ax,%edx
    87d9:	8b 44 24 08          	mov    0x8(%esp),%eax
    87dd:	89 90 04 04 00 00    	mov    %edx,0x404(%eax)
	p->tss.fs = fs & 0xffff;
    87e3:	8b 44 24 58          	mov    0x58(%esp),%eax
    87e7:	0f b7 d0             	movzwl %ax,%edx
    87ea:	8b 44 24 08          	mov    0x8(%esp),%eax
    87ee:	89 90 08 04 00 00    	mov    %edx,0x408(%eax)
	p->tss.gs = gs & 0xffff;
    87f4:	8b 44 24 40          	mov    0x40(%esp),%eax
    87f8:	0f b7 d0             	movzwl %ax,%edx
    87fb:	8b 44 24 08          	mov    0x8(%esp),%eax
    87ff:	89 90 0c 04 00 00    	mov    %edx,0x40c(%eax)
	p->tss.ldt = _LDT(nr);					// 任务局部表描述符的选择符(LDT描述符在GET中).
    8805:	8b 44 24 30          	mov    0x30(%esp),%eax
    8809:	c1 e0 04             	shl    $0x4,%eax
    880c:	83 c0 28             	add    $0x28,%eax
    880f:	89 c2                	mov    %eax,%edx
    8811:	8b 44 24 08          	mov    0x8(%esp),%eax
    8815:	89 90 10 04 00 00    	mov    %edx,0x410(%eax)
	p->tss.trace_bitmap = 0x80000000;		// (高16位有效).
    881b:	8b 44 24 08          	mov    0x8(%esp),%eax
    881f:	c7 80 14 04 00 00 00 	movl   $0x80000000,0x414(%eax)
    8826:	00 00 80 
	// 如果当前任务使用了协处理器,就保存其上下文.汇编指令clts用于清除控制寄存器CR0中的任务已交换(TS)标志.每当发生任务切换,CPU都会设置该标志.该标志用于管理
	// 数学协处理器:如果该标志置位,那么每个ESC指令都会被捕获(异常7).如果协处理器存在标志MP也同时置位的话,那么WAIT指令也会捕获.因此,如果任务切换发生在一个
	// ESC指令开始执行之后,则协处理器中的内容就可能需要在执行新的ESC指令之前保存起来.捕获处理句柄会保存协处理器的内容并复位TS标志.指令fnsave用于把协处理器的
	// 所有状态保存到目的操作数指定的内存区域中(tss.i387).
	if (last_task_used_math == current)
    8829:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    882f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8834:	39 c2                	cmp    %eax,%edx
    8836:	75 12                	jne    884a <copy_process+0x253>
		__asm__("clts ; fnsave %0 ; frstor %0"::"m" (p->tss.i387));
    8838:	8b 44 24 08          	mov    0x8(%esp),%eax
    883c:	0f 06                	clts   
    883e:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
    8844:	dd a0 18 04 00 00    	frstor 0x418(%eax)
	// 接下来复制进程页表.即在线性地址空间设置新任务代码段和数据段描述符中的基址和限长,并复制页表.如果出错(返回值不是0),则复位任务数组中相应项并
	// 释放为该新任务分配的用于任务结构的内存页.
	if (copy_mem(nr, p)) {					// 返回不为0示出错.
    884a:	83 ec 08             	sub    $0x8,%esp
    884d:	ff 74 24 10          	pushl  0x10(%esp)
    8851:	ff 74 24 3c          	pushl  0x3c(%esp)
    8855:	e8 df fb ff ff       	call   8439 <copy_mem>
    885a:	83 c4 10             	add    $0x10,%esp
    885d:	85 c0                	test   %eax,%eax
    885f:	74 29                	je     888a <copy_process+0x293>
		task[nr] = NULL;
    8861:	8b 44 24 30          	mov    0x30(%esp),%eax
    8865:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    886c:	00 00 00 00 
		free_page((long) p);
    8870:	8b 44 24 08          	mov    0x8(%esp),%eax
    8874:	83 ec 0c             	sub    $0xc,%esp
    8877:	50                   	push   %eax
    8878:	e8 55 34 00 00       	call   bcd2 <free_page>
    887d:	83 c4 10             	add    $0x10,%esp
		return -EAGAIN;
    8880:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8885:	e9 c2 02 00 00       	jmp    8b4c <copy_process+0x555>
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    888a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8891:	00 
    8892:	eb 35                	jmp    88c9 <copy_process+0x2d2>
		if (f = p->filp[i])
    8894:	8b 44 24 08          	mov    0x8(%esp),%eax
    8898:	8b 54 24 0c          	mov    0xc(%esp),%edx
    889c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    88a2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    88a6:	89 44 24 04          	mov    %eax,0x4(%esp)
    88aa:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    88af:	74 13                	je     88c4 <copy_process+0x2cd>
			f->f_count++;
    88b1:	8b 44 24 04          	mov    0x4(%esp),%eax
    88b5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    88b9:	8d 50 01             	lea    0x1(%eax),%edx
    88bc:	8b 44 24 04          	mov    0x4(%esp),%eax
    88c0:	66 89 50 04          	mov    %dx,0x4(%eax)
	for (i = 0; i < NR_OPEN; i++)
    88c4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    88c9:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
    88ce:	7e c4                	jle    8894 <copy_process+0x29d>
	if (current->pwd)
    88d0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88d5:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88db:	85 c0                	test   %eax,%eax
    88dd:	74 16                	je     88f5 <copy_process+0x2fe>
		current->pwd->i_count++;
    88df:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88e4:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88ea:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    88ee:	83 c2 01             	add    $0x1,%edx
    88f1:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->root)
    88f5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    88fa:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    8900:	85 c0                	test   %eax,%eax
    8902:	74 16                	je     891a <copy_process+0x323>
		current->root->i_count++;
    8904:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8909:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    890f:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8913:	83 c2 01             	add    $0x1,%edx
    8916:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->executable)
    891a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    891f:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8925:	85 c0                	test   %eax,%eax
    8927:	74 16                	je     893f <copy_process+0x348>
		current->executable->i_count++;
    8929:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    892e:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8934:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8938:	83 c2 01             	add    $0x1,%edx
    893b:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->library)
    893f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8944:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    894a:	85 c0                	test   %eax,%eax
    894c:	74 16                	je     8964 <copy_process+0x36d>
		current->library->i_count++;
    894e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8953:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    8959:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    895d:	83 c2 01             	add    $0x1,%edx
    8960:	66 89 50 34          	mov    %dx,0x34(%eax)
	// 设置等于父进程的最新子进程指针.若当前进程确实还有其他子进程,则让比邻老兄进程的最年轻进程指针p_yspter指向新进程.最后把当前进程的最新子进程指针指向这个新进程.
	// 然后把新进程设置成就绪态.最后返回新进程号.
	// 另外,set_tss_desc()和set_ldt_desc()定义在include/asm/system.h文件中."gdt+(nr<<1)+FIRST_TSS_ENTRY"是任务nr的TSS描述符项在全局表中的地址.
	// 因为每个任务占用GDT表中2项,因此上式中要包括'(nr<<1)'.
	// 请注意,在任务切换时,任务寄存器tr会由CPU自动加载.
	set_tss_desc(gdt + (nr << 1) + FIRST_TSS_ENTRY, &(p->tss));
    8964:	8b 44 24 08          	mov    0x8(%esp),%eax
    8968:	05 b0 03 00 00       	add    $0x3b0,%eax
    896d:	8b 54 24 30          	mov    0x30(%esp),%edx
    8971:	01 d2                	add    %edx,%edx
    8973:	83 c2 04             	add    $0x4,%edx
    8976:	c1 e2 03             	shl    $0x3,%edx
    8979:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    897f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8983:	01 c9                	add    %ecx,%ecx
    8985:	83 c1 04             	add    $0x4,%ecx
    8988:	c1 e1 03             	shl    $0x3,%ecx
    898b:	83 c1 02             	add    $0x2,%ecx
    898e:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8994:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8998:	01 db                	add    %ebx,%ebx
    899a:	83 c3 04             	add    $0x4,%ebx
    899d:	c1 e3 03             	shl    $0x3,%ebx
    89a0:	83 c3 04             	add    $0x4,%ebx
    89a3:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    89a9:	8b 74 24 30          	mov    0x30(%esp),%esi
    89ad:	01 f6                	add    %esi,%esi
    89af:	83 c6 04             	add    $0x4,%esi
    89b2:	c1 e6 03             	shl    $0x3,%esi
    89b5:	83 c6 05             	add    $0x5,%esi
    89b8:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    89be:	8b 7c 24 30          	mov    0x30(%esp),%edi
    89c2:	01 ff                	add    %edi,%edi
    89c4:	83 c7 04             	add    $0x4,%edi
    89c7:	c1 e7 03             	shl    $0x3,%edi
    89ca:	83 c7 06             	add    $0x6,%edi
    89cd:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    89d3:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    89d7:	01 ed                	add    %ebp,%ebp
    89d9:	83 c5 04             	add    $0x4,%ebp
    89dc:	c1 e5 03             	shl    $0x3,%ebp
    89df:	83 c5 07             	add    $0x7,%ebp
    89e2:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    89e8:	66 c7 02 68 00       	movw   $0x68,(%edx)
    89ed:	66 89 01             	mov    %ax,(%ecx)
    89f0:	c1 c8 10             	ror    $0x10,%eax
    89f3:	88 03                	mov    %al,(%ebx)
    89f5:	c6 06 89             	movb   $0x89,(%esi)
    89f8:	c6 07 00             	movb   $0x0,(%edi)
    89fb:	88 65 00             	mov    %ah,0x0(%ebp)
    89fe:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + (nr << 1) + FIRST_LDT_ENTRY, &(p->ldt));
    8a01:	8b 44 24 08          	mov    0x8(%esp),%eax
    8a05:	05 98 03 00 00       	add    $0x398,%eax
    8a0a:	8b 54 24 30          	mov    0x30(%esp),%edx
    8a0e:	01 d2                	add    %edx,%edx
    8a10:	83 c2 05             	add    $0x5,%edx
    8a13:	c1 e2 03             	shl    $0x3,%edx
    8a16:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8a1c:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8a20:	01 c9                	add    %ecx,%ecx
    8a22:	83 c1 05             	add    $0x5,%ecx
    8a25:	c1 e1 03             	shl    $0x3,%ecx
    8a28:	83 c1 02             	add    $0x2,%ecx
    8a2b:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8a31:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8a35:	01 db                	add    %ebx,%ebx
    8a37:	83 c3 05             	add    $0x5,%ebx
    8a3a:	c1 e3 03             	shl    $0x3,%ebx
    8a3d:	83 c3 04             	add    $0x4,%ebx
    8a40:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    8a46:	8b 74 24 30          	mov    0x30(%esp),%esi
    8a4a:	01 f6                	add    %esi,%esi
    8a4c:	83 c6 05             	add    $0x5,%esi
    8a4f:	c1 e6 03             	shl    $0x3,%esi
    8a52:	83 c6 05             	add    $0x5,%esi
    8a55:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    8a5b:	8b 7c 24 30          	mov    0x30(%esp),%edi
    8a5f:	01 ff                	add    %edi,%edi
    8a61:	83 c7 05             	add    $0x5,%edi
    8a64:	c1 e7 03             	shl    $0x3,%edi
    8a67:	83 c7 06             	add    $0x6,%edi
    8a6a:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    8a70:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    8a74:	01 ed                	add    %ebp,%ebp
    8a76:	83 c5 05             	add    $0x5,%ebp
    8a79:	c1 e5 03             	shl    $0x3,%ebp
    8a7c:	83 c5 07             	add    $0x7,%ebp
    8a7f:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    8a85:	66 c7 02 68 00       	movw   $0x68,(%edx)
    8a8a:	66 89 01             	mov    %ax,(%ecx)
    8a8d:	c1 c8 10             	ror    $0x10,%eax
    8a90:	88 03                	mov    %al,(%ebx)
    8a92:	c6 06 82             	movb   $0x82,(%esi)
    8a95:	c6 07 00             	movb   $0x0,(%edi)
    8a98:	88 65 00             	mov    %ah,0x0(%ebp)
    8a9b:	c1 c8 10             	ror    $0x10,%eax
	p->p_pptr = current;				// 设置新进程的父进程指针.
    8a9e:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    8aa4:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aa8:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
	p->p_cptr = 0;						// 复位新进程的最新子进程指针.
    8aae:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ab2:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    8ab9:	00 00 00 
	p->p_ysptr = 0;						// 复位新进程的比邻年轻兄弟进程指针.
    8abc:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ac0:	c7 80 c4 02 00 00 00 	movl   $0x0,0x2c4(%eax)
    8ac7:	00 00 00 
	p->p_osptr = current->p_cptr;		// 设置新进程的比邻老兄兄弟进程指针.
    8aca:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8acf:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    8ad5:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ad9:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
	if (p->p_osptr)						// 若新进程有老兄兄弟进程,则让其年轻进程兄弟指针指向新进程
    8adf:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ae3:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8ae9:	85 c0                	test   %eax,%eax
    8aeb:	74 14                	je     8b01 <copy_process+0x50a>
		p->p_osptr->p_ysptr = p;
    8aed:	8b 44 24 08          	mov    0x8(%esp),%eax
    8af1:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8af7:	8b 54 24 08          	mov    0x8(%esp),%edx
    8afb:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
	current->p_cptr = p;				// 让当前进程最新子进程指针指向新进程.
    8b01:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8b06:	8b 54 24 08          	mov    0x8(%esp),%edx
    8b0a:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
	p->state = TASK_RUNNING;			/* do this last, just in case */        /* 设置进程状态为待运行状态栏 */
    8b10:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< fork new process current_pid = %d, child_pid = %d, nr = %d >>>>>\n", current->pid, p->pid, nr);
    8b1a:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b1e:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8b24:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8b29:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    8b2f:	83 ec 0c             	sub    $0xc,%esp
    8b32:	ff 74 24 3c          	pushl  0x3c(%esp)
    8b36:	52                   	push   %edx
    8b37:	50                   	push   %eax
    8b38:	68 34 2e 02 00       	push   $0x22e34
    8b3d:	6a 00                	push   $0x0
    8b3f:	e8 00 9e 01 00       	call   22944 <Log>
    8b44:	83 c4 20             	add    $0x20,%esp
	return last_pid;        			// 返回新进程号
    8b47:	a1 48 fe 02 00       	mov    0x2fe48,%eax
}
    8b4c:	83 c4 1c             	add    $0x1c,%esp
    8b4f:	5b                   	pop    %ebx
    8b50:	5e                   	pop    %esi
    8b51:	5f                   	pop    %edi
    8b52:	5d                   	pop    %ebp
    8b53:	c3                   	ret    

00008b54 <find_empty_process>:

// 为新进程取得不重复的进程号last_pid.函数返回在任务数组中的任务号(数组项).
int find_empty_process(void)
{
    8b54:	83 ec 10             	sub    $0x10,%esp
    8b57:	eb 01                	jmp    8b5a <find_empty_process+0x6>
	int i;

	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
    8b59:	90                   	nop
		if ((++last_pid) < 0) last_pid = 1;
    8b5a:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8b5f:	83 c0 01             	add    $0x1,%eax
    8b62:	a3 48 fe 02 00       	mov    %eax,0x2fe48
    8b67:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8b6c:	85 c0                	test   %eax,%eax
    8b6e:	79 0a                	jns    8b7a <find_empty_process+0x26>
    8b70:	c7 05 48 fe 02 00 01 	movl   $0x1,0x2fe48
    8b77:	00 00 00 
		for(i = 0 ; i < NR_TASKS ; i++)
    8b7a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8b81:	00 
    8b82:	eb 48                	jmp    8bcc <find_empty_process+0x78>
			if (task[i] && ((task[i]->pid == last_pid) ||
    8b84:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b88:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8b8f:	85 c0                	test   %eax,%eax
    8b91:	74 34                	je     8bc7 <find_empty_process+0x73>
    8b93:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b97:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8b9e:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8ba4:	a1 48 fe 02 00       	mov    0x2fe48,%eax
    8ba9:	39 c2                	cmp    %eax,%edx
    8bab:	74 ac                	je     8b59 <find_empty_process+0x5>
				        (task[i]->pgrp == last_pid)))
    8bad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bb1:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8bb8:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    8bbe:	a1 48 fe 02 00       	mov    0x2fe48,%eax
			if (task[i] && ((task[i]->pid == last_pid) ||
    8bc3:	39 c2                	cmp    %eax,%edx
    8bc5:	74 92                	je     8b59 <find_empty_process+0x5>
		for(i = 0 ; i < NR_TASKS ; i++)
    8bc7:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bcc:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bd1:	7e b1                	jle    8b84 <find_empty_process+0x30>
				goto repeat;
	for(i = 1 ; i < NR_TASKS ; i++)
    8bd3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    8bda:	00 
    8bdb:	eb 1a                	jmp    8bf7 <find_empty_process+0xa3>
		if (!task[i])
    8bdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8be1:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    8be8:	85 c0                	test   %eax,%eax
    8bea:	75 06                	jne    8bf2 <find_empty_process+0x9e>
			return i;
    8bec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bf0:	eb 11                	jmp    8c03 <find_empty_process+0xaf>
	for(i = 1 ; i < NR_TASKS ; i++)
    8bf2:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bf7:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bfc:	7e df                	jle    8bdd <find_empty_process+0x89>
	return -EAGAIN;
    8bfe:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
    8c03:	83 c4 10             	add    $0x10,%esp
    8c06:	c3                   	ret    

00008c07 <panic>:
// 如果当前进程是任务0的话,还说明是交换任务出错,并且还没有运行文件系统同步函数.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好一些的代码,更重要的是使用这个关键字
// 以避免产生某些(未初始化变量的)假警告信息.
// 等同于现在gcc的函数属性说明:void panic(const char *s) __attribute__((noreturn));
void panic(const char * s)
{
    8c07:	83 ec 0c             	sub    $0xc,%esp
	printk("Kernel panic: %s\n\r", s);
    8c0a:	83 ec 08             	sub    $0x8,%esp
    8c0d:	ff 74 24 18          	pushl  0x18(%esp)
    8c11:	68 7c 2e 02 00       	push   $0x22e7c
    8c16:	e8 2b 00 00 00       	call   8c46 <printk>
    8c1b:	83 c4 10             	add    $0x10,%esp
	if (current == task[0])
    8c1e:	8b 15 c0 f1 02 00    	mov    0x2f1c0,%edx
    8c24:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    8c29:	39 c2                	cmp    %eax,%edx
    8c2b:	75 12                	jne    8c3f <panic+0x38>
		printk("In swapper task - not syncing\n\r");
    8c2d:	83 ec 0c             	sub    $0xc,%esp
    8c30:	68 90 2e 02 00       	push   $0x22e90
    8c35:	e8 0c 00 00 00       	call   8c46 <printk>
    8c3a:	83 c4 10             	add    $0x10,%esp
    8c3d:	eb 05                	jmp    8c44 <panic+0x3d>
	else
		sys_sync();
    8c3f:	e8 d3 62 00 00       	call   ef17 <sys_sync>
	for(;;);
    8c44:	eb fe                	jmp    8c44 <panic+0x3d>

00008c46 <printk>:
// 函数vsprintf()定义在linux/kernel/vsprintf.c中
extern int vsprintf(char * buf, const char * fmt, va_list args);

// 内核使用的显示函数.
int printk(const char *fmt, ...)
{
    8c46:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;							// va_list实际上是一个字符指针类型.
	int i;

	// 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
	// 函数并返回显示字符数.
	va_start(args, fmt);
    8c49:	8d 44 24 24          	lea    0x24(%esp),%eax
    8c4d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(buf, fmt, args);
    8c51:	8b 44 24 20          	mov    0x20(%esp),%eax
    8c55:	83 ec 04             	sub    $0x4,%esp
    8c58:	ff 74 24 10          	pushl  0x10(%esp)
    8c5c:	50                   	push   %eax
    8c5d:	68 60 fe 02 00       	push   $0x2fe60
    8c62:	e8 0f 03 00 00       	call   8f76 <vsprintf>
    8c67:	83 c4 10             	add    $0x10,%esp
    8c6a:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	console_print(buf);						// chr_drv/console.c
    8c6e:	83 ec 0c             	sub    $0xc,%esp
    8c71:	68 60 fe 02 00       	push   $0x2fe60
    8c76:	e8 56 48 01 00       	call   1d4d1 <console_print>
    8c7b:	83 c4 10             	add    $0x10,%esp
	return i;
    8c7e:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    8c82:	83 c4 1c             	add    $0x1c,%esp
    8c85:	c3                   	ret    

00008c86 <strlen>:
// 计算字符串长度.
// 参数:s - 字符串
// %0 - ecx(__res),%1 - edi(字符串指针s),%2 - eax(0),%3 - ecx(0xffffffff).
// 返回:返回字符串长度.
static inline int strlen(const char * s)
{
    8c86:	57                   	push   %edi
register int __res __asm__("cx");       					// __res是寄存器变量(ecx).
__asm__(
    8c87:	8b 54 24 08          	mov    0x8(%esp),%edx
    8c8b:	b8 00 00 00 00       	mov    $0x0,%eax
    8c90:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    8c95:	89 d7                	mov    %edx,%edi
    8c97:	fc                   	cld    
    8c98:	f2 ae                	repnz scas %es:(%edi),%al
    8c9a:	f7 d1                	not    %ecx
    8c9c:	49                   	dec    %ecx
	"repne\n\t"												// al(0)与字符串中字符es:[edi比较,
	"scasb\n\t"												// 若不相等就一直比较.
	"notl %0\n\t"											// ecx取反.
	"decl %0"												// ecx--,得字符串的长度值.
	:"=c" (__res):"D" (s), "a" (0), "0" (0xffffffff));
return __res;												// 返回字符串长度值.
    8c9d:	89 c8                	mov    %ecx,%eax
}
    8c9f:	5f                   	pop    %edi
    8ca0:	c3                   	ret    

00008ca1 <skip_atoi>:
/* 我们使用下面的定义,这样我们就可以不使用ctype库了 */
#define is_digit(c)	((c) >= '0' && (c) <= '9')	// 判断字符c是否为数字字符.

// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
    8ca1:	53                   	push   %ebx
    8ca2:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
    8ca5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8cac:	00 

	while (is_digit(**s))
    8cad:	eb 2d                	jmp    8cdc <skip_atoi+0x3b>
		i = i*10 + *((*s)++) - '0';
    8caf:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8cb3:	89 d0                	mov    %edx,%eax
    8cb5:	c1 e0 02             	shl    $0x2,%eax
    8cb8:	01 d0                	add    %edx,%eax
    8cba:	01 c0                	add    %eax,%eax
    8cbc:	89 c3                	mov    %eax,%ebx
    8cbe:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cc2:	8b 00                	mov    (%eax),%eax
    8cc4:	8d 48 01             	lea    0x1(%eax),%ecx
    8cc7:	8b 54 24 18          	mov    0x18(%esp),%edx
    8ccb:	89 0a                	mov    %ecx,(%edx)
    8ccd:	0f b6 00             	movzbl (%eax),%eax
    8cd0:	0f be c0             	movsbl %al,%eax
    8cd3:	01 d8                	add    %ebx,%eax
    8cd5:	83 e8 30             	sub    $0x30,%eax
    8cd8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (is_digit(**s))
    8cdc:	8b 44 24 18          	mov    0x18(%esp),%eax
    8ce0:	8b 00                	mov    (%eax),%eax
    8ce2:	0f b6 00             	movzbl (%eax),%eax
    8ce5:	3c 2f                	cmp    $0x2f,%al
    8ce7:	7e 0d                	jle    8cf6 <skip_atoi+0x55>
    8ce9:	8b 44 24 18          	mov    0x18(%esp),%eax
    8ced:	8b 00                	mov    (%eax),%eax
    8cef:	0f b6 00             	movzbl (%eax),%eax
    8cf2:	3c 39                	cmp    $0x39,%al
    8cf4:	7e b9                	jle    8caf <skip_atoi+0xe>
	return i;
    8cf6:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    8cfa:	83 c4 10             	add    $0x10,%esp
    8cfd:	5b                   	pop    %ebx
    8cfe:	c3                   	ret    

00008cff <number>:
// 将整数转换为指定进制的字符串.
// 输入: num-整数; base-进制; size-字符串长度;precision-数字长度(精度);type-类型选项.
// 输出: 数字转换成字符串后指向该字符串末端后面的指针.
static char * number(char * str, int num, int base, int size, int precision
	,int type)
{
    8cff:	83 ec 40             	sub    $0x40,%esp
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    8d02:	c7 44 24 38 b0 2e 02 	movl   $0x22eb0,0x38(%esp)
    8d09:	00 
	int i;

	// 如果类型type指出用小写字母,则定义小写字母集.
	// 如果类型指出要左调整(靠左边界),则屏蔽类型中的填零标志.
	// 如果进制基数小于2或大于36,则退出处理,即本程序只能处理基数在2-36之间的数.
	if (type & SMALL) digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    8d0a:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d0e:	83 e0 40             	and    $0x40,%eax
    8d11:	85 c0                	test   %eax,%eax
    8d13:	74 08                	je     8d1d <number+0x1e>
    8d15:	c7 44 24 38 d8 2e 02 	movl   $0x22ed8,0x38(%esp)
    8d1c:	00 
	if (type & LEFT) type &= ~ZEROPAD;
    8d1d:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d21:	83 e0 10             	and    $0x10,%eax
    8d24:	85 c0                	test   %eax,%eax
    8d26:	74 05                	je     8d2d <number+0x2e>
    8d28:	83 64 24 58 fe       	andl   $0xfffffffe,0x58(%esp)
	if (base < 2 || base > 36)
    8d2d:	83 7c 24 4c 01       	cmpl   $0x1,0x4c(%esp)
    8d32:	7e 07                	jle    8d3b <number+0x3c>
    8d34:	83 7c 24 4c 24       	cmpl   $0x24,0x4c(%esp)
    8d39:	7e 0a                	jle    8d45 <number+0x46>
		return 0;
    8d3b:	b8 00 00 00 00       	mov    $0x0,%eax
    8d40:	e9 2d 02 00 00       	jmp    8f72 <number+0x273>
	// 如果类型指出要填零,则置字符变量c='0',否则c等于空格字符.
	// 如果类型指出是带符号数并且数值num小于0,则置符号变量sign=负号,并使num取绝对值.
	// 否则如果类型指出是加号,则置sign=加号,否则若类型带空格标志则sign=空格,否则置0.
	c = (type & ZEROPAD) ? '0' : ' ' ;
    8d45:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d49:	83 e0 01             	and    $0x1,%eax
    8d4c:	85 c0                	test   %eax,%eax
    8d4e:	74 07                	je     8d57 <number+0x58>
    8d50:	b8 30 00 00 00       	mov    $0x30,%eax
    8d55:	eb 05                	jmp    8d5c <number+0x5d>
    8d57:	b8 20 00 00 00       	mov    $0x20,%eax
    8d5c:	88 44 24 33          	mov    %al,0x33(%esp)
	if (type & SIGN && num < 0) {
    8d60:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d64:	83 e0 02             	and    $0x2,%eax
    8d67:	85 c0                	test   %eax,%eax
    8d69:	74 12                	je     8d7d <number+0x7e>
    8d6b:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8d70:	79 0b                	jns    8d7d <number+0x7e>
		sign = '-';
    8d72:	c6 44 24 3f 2d       	movb   $0x2d,0x3f(%esp)
		num = -num;
    8d77:	f7 5c 24 48          	negl   0x48(%esp)
    8d7b:	eb 20                	jmp    8d9d <number+0x9e>
	} else
		sign = (type & PLUS) ? '+' : ((type & SPACE) ? ' ' : 0);
    8d7d:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d81:	83 e0 04             	and    $0x4,%eax
    8d84:	85 c0                	test   %eax,%eax
    8d86:	75 0c                	jne    8d94 <number+0x95>
    8d88:	8b 44 24 58          	mov    0x58(%esp),%eax
    8d8c:	c1 e0 02             	shl    $0x2,%eax
    8d8f:	83 e0 20             	and    $0x20,%eax
    8d92:	eb 05                	jmp    8d99 <number+0x9a>
    8d94:	b8 2b 00 00 00       	mov    $0x2b,%eax
    8d99:	88 44 24 3f          	mov    %al,0x3f(%esp)
	// 若带符号,则宽度值减1.若类型指出是特殊转换,则对十六进制宽度再减少2位(用于0x),对于八进制宽度减1(用于八进制转换结果前放一个零).
	if (sign) size--;
    8d9d:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8da2:	74 05                	je     8da9 <number+0xaa>
    8da4:	83 6c 24 50 01       	subl   $0x1,0x50(%esp)
	if (type & SPECIAL)
    8da9:	8b 44 24 58          	mov    0x58(%esp),%eax
    8dad:	83 e0 20             	and    $0x20,%eax
    8db0:	85 c0                	test   %eax,%eax
    8db2:	74 1a                	je     8dce <number+0xcf>
		if (base == 16) size -= 2;
    8db4:	83 7c 24 4c 10       	cmpl   $0x10,0x4c(%esp)
    8db9:	75 07                	jne    8dc2 <number+0xc3>
    8dbb:	83 6c 24 50 02       	subl   $0x2,0x50(%esp)
    8dc0:	eb 0c                	jmp    8dce <number+0xcf>
		else if (base == 8) size--;
    8dc2:	83 7c 24 4c 08       	cmpl   $0x8,0x4c(%esp)
    8dc7:	75 05                	jne    8dce <number+0xcf>
    8dc9:	83 6c 24 50 01       	subl   $0x1,0x50(%esp)
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
    8dce:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
    8dd5:	00 
	if (num == 0)
    8dd6:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8ddb:	75 48                	jne    8e25 <number+0x126>
		tmp[i++] = '0';
    8ddd:	8b 44 24 34          	mov    0x34(%esp),%eax
    8de1:	8d 50 01             	lea    0x1(%eax),%edx
    8de4:	89 54 24 34          	mov    %edx,0x34(%esp)
    8de8:	c6 44 04 08 30       	movb   $0x30,0x8(%esp,%eax,1)
    8ded:	eb 3d                	jmp    8e2c <number+0x12d>
	else while (num != 0)
		tmp[i++] = digits[do_div(num, base)];
    8def:	8b 44 24 48          	mov    0x48(%esp),%eax
    8df3:	ba 00 00 00 00       	mov    $0x0,%edx
    8df8:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
    8dfc:	f7 f1                	div    %ecx
    8dfe:	89 44 24 48          	mov    %eax,0x48(%esp)
    8e02:	89 54 24 2c          	mov    %edx,0x2c(%esp)
    8e06:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8e0a:	89 c2                	mov    %eax,%edx
    8e0c:	8b 44 24 38          	mov    0x38(%esp),%eax
    8e10:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
    8e13:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e17:	8d 50 01             	lea    0x1(%eax),%edx
    8e1a:	89 54 24 34          	mov    %edx,0x34(%esp)
    8e1e:	0f b6 11             	movzbl (%ecx),%edx
    8e21:	88 54 04 08          	mov    %dl,0x8(%esp,%eax,1)
	else while (num != 0)
    8e25:	83 7c 24 48 00       	cmpl   $0x0,0x48(%esp)
    8e2a:	75 c3                	jne    8def <number+0xf0>
	// 若数值字符个数大于精度值,则精度值扩展为数字个数值.
	// 宽度值size减去用于存放数值字符的个数.
	if (i > precision) precision = i;
    8e2c:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e30:	3b 44 24 54          	cmp    0x54(%esp),%eax
    8e34:	7e 08                	jle    8e3e <number+0x13f>
    8e36:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e3a:	89 44 24 54          	mov    %eax,0x54(%esp)
	size -= precision;
    8e3e:	8b 44 24 54          	mov    0x54(%esp),%eax
    8e42:	29 44 24 50          	sub    %eax,0x50(%esp)
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
    8e46:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e4a:	83 e0 11             	and    $0x11,%eax
    8e4d:	85 c0                	test   %eax,%eax
    8e4f:	75 1f                	jne    8e70 <number+0x171>
		while(size-- > 0)
    8e51:	eb 0e                	jmp    8e61 <number+0x162>
			*str++ = ' ';
    8e53:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e57:	8d 50 01             	lea    0x1(%eax),%edx
    8e5a:	89 54 24 44          	mov    %edx,0x44(%esp)
    8e5e:	c6 00 20             	movb   $0x20,(%eax)
		while(size-- > 0)
    8e61:	8b 44 24 50          	mov    0x50(%esp),%eax
    8e65:	8d 50 ff             	lea    -0x1(%eax),%edx
    8e68:	89 54 24 50          	mov    %edx,0x50(%esp)
    8e6c:	85 c0                	test   %eax,%eax
    8e6e:	7f e3                	jg     8e53 <number+0x154>
	if (sign)
    8e70:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8e75:	74 12                	je     8e89 <number+0x18a>
		*str++ = sign;
    8e77:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e7b:	8d 50 01             	lea    0x1(%eax),%edx
    8e7e:	89 54 24 44          	mov    %edx,0x44(%esp)
    8e82:	0f b6 54 24 3f       	movzbl 0x3f(%esp),%edx
    8e87:	88 10                	mov    %dl,(%eax)
	// 若类型指出是特殊转换,则对于八进制转换结果头一位放置一个'0';而对于十六进制则存放'0x'.
	if (type & SPECIAL)
    8e89:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e8d:	83 e0 20             	and    $0x20,%eax
    8e90:	85 c0                	test   %eax,%eax
    8e92:	74 41                	je     8ed5 <number+0x1d6>
		if (base == 8)
    8e94:	83 7c 24 4c 08       	cmpl   $0x8,0x4c(%esp)
    8e99:	75 10                	jne    8eab <number+0x1ac>
			*str++ = '0';
    8e9b:	8b 44 24 44          	mov    0x44(%esp),%eax
    8e9f:	8d 50 01             	lea    0x1(%eax),%edx
    8ea2:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ea6:	c6 00 30             	movb   $0x30,(%eax)
    8ea9:	eb 2a                	jmp    8ed5 <number+0x1d6>
		else if (base == 16) {
    8eab:	83 7c 24 4c 10       	cmpl   $0x10,0x4c(%esp)
    8eb0:	75 23                	jne    8ed5 <number+0x1d6>
			*str++ = '0';
    8eb2:	8b 44 24 44          	mov    0x44(%esp),%eax
    8eb6:	8d 50 01             	lea    0x1(%eax),%edx
    8eb9:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ebd:	c6 00 30             	movb   $0x30,(%eax)
			*str++ = digits[33];						// 'X'或'x'
    8ec0:	8b 44 24 44          	mov    0x44(%esp),%eax
    8ec4:	8d 50 01             	lea    0x1(%eax),%edx
    8ec7:	89 54 24 44          	mov    %edx,0x44(%esp)
    8ecb:	8b 54 24 38          	mov    0x38(%esp),%edx
    8ecf:	0f b6 52 21          	movzbl 0x21(%edx),%edx
    8ed3:	88 10                	mov    %dl,(%eax)
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
    8ed5:	8b 44 24 58          	mov    0x58(%esp),%eax
    8ed9:	83 e0 10             	and    $0x10,%eax
    8edc:	85 c0                	test   %eax,%eax
    8ede:	75 33                	jne    8f13 <number+0x214>
		while(size-- > 0)
    8ee0:	eb 12                	jmp    8ef4 <number+0x1f5>
			*str++ = c;
    8ee2:	8b 44 24 44          	mov    0x44(%esp),%eax
    8ee6:	8d 50 01             	lea    0x1(%eax),%edx
    8ee9:	89 54 24 44          	mov    %edx,0x44(%esp)
    8eed:	0f b6 54 24 33       	movzbl 0x33(%esp),%edx
    8ef2:	88 10                	mov    %dl,(%eax)
		while(size-- > 0)
    8ef4:	8b 44 24 50          	mov    0x50(%esp),%eax
    8ef8:	8d 50 ff             	lea    -0x1(%eax),%edx
    8efb:	89 54 24 50          	mov    %edx,0x50(%esp)
    8eff:	85 c0                	test   %eax,%eax
    8f01:	7f df                	jg     8ee2 <number+0x1e3>
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8f03:	eb 0e                	jmp    8f13 <number+0x214>
		*str++ = '0';
    8f05:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f09:	8d 50 01             	lea    0x1(%eax),%edx
    8f0c:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f10:	c6 00 30             	movb   $0x30,(%eax)
	while(i < precision--)
    8f13:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f17:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f1a:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f1e:	39 44 24 34          	cmp    %eax,0x34(%esp)
    8f22:	7c e1                	jl     8f05 <number+0x206>
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f24:	eb 1a                	jmp    8f40 <number+0x241>
		*str++ = tmp[i];
    8f26:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f2a:	8d 50 01             	lea    0x1(%eax),%edx
    8f2d:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f31:	8d 4c 24 08          	lea    0x8(%esp),%ecx
    8f35:	8b 54 24 34          	mov    0x34(%esp),%edx
    8f39:	01 ca                	add    %ecx,%edx
    8f3b:	0f b6 12             	movzbl (%edx),%edx
    8f3e:	88 10                	mov    %dl,(%eax)
	while(i-- > 0)
    8f40:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f44:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f47:	89 54 24 34          	mov    %edx,0x34(%esp)
    8f4b:	85 c0                	test   %eax,%eax
    8f4d:	7f d7                	jg     8f26 <number+0x227>
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f4f:	eb 0e                	jmp    8f5f <number+0x260>
		*str++ = ' ';
    8f51:	8b 44 24 44          	mov    0x44(%esp),%eax
    8f55:	8d 50 01             	lea    0x1(%eax),%edx
    8f58:	89 54 24 44          	mov    %edx,0x44(%esp)
    8f5c:	c6 00 20             	movb   $0x20,(%eax)
	while(size-- > 0)
    8f5f:	8b 44 24 50          	mov    0x50(%esp),%eax
    8f63:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f66:	89 54 24 50          	mov    %edx,0x50(%esp)
    8f6a:	85 c0                	test   %eax,%eax
    8f6c:	7f e3                	jg     8f51 <number+0x252>
	return str;											// 返回转换好的指向字符串末端后的指针.
    8f6e:	8b 44 24 44          	mov    0x44(%esp),%eax
}
    8f72:	83 c4 40             	add    $0x40,%esp
    8f75:	c3                   	ret    

00008f76 <vsprintf>:

// 下面函数是送格式化输出到字符串中.
// 为了能在内核中使用格式化的输出,Linus在内核实现了该C标准函数.
// 其中参数fmt是格式字符串;args是个数变化的值;buf是输出字符串缓冲区.
int vsprintf(char *buf, const char *fmt, va_list args)
{
    8f76:	83 ec 30             	sub    $0x30,%esp
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    8f79:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f7d:	89 44 24 24          	mov    %eax,0x24(%esp)
    8f81:	e9 3d 04 00 00       	jmp    93c3 <vsprintf+0x44d>
		// 格式转换指示字符串均'%'开始,这里从fmt格式字符串中扫描'%',寻找格式转换字符串的开始.不是格式指示的一般字符均被依次存入str.
		if (*fmt != '%') {
    8f86:	8b 44 24 38          	mov    0x38(%esp),%eax
    8f8a:	0f b6 00             	movzbl (%eax),%eax
    8f8d:	3c 25                	cmp    $0x25,%al
    8f8f:	74 19                	je     8faa <vsprintf+0x34>
			*str++ = *fmt;
    8f91:	8b 54 24 38          	mov    0x38(%esp),%edx
    8f95:	8b 44 24 24          	mov    0x24(%esp),%eax
    8f99:	8d 48 01             	lea    0x1(%eax),%ecx
    8f9c:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    8fa0:	0f b6 12             	movzbl (%edx),%edx
    8fa3:	88 10                	mov    %dl,(%eax)
			continue;
    8fa5:	e9 0e 04 00 00       	jmp    93b8 <vsprintf+0x442>
		}

		// 下面取得格式指示字符串中的标志域,并将标志常量放入flags变量中.
		/* process flags */
		flags = 0;
    8faa:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    8fb1:	00 
		repeat:
			++fmt;		/* this also skips first '%' */
    8fb2:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fb6:	83 c0 01             	add    $0x1,%eax
    8fb9:	89 44 24 38          	mov    %eax,0x38(%esp)
			switch (*fmt) {
    8fbd:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fc1:	0f b6 00             	movzbl (%eax),%eax
    8fc4:	0f be c0             	movsbl %al,%eax
    8fc7:	83 e8 20             	sub    $0x20,%eax
    8fca:	83 f8 10             	cmp    $0x10,%eax
    8fcd:	77 2c                	ja     8ffb <vsprintf+0x85>
    8fcf:	8b 04 85 00 2f 02 00 	mov    0x22f00(,%eax,4),%eax
    8fd6:	ff e0                	jmp    *%eax
				case '-': flags |= LEFT; goto repeat;		// 左靠齐调整
    8fd8:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
    8fdd:	eb d3                	jmp    8fb2 <vsprintf+0x3c>
				case '+': flags |= PLUS; goto repeat;		// 放加号
    8fdf:	83 4c 24 1c 04       	orl    $0x4,0x1c(%esp)
    8fe4:	eb cc                	jmp    8fb2 <vsprintf+0x3c>
				case ' ': flags |= SPACE; goto repeat;		// 放空格
    8fe6:	83 4c 24 1c 08       	orl    $0x8,0x1c(%esp)
    8feb:	eb c5                	jmp    8fb2 <vsprintf+0x3c>
				case '#': flags |= SPECIAL; goto repeat;	// 是特殊转换
    8fed:	83 4c 24 1c 20       	orl    $0x20,0x1c(%esp)
    8ff2:	eb be                	jmp    8fb2 <vsprintf+0x3c>
				case '0': flags |= ZEROPAD; goto repeat;	// 要填零(即'0')
    8ff4:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
    8ff9:	eb b7                	jmp    8fb2 <vsprintf+0x3c>
				}

		// 取当前参数字段宽度域值,放入field_width变量中.如果宽度域中是数值则直接其为宽度值.如果宽度域中是字符'*',表示下一个参数指定宽度.因此
		// 调用va_arg取宽度值.若此时宽度值小于0,则该负数表示其带有标志域'-'标志(左靠齐),因此还需在标志变量中添入该标志,并将字段宽度值取为其绝对值.
		/* get field width */
		field_width = -1;
    8ffb:	c7 44 24 18 ff ff ff 	movl   $0xffffffff,0x18(%esp)
    9002:	ff 
		if (is_digit(*fmt))
    9003:	8b 44 24 38          	mov    0x38(%esp),%eax
    9007:	0f b6 00             	movzbl (%eax),%eax
    900a:	3c 2f                	cmp    $0x2f,%al
    900c:	7e 1e                	jle    902c <vsprintf+0xb6>
    900e:	8b 44 24 38          	mov    0x38(%esp),%eax
    9012:	0f b6 00             	movzbl (%eax),%eax
    9015:	3c 39                	cmp    $0x39,%al
    9017:	7f 13                	jg     902c <vsprintf+0xb6>
			field_width = skip_atoi(&fmt);
    9019:	8d 44 24 38          	lea    0x38(%esp),%eax
    901d:	50                   	push   %eax
    901e:	e8 7e fc ff ff       	call   8ca1 <skip_atoi>
    9023:	83 c4 04             	add    $0x4,%esp
    9026:	89 44 24 18          	mov    %eax,0x18(%esp)
    902a:	eb 36                	jmp    9062 <vsprintf+0xec>
		else if (*fmt == '*') {
    902c:	8b 44 24 38          	mov    0x38(%esp),%eax
    9030:	0f b6 00             	movzbl (%eax),%eax
    9033:	3c 2a                	cmp    $0x2a,%al
    9035:	75 2b                	jne    9062 <vsprintf+0xec>
			/* it's the next argument */
			++fmt;
    9037:	8b 44 24 38          	mov    0x38(%esp),%eax
    903b:	83 c0 01             	add    $0x1,%eax
    903e:	89 44 24 38          	mov    %eax,0x38(%esp)
			field_width = va_arg(args, int);
    9042:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9047:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    904b:	8b 40 fc             	mov    -0x4(%eax),%eax
    904e:	89 44 24 18          	mov    %eax,0x18(%esp)
			if (field_width < 0) {
    9052:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9057:	79 09                	jns    9062 <vsprintf+0xec>
				field_width = -field_width;
    9059:	f7 5c 24 18          	negl   0x18(%esp)
				flags |= LEFT;
    905d:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
		}

	// 下面这段代码,取格式转换串的精度域,并放入precision变量中.精度域开始的标志是'.'.其处理过程与上面宽度域的类似.如果精度域中是数值则直接取其为
	// 精度值.如果精度域中是字符'*',表示下一个参数指定精度.因此调用va_arg取精度值.若此时宽度值小于0,则将字段精度值取为0.
		/* get the precision */
		precision = -1;
    9062:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    9069:	ff 
		if (*fmt == '.') {
    906a:	8b 44 24 38          	mov    0x38(%esp),%eax
    906e:	0f b6 00             	movzbl (%eax),%eax
    9071:	3c 2e                	cmp    $0x2e,%al
    9073:	75 69                	jne    90de <vsprintf+0x168>
			++fmt;
    9075:	8b 44 24 38          	mov    0x38(%esp),%eax
    9079:	83 c0 01             	add    $0x1,%eax
    907c:	89 44 24 38          	mov    %eax,0x38(%esp)
			if (is_digit(*fmt))
    9080:	8b 44 24 38          	mov    0x38(%esp),%eax
    9084:	0f b6 00             	movzbl (%eax),%eax
    9087:	3c 2f                	cmp    $0x2f,%al
    9089:	7e 1e                	jle    90a9 <vsprintf+0x133>
    908b:	8b 44 24 38          	mov    0x38(%esp),%eax
    908f:	0f b6 00             	movzbl (%eax),%eax
    9092:	3c 39                	cmp    $0x39,%al
    9094:	7f 13                	jg     90a9 <vsprintf+0x133>
				precision = skip_atoi(&fmt);
    9096:	8d 44 24 38          	lea    0x38(%esp),%eax
    909a:	50                   	push   %eax
    909b:	e8 01 fc ff ff       	call   8ca1 <skip_atoi>
    90a0:	83 c4 04             	add    $0x4,%esp
    90a3:	89 44 24 14          	mov    %eax,0x14(%esp)
    90a7:	eb 26                	jmp    90cf <vsprintf+0x159>
			else if (*fmt == '*') {
    90a9:	8b 44 24 38          	mov    0x38(%esp),%eax
    90ad:	0f b6 00             	movzbl (%eax),%eax
    90b0:	3c 2a                	cmp    $0x2a,%al
    90b2:	75 1b                	jne    90cf <vsprintf+0x159>
				/* it's the next argument */
                                ++fmt;
    90b4:	8b 44 24 38          	mov    0x38(%esp),%eax
    90b8:	83 c0 01             	add    $0x1,%eax
    90bb:	89 44 24 38          	mov    %eax,0x38(%esp)
				precision = va_arg(args, int);
    90bf:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    90c4:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    90c8:	8b 40 fc             	mov    -0x4(%eax),%eax
    90cb:	89 44 24 14          	mov    %eax,0x14(%esp)
			}
			if (precision < 0)
    90cf:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    90d4:	79 08                	jns    90de <vsprintf+0x168>
				precision = 0;
    90d6:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    90dd:	00 
		}

		// 下面这段代码分析长度修饰符,并将其存入qualifer变量.
		/* get the conversion qualifier */
		qualifier = -1;
    90de:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
    90e5:	ff 
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
    90e6:	8b 44 24 38          	mov    0x38(%esp),%eax
    90ea:	0f b6 00             	movzbl (%eax),%eax
    90ed:	3c 68                	cmp    $0x68,%al
    90ef:	74 16                	je     9107 <vsprintf+0x191>
    90f1:	8b 44 24 38          	mov    0x38(%esp),%eax
    90f5:	0f b6 00             	movzbl (%eax),%eax
    90f8:	3c 6c                	cmp    $0x6c,%al
    90fa:	74 0b                	je     9107 <vsprintf+0x191>
    90fc:	8b 44 24 38          	mov    0x38(%esp),%eax
    9100:	0f b6 00             	movzbl (%eax),%eax
    9103:	3c 4c                	cmp    $0x4c,%al
    9105:	75 19                	jne    9120 <vsprintf+0x1aa>
			qualifier = *fmt;
    9107:	8b 44 24 38          	mov    0x38(%esp),%eax
    910b:	0f b6 00             	movzbl (%eax),%eax
    910e:	0f be c0             	movsbl %al,%eax
    9111:	89 44 24 10          	mov    %eax,0x10(%esp)
			++fmt;
    9115:	8b 44 24 38          	mov    0x38(%esp),%eax
    9119:	83 c0 01             	add    $0x1,%eax
    911c:	89 44 24 38          	mov    %eax,0x38(%esp)
		}

		// 下面分析转换指示符.
		switch (*fmt) {
    9120:	8b 44 24 38          	mov    0x38(%esp),%eax
    9124:	0f b6 00             	movzbl (%eax),%eax
    9127:	0f be c0             	movsbl %al,%eax
    912a:	83 e8 58             	sub    $0x58,%eax
    912d:	83 f8 20             	cmp    $0x20,%eax
    9130:	0f 87 3c 02 00 00    	ja     9372 <vsprintf+0x3fc>
    9136:	8b 04 85 44 2f 02 00 	mov    0x22f44(,%eax,4),%eax
    913d:	ff e0                	jmp    *%eax
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
    913f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    9143:	83 e0 10             	and    $0x10,%eax
    9146:	85 c0                	test   %eax,%eax
    9148:	75 1c                	jne    9166 <vsprintf+0x1f0>
				while (--field_width > 0)
    914a:	eb 0e                	jmp    915a <vsprintf+0x1e4>
					*str++ = ' ';
    914c:	8b 44 24 24          	mov    0x24(%esp),%eax
    9150:	8d 50 01             	lea    0x1(%eax),%edx
    9153:	89 54 24 24          	mov    %edx,0x24(%esp)
    9157:	c6 00 20             	movb   $0x20,(%eax)
				while (--field_width > 0)
    915a:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    915f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9164:	7f e6                	jg     914c <vsprintf+0x1d6>
			*str++ = (unsigned char) va_arg(args, int);
    9166:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    916b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    916f:	83 e8 04             	sub    $0x4,%eax
    9172:	8b 08                	mov    (%eax),%ecx
    9174:	8b 44 24 24          	mov    0x24(%esp),%eax
    9178:	8d 50 01             	lea    0x1(%eax),%edx
    917b:	89 54 24 24          	mov    %edx,0x24(%esp)
    917f:	89 ca                	mov    %ecx,%edx
    9181:	88 10                	mov    %dl,(%eax)
			while (--field_width > 0)
    9183:	eb 0e                	jmp    9193 <vsprintf+0x21d>
				*str++ = ' ';
    9185:	8b 44 24 24          	mov    0x24(%esp),%eax
    9189:	8d 50 01             	lea    0x1(%eax),%edx
    918c:	89 54 24 24          	mov    %edx,0x24(%esp)
    9190:	c6 00 20             	movb   $0x20,(%eax)
			while (--field_width > 0)
    9193:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    9198:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    919d:	7f e6                	jg     9185 <vsprintf+0x20f>
			break;
    919f:	e9 14 02 00 00       	jmp    93b8 <vsprintf+0x442>

		// 如果转换指示符是's',则表示对应参数是字符串.首先取参数字符串的长度,若其超过了精度域值,则扩展精度=字符串长度.此时如果标志域表明不是左靠齐,
		// 则该字段前放入'宽度值-字符串长度'个空格字符.然后再放入参数字符串.如果宽度域还大于0,则表示为左靠齐,则在参数字符串后面添加'宽度值-字符串长
		// 度'个空格字符.
		case 's':
			s = va_arg(args, char *);
    91a4:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    91a9:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    91ad:	8b 40 fc             	mov    -0x4(%eax),%eax
    91b0:	89 44 24 20          	mov    %eax,0x20(%esp)
			len = strlen(s);
    91b4:	ff 74 24 20          	pushl  0x20(%esp)
    91b8:	e8 c9 fa ff ff       	call   8c86 <strlen>
    91bd:	83 c4 04             	add    $0x4,%esp
    91c0:	89 44 24 2c          	mov    %eax,0x2c(%esp)
			if (precision < 0)
    91c4:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    91c9:	79 0a                	jns    91d5 <vsprintf+0x25f>
				precision = len;
    91cb:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91cf:	89 44 24 14          	mov    %eax,0x14(%esp)
    91d3:	eb 12                	jmp    91e7 <vsprintf+0x271>
			else if (len > precision)
    91d5:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91d9:	3b 44 24 14          	cmp    0x14(%esp),%eax
    91dd:	7e 08                	jle    91e7 <vsprintf+0x271>
				len = precision;
    91df:	8b 44 24 14          	mov    0x14(%esp),%eax
    91e3:	89 44 24 2c          	mov    %eax,0x2c(%esp)

			if (!(flags & LEFT))
    91e7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    91eb:	83 e0 10             	and    $0x10,%eax
    91ee:	85 c0                	test   %eax,%eax
    91f0:	75 21                	jne    9213 <vsprintf+0x29d>
				while (len < field_width--)
    91f2:	eb 0e                	jmp    9202 <vsprintf+0x28c>
					*str++ = ' ';
    91f4:	8b 44 24 24          	mov    0x24(%esp),%eax
    91f8:	8d 50 01             	lea    0x1(%eax),%edx
    91fb:	89 54 24 24          	mov    %edx,0x24(%esp)
    91ff:	c6 00 20             	movb   $0x20,(%eax)
				while (len < field_width--)
    9202:	8b 44 24 18          	mov    0x18(%esp),%eax
    9206:	8d 50 ff             	lea    -0x1(%eax),%edx
    9209:	89 54 24 18          	mov    %edx,0x18(%esp)
    920d:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    9211:	7c e1                	jl     91f4 <vsprintf+0x27e>
			for (i = 0; i < len; ++i)
    9213:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    921a:	00 
    921b:	eb 20                	jmp    923d <vsprintf+0x2c7>
				*str++ = *s++;
    921d:	8b 54 24 20          	mov    0x20(%esp),%edx
    9221:	8d 42 01             	lea    0x1(%edx),%eax
    9224:	89 44 24 20          	mov    %eax,0x20(%esp)
    9228:	8b 44 24 24          	mov    0x24(%esp),%eax
    922c:	8d 48 01             	lea    0x1(%eax),%ecx
    922f:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    9233:	0f b6 12             	movzbl (%edx),%edx
    9236:	88 10                	mov    %dl,(%eax)
			for (i = 0; i < len; ++i)
    9238:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    923d:	8b 44 24 28          	mov    0x28(%esp),%eax
    9241:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9245:	7c d6                	jl     921d <vsprintf+0x2a7>
			while (len < field_width--)
    9247:	eb 0e                	jmp    9257 <vsprintf+0x2e1>
				*str++ = ' ';
    9249:	8b 44 24 24          	mov    0x24(%esp),%eax
    924d:	8d 50 01             	lea    0x1(%eax),%edx
    9250:	89 54 24 24          	mov    %edx,0x24(%esp)
    9254:	c6 00 20             	movb   $0x20,(%eax)
			while (len < field_width--)
    9257:	8b 44 24 18          	mov    0x18(%esp),%eax
    925b:	8d 50 ff             	lea    -0x1(%eax),%edx
    925e:	89 54 24 18          	mov    %edx,0x18(%esp)
    9262:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    9266:	7c e1                	jl     9249 <vsprintf+0x2d3>
			break;
    9268:	e9 4b 01 00 00       	jmp    93b8 <vsprintf+0x442>

		// 如果格式转换符是'o',表示需将对应的参数转换成八进制数的字符串.调用number()函数处理.
		case 'o':
			str = number(str, va_arg(args, unsigned long), 8,
    926d:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9272:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9276:	83 e8 04             	sub    $0x4,%eax
    9279:	8b 00                	mov    (%eax),%eax
    927b:	ff 74 24 1c          	pushl  0x1c(%esp)
    927f:	ff 74 24 18          	pushl  0x18(%esp)
    9283:	ff 74 24 20          	pushl  0x20(%esp)
    9287:	6a 08                	push   $0x8
    9289:	50                   	push   %eax
    928a:	ff 74 24 38          	pushl  0x38(%esp)
    928e:	e8 6c fa ff ff       	call   8cff <number>
    9293:	83 c4 18             	add    $0x18,%esp
    9296:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    929a:	e9 19 01 00 00       	jmp    93b8 <vsprintf+0x442>

		// 如果格式转换符是'p',表示对应参数是一个指针类型.此时若该参数没有设置宽度域,则默认宽度为8,并且需要添零.然后调用number()函数进行处理.
		case 'p':
			if (field_width == -1) {
    929f:	83 7c 24 18 ff       	cmpl   $0xffffffff,0x18(%esp)
    92a4:	75 0d                	jne    92b3 <vsprintf+0x33d>
				field_width = 8;
    92a6:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%esp)
    92ad:	00 
				flags |= ZEROPAD;
    92ae:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
    92b3:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92b8:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92bc:	83 e8 04             	sub    $0x4,%eax
    92bf:	8b 00                	mov    (%eax),%eax
			str = number(str,
    92c1:	ff 74 24 1c          	pushl  0x1c(%esp)
    92c5:	ff 74 24 18          	pushl  0x18(%esp)
    92c9:	ff 74 24 20          	pushl  0x20(%esp)
    92cd:	6a 10                	push   $0x10
    92cf:	50                   	push   %eax
    92d0:	ff 74 24 38          	pushl  0x38(%esp)
    92d4:	e8 26 fa ff ff       	call   8cff <number>
    92d9:	83 c4 18             	add    $0x18,%esp
    92dc:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    92e0:	e9 d3 00 00 00       	jmp    93b8 <vsprintf+0x442>

		// 如果格式转换指示是'x'或'X',则表示对应参数需要打印成十六进制数输出.'x'表示用定字母表示.
		case 'x':
			flags |= SMALL;
    92e5:	83 4c 24 1c 40       	orl    $0x40,0x1c(%esp)
		case 'X':
			str = number(str, va_arg(args, unsigned long), 16,
    92ea:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92ef:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92f3:	83 e8 04             	sub    $0x4,%eax
    92f6:	8b 00                	mov    (%eax),%eax
    92f8:	ff 74 24 1c          	pushl  0x1c(%esp)
    92fc:	ff 74 24 18          	pushl  0x18(%esp)
    9300:	ff 74 24 20          	pushl  0x20(%esp)
    9304:	6a 10                	push   $0x10
    9306:	50                   	push   %eax
    9307:	ff 74 24 38          	pushl  0x38(%esp)
    930b:	e8 ef f9 ff ff       	call   8cff <number>
    9310:	83 c4 18             	add    $0x18,%esp
    9313:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9317:	e9 9c 00 00 00       	jmp    93b8 <vsprintf+0x442>

		// 如果格式转换字符是'd','i'或'u',则表示对应参数是整数,'d','i'代表符号整数,因此需要加上带符号标志.'u'代表无符号整数.
		case 'd':
		case 'i':
			flags |= SIGN;
    931c:	83 4c 24 1c 02       	orl    $0x2,0x1c(%esp)
		case 'u':
			str = number(str, va_arg(args, unsigned long), 10,
    9321:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9326:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    932a:	83 e8 04             	sub    $0x4,%eax
    932d:	8b 00                	mov    (%eax),%eax
    932f:	ff 74 24 1c          	pushl  0x1c(%esp)
    9333:	ff 74 24 18          	pushl  0x18(%esp)
    9337:	ff 74 24 20          	pushl  0x20(%esp)
    933b:	6a 0a                	push   $0xa
    933d:	50                   	push   %eax
    933e:	ff 74 24 38          	pushl  0x38(%esp)
    9342:	e8 b8 f9 ff ff       	call   8cff <number>
    9347:	83 c4 18             	add    $0x18,%esp
    934a:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    934e:	eb 68                	jmp    93b8 <vsprintf+0x442>

		// 若格式转换指示符是'n',则表示要把目前为止转换输出字符数保存到对应参数指针指定的位置中.首先利用va_arg()取得该参数指针,然后将已经转换好
		// 的字符数存入该指示的位置.
		case 'n':
			ip = va_arg(args, int *);
    9350:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9355:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9359:	8b 40 fc             	mov    -0x4(%eax),%eax
    935c:	89 44 24 0c          	mov    %eax,0xc(%esp)
			*ip = (str - buf);
    9360:	8b 54 24 24          	mov    0x24(%esp),%edx
    9364:	8b 44 24 34          	mov    0x34(%esp),%eax
    9368:	29 c2                	sub    %eax,%edx
    936a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    936e:	89 10                	mov    %edx,(%eax)
			break;
    9370:	eb 46                	jmp    93b8 <vsprintf+0x442>

		// 若格式转换符不是'%',则表示格式字符串有错,直接将一个'%'写入输出串中.
		// 如果格式转换符的位置处还有字符,则也直接将该字符写入输出串中,并返回前面继续处理格式字符串.否则表示已经处理到格式字符串的结尾处,则退出循环.
		default:
			if (*fmt != '%')
    9372:	8b 44 24 38          	mov    0x38(%esp),%eax
    9376:	0f b6 00             	movzbl (%eax),%eax
    9379:	3c 25                	cmp    $0x25,%al
    937b:	74 0e                	je     938b <vsprintf+0x415>
				*str++ = '%';
    937d:	8b 44 24 24          	mov    0x24(%esp),%eax
    9381:	8d 50 01             	lea    0x1(%eax),%edx
    9384:	89 54 24 24          	mov    %edx,0x24(%esp)
    9388:	c6 00 25             	movb   $0x25,(%eax)
			if (*fmt)
    938b:	8b 44 24 38          	mov    0x38(%esp),%eax
    938f:	0f b6 00             	movzbl (%eax),%eax
    9392:	84 c0                	test   %al,%al
    9394:	74 16                	je     93ac <vsprintf+0x436>
				*str++ = *fmt;
    9396:	8b 54 24 38          	mov    0x38(%esp),%edx
    939a:	8b 44 24 24          	mov    0x24(%esp),%eax
    939e:	8d 48 01             	lea    0x1(%eax),%ecx
    93a1:	89 4c 24 24          	mov    %ecx,0x24(%esp)
    93a5:	0f b6 12             	movzbl (%edx),%edx
    93a8:	88 10                	mov    %dl,(%eax)
			else
				--fmt;
			break;
    93aa:	eb 0b                	jmp    93b7 <vsprintf+0x441>
				--fmt;
    93ac:	8b 44 24 38          	mov    0x38(%esp),%eax
    93b0:	83 e8 01             	sub    $0x1,%eax
    93b3:	89 44 24 38          	mov    %eax,0x38(%esp)
			break;
    93b7:	90                   	nop
	for (str=buf ; *fmt ; ++fmt) {
    93b8:	8b 44 24 38          	mov    0x38(%esp),%eax
    93bc:	83 c0 01             	add    $0x1,%eax
    93bf:	89 44 24 38          	mov    %eax,0x38(%esp)
    93c3:	8b 44 24 38          	mov    0x38(%esp),%eax
    93c7:	0f b6 00             	movzbl (%eax),%eax
    93ca:	84 c0                	test   %al,%al
    93cc:	0f 85 b4 fb ff ff    	jne    8f86 <vsprintf+0x10>
		}
	}
	*str = '\0';										// 最后在转换好的字符串结尾处添上null.
    93d2:	8b 44 24 24          	mov    0x24(%esp),%eax
    93d6:	c6 00 00             	movb   $0x0,(%eax)
	return str - buf;									// 返回转换好的字符串长度值.
    93d9:	8b 54 24 24          	mov    0x24(%esp),%edx
    93dd:	8b 44 24 34          	mov    0x34(%esp),%eax
    93e1:	29 c2                	sub    %eax,%edx
    93e3:	89 d0                	mov    %edx,%eax
}
    93e5:	83 c4 30             	add    $0x30,%esp
    93e8:	c3                   	ret    

000093e9 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    93e9:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93ea:	8b 44 24 08          	mov    0x8(%esp),%eax
    93ee:	64 8a 00             	mov    %fs:(%eax),%al
    93f1:	89 c3                	mov    %eax,%ebx
	return _v;
    93f3:	89 d8                	mov    %ebx,%eax
}
    93f5:	5b                   	pop    %ebx
    93f6:	c3                   	ret    

000093f7 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
    93f7:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93fa:	8b 44 24 14          	mov    0x14(%esp),%eax
    93fe:	64 66 8b 00          	mov    %fs:(%eax),%ax
    9402:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
    9407:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
    940c:	83 c4 10             	add    $0x10,%esp
    940f:	c3                   	ret    

00009410 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    9410:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    9413:	8b 44 24 14          	mov    0x14(%esp),%eax
    9417:	64 8b 00             	mov    %fs:(%eax),%eax
    941a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    941e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9422:	83 c4 10             	add    $0x10,%esp
    9425:	c3                   	ret    

00009426 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    9426:	83 ec 04             	sub    $0x4,%esp
    9429:	8b 44 24 08          	mov    0x8(%esp),%eax
    942d:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    9430:	0f b6 04 24          	movzbl (%esp),%eax
    9434:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9438:	64 88 02             	mov    %al,%fs:(%edx)
}
    943b:	90                   	nop
    943c:	83 c4 04             	add    $0x4,%esp
    943f:	c3                   	ret    

00009440 <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
    9440:	83 ec 04             	sub    $0x4,%esp
    9443:	8b 44 24 08          	mov    0x8(%esp),%eax
    9447:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
    944b:	0f b7 04 24          	movzwl (%esp),%eax
    944f:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9453:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
    9457:	90                   	nop
    9458:	83 c4 04             	add    $0x4,%esp
    945b:	c3                   	ret    

0000945c <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    945c:	8b 44 24 04          	mov    0x4(%esp),%eax
    9460:	8b 54 24 08          	mov    0x8(%esp),%edx
    9464:	64 89 02             	mov    %eax,%fs:(%edx)
}
    9467:	90                   	nop
    9468:	c3                   	ret    

00009469 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    9469:	57                   	push   %edi
    946a:	83 ec 04             	sub    $0x4,%esp
    946d:	8b 44 24 10          	mov    0x10(%esp),%eax
    9471:	88 04 24             	mov    %al,(%esp)
__asm__(
    9474:	0f b6 04 24          	movzbl (%esp),%eax
    9478:	8b 54 24 0c          	mov    0xc(%esp),%edx
    947c:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    9480:	89 d7                	mov    %edx,%edi
    9482:	fc                   	cld    
    9483:	57                   	push   %edi
    9484:	f3 aa                	rep stos %al,%es:(%edi)
    9486:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    9487:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    948b:	83 c4 04             	add    $0x4,%esp
    948e:	5f                   	pop    %edi
    948f:	c3                   	ret    

00009490 <sys_ftime>:

// 返回日期和时间（ftime - Fetch time）。
// 以下返回值是-ENOSYS的系统调用函数均表示在本版本内核中还未实现。
int sys_ftime()
{
	return -ENOSYS;
    9490:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9495:	c3                   	ret    

00009496 <sys_break>:

int sys_break()
{
	return -ENOSYS;
    9496:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    949b:	c3                   	ret    

0000949c <sys_ptrace>:

// 用于当前进程对子进程进行高度（debugging）。
int sys_ptrace()
{
	return -ENOSYS;
    949c:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a1:	c3                   	ret    

000094a2 <sys_stty>:

// 改变并打印终端行设置。
int sys_stty()
{
	return -ENOSYS;
    94a2:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a7:	c3                   	ret    

000094a8 <sys_gtty>:

// 取终端行设置信息。
int sys_gtty()
{
	return -ENOSYS;
    94a8:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94ad:	c3                   	ret    

000094ae <sys_rename>:

// 修改文件名。
int sys_rename()
{
	return -ENOSYS;
    94ae:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94b3:	c3                   	ret    

000094b4 <sys_prof>:

int sys_prof()
{
	return -ENOSYS;
    94b4:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94b9:	c3                   	ret    

000094ba <sys_setregid>:
// 设置当前任务的实际以及/或者有效组ID（gid）。如果任务没有超级用户特权，那么只能互换其实际组ID和有效组ID。
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
    94ba:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    94bf:	7e 3e                	jle    94ff <sys_setregid+0x45>
		if ((current->gid == rgid) ||
    94c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94c6:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    94cd:	0f b7 c0             	movzwl %ax,%eax
    94d0:	39 44 24 04          	cmp    %eax,0x4(%esp)
    94d4:	74 11                	je     94e7 <sys_setregid+0x2d>
		    suser())
    94d6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94db:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		if ((current->gid == rgid) ||
    94e2:	66 85 c0             	test   %ax,%ax
    94e5:	75 12                	jne    94f9 <sys_setregid+0x3f>
			current->gid = rgid;
    94e7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    94ec:	8b 54 24 04          	mov    0x4(%esp),%edx
    94f0:	66 89 90 d2 02 00 00 	mov    %dx,0x2d2(%eax)
    94f7:	eb 06                	jmp    94ff <sys_setregid+0x45>
		else
			return(-EPERM);
    94f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    94fe:	c3                   	ret    
	}
	if (egid > 0) {
    94ff:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    9504:	7e 63                	jle    9569 <sys_setregid+0xaf>
		if ((current->gid == egid) ||
    9506:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    950b:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    9512:	0f b7 c0             	movzwl %ax,%eax
    9515:	39 44 24 08          	cmp    %eax,0x8(%esp)
    9519:	74 26                	je     9541 <sys_setregid+0x87>
		    (current->egid == egid) ||
    951b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9520:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9527:	0f b7 c0             	movzwl %ax,%eax
		if ((current->gid == egid) ||
    952a:	39 44 24 08          	cmp    %eax,0x8(%esp)
    952e:	74 11                	je     9541 <sys_setregid+0x87>
		    suser()) {
    9530:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9535:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		    (current->egid == egid) ||
    953c:	66 85 c0             	test   %ax,%ax
    953f:	75 22                	jne    9563 <sys_setregid+0xa9>
			current->egid = egid;
    9541:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9546:	8b 54 24 08          	mov    0x8(%esp),%edx
    954a:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
			current->sgid = egid;
    9551:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9556:	8b 54 24 08          	mov    0x8(%esp),%edx
    955a:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%eax)
    9561:	eb 06                	jmp    9569 <sys_setregid+0xaf>
		} else
			return(-EPERM);
    9563:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9568:	c3                   	ret    
	}
	return 0;
    9569:	b8 00 00 00 00       	mov    $0x0,%eax
}
    956e:	c3                   	ret    

0000956f <sys_setgid>:
// 设置进程组号（gid）。如果任务没有超级用户特权，它可以使用setgid()将其有效gid（effective gid）设置为成其保留
// gid（saved git）或其实际git（real gid）。如果任务有超级用户特权，则实际gid、有效gid和保留gid都被设置成参数
// 指定的gid。
int sys_setgid(int gid)
{
	if (suser())
    956f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9574:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    957b:	66 85 c0             	test   %ax,%ax
    957e:	75 3a                	jne    95ba <sys_setgid+0x4b>
		current->gid = current->egid = current->sgid = gid;
    9580:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9586:	8b 44 24 04          	mov    0x4(%esp),%eax
    958a:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
    9591:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9596:	0f b7 92 d6 02 00 00 	movzwl 0x2d6(%edx),%edx
    959d:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    95a4:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    95aa:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    95b1:	66 89 82 d2 02 00 00 	mov    %ax,0x2d2(%edx)
    95b8:	eb 42                	jmp    95fc <sys_setgid+0x8d>
	else if ((gid == current->gid) || (gid == current->sgid))
    95ba:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95bf:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    95c6:	0f b7 c0             	movzwl %ax,%eax
    95c9:	39 44 24 04          	cmp    %eax,0x4(%esp)
    95cd:	74 15                	je     95e4 <sys_setgid+0x75>
    95cf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95d4:	0f b7 80 d6 02 00 00 	movzwl 0x2d6(%eax),%eax
    95db:	0f b7 c0             	movzwl %ax,%eax
    95de:	39 44 24 04          	cmp    %eax,0x4(%esp)
    95e2:	75 12                	jne    95f6 <sys_setgid+0x87>
		current->egid = gid;
    95e4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    95e9:	8b 54 24 04          	mov    0x4(%esp),%edx
    95ed:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    95f4:	eb 06                	jmp    95fc <sys_setgid+0x8d>
	else
		return -EPERM;
    95f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    95fb:	c3                   	ret    
	return 0;
    95fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9601:	c3                   	ret    

00009602 <sys_acct>:

// 打开或关闭进程计账功能。
int sys_acct()
{
	return -ENOSYS;
    9602:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9607:	c3                   	ret    

00009608 <sys_phys>:

// 映射任意物理内在到进程的虚拟地址空间。
int sys_phys()
{
	return -ENOSYS;
    9608:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    960d:	c3                   	ret    

0000960e <sys_lock>:

int sys_lock()
{
	return -ENOSYS;
    960e:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9613:	c3                   	ret    

00009614 <sys_mpx>:

int sys_mpx()
{
	return -ENOSYS;
    9614:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9619:	c3                   	ret    

0000961a <sys_ulimit>:

int sys_ulimit()
{
	return -ENOSYS;
    961a:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    961f:	c3                   	ret    

00009620 <sys_time>:

// 返回从1970年1月1日00:00:00 GMT开始计时的时间值（秒）。如果tloc不为null，则时间值也存储在那里。
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数put_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。
int sys_time(long * tloc)
{
    9620:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	i = CURRENT_TIME;
    9623:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    9628:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    962e:	01 d0                	add    %edx,%eax
    9630:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9635:	f7 e2                	mul    %edx
    9637:	c1 ea 05             	shr    $0x5,%edx
    963a:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    963f:	01 d0                	add    %edx,%eax
    9641:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (tloc) {
    9645:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    964a:	74 25                	je     9671 <sys_time+0x51>
		verify_area(tloc,4);            				// 验证内存容量是否够（这里是4字节）。
    964c:	83 ec 08             	sub    $0x8,%esp
    964f:	6a 04                	push   $0x4
    9651:	ff 74 24 2c          	pushl  0x2c(%esp)
    9655:	e8 45 ed ff ff       	call   839f <verify_area>
    965a:	83 c4 10             	add    $0x10,%esp
		put_fs_long(i,(unsigned long *)tloc);   		// 放入用户数据段tloc处。
    965d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9661:	83 ec 08             	sub    $0x8,%esp
    9664:	ff 74 24 28          	pushl  0x28(%esp)
    9668:	50                   	push   %eax
    9669:	e8 ee fd ff ff       	call   945c <put_fs_long>
    966e:	83 c4 10             	add    $0x10,%esp
	}
	return i;
    9671:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9675:	83 c4 1c             	add    $0x1c,%esp
    9678:	c3                   	ret    

00009679 <sys_setreuid>:
 * 用setuid()和保存的gid的程序将会与POSIX 100%兼容。
 */
// 设置任务的实际以及/或者有效的用户ID（uid）。如果任务没有超级用户特权，那么只能互换其实际的uid和有效的uid。如果
// 任务具有超级用户特权，就能任意设置有效的和实际的用户ID。保存的uid（saved uid）被设置成与有效uid同值。
int sys_setreuid(int ruid, int euid)
{
    9679:	83 ec 10             	sub    $0x10,%esp
	int old_ruid = current->uid;
    967c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9681:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    9688:	0f b7 c0             	movzwl %ax,%eax
    968b:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (ruid > 0) {
    968f:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    9694:	7e 49                	jle    96df <sys_setreuid+0x66>
		if ((current->euid == ruid) ||
    9696:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    969b:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    96a2:	0f b7 c0             	movzwl %ax,%eax
    96a5:	39 44 24 14          	cmp    %eax,0x14(%esp)
    96a9:	74 1b                	je     96c6 <sys_setreuid+0x4d>
    96ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96af:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96b3:	74 11                	je     96c6 <sys_setreuid+0x4d>
                    (old_ruid == ruid) ||
		    suser())
    96b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96ba:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
                    (old_ruid == ruid) ||
    96c1:	66 85 c0             	test   %ax,%ax
    96c4:	75 12                	jne    96d8 <sys_setreuid+0x5f>
			current->uid = ruid;
    96c6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96cb:	8b 54 24 14          	mov    0x14(%esp),%edx
    96cf:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
    96d6:	eb 07                	jmp    96df <sys_setreuid+0x66>
		else
			return(-EPERM);
    96d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    96dd:	eb 75                	jmp    9754 <sys_setreuid+0xdb>
	}
	if (euid > 0) {
    96df:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    96e4:	7e 69                	jle    974f <sys_setreuid+0xd6>
		if ((old_ruid == euid) ||
    96e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96ea:	3b 44 24 18          	cmp    0x18(%esp),%eax
    96ee:	74 26                	je     9716 <sys_setreuid+0x9d>
                    (current->euid == euid) ||
    96f0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    96f5:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    96fc:	0f b7 c0             	movzwl %ax,%eax
		if ((old_ruid == euid) ||
    96ff:	39 44 24 18          	cmp    %eax,0x18(%esp)
    9703:	74 11                	je     9716 <sys_setreuid+0x9d>
		    suser()) {
    9705:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    970a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
                    (current->euid == euid) ||
    9711:	66 85 c0             	test   %ax,%ax
    9714:	75 22                	jne    9738 <sys_setreuid+0xbf>
			current->euid = euid;
    9716:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    971b:	8b 54 24 18          	mov    0x18(%esp),%edx
    971f:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
			current->suid = euid;
    9726:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    972b:	8b 54 24 18          	mov    0x18(%esp),%edx
    972f:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%eax)
    9736:	eb 17                	jmp    974f <sys_setreuid+0xd6>
		} else {
			current->uid = old_ruid;
    9738:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    973d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9741:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
			return(-EPERM);
    9748:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    974d:	eb 05                	jmp    9754 <sys_setreuid+0xdb>
		}
	}
	return 0;
    974f:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9754:	83 c4 10             	add    $0x10,%esp
    9757:	c3                   	ret    

00009758 <sys_setuid>:
// 设置任务用户ID（uid）。如果任务没有超级用户特权，它可以使用setuid()将其有效的uid（effective uid）设置成其保存
// 的uid（saved uid）或其实际的uid（real uid）。如果用户有超级用户特权，则实际的uid、有效的uid和保存的uid都会被
// 设置成参数指定的uid。
int sys_setuid(int uid)
{
	if (suser())
    9758:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    975d:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9764:	66 85 c0             	test   %ax,%ax
    9767:	75 3a                	jne    97a3 <sys_setuid+0x4b>
		current->uid = current->euid = current->suid = uid;
    9769:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    976f:	8b 44 24 04          	mov    0x4(%esp),%eax
    9773:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
    977a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    977f:	0f b7 92 d0 02 00 00 	movzwl 0x2d0(%edx),%edx
    9786:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    978d:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9793:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    979a:	66 89 82 cc 02 00 00 	mov    %ax,0x2cc(%edx)
    97a1:	eb 42                	jmp    97e5 <sys_setuid+0x8d>
	else if ((uid == current->uid) || (uid == current->suid))
    97a3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97a8:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    97af:	0f b7 c0             	movzwl %ax,%eax
    97b2:	39 44 24 04          	cmp    %eax,0x4(%esp)
    97b6:	74 15                	je     97cd <sys_setuid+0x75>
    97b8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97bd:	0f b7 80 d0 02 00 00 	movzwl 0x2d0(%eax),%eax
    97c4:	0f b7 c0             	movzwl %ax,%eax
    97c7:	39 44 24 04          	cmp    %eax,0x4(%esp)
    97cb:	75 12                	jne    97df <sys_setuid+0x87>
		current->euid = uid;
    97cd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97d2:	8b 54 24 04          	mov    0x4(%esp),%edx
    97d6:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97dd:	eb 06                	jmp    97e5 <sys_setuid+0x8d>
	else
		return -EPERM;
    97df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    97e4:	c3                   	ret    
	return(0);
    97e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    97ea:	c3                   	ret    

000097eb <sys_stime>:
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数get_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs被默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。函数参数提供的当前时间值减去
// 系统已经运行的时间秒值（jiffies/HZ）即是开机时间秒值。
int sys_stime(long * tptr)
{
	if (!suser())
    97eb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    97f0:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    97f7:	66 85 c0             	test   %ax,%ax
    97fa:	74 06                	je     9802 <sys_stime+0x17>
		return -EPERM;          					// 如果不是超级用户则出错返回（许可）。
    97fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9801:	c3                   	ret    
	startup_time = get_fs_long((unsigned long *)tptr) - jiffies / HZ;
    9802:	ff 74 24 04          	pushl  0x4(%esp)
    9806:	e8 05 fc ff ff       	call   9410 <get_fs_long>
    980b:	83 c4 04             	add    $0x4,%esp
    980e:	89 c1                	mov    %eax,%ecx
    9810:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    9815:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    981a:	f7 e2                	mul    %edx
    981c:	89 d0                	mov    %edx,%eax
    981e:	c1 e8 05             	shr    $0x5,%eax
    9821:	29 c1                	sub    %eax,%ecx
    9823:	89 c8                	mov    %ecx,%eax
    9825:	a3 04 fb 02 00       	mov    %eax,0x2fb04
	jiffies_offset = 0;
    982a:	c7 05 08 fb 02 00 00 	movl   $0x0,0x2fb08
    9831:	00 00 00 
	return 0;
    9834:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9839:	c3                   	ret    

0000983a <sys_times>:

// 获取当前任务运行时间统计值。
// 在tbuf所指用户数据空间处返回tms结构的任务运行时间统计值。tms结构中包括进程用户运行时间、内核（系统）时间、子进
// 程用户运行时间、子进程系统运行时间。函数返回值是系统运行到当前的嘀嗒数。
int sys_times(struct tms * tbuf)
{
    983a:	83 ec 0c             	sub    $0xc,%esp
	if (tbuf) {
    983d:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    9842:	0f 84 8b 00 00 00    	je     98d3 <sys_times+0x99>
		verify_area(tbuf,sizeof *tbuf);
    9848:	83 ec 08             	sub    $0x8,%esp
    984b:	6a 10                	push   $0x10
    984d:	ff 74 24 1c          	pushl  0x1c(%esp)
    9851:	e8 49 eb ff ff       	call   839f <verify_area>
    9856:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->utime,(unsigned long *)&tbuf->tms_utime);
    9859:	8b 44 24 10          	mov    0x10(%esp),%eax
    985d:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9863:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    9869:	83 ec 08             	sub    $0x8,%esp
    986c:	50                   	push   %eax
    986d:	52                   	push   %edx
    986e:	e8 e9 fb ff ff       	call   945c <put_fs_long>
    9873:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->stime,(unsigned long *)&tbuf->tms_stime);
    9876:	8b 44 24 10          	mov    0x10(%esp),%eax
    987a:	8d 50 04             	lea    0x4(%eax),%edx
    987d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9882:	8b 80 e4 02 00 00    	mov    0x2e4(%eax),%eax
    9888:	83 ec 08             	sub    $0x8,%esp
    988b:	52                   	push   %edx
    988c:	50                   	push   %eax
    988d:	e8 ca fb ff ff       	call   945c <put_fs_long>
    9892:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cutime,(unsigned long *)&tbuf->tms_cutime);
    9895:	8b 44 24 10          	mov    0x10(%esp),%eax
    9899:	8d 50 08             	lea    0x8(%eax),%edx
    989c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98a1:	8b 80 e8 02 00 00    	mov    0x2e8(%eax),%eax
    98a7:	83 ec 08             	sub    $0x8,%esp
    98aa:	52                   	push   %edx
    98ab:	50                   	push   %eax
    98ac:	e8 ab fb ff ff       	call   945c <put_fs_long>
    98b1:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cstime,(unsigned long *)&tbuf->tms_cstime);
    98b4:	8b 44 24 10          	mov    0x10(%esp),%eax
    98b8:	8d 50 0c             	lea    0xc(%eax),%edx
    98bb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98c0:	8b 80 ec 02 00 00    	mov    0x2ec(%eax),%eax
    98c6:	83 ec 08             	sub    $0x8,%esp
    98c9:	52                   	push   %edx
    98ca:	50                   	push   %eax
    98cb:	e8 8c fb ff ff       	call   945c <put_fs_long>
    98d0:	83 c4 10             	add    $0x10,%esp
	}
	return jiffies;
    98d3:	a1 00 fb 02 00       	mov    0x2fb00,%eax
}
    98d8:	83 c4 0c             	add    $0xc,%esp
    98db:	c3                   	ret    

000098dc <sys_brk>:
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    98dc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98e1:	8b 80 1c 02 00 00    	mov    0x21c(%eax),%eax
    98e7:	39 44 24 04          	cmp    %eax,0x4(%esp)
    98eb:	72 25                	jb     9912 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
    98ed:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    98f2:	8b 80 28 02 00 00    	mov    0x228(%eax),%eax
    98f8:	2d 00 40 00 00       	sub    $0x4000,%eax
	if (end_data_seg >= current->end_code &&
    98fd:	39 44 24 04          	cmp    %eax,0x4(%esp)
    9901:	73 0f                	jae    9912 <sys_brk+0x36>
		current->brk = end_data_seg;
    9903:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9908:	8b 54 24 04          	mov    0x4(%esp),%edx
    990c:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	return current->brk;            			// 返回进程当前的数据段结尾值。
    9912:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9917:	8b 80 24 02 00 00    	mov    0x224(%eax),%eax
}
    991d:	c3                   	ret    

0000991e <sys_setpgid>:
// 设置指定进程pid的进程组号为pgid。
// 参数pid是指定进程的进程号。如果它为0,则让pid等于当前进程的进程号。参数pgid是指定的进程组号。如果它为0,则让它等于
// 进程组号。如果该函数用于将进程从一个进程组移到另一个进程组，则这两个进程组必须属于同一个会话（session）。在这种情
// 况下，参数pgid指定了要加入的现在进程组ID，此时该组的会话ID必须与将要加入进程的相同。
int sys_setpgid(int pid, int pgid)
{
    991e:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果参数pid为0,则pid取值为当前进程的进程号pid。如果参数pgid为0,则pgid也取值为当前进程的pid。[??这里与POSIX标
	// 准的描述有出入]。若pgid小于0,则返回无效错误码。
	if (!pid)
    9921:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9926:	75 0f                	jne    9937 <sys_setpgid+0x19>
		pid = current->pid;
    9928:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    992d:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9933:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (!pgid)
    9937:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    993c:	75 0f                	jne    994d <sys_setpgid+0x2f>
		pgid = current->pid;
    993e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9943:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9949:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (pgid < 0)
    994d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9952:	79 0a                	jns    995e <sys_setpgid+0x40>
		return -EINVAL;
    9954:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9959:	e9 0e 01 00 00       	jmp    9a6c <sys_setpgid+0x14e>
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    995e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9965:	00 
    9966:	e9 f1 00 00 00       	jmp    9a5c <sys_setpgid+0x13e>
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
    996b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    996f:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    9976:	85 c0                	test   %eax,%eax
    9978:	0f 84 d9 00 00 00    	je     9a57 <sys_setpgid+0x139>
    997e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9982:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    9989:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    998f:	39 44 24 20          	cmp    %eax,0x20(%esp)
    9993:	0f 85 be 00 00 00    	jne    9a57 <sys_setpgid+0x139>
    9999:	8b 44 24 0c          	mov    0xc(%esp),%eax
    999d:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    99a4:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    99aa:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    99af:	39 c2                	cmp    %eax,%edx
    99b1:	74 18                	je     99cb <sys_setpgid+0xad>
    99b3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99b7:	8b 14 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%edx
    99be:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    99c3:	39 c2                	cmp    %eax,%edx
    99c5:	0f 85 8c 00 00 00    	jne    9a57 <sys_setpgid+0x139>
			if (task[i]->leader)
    99cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99cf:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    99d6:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    99dc:	85 c0                	test   %eax,%eax
    99de:	74 0a                	je     99ea <sys_setpgid+0xcc>
				return -EPERM;
    99e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    99e5:	e9 82 00 00 00       	jmp    9a6c <sys_setpgid+0x14e>
			if ((task[i]->session != current->session) ||
    99ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99ee:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    99f5:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    99fb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a00:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    9a06:	39 c2                	cmp    %eax,%edx
    9a08:	75 2a                	jne    9a34 <sys_setpgid+0x116>
    9a0a:	8b 44 24 24          	mov    0x24(%esp),%eax
    9a0e:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9a12:	74 27                	je     9a3b <sys_setpgid+0x11d>
			    ((pgid != pid) &&
			     (session_of_pgrp(pgid) != current->session)))
    9a14:	83 ec 0c             	sub    $0xc,%esp
    9a17:	ff 74 24 30          	pushl  0x30(%esp)
    9a1b:	e8 a3 10 00 00       	call   aac3 <session_of_pgrp>
    9a20:	83 c4 10             	add    $0x10,%esp
    9a23:	89 c2                	mov    %eax,%edx
    9a25:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a2a:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			    ((pgid != pid) &&
    9a30:	39 c2                	cmp    %eax,%edx
    9a32:	74 07                	je     9a3b <sys_setpgid+0x11d>
				return -EPERM;
    9a34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9a39:	eb 31                	jmp    9a6c <sys_setpgid+0x14e>
			task[i]->pgrp = pgid;
    9a3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a3f:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    9a46:	8b 54 24 24          	mov    0x24(%esp),%edx
    9a4a:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
			return 0;
    9a50:	b8 00 00 00 00       	mov    $0x0,%eax
    9a55:	eb 15                	jmp    9a6c <sys_setpgid+0x14e>
	for (i = 0 ; i < NR_TASKS ; i++)
    9a57:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9a5c:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    9a61:	0f 8e 04 ff ff ff    	jle    996b <sys_setpgid+0x4d>
		}
	return -ESRCH;
    9a67:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    9a6c:	83 c4 1c             	add    $0x1c,%esp
    9a6f:	c3                   	ret    

00009a70 <sys_getpgrp>:

// 返回当前进程的进程组号。与getpgid(0)等同。
int sys_getpgrp(void)
{
	return current->pgrp;
    9a70:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a75:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9a7b:	c3                   	ret    

00009a7c <sys_setsid>:
// 创建一个会话（session）（即设置其leader = 1），并且设置其会话号=其组号=其进程号。
// 如果当前进程已是会话首领并且不是超级用户，则出错返回。否则设置当前进程为新会话首领（leader = 1），并且设置当前进程会话
// 号session和组号pgrp都等于进程号pid，而且设置当前进程没有控制终端。最后系统调用返回会话号。
int sys_setsid(void)
{
	if (current->leader && !suser())
    9a7c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a81:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    9a87:	85 c0                	test   %eax,%eax
    9a89:	74 17                	je     9aa2 <sys_setsid+0x26>
    9a8b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9a90:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9a97:	66 85 c0             	test   %ax,%ax
    9a9a:	74 06                	je     9aa2 <sys_setsid+0x26>
		return -EPERM;
    9a9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9aa1:	c3                   	ret    
	current->leader = 1;
    9aa2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9aa7:	c7 80 38 02 00 00 01 	movl   $0x1,0x238(%eax)
    9aae:	00 00 00 
	current->session = current->pgrp = current->pid;
    9ab1:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9ab7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9abc:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    9ac2:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
    9ac8:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    9ace:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    9ad4:	89 82 34 02 00 00    	mov    %eax,0x234(%edx)
	current->tty = -1;      				// 表示当前进程没有控制终端。
    9ada:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9adf:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    9ae6:	ff ff ff 
	return current->pgrp;
    9ae9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9aee:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9af4:	c3                   	ret    

00009af5 <sys_getgroups>:
// 取当前进程其他辅助用户组号。
// 任务数据结构中groups[]数组保存着进程同时所属的多个用户组号。该数组共NGROUPS个项，若某项值是NOGROUP（即为-1），则
// 表示从该项开始以后所有项都空闲。否则数组项中保存的是用户组号。
// 参数gidsetsize是获取的用户组号个数；grouplist是存储这些用户组号的用户空间缓存。
int sys_getgroups(int gidsetsize, gid_t *grouplist)
{
    9af5:	83 ec 1c             	sub    $0x1c,%esp

	// 首先验证grouplist指针所指的用户缓存空间是否足够，然后从当前进程结构的groups[]数组中逐个取得用户组号并复制到用户缓存
	// 中。在复制过程中，如果groups[]中的项数大于给定的参数gitsetsize所指定的个数，则表示用户给出的缓存太小，不能容下当前
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
    9af8:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9afd:	74 16                	je     9b15 <sys_getgroups+0x20>
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);
    9aff:	8b 44 24 20          	mov    0x20(%esp),%eax
    9b03:	01 c0                	add    %eax,%eax
    9b05:	83 ec 08             	sub    $0x8,%esp
    9b08:	50                   	push   %eax
    9b09:	ff 74 24 30          	pushl  0x30(%esp)
    9b0d:	e8 8d e8 ff ff       	call   839f <verify_area>
    9b12:	83 c4 10             	add    $0x10,%esp

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b15:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9b1c:	00 
    9b1d:	eb 46                	jmp    9b65 <sys_getgroups+0x70>
		if (gidsetsize) {
    9b1f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b24:	74 35                	je     9b5b <sys_getgroups+0x66>
			if (i >= gidsetsize)
    9b26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9b2a:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9b2e:	7c 07                	jl     9b37 <sys_getgroups+0x42>
				return -EINVAL;
    9b30:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9b35:	eb 51                	jmp    9b88 <sys_getgroups+0x93>
			put_fs_word(current->groups[i], (short *) grouplist);
    9b37:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b3c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b40:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b46:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b4a:	98                   	cwtl   
    9b4b:	83 ec 08             	sub    $0x8,%esp
    9b4e:	ff 74 24 2c          	pushl  0x2c(%esp)
    9b52:	50                   	push   %eax
    9b53:	e8 e8 f8 ff ff       	call   9440 <put_fs_word>
    9b58:	83 c4 10             	add    $0x10,%esp
	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b5b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9b60:	83 44 24 24 02       	addl   $0x2,0x24(%esp)
    9b65:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9b6a:	7f 18                	jg     9b84 <sys_getgroups+0x8f>
    9b6c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b71:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b75:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b7b:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b7f:	83 f8 ff             	cmp    $0xffffffff,%eax
    9b82:	75 9b                	jne    9b1f <sys_getgroups+0x2a>
		}
	}
	return(i);              				// 返回实际含有的用户组号个数。
    9b84:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9b88:	83 c4 1c             	add    $0x1c,%esp
    9b8b:	c3                   	ret    

00009b8c <sys_setgroups>:

// 设置当前进程同时所属的其他辅助用户组号。
// 参数gidsetsize是将设置的用户组号个数；grouplist是含有用户组号的用户空间缓存。
int sys_setgroups(int gidsetsize, gid_t *grouplist)
{
    9b8c:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 首先查权限和参数的有效性。只有超级用户可以修改或设置当前进程的辅助用户组号，而且设置的项数不能超过进程的groups[NGROUPS]
	// 数组的容量。然后从用户缓冲中逐个复制用户组号，共gidsetsize个。如果复制的个数没有填满group[]，则在随后一项上填上值为-1
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
    9b8f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9b94:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9b9b:	66 85 c0             	test   %ax,%ax
    9b9e:	74 07                	je     9ba7 <sys_setgroups+0x1b>
		return -EPERM;
    9ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9ba5:	eb 73                	jmp    9c1a <sys_setgroups+0x8e>
	if (gidsetsize > NGROUPS)
    9ba7:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    9bac:	7e 07                	jle    9bb5 <sys_setgroups+0x29>
		return -EINVAL;
    9bae:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9bb3:	eb 65                	jmp    9c1a <sys_setgroups+0x8e>
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bb5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9bbc:	00 
    9bbd:	eb 2e                	jmp    9bed <sys_setgroups+0x61>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
    9bbf:	ff 74 24 18          	pushl  0x18(%esp)
    9bc3:	e8 2f f8 ff ff       	call   93f7 <get_fs_word>
    9bc8:	83 c4 04             	add    $0x4,%esp
    9bcb:	89 c2                	mov    %eax,%edx
    9bcd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9bd2:	0f b7 d2             	movzwl %dx,%edx
    9bd5:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9bd9:	81 c1 8c 00 00 00    	add    $0x8c,%ecx
    9bdf:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9be3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9be8:	83 44 24 18 02       	addl   $0x2,0x18(%esp)
    9bed:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9bf1:	3b 44 24 14          	cmp    0x14(%esp),%eax
    9bf5:	7c c8                	jl     9bbf <sys_setgroups+0x33>
	}
	if (i < NGROUPS)
    9bf7:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9bfc:	7f 17                	jg     9c15 <sys_setgroups+0x89>
		current->groups[i] = NOGROUP;
    9bfe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c03:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9c07:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c0d:	c7 44 90 0c ff ff ff 	movl   $0xffffffff,0xc(%eax,%edx,4)
    9c14:	ff 
	return 0;
    9c15:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c1a:	83 c4 10             	add    $0x10,%esp
    9c1d:	c3                   	ret    

00009c1e <in_group_p>:

// 检查当前进程是否在指定的用户组grp中.是则返回1,否则返回0.
int in_group_p(gid_t grp)
{
    9c1e:	83 ec 14             	sub    $0x14,%esp
    9c21:	8b 44 24 18          	mov    0x18(%esp),%eax
    9c25:	66 89 04 24          	mov    %ax,(%esp)
	int	i;

	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
    9c29:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c2e:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9c35:	66 39 04 24          	cmp    %ax,(%esp)
    9c39:	75 07                	jne    9c42 <in_group_p+0x24>
		return 1;
    9c3b:	b8 01 00 00 00       	mov    $0x1,%eax
    9c40:	eb 58                	jmp    9c9a <in_group_p+0x7c>

	for (i = 0; i < NGROUPS; i++) {
    9c42:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    9c49:	00 
    9c4a:	eb 3f                	jmp    9c8b <in_group_p+0x6d>
		if (current->groups[i] == NOGROUP)
    9c4c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c51:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c55:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c5b:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9c5f:	83 f8 ff             	cmp    $0xffffffff,%eax
    9c62:	74 30                	je     9c94 <in_group_p+0x76>
			break;
		if (current->groups[i] == grp)
    9c64:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9c69:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c6d:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c73:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
    9c77:	0f b7 04 24          	movzwl (%esp),%eax
    9c7b:	39 c2                	cmp    %eax,%edx
    9c7d:	75 07                	jne    9c86 <in_group_p+0x68>
			return 1;
    9c7f:	b8 01 00 00 00       	mov    $0x1,%eax
    9c84:	eb 14                	jmp    9c9a <in_group_p+0x7c>
	for (i = 0; i < NGROUPS; i++) {
    9c86:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    9c8b:	83 7c 24 10 1f       	cmpl   $0x1f,0x10(%esp)
    9c90:	7e ba                	jle    9c4c <in_group_p+0x2e>
    9c92:	eb 01                	jmp    9c95 <in_group_p+0x77>
			break;
    9c94:	90                   	nop
	}
	return 0;
    9c95:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c9a:	83 c4 14             	add    $0x14,%esp
    9c9d:	c3                   	ret    

00009c9e <sys_uname>:
	UTS_SYSNAME, UTS_NODENAME, UTS_RELEASE, UTS_VERSION, UTS_MACHINE
};

// 获取系统名称等信息。
int sys_uname(struct utsname * name)
{
    9c9e:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	if (!name) return -ERROR;
    9ca1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9ca6:	75 07                	jne    9caf <sys_uname+0x11>
    9ca8:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
    9cad:	eb 54                	jmp    9d03 <sys_uname+0x65>
	verify_area(name,sizeof *name);
    9caf:	83 ec 08             	sub    $0x8,%esp
    9cb2:	6a 2d                	push   $0x2d
    9cb4:	ff 74 24 2c          	pushl  0x2c(%esp)
    9cb8:	e8 e2 e6 ff ff       	call   839f <verify_area>
    9cbd:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9cc0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9cc7:	00 
    9cc8:	eb 2b                	jmp    9cf5 <sys_uname+0x57>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
    9cca:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9cce:	8b 44 24 20          	mov    0x20(%esp),%eax
    9cd2:	01 c2                	add    %eax,%edx
    9cd4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9cd8:	05 e0 f2 02 00       	add    $0x2f2e0,%eax
    9cdd:	0f b6 00             	movzbl (%eax),%eax
    9ce0:	0f be c0             	movsbl %al,%eax
    9ce3:	83 ec 08             	sub    $0x8,%esp
    9ce6:	52                   	push   %edx
    9ce7:	50                   	push   %eax
    9ce8:	e8 39 f7 ff ff       	call   9426 <put_fs_byte>
    9ced:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9cf0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9cf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9cf9:	83 f8 2c             	cmp    $0x2c,%eax
    9cfc:	76 cc                	jbe    9cca <sys_uname+0x2c>
	return 0;
    9cfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9d03:	83 c4 1c             	add    $0x1c,%esp
    9d06:	c3                   	ret    

00009d07 <sys_sethostname>:
 * 通过调用uname()只能实现sethostname和gethostname。
 */
// 设置系统主机名（系统的网络节点名）。
// 参数name指针指向用户数据区中含有主机名字符串的缓冲区；len是主机名字符串长度。
int sys_sethostname(char *name, int len)
{
    9d07:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
    9d0a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9d0f:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9d16:	66 85 c0             	test   %ax,%ax
    9d19:	74 0a                	je     9d25 <sys_sethostname+0x1e>
		return -EPERM;
    9d1b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9d20:	e9 85 00 00 00       	jmp    9daa <sys_sethostname+0xa3>
	if (len > MAXHOSTNAMELEN)
    9d25:	83 7c 24 18 08       	cmpl   $0x8,0x18(%esp)
    9d2a:	7e 07                	jle    9d33 <sys_sethostname+0x2c>
		return -EINVAL;
    9d2c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9d31:	eb 77                	jmp    9daa <sys_sethostname+0xa3>
	for (i = 0; i < len; i++) {
    9d33:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9d3a:	00 
    9d3b:	eb 35                	jmp    9d72 <sys_sethostname+0x6b>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
    9d3d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9d41:	8b 44 24 14          	mov    0x14(%esp),%eax
    9d45:	01 d0                	add    %edx,%eax
    9d47:	50                   	push   %eax
    9d48:	e8 9c f6 ff ff       	call   93e9 <get_fs_byte>
    9d4d:	83 c4 04             	add    $0x4,%esp
    9d50:	89 c2                	mov    %eax,%edx
    9d52:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d56:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d5b:	88 10                	mov    %dl,(%eax)
    9d5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d61:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d66:	0f b6 00             	movzbl (%eax),%eax
    9d69:	84 c0                	test   %al,%al
    9d6b:	74 11                	je     9d7e <sys_sethostname+0x77>
	for (i = 0; i < len; i++) {
    9d6d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d72:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d76:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9d7a:	7c c1                	jl     9d3d <sys_sethostname+0x36>
    9d7c:	eb 01                	jmp    9d7f <sys_sethostname+0x78>
			break;
    9d7e:	90                   	nop
	}
	// 在复制完毕后，如果用户提供的字符串没有包含NULL字符，那么若复制的主机名长度还没有超过MAXHOSTNAMELEN，则在主机名字
	// 符串后添加一个NULL。若已经填满MAXHOSTNAMELEN个字符，则把最后一个字符改成NULL字符。即thisname.nodename[min(
	// i,MAXHOSTNAMELEN)] = 0。
	if (thisname.nodename[i]) {
    9d7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d83:	05 e9 f2 02 00       	add    $0x2f2e9,%eax
    9d88:	0f b6 00             	movzbl (%eax),%eax
    9d8b:	84 c0                	test   %al,%al
    9d8d:	74 16                	je     9da5 <sys_sethostname+0x9e>
		thisname.nodename[i > MAXHOSTNAMELEN ? MAXHOSTNAMELEN : i] = 0;
    9d8f:	b8 08 00 00 00       	mov    $0x8,%eax
    9d94:	83 7c 24 0c 08       	cmpl   $0x8,0xc(%esp)
    9d99:	0f 4e 44 24 0c       	cmovle 0xc(%esp),%eax
    9d9e:	c6 80 e9 f2 02 00 00 	movb   $0x0,0x2f2e9(%eax)
	}
	return 0;
    9da5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9daa:	83 c4 10             	add    $0x10,%esp
    9dad:	c3                   	ret    

00009dae <sys_getrlimit>:
// 界限（hard limit，即硬限制）。rlim[]数组的每一项对应系统对当前进程一种资源的界限信息。Linux 0.12系统共对6种资源
// 规定了界限，即RLIM_NLIMITS=6。请参考头文件include/sys/resource.h说明。
// 参数resource指定我们咨询的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于存放取得的资源界限信息。
int sys_getrlimit(int resource, struct rlimit *rlim)
{
    9dae:	83 ec 0c             	sub    $0xc,%esp
	// 所咨询的资源resource实际上是进程任务结构中rlim[]数组的索引项值。该索引值当然不能大于数组的最大项数RLIM_NLIMITS。
	// 在验证过rlim指针所指用户缓冲足够以后，这里就把参数指定的资源resource结构信息复制到用户缓冲区中，并返回0。
	if (resource >= RLIM_NLIMITS)
    9db1:	83 7c 24 10 05       	cmpl   $0x5,0x10(%esp)
    9db6:	7e 07                	jle    9dbf <sys_getrlimit+0x11>
		return -EINVAL;
    9db8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9dbd:	eb 5a                	jmp    9e19 <sys_getrlimit+0x6b>
	verify_area(rlim, sizeof *rlim);
    9dbf:	83 ec 08             	sub    $0x8,%esp
    9dc2:	6a 08                	push   $0x8
    9dc4:	ff 74 24 20          	pushl  0x20(%esp)
    9dc8:	e8 d2 e5 ff ff       	call   839f <verify_area>
    9dcd:	83 c4 10             	add    $0x10,%esp
	put_fs_long(current->rlim[resource].rlim_cur,           // 当前（软）限制值。
    9dd0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9dd5:	8b 54 24 10          	mov    0x10(%esp),%edx
    9dd9:	83 c2 5e             	add    $0x5e,%edx
    9ddc:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
    9de0:	83 ec 08             	sub    $0x8,%esp
    9de3:	ff 74 24 1c          	pushl  0x1c(%esp)
    9de7:	50                   	push   %eax
    9de8:	e8 6f f6 ff ff       	call   945c <put_fs_long>
    9ded:	83 c4 10             	add    $0x10,%esp
		    (unsigned long *) rlim);
	put_fs_long(current->rlim[resource].rlim_max,           // 系统（硬）限制值。
    9df0:	8b 44 24 14          	mov    0x14(%esp),%eax
    9df4:	8d 50 04             	lea    0x4(%eax),%edx
    9df7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9dfc:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    9e00:	83 c1 5e             	add    $0x5e,%ecx
    9e03:	8b 44 c8 08          	mov    0x8(%eax,%ecx,8),%eax
    9e07:	83 ec 08             	sub    $0x8,%esp
    9e0a:	52                   	push   %edx
    9e0b:	50                   	push   %eax
    9e0c:	e8 4b f6 ff ff       	call   945c <put_fs_long>
    9e11:	83 c4 10             	add    $0x10,%esp
		    ((unsigned long *) rlim) + 1);
	return 0;
    9e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9e19:	83 c4 0c             	add    $0xc,%esp
    9e1c:	c3                   	ret    

00009e1d <sys_setrlimit>:

// 设置当前进程指定资源的界限值。
// 参数resource指定我们设置界限的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于内核读取新的资源界限信息。
int sys_setrlimit(int resource, struct rlimit *rlim)
{
    9e1d:	83 ec 10             	sub    $0x10,%esp

	// 首先判断参数resource（任务结构rlim[]项索引值）有效性。然后先让rlimit结构指针old指向进程任务结构中指定资源的当前
	// rlimit结构信息。接着把用户提供的资源界限信息复制到临时rlimit结构new中。此时如果判断出new结构中的软界限值或硬界限
	// 值大于进程该资源原硬界限值，并且当前不是超级用户的话，就返回许可出错。否则表示new中信息合理或者进程是超级用户进程，
	// 则修改原进程指定资源信息等于new结构中的信息，并成功返回0。
	if (resource >= RLIM_NLIMITS)
    9e20:	83 7c 24 14 05       	cmpl   $0x5,0x14(%esp)
    9e25:	7e 0a                	jle    9e31 <sys_setrlimit+0x14>
		return -EINVAL;
    9e27:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9e2c:	e9 88 00 00 00       	jmp    9eb9 <sys_setrlimit+0x9c>
	old = current->rlim + resource;
    9e31:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9e36:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
    9e3c:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e40:	c1 e0 03             	shl    $0x3,%eax
    9e43:	01 d0                	add    %edx,%eax
    9e45:	89 44 24 0c          	mov    %eax,0xc(%esp)
	new.rlim_cur = get_fs_long((unsigned long *) rlim);
    9e49:	ff 74 24 18          	pushl  0x18(%esp)
    9e4d:	e8 be f5 ff ff       	call   9410 <get_fs_long>
    9e52:	83 c4 04             	add    $0x4,%esp
    9e55:	89 44 24 04          	mov    %eax,0x4(%esp)
	new.rlim_max = get_fs_long(((unsigned long *) rlim) + 1);
    9e59:	8b 44 24 18          	mov    0x18(%esp),%eax
    9e5d:	83 c0 04             	add    $0x4,%eax
    9e60:	50                   	push   %eax
    9e61:	e8 aa f5 ff ff       	call   9410 <get_fs_long>
    9e66:	83 c4 04             	add    $0x4,%esp
    9e69:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (((new.rlim_cur > old->rlim_max) || (new.rlim_max > old->rlim_max)) && !suser())
    9e6d:	8b 54 24 04          	mov    0x4(%esp),%edx
    9e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e75:	8b 40 04             	mov    0x4(%eax),%eax
    9e78:	39 c2                	cmp    %eax,%edx
    9e7a:	7f 0f                	jg     9e8b <sys_setrlimit+0x6e>
    9e7c:	8b 54 24 08          	mov    0x8(%esp),%edx
    9e80:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e84:	8b 40 04             	mov    0x4(%eax),%eax
    9e87:	39 c2                	cmp    %eax,%edx
    9e89:	7e 18                	jle    9ea3 <sys_setrlimit+0x86>
    9e8b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9e90:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9e97:	66 85 c0             	test   %ax,%ax
    9e9a:	74 07                	je     9ea3 <sys_setrlimit+0x86>
		return -EPERM;
    9e9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9ea1:	eb 16                	jmp    9eb9 <sys_setrlimit+0x9c>
	*old = new;
    9ea3:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9ea7:	8b 44 24 04          	mov    0x4(%esp),%eax
    9eab:	8b 54 24 08          	mov    0x8(%esp),%edx
    9eaf:	89 01                	mov    %eax,(%ecx)
    9eb1:	89 51 04             	mov    %edx,0x4(%ecx)
	return 0;
    9eb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9eb9:	83 c4 10             	add    $0x10,%esp
    9ebc:	c3                   	ret    

00009ebd <sys_getrusage>:
// 获取指定进程的资源利用信息。
// 本系统调用提供当前进程或其已终止的和等待着的子进程资源使用情况。如果参数who等于RUSAGE_SELF，则返回当前进程的资源利用
// 信息。如果指定进程who是RUSAGE_CHILDREN，则返回当前进程的已终止和等待着的子进程资源利用信息。符号常数RUSAGE_SELF和
// RUSAGE_CHILDREN以及rusage结构都定义在include/sys/resource.h文件中。
int sys_getrusage(int who, struct rusage *ru)
{
    9ebd:	83 ec 6c             	sub    $0x6c,%esp
	struct rusage r;
	unsigned long	*lp, *lpend, *dest;

	// 首先判断参数指定进程的有效性。如果who即不是RUSAGE_SELF（指定当前进程），也不是RUSAGE_CHILDREN（指定子进程），则以
	// 无效参数码返回。否则在验证了指针ru指定的用户缓冲区域后，把临时rusage结构区域r清零。
	if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN)
    9ec0:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9ec5:	74 11                	je     9ed8 <sys_getrusage+0x1b>
    9ec7:	83 7c 24 70 ff       	cmpl   $0xffffffff,0x70(%esp)
    9ecc:	74 0a                	je     9ed8 <sys_getrusage+0x1b>
		return -EINVAL;
    9ece:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9ed3:	e9 2c 02 00 00       	jmp    a104 <sys_getrusage+0x247>
	verify_area(ru, sizeof *ru);
    9ed8:	83 ec 08             	sub    $0x8,%esp
    9edb:	6a 48                	push   $0x48
    9edd:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
    9ee4:	e8 b6 e4 ff ff       	call   839f <verify_area>
    9ee9:	83 c4 10             	add    $0x10,%esp
	memset((char *) &r, 0, sizeof(r));
    9eec:	83 ec 04             	sub    $0x4,%esp
    9eef:	6a 48                	push   $0x48
    9ef1:	6a 00                	push   $0x0
    9ef3:	8d 44 24 18          	lea    0x18(%esp),%eax
    9ef7:	50                   	push   %eax
    9ef8:	e8 6c f5 ff ff       	call   9469 <memset>
    9efd:	83 c4 10             	add    $0x10,%esp
	// 若参数who是RUSAGE_SELF，则复制当前进程资源利用信息到r结构中。若指定进程who是RUSAGE_CHILDREN，则复制当前进程的已终止
	// 和等待着的子进程资源利用信息到临时rusage结构r中。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值
	// 表示。它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (who == RUSAGE_SELF) {
    9f00:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9f05:	0f 85 d9 00 00 00    	jne    9fe4 <sys_getrusage+0x127>
		r.ru_utime.tv_sec = CT_TO_SECS(current->utime);
    9f0b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f10:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f16:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f1b:	89 c8                	mov    %ecx,%eax
    9f1d:	f7 ea                	imul   %edx
    9f1f:	c1 fa 05             	sar    $0x5,%edx
    9f22:	89 c8                	mov    %ecx,%eax
    9f24:	c1 f8 1f             	sar    $0x1f,%eax
    9f27:	29 c2                	sub    %eax,%edx
    9f29:	89 d0                	mov    %edx,%eax
    9f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->utime);
    9f2f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f34:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f3a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f3f:	89 c8                	mov    %ecx,%eax
    9f41:	f7 ea                	imul   %edx
    9f43:	c1 fa 05             	sar    $0x5,%edx
    9f46:	89 c8                	mov    %ecx,%eax
    9f48:	c1 f8 1f             	sar    $0x1f,%eax
    9f4b:	29 c2                	sub    %eax,%edx
    9f4d:	89 d0                	mov    %edx,%eax
    9f4f:	6b c0 64             	imul   $0x64,%eax,%eax
    9f52:	29 c1                	sub    %eax,%ecx
    9f54:	89 c8                	mov    %ecx,%eax
    9f56:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9f5c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f61:	89 c8                	mov    %ecx,%eax
    9f63:	f7 ea                	imul   %edx
    9f65:	c1 fa 05             	sar    $0x5,%edx
    9f68:	89 c8                	mov    %ecx,%eax
    9f6a:	c1 f8 1f             	sar    $0x1f,%eax
    9f6d:	29 c2                	sub    %eax,%edx
    9f6f:	89 d0                	mov    %edx,%eax
    9f71:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->stime);
    9f75:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f7a:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9f80:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f85:	89 c8                	mov    %ecx,%eax
    9f87:	f7 ea                	imul   %edx
    9f89:	c1 fa 05             	sar    $0x5,%edx
    9f8c:	89 c8                	mov    %ecx,%eax
    9f8e:	c1 f8 1f             	sar    $0x1f,%eax
    9f91:	29 c2                	sub    %eax,%edx
    9f93:	89 d0                	mov    %edx,%eax
    9f95:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->stime);
    9f99:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9f9e:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9fa4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fa9:	89 c8                	mov    %ecx,%eax
    9fab:	f7 ea                	imul   %edx
    9fad:	c1 fa 05             	sar    $0x5,%edx
    9fb0:	89 c8                	mov    %ecx,%eax
    9fb2:	c1 f8 1f             	sar    $0x1f,%eax
    9fb5:	29 c2                	sub    %eax,%edx
    9fb7:	89 d0                	mov    %edx,%eax
    9fb9:	6b c0 64             	imul   $0x64,%eax,%eax
    9fbc:	29 c1                	sub    %eax,%ecx
    9fbe:	89 c8                	mov    %ecx,%eax
    9fc0:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9fc6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fcb:	89 c8                	mov    %ecx,%eax
    9fcd:	f7 ea                	imul   %edx
    9fcf:	c1 fa 05             	sar    $0x5,%edx
    9fd2:	89 c8                	mov    %ecx,%eax
    9fd4:	c1 f8 1f             	sar    $0x1f,%eax
    9fd7:	29 c2                	sub    %eax,%edx
    9fd9:	89 d0                	mov    %edx,%eax
    9fdb:	89 44 24 18          	mov    %eax,0x18(%esp)
    9fdf:	e9 d4 00 00 00       	jmp    a0b8 <sys_getrusage+0x1fb>
	} else {
		r.ru_utime.tv_sec = CT_TO_SECS(current->cutime);
    9fe4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    9fe9:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    9fef:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9ff4:	89 c8                	mov    %ecx,%eax
    9ff6:	f7 ea                	imul   %edx
    9ff8:	c1 fa 05             	sar    $0x5,%edx
    9ffb:	89 c8                	mov    %ecx,%eax
    9ffd:	c1 f8 1f             	sar    $0x1f,%eax
    a000:	29 c2                	sub    %eax,%edx
    a002:	89 d0                	mov    %edx,%eax
    a004:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->cutime);
    a008:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a00d:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    a013:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a018:	89 c8                	mov    %ecx,%eax
    a01a:	f7 ea                	imul   %edx
    a01c:	c1 fa 05             	sar    $0x5,%edx
    a01f:	89 c8                	mov    %ecx,%eax
    a021:	c1 f8 1f             	sar    $0x1f,%eax
    a024:	29 c2                	sub    %eax,%edx
    a026:	89 d0                	mov    %edx,%eax
    a028:	6b c0 64             	imul   $0x64,%eax,%eax
    a02b:	29 c1                	sub    %eax,%ecx
    a02d:	89 c8                	mov    %ecx,%eax
    a02f:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a035:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a03a:	89 c8                	mov    %ecx,%eax
    a03c:	f7 ea                	imul   %edx
    a03e:	c1 fa 05             	sar    $0x5,%edx
    a041:	89 c8                	mov    %ecx,%eax
    a043:	c1 f8 1f             	sar    $0x1f,%eax
    a046:	29 c2                	sub    %eax,%edx
    a048:	89 d0                	mov    %edx,%eax
    a04a:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->cstime);
    a04e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a053:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a059:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a05e:	89 c8                	mov    %ecx,%eax
    a060:	f7 ea                	imul   %edx
    a062:	c1 fa 05             	sar    $0x5,%edx
    a065:	89 c8                	mov    %ecx,%eax
    a067:	c1 f8 1f             	sar    $0x1f,%eax
    a06a:	29 c2                	sub    %eax,%edx
    a06c:	89 d0                	mov    %edx,%eax
    a06e:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->cstime);
    a072:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a077:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a07d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a082:	89 c8                	mov    %ecx,%eax
    a084:	f7 ea                	imul   %edx
    a086:	c1 fa 05             	sar    $0x5,%edx
    a089:	89 c8                	mov    %ecx,%eax
    a08b:	c1 f8 1f             	sar    $0x1f,%eax
    a08e:	29 c2                	sub    %eax,%edx
    a090:	89 d0                	mov    %edx,%eax
    a092:	6b c0 64             	imul   $0x64,%eax,%eax
    a095:	29 c1                	sub    %eax,%ecx
    a097:	89 c8                	mov    %ecx,%eax
    a099:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a09f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a0a4:	89 c8                	mov    %ecx,%eax
    a0a6:	f7 ea                	imul   %edx
    a0a8:	c1 fa 05             	sar    $0x5,%edx
    a0ab:	89 c8                	mov    %ecx,%eax
    a0ad:	c1 f8 1f             	sar    $0x1f,%eax
    a0b0:	29 c2                	sub    %eax,%edx
    a0b2:	89 d0                	mov    %edx,%eax
    a0b4:	89 44 24 18          	mov    %eax,0x18(%esp)
	}
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
    a0b8:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0bc:	89 44 24 5c          	mov    %eax,0x5c(%esp)
	lpend = (unsigned long *) (&r + 1);
    a0c0:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0c4:	83 c0 48             	add    $0x48,%eax
    a0c7:	89 44 24 54          	mov    %eax,0x54(%esp)
	dest = (unsigned long *) ru;
    a0cb:	8b 44 24 74          	mov    0x74(%esp),%eax
    a0cf:	89 44 24 58          	mov    %eax,0x58(%esp)
	for (; lp < lpend; lp++, dest++)
    a0d3:	eb 20                	jmp    a0f5 <sys_getrusage+0x238>
		put_fs_long(*lp, dest);
    a0d5:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a0d9:	8b 00                	mov    (%eax),%eax
    a0db:	83 ec 08             	sub    $0x8,%esp
    a0de:	ff 74 24 60          	pushl  0x60(%esp)
    a0e2:	50                   	push   %eax
    a0e3:	e8 74 f3 ff ff       	call   945c <put_fs_long>
    a0e8:	83 c4 10             	add    $0x10,%esp
	for (; lp < lpend; lp++, dest++)
    a0eb:	83 44 24 5c 04       	addl   $0x4,0x5c(%esp)
    a0f0:	83 44 24 58 04       	addl   $0x4,0x58(%esp)
    a0f5:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a0f9:	3b 44 24 54          	cmp    0x54(%esp),%eax
    a0fd:	72 d6                	jb     a0d5 <sys_getrusage+0x218>
	return(0);
    a0ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a104:	83 c4 6c             	add    $0x6c,%esp
    a107:	c3                   	ret    

0000a108 <sys_gettimeofday>:
// 取得系统当前时间，并用指定格式返回。
// timeval结构和timezone结构都定义在include/sys/time.h文件中。timeval结构含有秒和微秒（tv_sec和tv_usec）两个
// 字段。timezone结构含有本地距格林尼治标准时间以西的分钟数（tz_minuteswest）和夏令时间调整类型（tz_dsttime）两上
// 字段。（dst -- Daylight Savings Time）
int sys_gettimeofday(struct timeval *tv, struct timezone *tz)
{
    a108:	53                   	push   %ebx
    a109:	83 ec 08             	sub    $0x8,%esp
	// 如果参数给定的timeval结构指针不空，则在该结构中返回当前时间（秒值和微秒值）;
	// 如果参数给定的用户数据空间中timezone结构的指针不空，则也返回该结构的信息。
	// 程序中startup_time是系统开机时间（秒值）。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值表示。
	// 它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (tv) {
    a10c:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a111:	0f 84 88 00 00 00    	je     a19f <sys_gettimeofday+0x97>
		verify_area(tv, sizeof *tv);
    a117:	83 ec 08             	sub    $0x8,%esp
    a11a:	6a 08                	push   $0x8
    a11c:	ff 74 24 1c          	pushl  0x1c(%esp)
    a120:	e8 7a e2 ff ff       	call   839f <verify_area>
    a125:	83 c4 10             	add    $0x10,%esp
		put_fs_long(startup_time + CT_TO_SECS(jiffies + jiffies_offset),
    a128:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a12d:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    a133:	01 d0                	add    %edx,%eax
    a135:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a13a:	f7 e2                	mul    %edx
    a13c:	c1 ea 05             	shr    $0x5,%edx
    a13f:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    a144:	01 d0                	add    %edx,%eax
    a146:	83 ec 08             	sub    $0x8,%esp
    a149:	ff 74 24 18          	pushl  0x18(%esp)
    a14d:	50                   	push   %eax
    a14e:	e8 09 f3 ff ff       	call   945c <put_fs_long>
    a153:	83 c4 10             	add    $0x10,%esp
			    (unsigned long *) tv);
		put_fs_long(CT_TO_USECS(jiffies + jiffies_offset),
    a156:	8b 44 24 10          	mov    0x10(%esp),%eax
    a15a:	8d 58 04             	lea    0x4(%eax),%ebx
    a15d:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a162:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    a168:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
    a16b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a170:	89 c8                	mov    %ecx,%eax
    a172:	f7 e2                	mul    %edx
    a174:	89 d0                	mov    %edx,%eax
    a176:	c1 e8 05             	shr    $0x5,%eax
    a179:	6b c0 64             	imul   $0x64,%eax,%eax
    a17c:	29 c1                	sub    %eax,%ecx
    a17e:	89 c8                	mov    %ecx,%eax
    a180:	69 c0 40 42 0f 00    	imul   $0xf4240,%eax,%eax
    a186:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a18b:	f7 e2                	mul    %edx
    a18d:	89 d0                	mov    %edx,%eax
    a18f:	c1 e8 05             	shr    $0x5,%eax
    a192:	83 ec 08             	sub    $0x8,%esp
    a195:	53                   	push   %ebx
    a196:	50                   	push   %eax
    a197:	e8 c0 f2 ff ff       	call   945c <put_fs_long>
    a19c:	83 c4 10             	add    $0x10,%esp
			    ((unsigned long *) tv) + 1);
	}
	if (tz) {
    a19f:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a1a4:	74 40                	je     a1e6 <sys_gettimeofday+0xde>
		verify_area(tz, sizeof *tz);
    a1a6:	83 ec 08             	sub    $0x8,%esp
    a1a9:	6a 08                	push   $0x8
    a1ab:	ff 74 24 20          	pushl  0x20(%esp)
    a1af:	e8 eb e1 ff ff       	call   839f <verify_area>
    a1b4:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_minuteswest, (unsigned long *) tz);
    a1b7:	a1 60 02 03 00       	mov    0x30260,%eax
    a1bc:	83 ec 08             	sub    $0x8,%esp
    a1bf:	ff 74 24 1c          	pushl  0x1c(%esp)
    a1c3:	50                   	push   %eax
    a1c4:	e8 93 f2 ff ff       	call   945c <put_fs_long>
    a1c9:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_dsttime, ((unsigned long *) tz) + 1);
    a1cc:	8b 44 24 14          	mov    0x14(%esp),%eax
    a1d0:	83 c0 04             	add    $0x4,%eax
    a1d3:	8b 15 64 02 03 00    	mov    0x30264,%edx
    a1d9:	83 ec 08             	sub    $0x8,%esp
    a1dc:	50                   	push   %eax
    a1dd:	52                   	push   %edx
    a1de:	e8 79 f2 ff ff       	call   945c <put_fs_long>
    a1e3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
    a1e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a1eb:	83 c4 08             	add    $0x8,%esp
    a1ee:	5b                   	pop    %ebx
    a1ef:	c3                   	ret    

0000a1f0 <sys_settimeofday>:
 */
// 设置系统当前时间。
// 参数tv是指向用户数据区中timeval结构信息的指针。参数tz是用户数据区中timezone结构的指针。该操作需要超级用户权限。如果
// 两者皆为空，则什么也不做，函数返回0。
int sys_settimeofday(struct timeval *tv, struct timezone *tz)
{
    a1f0:	53                   	push   %ebx
    a1f1:	83 ec 18             	sub    $0x18,%esp
	static int	firsttime = 1;
	void 		adjust_clock();

	// 设置系统当前时间需要超级用户权限。如果tz指针不空，则设置系统时区信息。即复制用户timezone结构信息到系统中的sys_tz结构
	// 中。如果是第1次调用本系统调用并且参数tv指针不空，则调整系统时钟值。
	if (!suser())
    a1f4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a1f9:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a200:	66 85 c0             	test   %ax,%ax
    a203:	74 0a                	je     a20f <sys_settimeofday+0x1f>
		return -EPERM;
    a205:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    a20a:	e9 e6 00 00 00       	jmp    a2f5 <sys_settimeofday+0x105>
	if (tz) {
    a20f:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    a214:	74 45                	je     a25b <sys_settimeofday+0x6b>
		sys_tz.tz_minuteswest = get_fs_long((unsigned long *) tz);
    a216:	ff 74 24 24          	pushl  0x24(%esp)
    a21a:	e8 f1 f1 ff ff       	call   9410 <get_fs_long>
    a21f:	83 c4 04             	add    $0x4,%esp
    a222:	a3 60 02 03 00       	mov    %eax,0x30260
		sys_tz.tz_dsttime = get_fs_long(((unsigned long *) tz)+1);
    a227:	8b 44 24 24          	mov    0x24(%esp),%eax
    a22b:	83 c0 04             	add    $0x4,%eax
    a22e:	50                   	push   %eax
    a22f:	e8 dc f1 ff ff       	call   9410 <get_fs_long>
    a234:	83 c4 04             	add    $0x4,%esp
    a237:	a3 64 02 03 00       	mov    %eax,0x30264
		if (firsttime) {
    a23c:	a1 10 f3 02 00       	mov    0x2f310,%eax
    a241:	85 c0                	test   %eax,%eax
    a243:	74 16                	je     a25b <sys_settimeofday+0x6b>
			firsttime = 0;
    a245:	c7 05 10 f3 02 00 00 	movl   $0x0,0x2f310
    a24c:	00 00 00 
			if (!tv)
    a24f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a254:	75 05                	jne    a25b <sys_settimeofday+0x6b>
				adjust_clock();
    a256:	e8 9f 00 00 00       	call   a2fa <adjust_clock>
		}
	}
	// 如果参数的timeval结构指针tv不空，则用该结构信息设置系统时钟。首先从tv所指处获取以秒值（sec）加微秒值（usec）表示的系统
	// 时间，然后用秒值修改系统开机时间全局变量startup_time值，并用微秒值设置系统嘀嗒误差值jiffies_offset。
	if (tv) {
    a25b:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a260:	0f 84 8a 00 00 00    	je     a2f0 <sys_settimeofday+0x100>
		int sec, usec;

		sec = get_fs_long((unsigned long *)tv);
    a266:	83 ec 0c             	sub    $0xc,%esp
    a269:	ff 74 24 2c          	pushl  0x2c(%esp)
    a26d:	e8 9e f1 ff ff       	call   9410 <get_fs_long>
    a272:	83 c4 10             	add    $0x10,%esp
    a275:	89 44 24 0c          	mov    %eax,0xc(%esp)
		usec = get_fs_long(((unsigned long *)tv) + 1);
    a279:	8b 44 24 20          	mov    0x20(%esp),%eax
    a27d:	83 c0 04             	add    $0x4,%eax
    a280:	83 ec 0c             	sub    $0xc,%esp
    a283:	50                   	push   %eax
    a284:	e8 87 f1 ff ff       	call   9410 <get_fs_long>
    a289:	83 c4 10             	add    $0x10,%esp
    a28c:	89 44 24 08          	mov    %eax,0x8(%esp)

		startup_time = sec - jiffies / HZ;
    a290:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    a294:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    a299:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a29e:	f7 e2                	mul    %edx
    a2a0:	89 d0                	mov    %edx,%eax
    a2a2:	c1 e8 05             	shr    $0x5,%eax
    a2a5:	29 c1                	sub    %eax,%ecx
    a2a7:	89 c8                	mov    %ecx,%eax
    a2a9:	a3 04 fb 02 00       	mov    %eax,0x2fb04
		jiffies_offset = usec * HZ / 1000000 - jiffies % HZ;
    a2ae:	8b 44 24 08          	mov    0x8(%esp),%eax
    a2b2:	6b c8 64             	imul   $0x64,%eax,%ecx
    a2b5:	ba 83 de 1b 43       	mov    $0x431bde83,%edx
    a2ba:	89 c8                	mov    %ecx,%eax
    a2bc:	f7 ea                	imul   %edx
    a2be:	c1 fa 12             	sar    $0x12,%edx
    a2c1:	89 c8                	mov    %ecx,%eax
    a2c3:	c1 f8 1f             	sar    $0x1f,%eax
    a2c6:	29 c2                	sub    %eax,%edx
    a2c8:	89 d0                	mov    %edx,%eax
    a2ca:	89 c3                	mov    %eax,%ebx
    a2cc:	8b 0d 00 fb 02 00    	mov    0x2fb00,%ecx
    a2d2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a2d7:	89 c8                	mov    %ecx,%eax
    a2d9:	f7 e2                	mul    %edx
    a2db:	89 d0                	mov    %edx,%eax
    a2dd:	c1 e8 05             	shr    $0x5,%eax
    a2e0:	6b c0 64             	imul   $0x64,%eax,%eax
    a2e3:	29 c1                	sub    %eax,%ecx
    a2e5:	89 c8                	mov    %ecx,%eax
    a2e7:	29 c3                	sub    %eax,%ebx
    a2e9:	89 d8                	mov    %ebx,%eax
    a2eb:	a3 08 fb 02 00       	mov    %eax,0x2fb08
	}
	return 0;
    a2f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a2f5:	83 c4 18             	add    $0x18,%esp
    a2f8:	5b                   	pop    %ebx
    a2f9:	c3                   	ret    

0000a2fa <adjust_clock>:
 */
// 把系统启动时间调整为以GMT为标准的时间。
// startup_time是秒值，因此这里需要把时区分钟值乘上60。
void adjust_clock()
{
	startup_time += sys_tz.tz_minuteswest * 60;
    a2fa:	a1 60 02 03 00       	mov    0x30260,%eax
    a2ff:	6b c0 3c             	imul   $0x3c,%eax,%eax
    a302:	89 c2                	mov    %eax,%edx
    a304:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    a309:	01 d0                	add    %edx,%eax
    a30b:	a3 04 fb 02 00       	mov    %eax,0x2fb04
}
    a310:	90                   	nop
    a311:	c3                   	ret    

0000a312 <sys_umask>:

// 设置当前进程创建文件属性屏蔽码为mask & 0777。并返回原屏蔽码。
int sys_umask(int mask)
{
    a312:	83 ec 10             	sub    $0x10,%esp
	int old = current->umask;
    a315:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a31a:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    a321:	0f b7 c0             	movzwl %ax,%eax
    a324:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->umask = mask & 0777;
    a328:	8b 44 24 14          	mov    0x14(%esp),%eax
    a32c:	89 c2                	mov    %eax,%edx
    a32e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a333:	66 81 e2 ff 01       	and    $0x1ff,%dx
    a338:	66 89 90 30 03 00 00 	mov    %dx,0x330(%eax)
	return (old);
    a33f:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    a343:	83 c4 10             	add    $0x10,%esp
    a346:	c3                   	ret    

0000a347 <sys_default>:

// 用于捕获未实现的System Call调用。
int sys_default(unsigned long arg1, unsigned long arg2, unsigned long arg3, unsigned long code){
    a347:	83 ec 0c             	sub    $0xc,%esp
    printk("System Call Number:%d\r\n",code);
    a34a:	83 ec 08             	sub    $0x8,%esp
    a34d:	ff 74 24 24          	pushl  0x24(%esp)
    a351:	68 c8 2f 02 00       	push   $0x22fc8
    a356:	e8 eb e8 ff ff       	call   8c46 <printk>
    a35b:	83 c4 10             	add    $0x10,%esp
    printk("Arg1:%X\r\n",arg1);
    a35e:	83 ec 08             	sub    $0x8,%esp
    a361:	ff 74 24 18          	pushl  0x18(%esp)
    a365:	68 e0 2f 02 00       	push   $0x22fe0
    a36a:	e8 d7 e8 ff ff       	call   8c46 <printk>
    a36f:	83 c4 10             	add    $0x10,%esp
    printk("Arg2:%X\r\n",arg2);
    a372:	83 ec 08             	sub    $0x8,%esp
    a375:	ff 74 24 1c          	pushl  0x1c(%esp)
    a379:	68 ea 2f 02 00       	push   $0x22fea
    a37e:	e8 c3 e8 ff ff       	call   8c46 <printk>
    a383:	83 c4 10             	add    $0x10,%esp
    printk("Arg3:%X\r\n",arg3);
    a386:	83 ec 08             	sub    $0x8,%esp
    a389:	ff 74 24 20          	pushl  0x20(%esp)
    a38d:	68 f4 2f 02 00       	push   $0x22ff4
    a392:	e8 af e8 ff ff       	call   8c46 <printk>
    a397:	83 c4 10             	add    $0x10,%esp
    for(;;);
    a39a:	eb fe                	jmp    a39a <sys_default+0x53>

0000a39c <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    a39c:	8b 44 24 04          	mov    0x4(%esp),%eax
    a3a0:	8b 54 24 08          	mov    0x8(%esp),%edx
    a3a4:	64 89 02             	mov    %eax,%fs:(%edx)
}
    a3a7:	90                   	nop
    a3a8:	c3                   	ret    

0000a3a9 <release>:
// 释放指定进程占用的任务槽及其任务数据结构占用的内在页面。
// 参数p是任务数据结构指针。该函数在后面的sys_kill()和sys_waitpid()函数中被调用。扫描任务指针数组表task[]
// 以寻找指定的任务。如果找到，则首先清空该任务槽，然后释放该任务数据结构所占用的内在页面，最后执行调度函数并返回
// 立即退出。如果在任务数组表中没有找到指定任务对应的项，则内核panic。
void release(struct task_struct * p)
{
    a3a9:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
    a3ac:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a3b1:	0f 84 f6 00 00 00    	je     a4ad <release+0x104>
		return;
	if (p == current) {
    a3b7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a3bc:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a3c0:	75 15                	jne    a3d7 <release+0x2e>
		printk("task releasing itself\n\r");
    a3c2:	83 ec 0c             	sub    $0xc,%esp
    a3c5:	68 00 30 02 00       	push   $0x23000
    a3ca:	e8 77 e8 ff ff       	call   8c46 <printk>
    a3cf:	83 c4 10             	add    $0x10,%esp
		return;
    a3d2:	e9 d7 00 00 00       	jmp    a4ae <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a3d7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a3de:	00 
    a3df:	e9 ac 00 00 00       	jmp    a490 <release+0xe7>
		if (task[i] == p) {
    a3e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a3e8:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a3ef:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a3f3:	0f 85 92 00 00 00    	jne    a48b <release+0xe2>
			task[i] = NULL;
    a3f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a3fd:	c7 04 85 c0 f1 02 00 	movl   $0x0,0x2f1c0(,%eax,4)
    a404:	00 00 00 00 
			// 指向比邻的老进程。如果任务p就是最新的子进程，则还需要更新其父进程的最新子进程指针cptr为指向p的比邻子进程。
			// 指针osptr（old sibling pointer）指向比p先创建的兄弟进程。
			// 指针ysptr（younger sibling pointer）指向比p后创建的兄弟进程。
			// 指针pptr（parent pointer）指向p的父进程。
			// 指针cptr（child pointer）是父进程指向最新（最后）创建的子进程。
			if (p->p_osptr)
    a408:	8b 44 24 20          	mov    0x20(%esp),%eax
    a40c:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a412:	85 c0                	test   %eax,%eax
    a414:	74 1a                	je     a430 <release+0x87>
				p->p_osptr->p_ysptr = p->p_ysptr;
    a416:	8b 44 24 20          	mov    0x20(%esp),%eax
    a41a:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a420:	8b 54 24 20          	mov    0x20(%esp),%edx
    a424:	8b 92 c4 02 00 00    	mov    0x2c4(%edx),%edx
    a42a:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			if (p->p_ysptr)
    a430:	8b 44 24 20          	mov    0x20(%esp),%eax
    a434:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a43a:	85 c0                	test   %eax,%eax
    a43c:	74 1c                	je     a45a <release+0xb1>
				p->p_ysptr->p_osptr = p->p_osptr;
    a43e:	8b 44 24 20          	mov    0x20(%esp),%eax
    a442:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a448:	8b 54 24 20          	mov    0x20(%esp),%edx
    a44c:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a452:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
    a458:	eb 1a                	jmp    a474 <release+0xcb>
			else
				p->p_pptr->p_cptr = p->p_osptr;
    a45a:	8b 44 24 20          	mov    0x20(%esp),%eax
    a45e:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a464:	8b 54 24 20          	mov    0x20(%esp),%edx
    a468:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a46e:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			// 释放要释放的进程数据结构占用的那页内存
			free_page((long)p);
    a474:	8b 44 24 20          	mov    0x20(%esp),%eax
    a478:	83 ec 0c             	sub    $0xc,%esp
    a47b:	50                   	push   %eax
    a47c:	e8 51 18 00 00       	call   bcd2 <free_page>
    a481:	83 c4 10             	add    $0x10,%esp
			// 重新调度进程
			schedule();
    a484:	e8 ba c9 ff ff       	call   6e43 <schedule>
			return;
    a489:	eb 23                	jmp    a4ae <release+0x105>
	for (i = 1 ; i < NR_TASKS ; i++)
    a48b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a490:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a495:	0f 8e 49 ff ff ff    	jle    a3e4 <release+0x3b>
		}
	panic("trying to release non-existent task");
    a49b:	83 ec 0c             	sub    $0xc,%esp
    a49e:	68 18 30 02 00       	push   $0x23018
    a4a3:	e8 5f e7 ff ff       	call   8c07 <panic>
    a4a8:	83 c4 10             	add    $0x10,%esp
    a4ab:	eb 01                	jmp    a4ae <release+0x105>
		return;
    a4ad:	90                   	nop
}
    a4ae:	83 c4 1c             	add    $0x1c,%esp
    a4b1:	c3                   	ret    

0000a4b2 <bad_task_ptr>:
/*
 * 检查task[]数组中是否存在一个指定的task_struct结构指针p。
 */
// 检测任务结构指针p。
int bad_task_ptr(struct task_struct *p)
{
    a4b2:	83 ec 10             	sub    $0x10,%esp
	int 	i;

	if (!p)
    a4b5:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a4ba:	75 07                	jne    a4c3 <bad_task_ptr+0x11>
		return 0;
    a4bc:	b8 00 00 00 00       	mov    $0x0,%eax
    a4c1:	eb 33                	jmp    a4f6 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a4c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    a4ca:	00 
    a4cb:	eb 1d                	jmp    a4ea <bad_task_ptr+0x38>
		if (task[i] == p)
    a4cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4d1:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a4d8:	39 44 24 14          	cmp    %eax,0x14(%esp)
    a4dc:	75 07                	jne    a4e5 <bad_task_ptr+0x33>
			return 0;
    a4de:	b8 00 00 00 00       	mov    $0x0,%eax
    a4e3:	eb 11                	jmp    a4f6 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a4e5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a4ea:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a4ef:	7e dc                	jle    a4cd <bad_task_ptr+0x1b>
	return 1;
    a4f1:	b8 01 00 00 00       	mov    $0x1,%eax
}
    a4f6:	83 c4 10             	add    $0x10,%esp
    a4f9:	c3                   	ret    

0000a4fa <audit_ptree>:
 * 该函数看上去要比实际的恐怖....其实我们仅仅验证了指针p_ysptr和p_osptr构成的双向链表，并检查
 * 了链表与指针p_cptr和p_pptr构成的进程树之间的关系。
 */
// 检查进程树。
void audit_ptree()
{
    a4fa:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a4fd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a504:	00 
    a505:	e9 a6 04 00 00       	jmp    a9b0 <audit_ptree+0x4b6>
		if (!task[i])
    a50a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a50e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a515:	85 c0                	test   %eax,%eax
    a517:	0f 84 8d 04 00 00    	je     a9aa <audit_ptree+0x4b0>
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
    a51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a521:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a528:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a52e:	50                   	push   %eax
    a52f:	e8 7e ff ff ff       	call   a4b2 <bad_task_ptr>
    a534:	83 c4 04             	add    $0x4,%esp
    a537:	85 c0                	test   %eax,%eax
    a539:	74 22                	je     a55d <audit_ptree+0x63>
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
    a53b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a53f:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's parent link is bad\n",
    a546:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a54c:	83 ec 08             	sub    $0x8,%esp
    a54f:	50                   	push   %eax
    a550:	68 3c 30 02 00       	push   $0x2303c
    a555:	e8 ec e6 ff ff       	call   8c46 <printk>
    a55a:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_cptr))
    a55d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a561:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a568:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a56e:	83 ec 0c             	sub    $0xc,%esp
    a571:	50                   	push   %eax
    a572:	e8 3b ff ff ff       	call   a4b2 <bad_task_ptr>
    a577:	83 c4 10             	add    $0x10,%esp
    a57a:	85 c0                	test   %eax,%eax
    a57c:	74 22                	je     a5a0 <audit_ptree+0xa6>
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
    a57e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a582:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's child link is bad\n",
    a589:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a58f:	83 ec 08             	sub    $0x8,%esp
    a592:	50                   	push   %eax
    a593:	68 64 30 02 00       	push   $0x23064
    a598:	e8 a9 e6 ff ff       	call   8c46 <printk>
    a59d:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_ysptr))
    a5a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5a4:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a5ab:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a5b1:	83 ec 0c             	sub    $0xc,%esp
    a5b4:	50                   	push   %eax
    a5b5:	e8 f8 fe ff ff       	call   a4b2 <bad_task_ptr>
    a5ba:	83 c4 10             	add    $0x10,%esp
    a5bd:	85 c0                	test   %eax,%eax
    a5bf:	74 22                	je     a5e3 <audit_ptree+0xe9>
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
    a5c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5c5:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's ys link is bad\n",
    a5cc:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5d2:	83 ec 08             	sub    $0x8,%esp
    a5d5:	50                   	push   %eax
    a5d6:	68 8c 30 02 00       	push   $0x2308c
    a5db:	e8 66 e6 ff ff       	call   8c46 <printk>
    a5e0:	83 c4 10             	add    $0x10,%esp
		if (bad_task_ptr(task[i]->p_osptr))
    a5e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5e7:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a5ee:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a5f4:	83 ec 0c             	sub    $0xc,%esp
    a5f7:	50                   	push   %eax
    a5f8:	e8 b5 fe ff ff       	call   a4b2 <bad_task_ptr>
    a5fd:	83 c4 10             	add    $0x10,%esp
    a600:	85 c0                	test   %eax,%eax
    a602:	74 22                	je     a626 <audit_ptree+0x12c>
			printk("Warning, pid %d's os link is bad\n",
				task[i]->pid);
    a604:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a608:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
			printk("Warning, pid %d's os link is bad\n",
    a60f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a615:	83 ec 08             	sub    $0x8,%esp
    a618:	50                   	push   %eax
    a619:	68 b0 30 02 00       	push   $0x230b0
    a61e:	e8 23 e6 ff ff       	call   8c46 <printk>
    a623:	83 c4 10             	add    $0x10,%esp
		// 如果任务的父进程指针p_pptr指向了自己，则显示警告信息“警告，pid号N的父进程链接指针指向了自己”。以下语句对cptr、ysptr
		// 和osptr进行类似操作。
		if (task[i]->p_pptr == task[i])
    a626:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a62a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a631:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a637:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a63b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a642:	39 c2                	cmp    %eax,%edx
    a644:	75 10                	jne    a656 <audit_ptree+0x15c>
			printk("Warning, pid %d parent link points to self\n");
    a646:	83 ec 0c             	sub    $0xc,%esp
    a649:	68 d4 30 02 00       	push   $0x230d4
    a64e:	e8 f3 e5 ff ff       	call   8c46 <printk>
    a653:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_cptr == task[i])
    a656:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a65a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a661:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    a667:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a66b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a672:	39 c2                	cmp    %eax,%edx
    a674:	75 10                	jne    a686 <audit_ptree+0x18c>
			printk("Warning, pid %d child link points to self\n");
    a676:	83 ec 0c             	sub    $0xc,%esp
    a679:	68 00 31 02 00       	push   $0x23100
    a67e:	e8 c3 e5 ff ff       	call   8c46 <printk>
    a683:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_ysptr == task[i])
    a686:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a68a:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a691:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a697:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a69b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6a2:	39 c2                	cmp    %eax,%edx
    a6a4:	75 10                	jne    a6b6 <audit_ptree+0x1bc>
			printk("Warning, pid %d ys link points to self\n");
    a6a6:	83 ec 0c             	sub    $0xc,%esp
    a6a9:	68 2c 31 02 00       	push   $0x2312c
    a6ae:	e8 93 e5 ff ff       	call   8c46 <printk>
    a6b3:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_osptr == task[i])
    a6b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ba:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6c1:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a6c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6cb:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6d2:	39 c2                	cmp    %eax,%edx
    a6d4:	75 10                	jne    a6e6 <audit_ptree+0x1ec>
			printk("Warning, pid %d os link points to self\n");
    a6d6:	83 ec 0c             	sub    $0xc,%esp
    a6d9:	68 54 31 02 00       	push   $0x23154
    a6de:	e8 63 e5 ff ff       	call   8c46 <printk>
    a6e3:	83 c4 10             	add    $0x10,%esp
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
    a6e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ea:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a6f1:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a6f7:	85 c0                	test   %eax,%eax
    a6f9:	0f 84 e1 00 00 00    	je     a7e0 <audit_ptree+0x2e6>
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
    a6ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a703:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a70a:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a710:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a714:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a71b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a721:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a727:	39 c2                	cmp    %eax,%edx
    a729:	74 55                	je     a780 <audit_ptree+0x286>
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a72b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a72f:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a736:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a73c:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
				printk(
    a742:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
				task[i]->pid, task[i]->p_osptr->pid,
    a748:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a74c:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a753:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a759:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid,
    a75f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a763:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a76a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a770:	51                   	push   %ecx
    a771:	52                   	push   %edx
    a772:	50                   	push   %eax
    a773:	68 7c 31 02 00       	push   $0x2317c
    a778:	e8 c9 e4 ff ff       	call   8c46 <printk>
    a77d:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_osptr->p_ysptr != task[i])
    a780:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a784:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a78b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a791:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a797:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a79b:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7a2:	39 c2                	cmp    %eax,%edx
    a7a4:	74 3a                	je     a7e0 <audit_ptree+0x2e6>
				printk(
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a7a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7aa:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7b1:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a7b7:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid);
    a7bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7c1:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a7c8:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a7ce:	83 ec 04             	sub    $0x4,%esp
    a7d1:	52                   	push   %edx
    a7d2:	50                   	push   %eax
    a7d3:	68 ac 31 02 00       	push   $0x231ac
    a7d8:	e8 69 e4 ff ff       	call   8c46 <printk>
    a7dd:	83 c4 10             	add    $0x10,%esp
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
    a7e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7e4:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a7eb:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a7f1:	85 c0                	test   %eax,%eax
    a7f3:	0f 84 e1 00 00 00    	je     a8da <audit_ptree+0x3e0>
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
    a7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7fd:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a804:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a80a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a80e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a815:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a81b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a821:	39 c2                	cmp    %eax,%edx
    a823:	74 55                	je     a87a <audit_ptree+0x380>
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a825:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a829:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a830:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a836:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
				printk(
    a83c:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
				task[i]->pid, task[i]->p_osptr->pid,
    a842:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a846:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a84d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
    a853:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_osptr->pid,
    a859:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a85d:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a864:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a86a:	51                   	push   %ecx
    a86b:	52                   	push   %edx
    a86c:	50                   	push   %eax
    a86d:	68 e8 31 02 00       	push   $0x231e8
    a872:	e8 cf e3 ff ff       	call   8c46 <printk>
    a877:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_ysptr->p_osptr != task[i])
    a87a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a87e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a885:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a88b:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a891:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a895:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a89c:	39 c2                	cmp    %eax,%edx
    a89e:	74 3a                	je     a8da <audit_ptree+0x3e0>
				printk(
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a8a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8a4:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8ab:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
				printk(
    a8b1:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_ysptr->pid);
    a8b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8bb:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a8c2:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a8c8:	83 ec 04             	sub    $0x4,%esp
    a8cb:	52                   	push   %edx
    a8cc:	50                   	push   %eax
    a8cd:	68 1c 32 02 00       	push   $0x2321c
    a8d2:	e8 6f e3 ff ff       	call   8c46 <printk>
    a8d7:	83 c4 10             	add    $0x10,%esp
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
    a8da:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8de:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8e5:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a8eb:	85 c0                	test   %eax,%eax
    a8ed:	0f 84 b8 00 00 00    	je     a9ab <audit_ptree+0x4b1>
			if (task[i]->p_cptr->p_pptr != task[i])
    a8f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8f7:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a8fe:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a904:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a90a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a90e:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a915:	39 c2                	cmp    %eax,%edx
    a917:	74 3a                	je     a953 <audit_ptree+0x459>
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a919:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a91d:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a924:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
				printk(
    a92a:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_cptr->pid);
    a930:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a934:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a93b:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a941:	83 ec 04             	sub    $0x4,%esp
    a944:	52                   	push   %edx
    a945:	50                   	push   %eax
    a946:	68 58 32 02 00       	push   $0x23258
    a94b:	e8 f6 e2 ff ff       	call   8c46 <printk>
    a950:	83 c4 10             	add    $0x10,%esp
			if (task[i]->p_cptr->p_ysptr)
    a953:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a957:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a95e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a964:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a96a:	85 c0                	test   %eax,%eax
    a96c:	74 3d                	je     a9ab <audit_ptree+0x4b1>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a96e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a972:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
    a979:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
				printk(
    a97f:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
				task[i]->pid, task[i]->p_cptr->pid);
    a985:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a989:	8b 04 85 c0 f1 02 00 	mov    0x2f1c0(,%eax,4),%eax
				printk(
    a990:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a996:	83 ec 04             	sub    $0x4,%esp
    a999:	52                   	push   %edx
    a99a:	50                   	push   %eax
    a99b:	68 98 32 02 00       	push   $0x23298
    a9a0:	e8 a1 e2 ff ff       	call   8c46 <printk>
    a9a5:	83 c4 10             	add    $0x10,%esp
    a9a8:	eb 01                	jmp    a9ab <audit_ptree+0x4b1>
			continue;
    a9aa:	90                   	nop
	for (i = 1 ; i < NR_TASKS ; i++) {
    a9ab:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a9b0:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a9b5:	0f 8e 4f fb ff ff    	jle    a50a <audit_ptree+0x10>
		}
	}
}
    a9bb:	90                   	nop
    a9bc:	83 c4 1c             	add    $0x1c,%esp
    a9bf:	c3                   	ret    

0000a9c0 <send_sig>:

// 向指定任务p发送信号sig，权限为priv。
// 参数：sig - 信号值；p - 指定任务的指针；priv - 强制发送信号的标志。即不需要考虑进程用户属性或级别而能发
// 送信号sig并退出，否则返回未许可错误号。
static inline int send_sig(long sig, struct task_struct * p, int priv)
{
    a9c0:	53                   	push   %ebx
	// 如果没有权限，并且当前进程的有效用户ID与进程p的不同，并且也不是超级用户，则说明没有向p发送信号的权利。suser()
	// 定义为（current->euid==0），用于判断是否为超级用户。
	if (!p)
    a9c1:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    a9c6:	75 0a                	jne    a9d2 <send_sig+0x12>
		return -EINVAL;
    a9c8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    a9cd:	e9 ef 00 00 00       	jmp    aac1 <send_sig+0x101>
	if (!priv && (current->euid != p->euid) && !suser())
    a9d2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a9d7:	75 37                	jne    aa10 <send_sig+0x50>
    a9d9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a9de:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    a9e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9e9:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a9f0:	66 39 c2             	cmp    %ax,%dx
    a9f3:	74 1b                	je     aa10 <send_sig+0x50>
    a9f5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    a9fa:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    aa01:	66 85 c0             	test   %ax,%ax
    aa04:	74 0a                	je     aa10 <send_sig+0x50>
		return -EPERM;
    aa06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    aa0b:	e9 b1 00 00 00       	jmp    aac1 <send_sig+0x101>
	// 若需要发送的信号是SIGKILL或SIGCONT，那么如果此时接收信号的进程p正处于停止状态就置其为就绪（运行）状态。然后
	// 修改进程p的信号位图signal，去掉（复位）会导致进程停止的信号SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU。
	if ((sig == SIGKILL) || (sig == SIGCONT)) {
    aa10:	83 7c 24 08 09       	cmpl   $0x9,0x8(%esp)
    aa15:	74 07                	je     aa1e <send_sig+0x5e>
    aa17:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa1c:	75 38                	jne    aa56 <send_sig+0x96>
		if (p->state == TASK_STOPPED)
    aa1e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa22:	8b 00                	mov    (%eax),%eax
    aa24:	83 f8 04             	cmp    $0x4,%eax
    aa27:	75 0a                	jne    aa33 <send_sig+0x73>
			p->state = TASK_RUNNING;
    aa29:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa2d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		p->exit_code = 0;
    aa33:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa37:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    aa3e:	00 00 00 
		p->signal &= ~( (1 << (SIGSTOP - 1)) | (1 << (SIGTSTP - 1)) |
    aa41:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa45:	8b 40 0c             	mov    0xc(%eax),%eax
    aa48:	25 ff ff c3 ff       	and    $0xffc3ffff,%eax
    aa4d:	89 c2                	mov    %eax,%edx
    aa4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa53:	89 50 0c             	mov    %edx,0xc(%eax)
				(1 << (SIGTTIN - 1)) | (1 << (SIGTTOU - 1)) );
	}
	/* If the signal will be ignored, don't even post it */
    /* 如果要发送的信号sig将被进程p忽略掉，那么就根本不用发送 */
	if ((int) p->sigaction[sig - 1].sa_handler == 1)
    aa56:	8b 44 24 08          	mov    0x8(%esp),%eax
    aa5a:	8d 50 ff             	lea    -0x1(%eax),%edx
    aa5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa61:	83 c2 01             	add    $0x1,%edx
    aa64:	c1 e2 04             	shl    $0x4,%edx
    aa67:	01 d0                	add    %edx,%eax
    aa69:	8b 00                	mov    (%eax),%eax
    aa6b:	83 f8 01             	cmp    $0x1,%eax
    aa6e:	75 07                	jne    aa77 <send_sig+0xb7>
		return 0;
    aa70:	b8 00 00 00 00       	mov    $0x0,%eax
    aa75:	eb 4a                	jmp    aac1 <send_sig+0x101>
	/* Depends on order SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU */
   	/* 以下判断依赖于SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU */
	// 如果信号是SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU之一，那么说明要让接收信号的进程p停止运行。因此（若p的信号位图
	// 中有SIGCONT置位）就需要复位位图中继续运行的信号。
	if ((sig >= SIGSTOP) && (sig <= SIGTTOU))
    aa77:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa7c:	7e 1c                	jle    aa9a <send_sig+0xda>
    aa7e:	83 7c 24 08 16       	cmpl   $0x16,0x8(%esp)
    aa83:	7f 15                	jg     aa9a <send_sig+0xda>
		p->signal &= ~(1 << (SIGCONT - 1));
    aa85:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa89:	8b 40 0c             	mov    0xc(%eax),%eax
    aa8c:	25 ff ff fd ff       	and    $0xfffdffff,%eax
    aa91:	89 c2                	mov    %eax,%edx
    aa93:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa97:	89 50 0c             	mov    %edx,0xc(%eax)
	/* Actually deliver the signal */
    /* 最后，我们向进程p发送信号p */
	p->signal |= (1 << (sig - 1));
    aa9a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa9e:	8b 40 0c             	mov    0xc(%eax),%eax
    aaa1:	8b 54 24 08          	mov    0x8(%esp),%edx
    aaa5:	83 ea 01             	sub    $0x1,%edx
    aaa8:	bb 01 00 00 00       	mov    $0x1,%ebx
    aaad:	89 d1                	mov    %edx,%ecx
    aaaf:	d3 e3                	shl    %cl,%ebx
    aab1:	89 da                	mov    %ebx,%edx
    aab3:	09 c2                	or     %eax,%edx
    aab5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aab9:	89 50 0c             	mov    %edx,0xc(%eax)
	return 0;
    aabc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aac1:	5b                   	pop    %ebx
    aac2:	c3                   	ret    

0000aac3 <session_of_pgrp>:

// 根据进程组号pgrp取得进程组所属的会话号。
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
    aac3:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aac6:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    aacd:	00 
    aace:	eb 25                	jmp    aaf5 <session_of_pgrp+0x32>
		if ((*p)->pgrp == pgrp)
    aad0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aad4:	8b 00                	mov    (%eax),%eax
    aad6:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    aadc:	39 44 24 14          	cmp    %eax,0x14(%esp)
    aae0:	75 0e                	jne    aaf0 <session_of_pgrp+0x2d>
			return((*p)->session);
    aae2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aae6:	8b 00                	mov    (%eax),%eax
    aae8:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    aaee:	eb 14                	jmp    ab04 <session_of_pgrp+0x41>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aaf0:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    aaf5:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    aafc:	00 
    aafd:	77 d1                	ja     aad0 <session_of_pgrp+0xd>
	return -1;
    aaff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    ab04:	83 c4 10             	add    $0x10,%esp
    ab07:	c3                   	ret    

0000ab08 <kill_pg>:
// 参数：pgrp - 指定的进程组号；sig - 指定的信号；priv - 权限。
// 即向指定进程组pgrp中的每个进程发送指定信号sig。只要向一个进程发送成功最后就会返回0，否则如果没有找到指定进程
// 组号pgrp的任何一个进程，则返回出错号-ESRCH，若找到进程组号是pgrp的进程，但是发送信号失败，则返回发送失败的
// 错误码。
int kill_pg(int pgrp, int sig, int priv)
{
    ab08:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;
	int err,retval = -ESRCH;                // -ESRCH表示指定的进程不存在。
    ab0b:	c7 44 24 08 fd ff ff 	movl   $0xfffffffd,0x8(%esp)
    ab12:	ff 
	int found = 0;
    ab13:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    ab1a:	00 

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
    ab1b:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab20:	7e 0e                	jle    ab30 <kill_pg+0x28>
    ab22:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    ab27:	7f 07                	jg     ab30 <kill_pg+0x28>
    ab29:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ab2e:	7f 07                	jg     ab37 <kill_pg+0x2f>
		return -EINVAL;
    ab30:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ab35:	eb 72                	jmp    aba9 <kill_pg+0xa1>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab37:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    ab3e:	00 
    ab3f:	eb 4c                	jmp    ab8d <kill_pg+0x85>
		if ((*p)->pgrp == pgrp) {
    ab41:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab45:	8b 00                	mov    (%eax),%eax
    ab47:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ab4d:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ab51:	75 35                	jne    ab88 <kill_pg+0x80>
			if (sig && (err = send_sig(sig, *p, priv)))
    ab53:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab58:	74 29                	je     ab83 <kill_pg+0x7b>
    ab5a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab5e:	8b 00                	mov    (%eax),%eax
    ab60:	ff 74 24 1c          	pushl  0x1c(%esp)
    ab64:	50                   	push   %eax
    ab65:	ff 74 24 20          	pushl  0x20(%esp)
    ab69:	e8 52 fe ff ff       	call   a9c0 <send_sig>
    ab6e:	83 c4 0c             	add    $0xc,%esp
    ab71:	89 04 24             	mov    %eax,(%esp)
    ab74:	83 3c 24 00          	cmpl   $0x0,(%esp)
    ab78:	74 09                	je     ab83 <kill_pg+0x7b>
				retval = err;
    ab7a:	8b 04 24             	mov    (%esp),%eax
    ab7d:	89 44 24 08          	mov    %eax,0x8(%esp)
    ab81:	eb 05                	jmp    ab88 <kill_pg+0x80>
			else
				found++;
    ab83:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab88:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ab8d:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ab94:	00 
    ab95:	77 aa                	ja     ab41 <kill_pg+0x39>
		}
	return(found ? 0 : retval);
    ab97:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ab9c:	75 06                	jne    aba4 <kill_pg+0x9c>
    ab9e:	8b 44 24 08          	mov    0x8(%esp),%eax
    aba2:	eb 05                	jmp    aba9 <kill_pg+0xa1>
    aba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aba9:	83 c4 10             	add    $0x10,%esp
    abac:	c3                   	ret    

0000abad <kill_proc>:
// 终止进程（向进程发送信号）。
// 参数：pid - 进程号；sig - 指定信号；priv - 权限。
// 即向进程号为pid的进程发送指定信号sig。若找到指定pid的进程，那么若信号发送成功，则返回0，否则返回信号发送出错。
// 如果没有找到指定进程号pid的进程，则返回出错号-ESRCH（指定进程不存在）。
int kill_proc(int pid, int sig, int priv)
{
    abad:	83 ec 10             	sub    $0x10,%esp
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
    abb0:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    abb5:	7e 07                	jle    abbe <kill_proc+0x11>
    abb7:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    abbc:	7e 07                	jle    abc5 <kill_proc+0x18>
		return -EINVAL;
    abbe:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    abc3:	eb 57                	jmp    ac1c <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    abc5:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    abcc:	00 
    abcd:	eb 3e                	jmp    ac0d <kill_proc+0x60>
		if ((*p)->pid == pid)
    abcf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    abd3:	8b 00                	mov    (%eax),%eax
    abd5:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    abdb:	39 44 24 14          	cmp    %eax,0x14(%esp)
    abdf:	75 27                	jne    ac08 <kill_proc+0x5b>
			return(sig ? send_sig(sig, *p, priv) : 0);
    abe1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    abe6:	74 19                	je     ac01 <kill_proc+0x54>
    abe8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    abec:	8b 00                	mov    (%eax),%eax
    abee:	ff 74 24 1c          	pushl  0x1c(%esp)
    abf2:	50                   	push   %eax
    abf3:	ff 74 24 20          	pushl  0x20(%esp)
    abf7:	e8 c4 fd ff ff       	call   a9c0 <send_sig>
    abfc:	83 c4 0c             	add    $0xc,%esp
    abff:	eb 1b                	jmp    ac1c <kill_proc+0x6f>
    ac01:	b8 00 00 00 00       	mov    $0x0,%eax
    ac06:	eb 14                	jmp    ac1c <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ac08:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ac0d:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ac14:	00 
    ac15:	77 b8                	ja     abcf <kill_proc+0x22>
	return(-ESRCH);
    ac17:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    ac1c:	83 c4 10             	add    $0x10,%esp
    ac1f:	c3                   	ret    

0000ac20 <sys_kill>:
// 如果pid<-1，则信号sig将发送给进程组-pid的所有进程。
// 如果信号sig为0，则不发送信号，但仍会进行错误检查。如果成功则返回0.
// 该函数扫描任务数组表，并根据pid对满足条件的进程发送指定信号sig。若pid等于0，表明当前进程是进程组组长，因此需要
// 向所有组内的进程强制发送信号sig。
int sys_kill(int pid, int sig)
{
    ac20:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p = NR_TASKS + task;       // p指向任务数组最后一项。
    ac23:	c7 44 24 0c c0 f2 02 	movl   $0x2f2c0,0xc(%esp)
    ac2a:	00 
	int err, retval = 0;
    ac2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ac32:	00 

	if (!pid)
    ac33:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ac38:	75 1c                	jne    ac56 <sys_kill+0x36>
		return(kill_pg(current->pid, sig, 0));
    ac3a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ac3f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    ac45:	6a 00                	push   $0x0
    ac47:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac4b:	50                   	push   %eax
    ac4c:	e8 b7 fe ff ff       	call   ab08 <kill_pg>
    ac51:	83 c4 0c             	add    $0xc,%esp
    ac54:	eb 76                	jmp    accc <sys_kill+0xac>
	if (pid == -1) {
    ac56:	83 7c 24 14 ff       	cmpl   $0xffffffff,0x14(%esp)
    ac5b:	75 3f                	jne    ac9c <sys_kill+0x7c>
		while (--p > &FIRST_TASK)
    ac5d:	eb 28                	jmp    ac87 <sys_kill+0x67>
			if (err = send_sig(sig, *p, 0))
    ac5f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac63:	8b 00                	mov    (%eax),%eax
    ac65:	6a 00                	push   $0x0
    ac67:	50                   	push   %eax
    ac68:	ff 74 24 20          	pushl  0x20(%esp)
    ac6c:	e8 4f fd ff ff       	call   a9c0 <send_sig>
    ac71:	83 c4 0c             	add    $0xc,%esp
    ac74:	89 44 24 04          	mov    %eax,0x4(%esp)
    ac78:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ac7d:	74 08                	je     ac87 <sys_kill+0x67>
				retval = err;
    ac7f:	8b 44 24 04          	mov    0x4(%esp),%eax
    ac83:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (--p > &FIRST_TASK)
    ac87:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ac8c:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ac93:	00 
    ac94:	77 c9                	ja     ac5f <sys_kill+0x3f>
		return(retval);
    ac96:	8b 44 24 08          	mov    0x8(%esp),%eax
    ac9a:	eb 30                	jmp    accc <sys_kill+0xac>
	}
	if (pid < 0)
    ac9c:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    aca1:	79 17                	jns    acba <sys_kill+0x9a>
		return(kill_pg(-pid, sig, 0));
    aca3:	8b 44 24 14          	mov    0x14(%esp),%eax
    aca7:	f7 d8                	neg    %eax
    aca9:	6a 00                	push   $0x0
    acab:	ff 74 24 1c          	pushl  0x1c(%esp)
    acaf:	50                   	push   %eax
    acb0:	e8 53 fe ff ff       	call   ab08 <kill_pg>
    acb5:	83 c4 0c             	add    $0xc,%esp
    acb8:	eb 12                	jmp    accc <sys_kill+0xac>
	/* Normal kill */
	return(kill_proc(pid, sig, 0));
    acba:	6a 00                	push   $0x0
    acbc:	ff 74 24 1c          	pushl  0x1c(%esp)
    acc0:	ff 74 24 1c          	pushl  0x1c(%esp)
    acc4:	e8 e4 fe ff ff       	call   abad <kill_proc>
    acc9:	83 c4 0c             	add    $0xc,%esp
}
    accc:	83 c4 10             	add    $0x10,%esp
    accf:	c3                   	ret    

0000acd0 <is_orphaned_pgrp>:
// 扫描任务数组。如果任务项空，或者进程的组号与指定的不同，或者进程已经处于僵死状态。或者进程的父进程是init进程，
// 则说明扫描的进程不是指定进程组的成员，或者不满足要求，于是跳过。否则说明该进程是指定组的成员并且其父进程不是init
// 进程。此时如果该进程父进程的组号不等于指定的组号pgrp，但父进程的会话号等于进程的会话号，则说明它们同属于一个会话。
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
    acd0:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    acd3:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    acda:	00 
    acdb:	e9 87 00 00 00       	jmp    ad67 <is_orphaned_pgrp+0x97>
		if (!(*p) ||
    ace0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ace4:	8b 00                	mov    (%eax),%eax
    ace6:	85 c0                	test   %eax,%eax
    ace8:	74 77                	je     ad61 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
    acea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    acee:	8b 00                	mov    (%eax),%eax
    acf0:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
		if (!(*p) ||
    acf6:	39 44 24 14          	cmp    %eax,0x14(%esp)
    acfa:	75 65                	jne    ad61 <is_orphaned_pgrp+0x91>
		    ((*p)->state == TASK_ZOMBIE) ||
    acfc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad00:	8b 00                	mov    (%eax),%eax
    ad02:	8b 00                	mov    (%eax),%eax
		    ((*p)->pgrp != pgrp) ||
    ad04:	83 f8 03             	cmp    $0x3,%eax
    ad07:	74 58                	je     ad61 <is_orphaned_pgrp+0x91>
		    ((*p)->p_pptr->pid == 1))
    ad09:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad0d:	8b 00                	mov    (%eax),%eax
    ad0f:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad15:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
		    ((*p)->state == TASK_ZOMBIE) ||
    ad1b:	83 f8 01             	cmp    $0x1,%eax
    ad1e:	74 41                	je     ad61 <is_orphaned_pgrp+0x91>
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad20:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad24:	8b 00                	mov    (%eax),%eax
    ad26:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad2c:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ad32:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ad36:	74 2a                	je     ad62 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
    ad38:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad3c:	8b 00                	mov    (%eax),%eax
    ad3e:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad44:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    ad4a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad4e:	8b 00                	mov    (%eax),%eax
    ad50:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad56:	39 c2                	cmp    %eax,%edx
    ad58:	75 08                	jne    ad62 <is_orphaned_pgrp+0x92>
			return 0;
    ad5a:	b8 00 00 00 00       	mov    $0x0,%eax
    ad5f:	eb 19                	jmp    ad7a <is_orphaned_pgrp+0xaa>
			continue;
    ad61:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad62:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ad67:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    ad6e:	00 
    ad6f:	0f 87 6b ff ff ff    	ja     ace0 <is_orphaned_pgrp+0x10>
	}
	return(1);	/* (sighing) "Often!" */        /* (唉）是孤儿进程组！ */
    ad75:	b8 01 00 00 00       	mov    $0x1,%eax
}
    ad7a:	83 c4 10             	add    $0x10,%esp
    ad7d:	c3                   	ret    

0000ad7e <has_stopped_jobs>:

// 判断进程组中是否含有处于停止状态的作业（进程组）。有则返回1；无则返回0.
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
    ad7e:	83 ec 10             	sub    $0x10,%esp
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad81:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    ad88:	00 
    ad89:	eb 2c                	jmp    adb7 <has_stopped_jobs+0x39>
		if ((*p)->pgrp != pgrp)
    ad8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad8f:	8b 00                	mov    (%eax),%eax
    ad91:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ad97:	39 44 24 14          	cmp    %eax,0x14(%esp)
    ad9b:	75 14                	jne    adb1 <has_stopped_jobs+0x33>
			continue;
		if ((*p)->state == TASK_STOPPED)
    ad9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ada1:	8b 00                	mov    (%eax),%eax
    ada3:	8b 00                	mov    (%eax),%eax
    ada5:	83 f8 04             	cmp    $0x4,%eax
    ada8:	75 08                	jne    adb2 <has_stopped_jobs+0x34>
			return(1);
    adaa:	b8 01 00 00 00       	mov    $0x1,%eax
    adaf:	eb 15                	jmp    adc6 <has_stopped_jobs+0x48>
			continue;
    adb1:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    adb2:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    adb7:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    adbe:	00 
    adbf:	77 ca                	ja     ad8b <has_stopped_jobs+0xd>
	}
	return(0);
    adc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
    adc6:	83 c4 10             	add    $0x10,%esp
    adc9:	c3                   	ret    

0000adca <do_exit>:

// 程序退出处理函数。
// 该函数将根据进程自身的特性对其进行处理，并把当前进程状态设置成僵死状态TASK_ZOMBIE，最后调用调度函数schedule()去
// 执行其他进程，不再返回。
void do_exit(long code)
{
    adca:	56                   	push   %esi
    adcb:	53                   	push   %ebx
    adcc:	83 ec 24             	sub    $0x24,%esp
	// 首先释放当前进程代码段和数据段所占的内存页。函数free_page_tables()的第1个参数（get_base()返回值）指明在CPU线性
	// 地址空间中起始其地址，第2个（get_limit()返回值）说明欲释放的字节长度值。get_base()宏中的current->ldt[1]给出进程
	// 代码段描述符的位置（current->ldt[2]给出进程数据段描述符的位置）；get_limit()中的0x0f是进程代码段的选择符（0x17是
	// 进程数据段的选择符）。即在取段其地址时使用该段的描述符所处地址作为参数，取段长度时使用该段的选择符作为参数。
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
    adcf:	b8 0f 00 00 00       	mov    $0xf,%eax
    add4:	0f 03 c0             	lsl    %ax,%eax
    add7:	40                   	inc    %eax
    add8:	89 44 24 10          	mov    %eax,0x10(%esp)
    addc:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    ade0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ade5:	05 a0 03 00 00       	add    $0x3a0,%eax
    adea:	83 c0 02             	add    $0x2,%eax
    aded:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    adf3:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    adf9:	8d 72 04             	lea    0x4(%edx),%esi
    adfc:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    ae02:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    ae08:	83 c3 07             	add    $0x7,%ebx
    ae0b:	8a 33                	mov    (%ebx),%dh
    ae0d:	8a 16                	mov    (%esi),%dl
    ae0f:	c1 e2 10             	shl    $0x10,%edx
    ae12:	66 8b 10             	mov    (%eax),%dx
    ae15:	89 d0                	mov    %edx,%eax
    ae17:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ae1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ae1f:	83 ec 08             	sub    $0x8,%esp
    ae22:	51                   	push   %ecx
    ae23:	50                   	push   %eax
    ae24:	e8 23 0f 00 00       	call   bd4c <free_page_tables>
    ae29:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
    ae2c:	b8 17 00 00 00       	mov    $0x17,%eax
    ae31:	0f 03 c0             	lsl    %ax,%eax
    ae34:	40                   	inc    %eax
    ae35:	89 44 24 08          	mov    %eax,0x8(%esp)
    ae39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    ae3d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ae42:	05 a8 03 00 00       	add    $0x3a8,%eax
    ae47:	83 c0 02             	add    $0x2,%eax
    ae4a:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    ae50:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    ae56:	8d 72 04             	lea    0x4(%edx),%esi
    ae59:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
    ae5f:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
    ae65:	83 c3 07             	add    $0x7,%ebx
    ae68:	8a 33                	mov    (%ebx),%dh
    ae6a:	8a 16                	mov    (%esi),%dl
    ae6c:	c1 e2 10             	shl    $0x10,%edx
    ae6f:	66 8b 10             	mov    (%eax),%dx
    ae72:	89 d0                	mov    %edx,%eax
    ae74:	89 44 24 04          	mov    %eax,0x4(%esp)
    ae78:	8b 44 24 04          	mov    0x4(%esp),%eax
    ae7c:	83 ec 08             	sub    $0x8,%esp
    ae7f:	51                   	push   %ecx
    ae80:	50                   	push   %eax
    ae81:	e8 c6 0e 00 00       	call   bd4c <free_page_tables>
    ae86:	83 c4 10             	add    $0x10,%esp
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    ae89:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    ae90:	00 
    ae91:	eb 2b                	jmp    aebe <do_exit+0xf4>
		if (current->filp[i])
    ae93:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ae98:	8b 54 24 18          	mov    0x18(%esp),%edx
    ae9c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    aea2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    aea6:	85 c0                	test   %eax,%eax
    aea8:	74 0f                	je     aeb9 <do_exit+0xef>
			sys_close(i);
    aeaa:	83 ec 0c             	sub    $0xc,%esp
    aead:	ff 74 24 24          	pushl  0x24(%esp)
    aeb1:	e8 e8 2c 00 00       	call   db9e <sys_close>
    aeb6:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_OPEN ; i++)
    aeb9:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    aebe:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
    aec3:	7e ce                	jle    ae93 <do_exit+0xc9>
	Log(LOG_INFO_TYPE, "<<<<< sys_exit process pid = %d, exit_code = %d >>>>>\n", current->pid, code);
    aec5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aeca:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    aed0:	ff 74 24 30          	pushl  0x30(%esp)
    aed4:	50                   	push   %eax
    aed5:	68 d0 32 02 00       	push   $0x232d0
    aeda:	6a 00                	push   $0x0
    aedc:	e8 63 7a 01 00       	call   22944 <Log>
    aee1:	83 c4 10             	add    $0x10,%esp
	iput(current->pwd);
    aee4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    aee9:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    aeef:	83 ec 0c             	sub    $0xc,%esp
    aef2:	50                   	push   %eax
    aef3:	e8 c4 37 00 00       	call   e6bc <iput>
    aef8:	83 c4 10             	add    $0x10,%esp
	current->pwd = NULL;
    aefb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af00:	c7 80 34 03 00 00 00 	movl   $0x0,0x334(%eax)
    af07:	00 00 00 
	iput(current->root);
    af0a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af0f:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    af15:	83 ec 0c             	sub    $0xc,%esp
    af18:	50                   	push   %eax
    af19:	e8 9e 37 00 00       	call   e6bc <iput>
    af1e:	83 c4 10             	add    $0x10,%esp
	current->root = NULL;
    af21:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af26:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
    af2d:	00 00 00 
	iput(current->executable);
    af30:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af35:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    af3b:	83 ec 0c             	sub    $0xc,%esp
    af3e:	50                   	push   %eax
    af3f:	e8 78 37 00 00       	call   e6bc <iput>
    af44:	83 c4 10             	add    $0x10,%esp
	current->executable = NULL;
    af47:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af4c:	c7 80 3c 03 00 00 00 	movl   $0x0,0x33c(%eax)
    af53:	00 00 00 
	iput(current->library);
    af56:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af5b:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    af61:	83 ec 0c             	sub    $0xc,%esp
    af64:	50                   	push   %eax
    af65:	e8 52 37 00 00       	call   e6bc <iput>
    af6a:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
    af6d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af72:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
    af79:	00 00 00 
	current->state = TASK_ZOMBIE;
    af7c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af81:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
	current->exit_code = code;
    af87:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af8c:	8b 54 24 30          	mov    0x30(%esp),%edx
    af90:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    af96:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    af9b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afa1:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    afa7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afac:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afb2:	39 c2                	cmp    %eax,%edx
    afb4:	0f 84 8c 00 00 00    	je     b046 <do_exit+0x27c>
	    (current->p_pptr->session == current->session) &&
    afba:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afbf:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afc5:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    afcb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afd0:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
	if ((current->p_pptr->pgrp != current->pgrp) &&
    afd6:	39 c2                	cmp    %eax,%edx
    afd8:	75 6c                	jne    b046 <do_exit+0x27c>
	    is_orphaned_pgrp(current->pgrp) &&
    afda:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    afdf:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afe5:	83 ec 0c             	sub    $0xc,%esp
    afe8:	50                   	push   %eax
    afe9:	e8 e2 fc ff ff       	call   acd0 <is_orphaned_pgrp>
    afee:	83 c4 10             	add    $0x10,%esp
	    (current->p_pptr->session == current->session) &&
    aff1:	85 c0                	test   %eax,%eax
    aff3:	74 51                	je     b046 <do_exit+0x27c>
	    has_stopped_jobs(current->pgrp)) {
    aff5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    affa:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b000:	83 ec 0c             	sub    $0xc,%esp
    b003:	50                   	push   %eax
    b004:	e8 75 fd ff ff       	call   ad7e <has_stopped_jobs>
    b009:	83 c4 10             	add    $0x10,%esp
	    is_orphaned_pgrp(current->pgrp) &&
    b00c:	85 c0                	test   %eax,%eax
    b00e:	74 36                	je     b046 <do_exit+0x27c>
		kill_pg(current->pgrp,SIGHUP,1);
    b010:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b015:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b01b:	83 ec 04             	sub    $0x4,%esp
    b01e:	6a 01                	push   $0x1
    b020:	6a 01                	push   $0x1
    b022:	50                   	push   %eax
    b023:	e8 e0 fa ff ff       	call   ab08 <kill_pg>
    b028:	83 c4 10             	add    $0x10,%esp
		kill_pg(current->pgrp,SIGCONT,1);
    b02b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b030:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b036:	83 ec 04             	sub    $0x4,%esp
    b039:	6a 01                	push   $0x1
    b03b:	6a 12                	push   $0x12
    b03d:	50                   	push   %eax
    b03e:	e8 c5 fa ff ff       	call   ab08 <kill_pg>
    b043:	83 c4 10             	add    $0x10,%esp
	}
	/* Let father know we died */           /* 通知父进程当前进程将终止 */
	current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b046:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b04b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b051:	8b 50 0c             	mov    0xc(%eax),%edx
    b054:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b059:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b05f:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b065:	89 50 0c             	mov    %edx,0xc(%eax)
     * B. 检查当前进程的退出是否会造成任何进程组变成孤儿进程组。如果有，并且有处于停止状态
     * （TASK_STOPPED）的组员，则向它们发送一个SIGHUP信号和一个SIGCONT信号。（POSIX 3.2.2.2节要求）
     */
	// 如果当前进程有子进程（其p_cptr指针指向最近创建的子进程），则让进程1（init进程）成为其所有子进程的父进程。如果
	// 子进程已经处于僵死状态，则向init进程（父进程）发送子进程已终止信号SIGCHLD。
	if (p = current->p_cptr) {
    b068:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b06d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b073:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b077:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    b07c:	0f 84 41 01 00 00    	je     b1c3 <do_exit+0x3f9>
		while (1) {
			p->p_pptr = task[1];
    b082:	8b 15 c4 f1 02 00    	mov    0x2f1c4,%edx
    b088:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b08c:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
			if (p->state == TASK_ZOMBIE)
    b092:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b096:	8b 00                	mov    (%eax),%eax
    b098:	83 f8 03             	cmp    $0x3,%eax
    b09b:	75 16                	jne    b0b3 <do_exit+0x2e9>
				task[1]->signal |= (1 << (SIGCHLD - 1));
    b09d:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b0a2:	8b 50 0c             	mov    0xc(%eax),%edx
    b0a5:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b0aa:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b0b0:	89 50 0c             	mov    %edx,0xc(%eax)
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b0b3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0b7:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b0bd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b0c2:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0c8:	39 c2                	cmp    %eax,%edx
    b0ca:	0f 84 81 00 00 00    	je     b151 <do_exit+0x387>
			    (p->session == current->session) &&
    b0d0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0d4:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b0da:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b0df:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			if ((p->pgrp != current->pgrp) &&
    b0e5:	39 c2                	cmp    %eax,%edx
    b0e7:	75 68                	jne    b151 <do_exit+0x387>
			    is_orphaned_pgrp(p->pgrp) &&
    b0e9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0ed:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0f3:	83 ec 0c             	sub    $0xc,%esp
    b0f6:	50                   	push   %eax
    b0f7:	e8 d4 fb ff ff       	call   acd0 <is_orphaned_pgrp>
    b0fc:	83 c4 10             	add    $0x10,%esp
			    (p->session == current->session) &&
    b0ff:	85 c0                	test   %eax,%eax
    b101:	74 4e                	je     b151 <do_exit+0x387>
			    has_stopped_jobs(p->pgrp)) {
    b103:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b107:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b10d:	83 ec 0c             	sub    $0xc,%esp
    b110:	50                   	push   %eax
    b111:	e8 68 fc ff ff       	call   ad7e <has_stopped_jobs>
    b116:	83 c4 10             	add    $0x10,%esp
			    is_orphaned_pgrp(p->pgrp) &&
    b119:	85 c0                	test   %eax,%eax
    b11b:	74 34                	je     b151 <do_exit+0x387>
				kill_pg(p->pgrp,SIGHUP,1);
    b11d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b121:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b127:	83 ec 04             	sub    $0x4,%esp
    b12a:	6a 01                	push   $0x1
    b12c:	6a 01                	push   $0x1
    b12e:	50                   	push   %eax
    b12f:	e8 d4 f9 ff ff       	call   ab08 <kill_pg>
    b134:	83 c4 10             	add    $0x10,%esp
				kill_pg(p->pgrp,SIGCONT,1);
    b137:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b13b:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b141:	83 ec 04             	sub    $0x4,%esp
    b144:	6a 01                	push   $0x1
    b146:	6a 12                	push   $0x12
    b148:	50                   	push   %eax
    b149:	e8 ba f9 ff ff       	call   ab08 <kill_pg>
    b14e:	83 c4 10             	add    $0x10,%esp
			}
			if (p->p_osptr) {
    b151:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b155:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b15b:	85 c0                	test   %eax,%eax
    b15d:	74 13                	je     b172 <do_exit+0x3a8>
				p = p->p_osptr;
    b15f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b163:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b169:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			p->p_pptr = task[1];
    b16d:	e9 10 ff ff ff       	jmp    b082 <do_exit+0x2b8>
             */
			// 通过上面处理，当前进程子进程的所有兄弟子进程都已经处理过。此时p指向最老的兄弟子进程。于是把这些兄弟子进程全部加入
			// init进程的子进程双向链表表头部中。加入后，init进程的p_cptr指向当前进程原子进程中最年轻的（the youngest）子进程
			// 而原子进程中最老的（the oldest）兄弟子进程p_osptr指向原init进程的最年轻进程，而原init进程中最年轻进程的p_ysptr
			// 指向原子进程中最老的兄弟子进程。最后把当前进程的p_cptr指针置空，并退出循环。
			p->p_osptr = task[1]->p_cptr;
    b172:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b177:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    b17d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b181:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
			task[1]->p_cptr->p_ysptr = p;
    b187:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b18c:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b192:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    b196:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			task[1]->p_cptr = current->p_cptr;
    b19c:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    b1a2:	a1 c4 f1 02 00       	mov    0x2f1c4,%eax
    b1a7:	8b 92 c0 02 00 00    	mov    0x2c0(%edx),%edx
    b1ad:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			current->p_cptr = 0;
    b1b3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1b8:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    b1bf:	00 00 00 
			break;
    b1c2:	90                   	nop
		}
	}
	// 如果当前进程是会话头领（leader）进程，那么若它有控制终端，则首先向使用该控制终端的进程组发送挂断信号SIGHUP，然后释放
	// 该终端。接着扫描任务数组，把属于当前进程会话中进程的终端置空（取消）。
	if (current->leader) {
    b1c3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1c8:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    b1ce:	85 c0                	test   %eax,%eax
    b1d0:	0f 84 e7 00 00 00    	je     b2bd <do_exit+0x4f3>
		struct task_struct **p;
		struct tty_struct *tty;

		if (current->tty >= 0) {
    b1d6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1db:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1e1:	85 c0                	test   %eax,%eax
    b1e3:	0f 88 90 00 00 00    	js     b279 <do_exit+0x4af>
			tty = TTY_TABLE(current->tty);
    b1e9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1ee:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1f4:	85 c0                	test   %eax,%eax
    b1f6:	74 3d                	je     b235 <do_exit+0x46b>
    b1f8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b1fd:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b203:	83 f8 3f             	cmp    $0x3f,%eax
    b206:	7f 18                	jg     b220 <do_exit+0x456>
    b208:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b20d:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b213:	83 e8 01             	sub    $0x1,%eax
    b216:	c1 e0 06             	shl    $0x6,%eax
    b219:	05 20 28 04 00       	add    $0x42820,%eax
    b21e:	eb 22                	jmp    b242 <do_exit+0x478>
    b220:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b225:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b22b:	c1 e0 06             	shl    $0x6,%eax
    b22e:	05 20 28 04 00       	add    $0x42820,%eax
    b233:	eb 0d                	jmp    b242 <do_exit+0x478>
    b235:	a1 80 22 03 00       	mov    0x32280,%eax
    b23a:	c1 e0 06             	shl    $0x6,%eax
    b23d:	05 20 28 04 00       	add    $0x42820,%eax
    b242:	89 04 24             	mov    %eax,(%esp)
			if (tty->pgrp>0)
    b245:	8b 04 24             	mov    (%esp),%eax
    b248:	8b 40 24             	mov    0x24(%eax),%eax
    b24b:	85 c0                	test   %eax,%eax
    b24d:	7e 16                	jle    b265 <do_exit+0x49b>
				kill_pg(tty->pgrp, SIGHUP, 1);
    b24f:	8b 04 24             	mov    (%esp),%eax
    b252:	8b 40 24             	mov    0x24(%eax),%eax
    b255:	83 ec 04             	sub    $0x4,%esp
    b258:	6a 01                	push   $0x1
    b25a:	6a 01                	push   $0x1
    b25c:	50                   	push   %eax
    b25d:	e8 a6 f8 ff ff       	call   ab08 <kill_pg>
    b262:	83 c4 10             	add    $0x10,%esp
			tty->pgrp = 0;
    b265:	8b 04 24             	mov    (%esp),%eax
    b268:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
			tty->session = 0;
    b26f:	8b 04 24             	mov    (%esp),%eax
    b272:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b279:	c7 44 24 14 bc f2 02 	movl   $0x2f2bc,0x14(%esp)
    b280:	00 
    b281:	eb 30                	jmp    b2b3 <do_exit+0x4e9>
			if ((*p)->session == current->session)
    b283:	8b 44 24 14          	mov    0x14(%esp),%eax
    b287:	8b 00                	mov    (%eax),%eax
    b289:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b28f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b294:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    b29a:	39 c2                	cmp    %eax,%edx
    b29c:	75 10                	jne    b2ae <do_exit+0x4e4>
				(*p)->tty = -1;
    b29e:	8b 44 24 14          	mov    0x14(%esp),%eax
    b2a2:	8b 00                	mov    (%eax),%eax
    b2a4:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    b2ab:	ff ff ff 
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b2ae:	83 6c 24 14 04       	subl   $0x4,0x14(%esp)
    b2b3:	81 7c 24 14 c0 f1 02 	cmpl   $0x2f1c0,0x14(%esp)
    b2ba:	00 
    b2bb:	77 c6                	ja     b283 <do_exit+0x4b9>
	}
	// 如果当前进程上次使用过协处理器，则把记录此信息的指针置空。若定义了调试进程树符号，则调用进程树检测显示函数。最后调用调度
	// 函数，重新调度进程运行，以让父进程能够处理僵死进程的其他善后事宜。
	if (last_task_used_math == current)
    b2bd:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
    b2c3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b2c8:	39 c2                	cmp    %eax,%edx
    b2ca:	75 0a                	jne    b2d6 <do_exit+0x50c>
		last_task_used_math = NULL;
    b2cc:	c7 05 0c fb 02 00 00 	movl   $0x0,0x2fb0c
    b2d3:	00 00 00 
#ifdef DEBUG_PROC_TREE
	audit_ptree();
    b2d6:	e8 1f f2 ff ff       	call   a4fa <audit_ptree>
#endif
	schedule();
    b2db:	e8 63 bb ff ff       	call   6e43 <schedule>
}
    b2e0:	90                   	nop
    b2e1:	83 c4 24             	add    $0x24,%esp
    b2e4:	5b                   	pop    %ebx
    b2e5:	5e                   	pop    %esi
    b2e6:	c3                   	ret    

0000b2e7 <sys_exit>:
// 系统调用exit()。终止进程。
// 参数error_code是用户程序提供的退出状态信息，只有低字节有效。把error_code左移8位是wait()或waitpid()函数的要求。
// 低字节中将用来保存wait()的状态信息。例如，如果进程处于暂停状态（TASK_STOPPED），那么其低字节就等于0x7f。参见
// sys/wait.h文件。wait()或waitpid()利用这些宏就可以取得子进程的退出状态码或子进程终止的原因（信号）。
int sys_exit(int error_code)
{
    b2e7:	83 ec 0c             	sub    $0xc,%esp
	do_exit((error_code & 0xff) << 8);
    b2ea:	8b 44 24 10          	mov    0x10(%esp),%eax
    b2ee:	c1 e0 08             	shl    $0x8,%eax
    b2f1:	0f b7 c0             	movzwl %ax,%eax
    b2f4:	83 ec 0c             	sub    $0xc,%esp
    b2f7:	50                   	push   %eax
    b2f8:	e8 cd fa ff ff       	call   adca <do_exit>
    b2fd:	83 c4 10             	add    $0x10,%esp
}
    b300:	90                   	nop
    b301:	83 c4 0c             	add    $0xc,%esp
    b304:	c3                   	ret    

0000b305 <sys_waitpid>:
// 若options = WUNTRACED，表示如果子进程是停止的，也马上返回（无须跟踪）。
// 若options = WNOHANG，表示如果没有子进程退出或终止就马上返回。
// 如果返回状态指针stat_addr不为空，则就将状态信息保存到那里。
// 参数pid是进程号；*stat_addr是保存状态信息位置的指针；options是waitpid选项。
int sys_waitpid(pid_t pid, unsigned long * stat_addr, int options)
{
    b305:	83 ec 1c             	sub    $0x1c,%esp
	int flag;               				// 该标志用于后面所选出的子进程处于就绪或睡眠态。
	struct task_struct *p;
	unsigned long oldblocked;

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
    b308:	83 ec 08             	sub    $0x8,%esp
    b30b:	6a 04                	push   $0x4
    b30d:	ff 74 24 30          	pushl  0x30(%esp)
    b311:	e8 89 d0 ff ff       	call   839f <verify_area>
    b316:	83 c4 10             	add    $0x10,%esp
repeat:
	flag = 0;
    b319:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b320:	00 
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b321:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b326:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b32c:	89 44 24 08          	mov    %eax,0x8(%esp)
    b330:	e9 ab 01 00 00       	jmp    b4e0 <sys_waitpid+0x1db>
		// 如果等待的子进程号pid>0，但与被扫描子进程p的pid不相等，说明它是当前进程另外的子进程，于是跳过该进程，接着扫描下一
		// 个进程。
		if (pid > 0) {
    b335:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b33a:	7e 15                	jle    b351 <sys_waitpid+0x4c>
			if (p->pid != pid)
    b33c:	8b 44 24 08          	mov    0x8(%esp),%eax
    b340:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b346:	39 44 24 20          	cmp    %eax,0x20(%esp)
    b34a:	74 49                	je     b395 <sys_waitpid+0x90>
				continue;
    b34c:	e9 81 01 00 00       	jmp    b4d2 <sys_waitpid+0x1cd>
		// 否则，如果指定等待进程的pid=0，表示正在等待进程组号等于当前进程组号的任何子进程。如果此时被扫描进程p的进程组号与当前
		// 进程的组号不等，则跳过。
		} else if (!pid) {
    b351:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b356:	75 1e                	jne    b376 <sys_waitpid+0x71>
			if (p->pgrp != current->pgrp)
    b358:	8b 44 24 08          	mov    0x8(%esp),%eax
    b35c:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b362:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b367:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b36d:	39 c2                	cmp    %eax,%edx
    b36f:	74 24                	je     b395 <sys_waitpid+0x90>
				continue;
    b371:	e9 5c 01 00 00       	jmp    b4d2 <sys_waitpid+0x1cd>
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
    b376:	83 7c 24 20 ff       	cmpl   $0xffffffff,0x20(%esp)
    b37b:	74 18                	je     b395 <sys_waitpid+0x90>
			if (p->pgrp != -pid)
    b37d:	8b 44 24 08          	mov    0x8(%esp),%eax
    b381:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b387:	8b 54 24 20          	mov    0x20(%esp),%edx
    b38b:	f7 da                	neg    %edx
    b38d:	39 d0                	cmp    %edx,%eax
    b38f:	0f 85 39 01 00 00    	jne    b4ce <sys_waitpid+0x1c9>
		// pid等于-1）。接下来根据这个子进程p所处的状态来处理。
		// 当子进程p停止状态时，如果此时参数选项options中WUNTRACED标志没有置位，表示程序无须立刻返回，或者子进程此时的退出码等于
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
    b395:	8b 44 24 08          	mov    0x8(%esp),%eax
    b399:	8b 00                	mov    (%eax),%eax
    b39b:	83 f8 03             	cmp    $0x3,%eax
    b39e:	74 67                	je     b407 <sys_waitpid+0x102>
    b3a0:	83 f8 04             	cmp    $0x4,%eax
    b3a3:	0f 85 1b 01 00 00    	jne    b4c4 <sys_waitpid+0x1bf>
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b3a9:	8b 44 24 28          	mov    0x28(%esp),%eax
    b3ad:	83 e0 02             	and    $0x2,%eax
    b3b0:	85 c0                	test   %eax,%eax
    b3b2:	0f 84 19 01 00 00    	je     b4d1 <sys_waitpid+0x1cc>
				    !p->exit_code)
    b3b8:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3bc:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
				if (!(options & WUNTRACED) ||
    b3c2:	85 c0                	test   %eax,%eax
    b3c4:	0f 84 07 01 00 00    	je     b4d1 <sys_waitpid+0x1cc>
					continue;
				put_fs_long((p->exit_code << 8) | 0x7f,
    b3ca:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3ce:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b3d4:	c1 e0 08             	shl    $0x8,%eax
    b3d7:	83 c8 7f             	or     $0x7f,%eax
    b3da:	83 ec 08             	sub    $0x8,%esp
    b3dd:	ff 74 24 2c          	pushl  0x2c(%esp)
    b3e1:	50                   	push   %eax
    b3e2:	e8 b5 ef ff ff       	call   a39c <put_fs_long>
    b3e7:	83 c4 10             	add    $0x10,%esp
					stat_addr);
				p->exit_code = 0;
    b3ea:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3ee:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    b3f5:	00 00 00 
				return p->pid;
    b3f8:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3fc:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b402:	e9 7b 01 00 00       	jmp    b582 <sys_waitpid+0x27d>
			// 如果子进程p处于僵死状态，则首先把它在用户态和内核态运行的时间分别累计到当前进程（父进程）中，然后取出子进程pid和退出码，
			// 把退出码放入返回状态位置stat_addr处并释放该子进程。最后返回子进程的退出码和pid。若定义了调试进程树符号，则调用进程树
			// 检测显示函数。
			case TASK_ZOMBIE:
				current->cutime += p->utime;
    b407:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b40c:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    b412:	8b 44 24 08          	mov    0x8(%esp),%eax
    b416:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    b41c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b421:	01 ca                	add    %ecx,%edx
    b423:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
				current->cstime += p->stime;
    b429:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b42e:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    b434:	8b 44 24 08          	mov    0x8(%esp),%eax
    b438:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    b43e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b443:	01 ca                	add    %ecx,%edx
    b445:	89 90 ec 02 00 00    	mov    %edx,0x2ec(%eax)
				flag = p->pid;
    b44b:	8b 44 24 08          	mov    0x8(%esp),%eax
    b44f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b455:	89 44 24 0c          	mov    %eax,0xc(%esp)
				Log(LOG_INFO_TYPE, "<<<<< sys_waitpid current_pid = %d, child_pid = %d, exit_code = %d >>>>>\n", current->pid, p->pid, p->exit_code);
    b459:	8b 44 24 08          	mov    0x8(%esp),%eax
    b45d:	8b 88 14 02 00 00    	mov    0x214(%eax),%ecx
    b463:	8b 44 24 08          	mov    0x8(%esp),%eax
    b467:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    b46d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b472:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b478:	83 ec 0c             	sub    $0xc,%esp
    b47b:	51                   	push   %ecx
    b47c:	52                   	push   %edx
    b47d:	50                   	push   %eax
    b47e:	68 08 33 02 00       	push   $0x23308
    b483:	6a 00                	push   $0x0
    b485:	e8 ba 74 01 00       	call   22944 <Log>
    b48a:	83 c4 20             	add    $0x20,%esp
				put_fs_long(p->exit_code, stat_addr);
    b48d:	8b 44 24 08          	mov    0x8(%esp),%eax
    b491:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b497:	83 ec 08             	sub    $0x8,%esp
    b49a:	ff 74 24 2c          	pushl  0x2c(%esp)
    b49e:	50                   	push   %eax
    b49f:	e8 f8 ee ff ff       	call   a39c <put_fs_long>
    b4a4:	83 c4 10             	add    $0x10,%esp
				release(p);
    b4a7:	83 ec 0c             	sub    $0xc,%esp
    b4aa:	ff 74 24 14          	pushl  0x14(%esp)
    b4ae:	e8 f6 ee ff ff       	call   a3a9 <release>
    b4b3:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_PROC_TREE
				audit_ptree();
    b4b6:	e8 3f f0 ff ff       	call   a4fa <audit_ptree>
#endif
				return flag;
    b4bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b4bf:	e9 be 00 00 00       	jmp    b582 <sys_waitpid+0x27d>
			// 如果这个子进程p的状态即是不停止也不是僵死，那么就置flag = 1。表示找到过一个符合要求的子进程，但是它处于运行态或睡眠态。
			default:
				flag = 1;
    b4c4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    b4cb:	00 
				continue;
    b4cc:	eb 04                	jmp    b4d2 <sys_waitpid+0x1cd>
				continue;
    b4ce:	90                   	nop
    b4cf:	eb 01                	jmp    b4d2 <sys_waitpid+0x1cd>
					continue;
    b4d1:	90                   	nop
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b4d2:	8b 44 24 08          	mov    0x8(%esp),%eax
    b4d6:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b4dc:	89 44 24 08          	mov    %eax,0x8(%esp)
    b4e0:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    b4e5:	0f 85 4a fe ff ff    	jne    b335 <sys_waitpid+0x30>
    }
	// 在上面对任务数组扫描结束后，如果flag被置位，说明了有符合等待要求的子进程并没有处于退出立刻或僵死状态。此时如果已设置
	// WNOHANG选项（表示若没有子进程处于退出或终止态就返回），就立刻返回0,退出。否则把当前进程置为可中断等待状态，保留并修改当前
	// 进程信号阻塞位图，允许其接收SIGCHLD信号。然后执行调度程序。当系统又开始执行本进程时，如果本进程收到除SIGCHLD以外的
	// 其他未屏蔽信号，则以退出码“重新启动系统调用”返回。否则跳转到函数开始处repeat标号处重重复处理。
	if (flag) {
    b4eb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    b4f0:	0f 84 87 00 00 00    	je     b57d <sys_waitpid+0x278>
		if (options & WNOHANG)
    b4f6:	8b 44 24 28          	mov    0x28(%esp),%eax
    b4fa:	83 e0 01             	and    $0x1,%eax
    b4fd:	85 c0                	test   %eax,%eax
    b4ff:	74 07                	je     b508 <sys_waitpid+0x203>
			return 0;
    b501:	b8 00 00 00 00       	mov    $0x0,%eax
    b506:	eb 7a                	jmp    b582 <sys_waitpid+0x27d>
		current->state = TASK_INTERRUPTIBLE;
    b508:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b50d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		oldblocked = current->blocked;
    b513:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b518:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b51e:	89 44 24 04          	mov    %eax,0x4(%esp)
		current->blocked &= ~(1 << (SIGCHLD - 1));
    b522:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b527:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b52d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b532:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
    b538:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		schedule();
    b53e:	e8 00 b9 ff ff       	call   6e43 <schedule>
		current->blocked = oldblocked;
    b543:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b548:	8b 54 24 04          	mov    0x4(%esp),%edx
    b54c:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		if (current->signal & ~(current->blocked | (1 << (SIGCHLD - 1))))
    b552:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b557:	8b 50 0c             	mov    0xc(%eax),%edx
    b55a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b55f:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b565:	0d 00 00 01 00       	or     $0x10000,%eax
    b56a:	f7 d0                	not    %eax
    b56c:	21 d0                	and    %edx,%eax
    b56e:	85 c0                	test   %eax,%eax
    b570:	0f 84 a3 fd ff ff    	je     b319 <sys_waitpid+0x14>
			return -ERESTARTSYS;
    b576:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
    b57b:	eb 05                	jmp    b582 <sys_waitpid+0x27d>
		else
			goto repeat;
	}
	// 若flag = 0，表示没有找到符合要求的子进程，则返回出错码（子进程不存在）。
	return -ECHILD;
    b57d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
}
    b582:	83 c4 1c             	add    $0x1c,%esp
    b585:	c3                   	ret    

0000b586 <get_fs_byte>:
{
    b586:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    b587:	8b 44 24 08          	mov    0x8(%esp),%eax
    b58b:	64 8a 00             	mov    %fs:(%eax),%al
    b58e:	89 c3                	mov    %eax,%ebx
	return _v;
    b590:	89 d8                	mov    %ebx,%eax
}
    b592:	5b                   	pop    %ebx
    b593:	c3                   	ret    

0000b594 <put_fs_byte>:
{
    b594:	83 ec 04             	sub    $0x4,%esp
    b597:	8b 44 24 08          	mov    0x8(%esp),%eax
    b59b:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    b59e:	0f b6 04 24          	movzbl (%esp),%eax
    b5a2:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b5a6:	64 88 02             	mov    %al,%fs:(%edx)
}
    b5a9:	90                   	nop
    b5aa:	83 c4 04             	add    $0x4,%esp
    b5ad:	c3                   	ret    

0000b5ae <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    b5ae:	8b 44 24 04          	mov    0x4(%esp),%eax
    b5b2:	8b 54 24 08          	mov    0x8(%esp),%edx
    b5b6:	64 89 02             	mov    %eax,%fs:(%edx)
}
    b5b9:	90                   	nop
    b5ba:	c3                   	ret    

0000b5bb <sys_sgetmask>:
#include <errno.h>

// 获取当前任务信号屏蔽位图（屏蔽码或阻塞码）。sgetmask可分解为signal-get-mask。以下类似。
int sys_sgetmask()
{
	return current->blocked;
    b5bb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5c0:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
}
    b5c6:	c3                   	ret    

0000b5c7 <sys_ssetmask>:

// 设置新的信号屏蔽位图。信号SIGKILL和SIGSTOP不能被屏蔽。返回值是原信号屏蔽位图。
int sys_ssetmask(int newmask)
{
    b5c7:	83 ec 10             	sub    $0x10,%esp
	int old = current->blocked;
    b5ca:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5cf:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b5d5:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->blocked = newmask & ~(1 << (SIGKILL - 1)) & ~(1 << (SIGSTOP - 1));
    b5d9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b5de:	8b 54 24 14          	mov    0x14(%esp),%edx
    b5e2:	81 e2 ff fe fb ff    	and    $0xfffbfeff,%edx
    b5e8:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return old;
    b5ee:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    b5f2:	83 c4 10             	add    $0x10,%esp
    b5f5:	c3                   	ret    

0000b5f6 <sys_sigpending>:

// 检测并取得进程收到的但被屏蔽（阻塞）的信号。还未处理信号的位图将被放入set中。
int sys_sigpending(sigset_t *set)
{
    b5f6:	83 ec 0c             	sub    $0xc,%esp
    /* fill in "set" with signals pending but blocked. */
    /* 用还未处理并且被阻塞信号的位图填入set指针所指位置处 */
	// 首先验证进程提供的用户存储空间就有4个字节。然后把还未处理并且被阻塞信号的位图填入set指针所指位置处。
    verify_area(set, 4);
    b5f9:	83 ec 08             	sub    $0x8,%esp
    b5fc:	6a 04                	push   $0x4
    b5fe:	ff 74 24 1c          	pushl  0x1c(%esp)
    b602:	e8 98 cd ff ff       	call   839f <verify_area>
    b607:	83 c4 10             	add    $0x10,%esp
    put_fs_long(current->blocked & current->signal, (unsigned long *)set);
    b60a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b60f:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b615:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b61a:	8b 40 0c             	mov    0xc(%eax),%eax
    b61d:	21 d0                	and    %edx,%eax
    b61f:	83 ec 08             	sub    $0x8,%esp
    b622:	ff 74 24 18          	pushl  0x18(%esp)
    b626:	50                   	push   %eax
    b627:	e8 82 ff ff ff       	call   b5ae <put_fs_long>
    b62c:	83 c4 10             	add    $0x10,%esp
    return 0;
    b62f:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b634:	83 c4 0c             	add    $0xc,%esp
    b637:	c3                   	ret    

0000b638 <sys_sigsuspend>:
// 该系统调用临时把进程信号屏蔽码替换成参数中给定的set，然后挂起进程，直到收到一个信号为止。
// restart是一个被中断的系统调用重新启动标志。当第1次调用该系统调用时，这是0.并且在该函数中会把进程原来的阻塞码
// blocked保存起来（old_mask），并设置restart为非0值。因此当进程第2次调用该系统调用时，它就会恢复进程原来保存在
// old_mask中的阻塞码。
int sys_sigsuspend(int restart, unsigned long old_mask, unsigned long set)
{
    b638:	83 ec 0c             	sub    $0xc,%esp
	// 相应的信号捕获函数。
    extern int sys_pause(void);

	// 如果restart标志不为0,表示重新让程序运行起来。于是恢复前面保存在old_mask中的原进程阻塞码。并返回码-EINTR（系统
	// 调用被信号中断）。
    if (restart) {
    b63b:	8b 44 24 10          	mov    0x10(%esp),%eax
    b63f:	85 c0                	test   %eax,%eax
    b641:	74 16                	je     b659 <sys_sigsuspend+0x21>
			/* we're restarting */  /* 我们正在重新启动系统调用 */
			current->blocked = old_mask;
    b643:	8b 54 24 14          	mov    0x14(%esp),%edx
    b647:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b64c:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
			return -EINTR;
    b652:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
    b657:	eb 30                	jmp    b689 <sys_sigsuspend+0x51>
	// 进程会去执行信号处理函数，然后本调用返回-ERESTARTNOINTR码退出。这个返回码说明在处理完信号后要求返回到本系统调用中继续
	// 运行，即本系统调用不会被中断。
    /* we're not restarting.  do the work */
    /* 我们不是重新运行，那么就干活吧 */
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
    b659:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
    b660:	00 
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
			: \
			:"m"(old_mask), "a"(current->blocked));
    b661:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b666:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
	__asm__("movl %%eax, %0\n\t" \
    b66c:	89 44 24 14          	mov    %eax,0x14(%esp)
    current->blocked = set;
    b670:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b675:	8b 54 24 18          	mov    0x18(%esp),%edx
    b679:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
    (void) sys_pause();			/* return after a signal arrives */
    b67f:	e8 c0 b9 ff ff       	call   7044 <sys_pause>
    return -ERESTARTNOINTR;		/* handle the signal, and come back */
    b684:	b8 ff fd ff ff       	mov    $0xfffffdff,%eax
}
    b689:	83 c4 0c             	add    $0xc,%esp
    b68c:	c3                   	ret    

0000b68d <save_old>:

// 复制sigaction数据到fs数据段to处。即从内核空间复制到用户（任务）数据段中。
static inline void save_old(char * from, char * to)
{
    b68d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
    b690:	83 ec 08             	sub    $0x8,%esp
    b693:	6a 10                	push   $0x10
    b695:	ff 74 24 30          	pushl  0x30(%esp)
    b699:	e8 01 cd ff ff       	call   839f <verify_area>
    b69e:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b6a1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b6a8:	00 
    b6a9:	eb 29                	jmp    b6d4 <save_old+0x47>
		put_fs_byte(*from, to);
    b6ab:	8b 44 24 20          	mov    0x20(%esp),%eax
    b6af:	0f b6 00             	movzbl (%eax),%eax
    b6b2:	0f be c0             	movsbl %al,%eax
    b6b5:	83 ec 08             	sub    $0x8,%esp
    b6b8:	ff 74 24 2c          	pushl  0x2c(%esp)
    b6bc:	50                   	push   %eax
    b6bd:	e8 d2 fe ff ff       	call   b594 <put_fs_byte>
    b6c2:	83 c4 10             	add    $0x10,%esp
		from++;
    b6c5:	83 44 24 20 01       	addl   $0x1,0x20(%esp)
		to++;
    b6ca:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b6cf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b6d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b6d8:	83 f8 0f             	cmp    $0xf,%eax
    b6db:	76 ce                	jbe    b6ab <save_old+0x1e>
	}
}
    b6dd:	90                   	nop
    b6de:	83 c4 1c             	add    $0x1c,%esp
    b6e1:	c3                   	ret    

0000b6e2 <get_new>:

// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
    b6e2:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b6e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b6ec:	00 
    b6ed:	eb 2a                	jmp    b719 <get_new+0x37>
		*(to++) = get_fs_byte(from++);
    b6ef:	8b 44 24 14          	mov    0x14(%esp),%eax
    b6f3:	8d 50 01             	lea    0x1(%eax),%edx
    b6f6:	89 54 24 14          	mov    %edx,0x14(%esp)
    b6fa:	50                   	push   %eax
    b6fb:	e8 86 fe ff ff       	call   b586 <get_fs_byte>
    b700:	83 c4 04             	add    $0x4,%esp
    b703:	89 c1                	mov    %eax,%ecx
    b705:	8b 44 24 18          	mov    0x18(%esp),%eax
    b709:	8d 50 01             	lea    0x1(%eax),%edx
    b70c:	89 54 24 18          	mov    %edx,0x18(%esp)
    b710:	89 ca                	mov    %ecx,%edx
    b712:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b714:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b719:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b71d:	83 f8 0f             	cmp    $0xf,%eax
    b720:	76 cd                	jbe    b6ef <get_new+0xd>
}
    b722:	90                   	nop
    b723:	83 c4 10             	add    $0x10,%esp
    b726:	c3                   	ret    

0000b727 <sys_signal>:
// 信号句柄可以是用户指定的函数，也可以是SIG_DFL（默认句柄）或SIG_IGN（忽略）。
// 参数signum -- 指定的信号； handler -- 指定的句柄； restorer -- 恢复函数指针，该函数由Libc库提供。用于在信号
// 处理程序结束后恢复系统调用返回时几个寄存器的原有值以及系统调用的返回值，就好像系统调用没有执行过信号处理程序而直接
// 返回到用户程序一样。函数返回原信号句柄。
int sys_signal(int signum, long handler, long restorer)
{
    b727:	83 ec 10             	sub    $0x10,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b72a:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    b72f:	7e 15                	jle    b746 <sys_signal+0x1f>
    b731:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    b736:	7f 0e                	jg     b746 <sys_signal+0x1f>
    b738:	83 7c 24 14 09       	cmpl   $0x9,0x14(%esp)
    b73d:	74 07                	je     b746 <sys_signal+0x1f>
    b73f:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    b744:	75 07                	jne    b74d <sys_signal+0x26>
		return -EINVAL;
    b746:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b74b:	eb 6b                	jmp    b7b8 <sys_signal+0x91>
	// 然后根据提供的参数组建sigaction结构内容。sa_handler是指定的信号处理句柄（函数）。sa_mask是执行信号处理句柄时的
	// 信号屏蔽码。sa_flags是执行时的一些标志组合。这里设定该信号处理句柄只使用1次后就恢复到默认值，并允许信号在自己的处理
	// 句柄中收到。
	tmp.sa_handler = (void (*)(int)) handler;
    b74d:	8b 44 24 18          	mov    0x18(%esp),%eax
    b751:	89 04 24             	mov    %eax,(%esp)
	tmp.sa_mask = 0;
    b754:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    b75b:	00 
	tmp.sa_flags = SA_ONESHOT | SA_NOMASK;
    b75c:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
    b763:	c0 
	tmp.sa_restorer = (void (*)(void)) restorer;    				// 保存恢复处理函数指针。
    b764:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b768:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着取该信号原来的处理句柄，并设置该信号的sigaction结构。最后返回原信号句柄。
	handler = (long) current->sigaction[signum - 1].sa_handler;
    b76c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b771:	8b 54 24 14          	mov    0x14(%esp),%edx
    b775:	83 ea 01             	sub    $0x1,%edx
    b778:	83 c2 01             	add    $0x1,%edx
    b77b:	c1 e2 04             	shl    $0x4,%edx
    b77e:	01 d0                	add    %edx,%eax
    b780:	8b 00                	mov    (%eax),%eax
    b782:	89 44 24 18          	mov    %eax,0x18(%esp)
	current->sigaction[signum - 1] = tmp;
    b786:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b78b:	8b 54 24 14          	mov    0x14(%esp),%edx
    b78f:	83 ea 01             	sub    $0x1,%edx
    b792:	83 c2 01             	add    $0x1,%edx
    b795:	c1 e2 04             	shl    $0x4,%edx
    b798:	01 d0                	add    %edx,%eax
    b79a:	8b 14 24             	mov    (%esp),%edx
    b79d:	89 10                	mov    %edx,(%eax)
    b79f:	8b 54 24 04          	mov    0x4(%esp),%edx
    b7a3:	89 50 04             	mov    %edx,0x4(%eax)
    b7a6:	8b 54 24 08          	mov    0x8(%esp),%edx
    b7aa:	89 50 08             	mov    %edx,0x8(%eax)
    b7ad:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b7b1:	89 50 0c             	mov    %edx,0xc(%eax)
	return handler;
    b7b4:	8b 44 24 18          	mov    0x18(%esp),%eax
}
    b7b8:	83 c4 10             	add    $0x10,%esp
    b7bb:	c3                   	ret    

0000b7bc <sys_sigaction>:

// sigaction()系统调用。改变进程在收到一个信号时的操作。signum是除了SIGKILL以外的任何信号。[如果新操作（action）不为空]
// 则新操作被安装。如果oldaction指针不为空，则原操作被保留到oldaction。成功则返回0,否则为-EINVAL。
int sys_sigaction(int signum, const struct sigaction * action,
	struct sigaction * oldaction)
{
    b7bc:	53                   	push   %ebx
    b7bd:	83 ec 18             	sub    $0x18,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b7c0:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b7c5:	7e 15                	jle    b7dc <sys_sigaction+0x20>
    b7c7:	83 7c 24 20 20       	cmpl   $0x20,0x20(%esp)
    b7cc:	7f 0e                	jg     b7dc <sys_sigaction+0x20>
    b7ce:	83 7c 24 20 09       	cmpl   $0x9,0x20(%esp)
    b7d3:	74 07                	je     b7dc <sys_sigaction+0x20>
    b7d5:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    b7da:	75 0a                	jne    b7e6 <sys_sigaction+0x2a>
		return -EINVAL;
    b7dc:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b7e1:	e9 fa 00 00 00       	jmp    b8e0 <sys_sigaction+0x124>
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
    b7e6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b7eb:	8b 54 24 20          	mov    0x20(%esp),%edx
    b7ef:	83 ea 01             	sub    $0x1,%edx
    b7f2:	83 c2 01             	add    $0x1,%edx
    b7f5:	c1 e2 04             	shl    $0x4,%edx
    b7f8:	01 d0                	add    %edx,%eax
    b7fa:	8b 10                	mov    (%eax),%edx
    b7fc:	89 14 24             	mov    %edx,(%esp)
    b7ff:	8b 50 04             	mov    0x4(%eax),%edx
    b802:	89 54 24 04          	mov    %edx,0x4(%esp)
    b806:	8b 50 08             	mov    0x8(%eax),%edx
    b809:	89 54 24 08          	mov    %edx,0x8(%esp)
    b80d:	8b 40 0c             	mov    0xc(%eax),%eax
    b810:	89 44 24 0c          	mov    %eax,0xc(%esp)
	get_new((char *) action,
		(char *) (signum - 1 + current->sigaction));
    b814:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b819:	8d 50 10             	lea    0x10(%eax),%edx
    b81c:	8b 44 24 20          	mov    0x20(%esp),%eax
	get_new((char *) action,
    b820:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b825:	c1 e0 04             	shl    $0x4,%eax
    b828:	01 d0                	add    %edx,%eax
    b82a:	50                   	push   %eax
    b82b:	ff 74 24 28          	pushl  0x28(%esp)
    b82f:	e8 ae fe ff ff       	call   b6e2 <get_new>
    b834:	83 c4 08             	add    $0x8,%esp
	if (oldaction)
    b837:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    b83c:	74 14                	je     b852 <sys_sigaction+0x96>
		save_old((char *) &tmp,(char *) oldaction);
    b83e:	83 ec 08             	sub    $0x8,%esp
    b841:	ff 74 24 30          	pushl  0x30(%esp)
    b845:	8d 44 24 0c          	lea    0xc(%esp),%eax
    b849:	50                   	push   %eax
    b84a:	e8 3e fe ff ff       	call   b68d <save_old>
    b84f:	83 c4 10             	add    $0x10,%esp
	// 如果允许信号在自己的信号句柄中收到，则令屏蔽码为0,否则设置屏蔽本信号。
	if (current->sigaction[signum - 1].sa_flags & SA_NOMASK)
    b852:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b857:	8b 54 24 20          	mov    0x20(%esp),%edx
    b85b:	83 ea 01             	sub    $0x1,%edx
    b85e:	83 c2 01             	add    $0x1,%edx
    b861:	c1 e2 04             	shl    $0x4,%edx
    b864:	01 d0                	add    %edx,%eax
    b866:	83 c0 08             	add    $0x8,%eax
    b869:	8b 00                	mov    (%eax),%eax
    b86b:	25 00 00 00 40       	and    $0x40000000,%eax
    b870:	85 c0                	test   %eax,%eax
    b872:	74 1f                	je     b893 <sys_sigaction+0xd7>
		current->sigaction[signum - 1].sa_mask = 0;
    b874:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b879:	8b 54 24 20          	mov    0x20(%esp),%edx
    b87d:	83 ea 01             	sub    $0x1,%edx
    b880:	83 c2 01             	add    $0x1,%edx
    b883:	c1 e2 04             	shl    $0x4,%edx
    b886:	01 d0                	add    %edx,%eax
    b888:	83 c0 04             	add    $0x4,%eax
    b88b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    b891:	eb 48                	jmp    b8db <sys_sigaction+0x11f>
	else
		current->sigaction[signum - 1].sa_mask |= (1 << (signum - 1));
    b893:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b898:	8b 54 24 20          	mov    0x20(%esp),%edx
    b89c:	83 ea 01             	sub    $0x1,%edx
    b89f:	83 c2 01             	add    $0x1,%edx
    b8a2:	c1 e2 04             	shl    $0x4,%edx
    b8a5:	01 d0                	add    %edx,%eax
    b8a7:	83 c0 04             	add    $0x4,%eax
    b8aa:	8b 10                	mov    (%eax),%edx
    b8ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    b8b0:	83 e8 01             	sub    $0x1,%eax
    b8b3:	bb 01 00 00 00       	mov    $0x1,%ebx
    b8b8:	89 c1                	mov    %eax,%ecx
    b8ba:	d3 e3                	shl    %cl,%ebx
    b8bc:	89 d8                	mov    %ebx,%eax
    b8be:	89 c3                	mov    %eax,%ebx
    b8c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b8c5:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b8c9:	83 e9 01             	sub    $0x1,%ecx
    b8cc:	09 da                	or     %ebx,%edx
    b8ce:	83 c1 01             	add    $0x1,%ecx
    b8d1:	c1 e1 04             	shl    $0x4,%ecx
    b8d4:	01 c8                	add    %ecx,%eax
    b8d6:	83 c0 04             	add    $0x4,%eax
    b8d9:	89 10                	mov    %edx,(%eax)
	return 0;
    b8db:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b8e0:	83 c4 18             	add    $0x18,%esp
    b8e3:	5b                   	pop    %ebx
    b8e4:	c3                   	ret    

0000b8e5 <core_dump>:
/*
 * 在当前目录中产生core dump映像文件的子程序。目前还没有实现。
 */
int core_dump(long signr)
{
	return(0);	/* We didn't do a dump */
    b8e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b8ea:	c3                   	ret    

0000b8eb <do_signal>:
// 4、第124行压入栈中的当前处理的信号值（signr）。
int do_signal(long signr, long eax, long ebx, long ecx, long edx, long orig_eax,
	long fs, long es, long ds,
	long eip, long cs, long eflags,
	unsigned long * esp, long ss)
{
    b8eb:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long sa_handler;
	long old_eip = eip;
    b8ee:	8b 44 24 54          	mov    0x54(%esp),%eax
    b8f2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	struct sigaction * sa = current->sigaction + signr - 1;			// 得到对应信号的处理数据结构
    b8f6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b8fb:	8d 50 10             	lea    0x10(%eax),%edx
    b8fe:	8b 44 24 30          	mov    0x30(%esp),%eax
    b902:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b907:	c1 e0 04             	shl    $0x4,%eax
    b90a:	01 d0                	add    %edx,%eax
    b90c:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b910:	83 7c 24 44 ff       	cmpl   $0xffffffff,0x44(%esp)
    b915:	74 5e                	je     b975 <do_signal+0x8a>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b917:	8b 44 24 34          	mov    0x34(%esp),%eax
	if ((orig_eax != -1) &&
    b91b:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b920:	74 0b                	je     b92d <do_signal+0x42>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b922:	8b 44 24 34          	mov    0x34(%esp),%eax
    b926:	3d ff fd ff ff       	cmp    $0xfffffdff,%eax
    b92b:	75 48                	jne    b975 <do_signal+0x8a>
		// 如果系统调用返回码是-ERESTARTSYS（重新启动系统调用），并且sigaction中含有标志SA_INTERRUPT（系统调用被信号中断后不重新
		// 启动系统调用）或者信号值小于SIGCONT或者信号值大于SIGTTOU（即信号不是SIGCONT、SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU），
		// 则修改系统调用的返回值为eax = -EINTR，即被信号中断的系统调用。
		if ((eax == -ERESTARTSYS) && ((sa->sa_flags & SA_INTERRUPT) ||
    b92d:	8b 44 24 34          	mov    0x34(%esp),%eax
    b931:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b936:	75 28                	jne    b960 <do_signal+0x75>
    b938:	8b 44 24 14          	mov    0x14(%esp),%eax
    b93c:	8b 40 08             	mov    0x8(%eax),%eax
    b93f:	25 00 00 00 20       	and    $0x20000000,%eax
    b944:	85 c0                	test   %eax,%eax
    b946:	75 0e                	jne    b956 <do_signal+0x6b>
    b948:	83 7c 24 30 11       	cmpl   $0x11,0x30(%esp)
    b94d:	7e 07                	jle    b956 <do_signal+0x6b>
		    signr < SIGCONT || signr > SIGTTOU))
    b94f:	83 7c 24 30 16       	cmpl   $0x16,0x30(%esp)
    b954:	7e 0a                	jle    b960 <do_signal+0x75>
			*(&eax) = -EINTR;
    b956:	c7 44 24 34 fc ff ff 	movl   $0xfffffffc,0x34(%esp)
    b95d:	ff 
    b95e:	eb 15                	jmp    b975 <do_signal+0x8a>
		// 否则就恢复进程寄存器eax在调用系统调用之前的值，并且把源程序指令指针回调2个字节。即当返回用户程序时，让程序重新启动执行被信号
		// 中断的系统调用。
		else {
			*(&eax) = orig_eax;     				// orig_eax系统调用号
    b960:	8b 44 24 44          	mov    0x44(%esp),%eax
    b964:	89 44 24 34          	mov    %eax,0x34(%esp)
			//*(&eip) = old_eip -= 2;
			// 系统调用返回到用户态的时候再次执行本次系统调用
			old_eip -= 2;
    b968:	83 6c 24 1c 02       	subl   $0x2,0x1c(%esp)
			__asm__ ("movl %%eax, %0\n\t" \
    b96d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b971:	89 44 24 54          	mov    %eax,0x54(%esp)
					: \
					:"m"(eip), "a"(old_eip));
		}
	}
	// 如果信号句柄为SIG_IGN（1,默认忽略句柄）则不对信号进行处理而直接返回。
	sa_handler = (unsigned long) sa->sa_handler;
    b975:	8b 44 24 14          	mov    0x14(%esp),%eax
    b979:	8b 00                	mov    (%eax),%eax
    b97b:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (sa_handler == 1)
    b97f:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
    b984:	75 0a                	jne    b990 <do_signal+0xa5>
		return(1);   								/* Ignore, see if there are more signals... */
    b986:	b8 01 00 00 00       	mov    $0x1,%eax
    b98b:	e9 4a 02 00 00       	jmp    bbda <do_signal+0x2ef>
	// 如果句柄为SIG_DFL（0,默认处理），则根据具体的信号进行分别处理。
	if (!sa_handler) {
    b990:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    b995:	0f 85 b2 00 00 00    	jne    ba4d <do_signal+0x162>
		switch (signr) {
    b99b:	8b 44 24 30          	mov    0x30(%esp),%eax
    b99f:	83 e8 03             	sub    $0x3,%eax
    b9a2:	83 f8 13             	cmp    $0x13,%eax
    b9a5:	0f 87 93 00 00 00    	ja     ba3e <do_signal+0x153>
    b9ab:	8b 04 85 54 33 02 00 	mov    0x23354(,%eax,4),%eax
    b9b2:	ff e0                	jmp    *%eax
		// 如果信号是以下两个则也忽略之，并返回
		case SIGCONT:
		case SIGCHLD:
			return(1);  							/* Ignore, ... */
    b9b4:	b8 01 00 00 00       	mov    $0x1,%eax
    b9b9:	e9 1c 02 00 00       	jmp    bbda <do_signal+0x2ef>
		// 信号。
		case SIGSTOP:
		case SIGTSTP:
		case SIGTTIN:
		case SIGTTOU:
			current->state = TASK_STOPPED;
    b9be:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b9c3:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			current->exit_code = signr;
    b9c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b9ce:	8b 54 24 30          	mov    0x30(%esp),%edx
    b9d2:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
			if (!(current->p_pptr->sigaction[SIGCHLD - 1].sa_flags &
    b9d8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b9dd:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b9e3:	8b 80 18 01 00 00    	mov    0x118(%eax),%eax
    b9e9:	83 e0 01             	and    $0x1,%eax
    b9ec:	85 c0                	test   %eax,%eax
    b9ee:	75 22                	jne    ba12 <do_signal+0x127>
					SA_NOCLDSTOP))
				current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b9f0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    b9f5:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b9fb:	8b 50 0c             	mov    0xc(%eax),%edx
    b9fe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ba03:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ba09:	81 ca 00 00 01 00    	or     $0x10000,%edx
    ba0f:	89 50 0c             	mov    %edx,0xc(%eax)
			return(1);  							/* Reschedule another event */
    ba12:	b8 01 00 00 00       	mov    $0x1,%eax
    ba17:	e9 be 01 00 00       	jmp    bbda <do_signal+0x2ef>
		case SIGILL:
		case SIGTRAP:
		case SIGIOT:
		case SIGFPE:
		case SIGSEGV:
			if (core_dump(signr))
    ba1c:	ff 74 24 30          	pushl  0x30(%esp)
    ba20:	e8 c0 fe ff ff       	call   b8e5 <core_dump>
    ba25:	83 c4 04             	add    $0x4,%esp
    ba28:	85 c0                	test   %eax,%eax
    ba2a:	74 12                	je     ba3e <do_signal+0x153>
				do_exit(signr | 0x80);
    ba2c:	8b 44 24 30          	mov    0x30(%esp),%eax
    ba30:	0c 80                	or     $0x80,%al
    ba32:	83 ec 0c             	sub    $0xc,%esp
    ba35:	50                   	push   %eax
    ba36:	e8 8f f3 ff ff       	call   adca <do_exit>
    ba3b:	83 c4 10             	add    $0x10,%esp
			/* fall through */
		default:
			do_exit(signr);
    ba3e:	83 ec 0c             	sub    $0xc,%esp
    ba41:	ff 74 24 3c          	pushl  0x3c(%esp)
    ba45:	e8 80 f3 ff ff       	call   adca <do_exit>
    ba4a:	83 c4 10             	add    $0x10,%esp
	// 如果该信号句柄只需被调用一次，则将该句柄置空。注意，该信号句柄前面已经保存在sa_handler指针中。
	// 在系统调用进程内核时，用户程序返回地址（eip、cs）被保存在内核态栈中。下面这段代码修改内核态堆栈上用户调用时
	// 的代码指针eip为指向信号处理句柄，同时也将sa_restorer、signr、进程屏蔽码（如果SA_NOMASK没置位）、eax、
	// ecx、edx作为参数以及原调用系统调用的程序返回指针及标志寄存器值压入用户堆栈。因此在本次系统调用中断返回用户
	// 程序时会首先执行用户信号句柄程序，然后继续执行用户程序。
	if (sa->sa_flags & SA_ONESHOT)
    ba4d:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba51:	8b 40 08             	mov    0x8(%eax),%eax
    ba54:	85 c0                	test   %eax,%eax
    ba56:	79 0a                	jns    ba62 <do_signal+0x177>
		sa->sa_handler = NULL;
    ba58:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 调用者丢弃。这里之所以可以使用这种方式，是因为该函数是从汇编程序中被调用的，并且在函数返回后汇编程序并没有把
	// 调用do_signal()时的所有参数都丢弃。eip等仍然在堆栈中。
	// sigaction结构的sa_mask字段给出了在当前信号句柄（信号描述符）程序执行期间应该被屏蔽的信号集。同时，引起本
	// 信号句柄执行的信号也会被屏蔽。不过若sa_flags中使用了SA_NOMASK标志，那么引起本信号句柄执行的信号将不会被屏蔽
	// 掉。如果允许信号自己的处理句柄程序收到信号自己，则也需要将进程的信号阻塞码压入堆栈。
	*(&eip) = sa_handler;
    ba62:	8b 44 24 10          	mov    0x10(%esp),%eax
    ba66:	89 44 24 54          	mov    %eax,0x54(%esp)
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
    ba6a:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba6e:	8b 40 08             	mov    0x8(%eax),%eax
    ba71:	25 00 00 00 40       	and    $0x40000000,%eax
    ba76:	85 c0                	test   %eax,%eax
    ba78:	74 07                	je     ba81 <do_signal+0x196>
    ba7a:	b8 07 00 00 00       	mov    $0x7,%eax
    ba7f:	eb 05                	jmp    ba86 <do_signal+0x19b>
    ba81:	b8 08 00 00 00       	mov    $0x8,%eax
    ba86:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
			: \
			:"m"(esp), "a"(longs * 4));
    ba8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba8e:	c1 e0 02             	shl    $0x2,%eax
	__asm__("subl %1, %0\n\t" \
    ba91:	29 44 24 60          	sub    %eax,0x60(%esp)
	verify_area(esp, longs * 4);
    ba95:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    baa0:	8b 44 24 60          	mov    0x60(%esp),%eax
    baa4:	83 ec 08             	sub    $0x8,%esp
    baa7:	52                   	push   %edx
    baa8:	50                   	push   %eax
    baa9:	e8 f1 c8 ff ff       	call   839f <verify_area>
    baae:	83 c4 10             	add    $0x10,%esp
	// 在用户堆栈中从下到上存放sa_restorer、信号signr、屏蔽码blocked（如果SA_NOMASK置位）、eax、ecx、edx、eflags
	// 和用户程序原代码指针。
	tmp_esp = esp;
    bab1:	8b 44 24 60          	mov    0x60(%esp),%eax
    bab5:	89 44 24 18          	mov    %eax,0x18(%esp)
	put_fs_long((long) sa->sa_restorer, tmp_esp++);
    bab9:	8b 44 24 18          	mov    0x18(%esp),%eax
    babd:	8d 50 04             	lea    0x4(%eax),%edx
    bac0:	89 54 24 18          	mov    %edx,0x18(%esp)
    bac4:	8b 54 24 14          	mov    0x14(%esp),%edx
    bac8:	8b 52 0c             	mov    0xc(%edx),%edx
    bacb:	83 ec 08             	sub    $0x8,%esp
    bace:	50                   	push   %eax
    bacf:	52                   	push   %edx
    bad0:	e8 d9 fa ff ff       	call   b5ae <put_fs_long>
    bad5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(signr, tmp_esp++);
    bad8:	8b 44 24 18          	mov    0x18(%esp),%eax
    badc:	8d 50 04             	lea    0x4(%eax),%edx
    badf:	89 54 24 18          	mov    %edx,0x18(%esp)
    bae3:	8b 54 24 30          	mov    0x30(%esp),%edx
    bae7:	83 ec 08             	sub    $0x8,%esp
    baea:	50                   	push   %eax
    baeb:	52                   	push   %edx
    baec:	e8 bd fa ff ff       	call   b5ae <put_fs_long>
    baf1:	83 c4 10             	add    $0x10,%esp
	if (!(sa->sa_flags & SA_NOMASK))
    baf4:	8b 44 24 14          	mov    0x14(%esp),%eax
    baf8:	8b 40 08             	mov    0x8(%eax),%eax
    bafb:	25 00 00 00 40       	and    $0x40000000,%eax
    bb00:	85 c0                	test   %eax,%eax
    bb02:	75 24                	jne    bb28 <do_signal+0x23d>
		put_fs_long(current->blocked, tmp_esp++);
    bb04:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb08:	8d 50 04             	lea    0x4(%eax),%edx
    bb0b:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb0f:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
    bb15:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    bb1b:	83 ec 08             	sub    $0x8,%esp
    bb1e:	50                   	push   %eax
    bb1f:	52                   	push   %edx
    bb20:	e8 89 fa ff ff       	call   b5ae <put_fs_long>
    bb25:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eax, tmp_esp++);
    bb28:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb2c:	8d 50 04             	lea    0x4(%eax),%edx
    bb2f:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb33:	8b 54 24 34          	mov    0x34(%esp),%edx
    bb37:	83 ec 08             	sub    $0x8,%esp
    bb3a:	50                   	push   %eax
    bb3b:	52                   	push   %edx
    bb3c:	e8 6d fa ff ff       	call   b5ae <put_fs_long>
    bb41:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ecx, tmp_esp++);
    bb44:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb48:	8d 50 04             	lea    0x4(%eax),%edx
    bb4b:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb4f:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    bb53:	83 ec 08             	sub    $0x8,%esp
    bb56:	50                   	push   %eax
    bb57:	52                   	push   %edx
    bb58:	e8 51 fa ff ff       	call   b5ae <put_fs_long>
    bb5d:	83 c4 10             	add    $0x10,%esp
	put_fs_long(edx, tmp_esp++);
    bb60:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb64:	8d 50 04             	lea    0x4(%eax),%edx
    bb67:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb6b:	8b 54 24 40          	mov    0x40(%esp),%edx
    bb6f:	83 ec 08             	sub    $0x8,%esp
    bb72:	50                   	push   %eax
    bb73:	52                   	push   %edx
    bb74:	e8 35 fa ff ff       	call   b5ae <put_fs_long>
    bb79:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eflags, tmp_esp++);
    bb7c:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb80:	8d 50 04             	lea    0x4(%eax),%edx
    bb83:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb87:	8b 54 24 5c          	mov    0x5c(%esp),%edx
    bb8b:	83 ec 08             	sub    $0x8,%esp
    bb8e:	50                   	push   %eax
    bb8f:	52                   	push   %edx
    bb90:	e8 19 fa ff ff       	call   b5ae <put_fs_long>
    bb95:	83 c4 10             	add    $0x10,%esp
	put_fs_long(old_eip, tmp_esp++);
    bb98:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb9c:	8d 50 04             	lea    0x4(%eax),%edx
    bb9f:	89 54 24 18          	mov    %edx,0x18(%esp)
    bba3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    bba7:	83 ec 08             	sub    $0x8,%esp
    bbaa:	50                   	push   %eax
    bbab:	52                   	push   %edx
    bbac:	e8 fd f9 ff ff       	call   b5ae <put_fs_long>
    bbb1:	83 c4 10             	add    $0x10,%esp
	current->blocked |= sa->sa_mask;                // 进程阻塞码（屏蔽码）添上as_mask中的码。
    bbb4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    bbb9:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    bbbf:	89 c2                	mov    %eax,%edx
    bbc1:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbc5:	8b 40 04             	mov    0x4(%eax),%eax
    bbc8:	09 c2                	or     %eax,%edx
    bbca:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    bbcf:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return(0);										/* Continue, execute handler */
    bbd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    bbda:	83 c4 2c             	add    $0x2c,%esp
    bbdd:	c3                   	ret    

0000bbde <kernel_mktime>:
};

// 该函数计算从1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
// 参数tm中各字段已经在init/main.c中被赋值,信息取自CMOS.
long kernel_mktime(struct tm * tm)
{
    bbde:	83 ec 10             	sub    $0x10,%esp
	// if(tm->tm_year<70) tm->tm_year += 100;由于UNIX计年份y是从1970年算起.到1972年就是一个闰年,因此过3年(71,72,73)
	// 就是第1个闰年,这样从1970年开始的闰年数计算方法就应该是1+(y-3)/4,即为(y+1)/4.res=这些年经过的秒数时间+每个闰年时多1天
	// 的秒数时间+当年到当月时的秒数.另外,month[]数组中已经在2月份的天数中包含进了闰年时的天数,即2月份天数多算了1天.因此,若
	// 当年不是闰年并且当前月份大于2月份的话,我们就要减去这天.因为人70开始算起,所以当年是闰年的判断方法是(y+2)能被4除尽.若不能
	// 除尽(有余数)就不是闰年.
	if(tm->tm_year < 70) tm->tm_year += 100;				//处理2000年问题
    bbe1:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbe5:	8b 40 14             	mov    0x14(%eax),%eax
    bbe8:	83 f8 45             	cmp    $0x45,%eax
    bbeb:	7f 11                	jg     bbfe <kernel_mktime+0x20>
    bbed:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbf1:	8b 40 14             	mov    0x14(%eax),%eax
    bbf4:	8d 50 64             	lea    0x64(%eax),%edx
    bbf7:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbfb:	89 50 14             	mov    %edx,0x14(%eax)
	year = tm->tm_year - 70;
    bbfe:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc02:	8b 40 14             	mov    0x14(%eax),%eax
    bc05:	83 e8 46             	sub    $0x46,%eax
    bc08:	89 44 24 08          	mov    %eax,0x8(%esp)
	/* magic offsets (y+1) needed to get leapyears right.*/
	/* 为了获得正确的闰年数,这里需要这样一个魔幻值(y+1) */
	res = YEAR * year + DAY * ((year + 1) / 4);
    bc0c:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc10:	69 d0 80 33 e1 01    	imul   $0x1e13380,%eax,%edx
    bc16:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc1a:	83 c0 01             	add    $0x1,%eax
    bc1d:	8d 48 03             	lea    0x3(%eax),%ecx
    bc20:	85 c0                	test   %eax,%eax
    bc22:	0f 48 c1             	cmovs  %ecx,%eax
    bc25:	c1 f8 02             	sar    $0x2,%eax
    bc28:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc2e:	01 d0                	add    %edx,%eax
    bc30:	89 44 24 0c          	mov    %eax,0xc(%esp)
	res += month[tm->tm_mon];
    bc34:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc38:	8b 40 10             	mov    0x10(%eax),%eax
    bc3b:	8b 04 85 20 f3 02 00 	mov    0x2f320(,%eax,4),%eax
    bc42:	01 44 24 0c          	add    %eax,0xc(%esp)
	/* and (y+2) here. If it wasn't a leap-year, we have to adjust */
	/* 以及(y+2).如果(y+2)不是闰年,那么我们就必须进行调整(减去一天的秒数时间). */
	if (tm->tm_mon > 1 && ((year + 2) % 4))
    bc46:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc4a:	8b 40 10             	mov    0x10(%eax),%eax
    bc4d:	83 f8 01             	cmp    $0x1,%eax
    bc50:	7e 16                	jle    bc68 <kernel_mktime+0x8a>
    bc52:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc56:	83 c0 02             	add    $0x2,%eax
    bc59:	83 e0 03             	and    $0x3,%eax
    bc5c:	85 c0                	test   %eax,%eax
    bc5e:	74 08                	je     bc68 <kernel_mktime+0x8a>
		res -= DAY;
    bc60:	81 6c 24 0c 80 51 01 	subl   $0x15180,0xc(%esp)
    bc67:	00 
	res += DAY * (tm->tm_mday - 1);							// 再加上本月过去的天数的秒数时间.
    bc68:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc6c:	8b 40 0c             	mov    0xc(%eax),%eax
    bc6f:	83 e8 01             	sub    $0x1,%eax
    bc72:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc78:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += HOUR * tm->tm_hour;								// 再加上当天过去的小时数的秒数时间.
    bc7c:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc80:	8b 40 08             	mov    0x8(%eax),%eax
    bc83:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
    bc89:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += MINUTE * tm->tm_min;								// 再加上1小时内过去的分钟数的秒数时间.
    bc8d:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc91:	8b 40 04             	mov    0x4(%eax),%eax
    bc94:	6b c0 3c             	imul   $0x3c,%eax,%eax
    bc97:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += tm->tm_sec;										// 再加上1分钟内已过的秒数.
    bc9b:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc9f:	8b 00                	mov    (%eax),%eax
    bca1:	01 44 24 0c          	add    %eax,0xc(%esp)
	return res;												// 即等于从1970年以来经过的秒数时间.
    bca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    bca9:	83 c4 10             	add    $0x10,%esp
    bcac:	c3                   	ret    

0000bcad <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    bcad:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    bcb0:	83 ec 0c             	sub    $0xc,%esp
    bcb3:	68 a4 33 02 00       	push   $0x233a4
    bcb8:	e8 89 cf ff ff       	call   8c46 <printk>
    bcbd:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    bcc0:	83 ec 0c             	sub    $0xc,%esp
    bcc3:	6a 0b                	push   $0xb
    bcc5:	e8 00 f1 ff ff       	call   adca <do_exit>
    bcca:	83 c4 10             	add    $0x10,%esp
}
    bccd:	90                   	nop
    bcce:	83 c4 0c             	add    $0xc,%esp
    bcd1:	c3                   	ret    

0000bcd2 <free_page>:
 * 释放物理地址"addr"处的一页内存.用于函数free_page_tables().
 */
// 释放物理地址addr开始的1页面内存.
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
    bcd2:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bcd5:	81 7c 24 10 ff ff 0f 	cmpl   $0xfffff,0x10(%esp)
    bcdc:	00 
    bcdd:	76 65                	jbe    bd44 <free_page+0x72>
	if (addr >= HIGH_MEMORY)
    bcdf:	a1 80 02 03 00       	mov    0x30280,%eax
    bce4:	39 44 24 10          	cmp    %eax,0x10(%esp)
    bce8:	72 10                	jb     bcfa <free_page+0x28>
		panic("trying to free nonexistent page");
    bcea:	83 ec 0c             	sub    $0xc,%esp
    bced:	68 b4 33 02 00       	push   $0x233b4
    bcf2:	e8 10 cf ff ff       	call   8c07 <panic>
    bcf7:	83 c4 10             	add    $0x10,%esp
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
    bcfa:	81 6c 24 10 00 00 10 	subl   $0x100000,0x10(%esp)
    bd01:	00 
	addr >>= 12;
    bd02:	c1 6c 24 10 0c       	shrl   $0xc,0x10(%esp)
	if (mem_map[addr]--) return;
    bd07:	8b 44 24 10          	mov    0x10(%esp),%eax
    bd0b:	05 a0 02 03 00       	add    $0x302a0,%eax
    bd10:	0f b6 00             	movzbl (%eax),%eax
    bd13:	8d 50 ff             	lea    -0x1(%eax),%edx
    bd16:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    bd1a:	81 c1 a0 02 03 00    	add    $0x302a0,%ecx
    bd20:	88 11                	mov    %dl,(%ecx)
    bd22:	84 c0                	test   %al,%al
    bd24:	75 21                	jne    bd47 <free_page+0x75>
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
    bd26:	8b 44 24 10          	mov    0x10(%esp),%eax
    bd2a:	05 a0 02 03 00       	add    $0x302a0,%eax
    bd2f:	c6 00 00             	movb   $0x0,(%eax)
	panic("trying to free free page");
    bd32:	83 ec 0c             	sub    $0xc,%esp
    bd35:	68 d4 33 02 00       	push   $0x233d4
    bd3a:	e8 c8 ce ff ff       	call   8c07 <panic>
    bd3f:	83 c4 10             	add    $0x10,%esp
    bd42:	eb 04                	jmp    bd48 <free_page+0x76>
	if (addr < LOW_MEM) return;
    bd44:	90                   	nop
    bd45:	eb 01                	jmp    bd48 <free_page+0x76>
	if (mem_map[addr]--) return;
    bd47:	90                   	nop
}
    bd48:	83 c4 0c             	add    $0xc,%esp
    bd4b:	c3                   	ret    

0000bd4c <free_page_tables>:
// 页目录位于物理地址0开始处,共1024项,每项4字节,共占4KB.每个目录项指定一个页表.内核页表物理地址0x1000处开始(紧接着目录空间),
// 共4个页表.每个页表有1024项,每项4B.因此也占4KB(1页)内存.各进程(除了在内核代码中的进程0和1)的页表所占据的页面在进程被创建时由
// 内核为其在主内存区申请得到.每个页表项对应1页物理内存,因此一个页表最多可映射4MB的物理内存.
// 参数:from - 起始线性基地址;size - 释放的字节长度.
int free_page_tables(unsigned long from, unsigned long size)
{
    bd4c:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long *pg_table;
	unsigned long * dir, nr;

	// 首先检测参数from给出的线性基地址是否在4MB的边界处.因为该函数只能处理这种情况.若from = 0,则出错.说明试图释放内核和缓冲所占空间.
	if (from & 0x3fffff)
    bd4f:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd53:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    bd58:	85 c0                	test   %eax,%eax
    bd5a:	74 10                	je     bd6c <free_page_tables+0x20>
		panic("free_page_tables called with wrong alignment");
    bd5c:	83 ec 0c             	sub    $0xc,%esp
    bd5f:	68 f0 33 02 00       	push   $0x233f0
    bd64:	e8 9e ce ff ff       	call   8c07 <panic>
    bd69:	83 c4 10             	add    $0x10,%esp
	if (!from)
    bd6c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    bd71:	75 10                	jne    bd83 <free_page_tables+0x37>
		panic("Trying to free up swapper memory space");
    bd73:	83 ec 0c             	sub    $0xc,%esp
    bd76:	68 20 34 02 00       	push   $0x23420
    bd7b:	e8 87 ce ff ff       	call   8c07 <panic>
    bd80:	83 c4 10             	add    $0x10,%esp
	// 然后计算参数size给出的长度所占的页目录数(4MB的进位整数倍),也即所占页表数.
	// 因为1个页表可管理4MB物理内存,所以这里用右移22位的方式把需要复制的内存长度值除以4MB.其中加上0x3fffff(即4MB-1)用于得到进位整数倍
	// 结果,即除操作若有余数则进1.例如,如果原size = 4.01MB,那么可得到结果size = 2.
	size = (size + 0x3fffff) >> 22;
    bd83:	8b 44 24 24          	mov    0x24(%esp),%eax
    bd87:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bd8c:	c1 e8 16             	shr    $0x16,%eax
    bd8f:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 接着计算给出的线性基地址对应的起始目录项, 对应的目录项号 = from >>22.因为每项点4字节,并且由于页目录表从物理地址0开始存放,
	// 因此实际目录项指针 = 目录项号<<2,也即(from >> 20),"与"上0xffc确保目录项指针范围有效.
	// dir表示起始的页目录项物理地址
	dir = (unsigned long *) ((from >> 20) & 0xffc); 			/* _pg_dir = 0 */
    bd93:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd97:	c1 e8 14             	shr    $0x14,%eax
    bd9a:	25 fc 0f 00 00       	and    $0xffc,%eax
    bd9f:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    bda3:	e9 b5 00 00 00       	jmp    be5d <free_page_tables+0x111>
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
    bda8:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdac:	8b 00                	mov    (%eax),%eax
    bdae:	83 e0 01             	and    $0x1,%eax
    bdb1:	85 c0                	test   %eax,%eax
    bdb3:	0f 84 9e 00 00 00    	je     be57 <free_page_tables+0x10b>
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
    bdb9:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdbd:	8b 00                	mov    (%eax),%eax
    bdbf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bdc4:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    bdc8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    bdcf:	00 
    bdd0:	eb 58                	jmp    be2a <free_page_tables+0xde>
			if (*pg_table) {									// 若所指页表项内容不为0,则若该项有效,则释放对应面.
    bdd2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdd6:	8b 00                	mov    (%eax),%eax
    bdd8:	85 c0                	test   %eax,%eax
    bdda:	74 44                	je     be20 <free_page_tables+0xd4>
				if (1 & *pg_table)
    bddc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bde0:	8b 00                	mov    (%eax),%eax
    bde2:	83 e0 01             	and    $0x1,%eax
    bde5:	85 c0                	test   %eax,%eax
    bde7:	74 19                	je     be02 <free_page_tables+0xb6>
					free_page(0xfffff000 & *pg_table);
    bde9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bded:	8b 00                	mov    (%eax),%eax
    bdef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bdf4:	83 ec 0c             	sub    $0xc,%esp
    bdf7:	50                   	push   %eax
    bdf8:	e8 d5 fe ff ff       	call   bcd2 <free_page>
    bdfd:	83 c4 10             	add    $0x10,%esp
    be00:	eb 14                	jmp    be16 <free_page_tables+0xca>
				else											// 否则释放交换设备中对应页.
					swap_free(*pg_table >> 1);
    be02:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be06:	8b 00                	mov    (%eax),%eax
    be08:	d1 e8                	shr    %eax
    be0a:	83 ec 0c             	sub    $0xc,%esp
    be0d:	50                   	push   %eax
    be0e:	e8 f6 0e 00 00       	call   cd09 <swap_free>
    be13:	83 c4 10             	add    $0x10,%esp
				*pg_table = 0;									// 该页表项内容清零.
    be16:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be1a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			pg_table++;											//指向页表中下一项.
    be20:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    be25:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    be2a:	81 7c 24 04 ff 03 00 	cmpl   $0x3ff,0x4(%esp)
    be31:	00 
    be32:	76 9e                	jbe    bdd2 <free_page_tables+0x86>
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
    be34:	8b 44 24 08          	mov    0x8(%esp),%eax
    be38:	8b 00                	mov    (%eax),%eax
    be3a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    be3f:	83 ec 0c             	sub    $0xc,%esp
    be42:	50                   	push   %eax
    be43:	e8 8a fe ff ff       	call   bcd2 <free_page>
    be48:	83 c4 10             	add    $0x10,%esp
		*dir = 0;												// 对应页表的目录项清零.
    be4b:	8b 44 24 08          	mov    0x8(%esp),%eax
    be4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    be55:	eb 01                	jmp    be58 <free_page_tables+0x10c>
			continue;
    be57:	90                   	nop
	for ( ; size-- > 0 ; dir++) {
    be58:	83 44 24 08 04       	addl   $0x4,0x8(%esp)
    be5d:	8b 44 24 24          	mov    0x24(%esp),%eax
    be61:	8d 50 ff             	lea    -0x1(%eax),%edx
    be64:	89 54 24 24          	mov    %edx,0x24(%esp)
    be68:	85 c0                	test   %eax,%eax
    be6a:	0f 85 38 ff ff ff    	jne    bda8 <free_page_tables+0x5c>
	}
	invalidate();												// 刷新CPU页变换高速缓冲.
    be70:	b8 00 00 00 00       	mov    $0x0,%eax
    be75:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    be78:	b8 00 00 00 00       	mov    $0x0,%eax
}
    be7d:	83 c4 1c             	add    $0x1c,%esp
    be80:	c3                   	ret    

0000be81 <copy_page_tables>:
// 复制指定线性地址和长度内存对应的页目录项和页表项,从而被复制的页目录和页表对应的原物理内存页面区被两套页表映射而共享使用.复制时,需申请
// 新页面来存放新页表,原物理内存区将被共享.此后两个进程(父进程和其子进程)将共享内存区,直到有一个进程执行写操作时,内核才会为写操作进程分配
// 新的内存页(写时复制机制).
// 参数from,to是线性地址,size是需要复制(共享)的内存长度,单位是字节.
int copy_page_tables(unsigned long from, unsigned long to, long size)
{
    be81:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long nr;

	// 首先检测参数给出的源地址from和目的地址to的有效性.源地址和目的地址都需要在4MB内存边界地址上.否则出错死机.作这样的要求是因为一个页表的
	// 1024项可管理4MB内存.源地址from和目的地址to只有满足这个要求才能保证从一个页表的第1项开始复制页表项,并且新页表最初所有项都是有效的.然后
	// 取得源地址和目的地址的起始目录项指针(from_dir和do_dir).再根据参数给出的长度size计算要复制的内存块占用的页表数(即目录项数)
	if ((from & 0x3fffff) || (to & 0x3fffff))
    be84:	8b 44 24 30          	mov    0x30(%esp),%eax
    be88:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be8d:	85 c0                	test   %eax,%eax
    be8f:	75 0d                	jne    be9e <copy_page_tables+0x1d>
    be91:	8b 44 24 34          	mov    0x34(%esp),%eax
    be95:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be9a:	85 c0                	test   %eax,%eax
    be9c:	74 10                	je     beae <copy_page_tables+0x2d>
		panic("copy_page_tables called with wrong alignment");
    be9e:	83 ec 0c             	sub    $0xc,%esp
    bea1:	68 48 34 02 00       	push   $0x23448
    bea6:	e8 5c cd ff ff       	call   8c07 <panic>
    beab:	83 c4 10             	add    $0x10,%esp
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
    beae:	8b 44 24 30          	mov    0x30(%esp),%eax
    beb2:	c1 e8 14             	shr    $0x14,%eax
    beb5:	25 fc 0f 00 00       	and    $0xffc,%eax
    beba:	89 44 24 14          	mov    %eax,0x14(%esp)
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
    bebe:	8b 44 24 34          	mov    0x34(%esp),%eax
    bec2:	c1 e8 14             	shr    $0x14,%eax
    bec5:	25 fc 0f 00 00       	and    $0xffc,%eax
    beca:	89 44 24 10          	mov    %eax,0x10(%esp)
	size = ((unsigned) (size + 0x3fffff)) >> 22;
    bece:	8b 44 24 38          	mov    0x38(%esp),%eax
    bed2:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bed7:	c1 e8 16             	shr    $0x16,%eax
    beda:	89 44 24 38          	mov    %eax,0x38(%esp)
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    bede:	e9 6c 01 00 00       	jmp    c04f <copy_page_tables+0x1ce>
		if (1 & *to_dir)
    bee3:	8b 44 24 10          	mov    0x10(%esp),%eax
    bee7:	8b 00                	mov    (%eax),%eax
    bee9:	83 e0 01             	and    $0x1,%eax
    beec:	85 c0                	test   %eax,%eax
    beee:	74 10                	je     bf00 <copy_page_tables+0x7f>
			panic("copy_page_tables: already exist");
    bef0:	83 ec 0c             	sub    $0xc,%esp
    bef3:	68 78 34 02 00       	push   $0x23478
    bef8:	e8 0a cd ff ff       	call   8c07 <panic>
    befd:	83 c4 10             	add    $0x10,%esp
		if (!(1 & *from_dir))
    bf00:	8b 44 24 14          	mov    0x14(%esp),%eax
    bf04:	8b 00                	mov    (%eax),%eax
    bf06:	83 e0 01             	and    $0x1,%eax
    bf09:	85 c0                	test   %eax,%eax
    bf0b:	0f 84 33 01 00 00    	je     c044 <copy_page_tables+0x1c3>
			continue;
		// 在验证了当前源目录项和目的项正常之后,取源目录项中页表地址from_page_table.为了保存目的目录项对应的页表,需要在主内存区中申请1页空闲内存页.如果取
		// 空闲页面函数get_free_page()返回0,则说明没有申请到空闲内存页面,可能是内存不够.于是返回-1值退出.
		from_page_table = (unsigned long *) (0xfffff000 & *from_dir);
    bf11:	8b 44 24 14          	mov    0x14(%esp),%eax
    bf15:	8b 00                	mov    (%eax),%eax
    bf17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bf1c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		if (!(to_page_table = (unsigned long *) get_free_page()))
    bf20:	e8 3c 11 00 00       	call   d061 <get_free_page>
    bf25:	89 44 24 18          	mov    %eax,0x18(%esp)
    bf29:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    bf2e:	75 0a                	jne    bf3a <copy_page_tables+0xb9>
			return -1;													/* Out of memory, see freeing */
    bf30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf35:	e9 35 01 00 00       	jmp    c06f <copy_page_tables+0x1ee>
		// 否则我们设置目的目录项信息,把最后3位置位,即当前目的目录项"或"上7,表示对应页表映射的内存页面是用户级的,并且可读写,存在(User,R/W,Present).(如果
		// U/S位是0,则R/W就没有作用.如果U/S是1,而R/W是0,那么运行在用户层的代码就只能读页面.如果U/S和R/W都置位,则就有读写的权限).
		*to_dir = ((unsigned long) to_page_table) | 7;
    bf3a:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf3e:	83 c8 07             	or     $0x7,%eax
    bf41:	89 c2                	mov    %eax,%edx
    bf43:	8b 44 24 10          	mov    0x10(%esp),%eax
    bf47:	89 10                	mov    %edx,(%eax)
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
    bf49:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    bf4e:	75 07                	jne    bf57 <copy_page_tables+0xd6>
    bf50:	b8 a0 00 00 00       	mov    $0xa0,%eax
    bf55:	eb 05                	jmp    bf5c <copy_page_tables+0xdb>
    bf57:	b8 00 04 00 00       	mov    $0x400,%eax
    bf5c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bf60:	e9 ca 00 00 00       	jmp    c02f <copy_page_tables+0x1ae>
			this_page = *from_page_table;
    bf65:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf69:	8b 00                	mov    (%eax),%eax
    bf6b:	89 44 24 08          	mov    %eax,0x8(%esp)
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
    bf6f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    bf74:	0f 84 aa 00 00 00    	je     c024 <copy_page_tables+0x1a3>
				continue;
			// 如果该表项有内容,但是其存在位P=0,则该表项对应的页面可能在交换设备中.于是先申请1页内存,并从交换设备中读入该页面(若交换设备中有的话).然后将该页表项复制到
			// 目的页表项中.并修改源页表项内容指向该新申请的内存页.
			if (!(1 & this_page)) {
    bf7a:	8b 44 24 08          	mov    0x8(%esp),%eax
    bf7e:	83 e0 01             	and    $0x1,%eax
    bf81:	85 c0                	test   %eax,%eax
    bf83:	75 53                	jne    bfd8 <copy_page_tables+0x157>
				// 申请一页新的内存然后将交换设备中的数据读取到该页面中
				if (!(new_page = get_free_page()))
    bf85:	e8 d7 10 00 00       	call   d061 <get_free_page>
    bf8a:	89 44 24 04          	mov    %eax,0x4(%esp)
    bf8e:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    bf93:	75 0a                	jne    bf9f <copy_page_tables+0x11e>
					return -1;
    bf95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf9a:	e9 d0 00 00 00       	jmp    c06f <copy_page_tables+0x1ee>
				// 从交换设备中将页面读取出来
				read_swap_page(this_page >> 1, (char *) new_page);
    bf9f:	8b 54 24 04          	mov    0x4(%esp),%edx
    bfa3:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfa7:	d1 e8                	shr    %eax
    bfa9:	89 c1                	mov    %eax,%ecx
    bfab:	a1 a0 11 03 00       	mov    0x311a0,%eax
    bfb0:	52                   	push   %edx
    bfb1:	51                   	push   %ecx
    bfb2:	50                   	push   %eax
    bfb3:	6a 00                	push   $0x0
    bfb5:	e8 a3 a8 00 00       	call   1685d <ll_rw_page>
    bfba:	83 c4 10             	add    $0x10,%esp
				// 目的页表项指向源页表项值
				*to_page_table = this_page;
    bfbd:	8b 44 24 18          	mov    0x18(%esp),%eax
    bfc1:	8b 54 24 08          	mov    0x8(%esp),%edx
    bfc5:	89 10                	mov    %edx,(%eax)
				// 并修改源页表项内容指向该新申请的内存页,并设置表项标志为"页面脏"加上7
				*from_page_table = new_page | (PAGE_DIRTY | 7);
    bfc7:	8b 44 24 04          	mov    0x4(%esp),%eax
    bfcb:	83 c8 47             	or     $0x47,%eax
    bfce:	89 c2                	mov    %eax,%edx
    bfd0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bfd4:	89 10                	mov    %edx,(%eax)
				// 继续处理下一页表项
				continue;
    bfd6:	eb 4d                	jmp    c025 <copy_page_tables+0x1a4>
			}
			// 复位页表项中R/W标志(位1置0),即让页表项对应的内存页面只读,然后将该页表项复制到目的页表中
			this_page &= ~2;
    bfd8:	83 64 24 08 fd       	andl   $0xfffffffd,0x8(%esp)
			*to_page_table = this_page;
    bfdd:	8b 44 24 18          	mov    0x18(%esp),%eax
    bfe1:	8b 54 24 08          	mov    0x8(%esp),%edx
    bfe5:	89 10                	mov    %edx,(%eax)
			// 的页面,说明是内核页面,因此不需要对mem_map[]进行设置.因为mem_map[]仅用于管理主内存区中的页面使用请问.因此对于内核移动到任务0中并且调用fork()创建任务1时
			// (用于运行init()),由于此时复制的页面还仍然都在内核代码区域,因此以下判断中的语句不会执行,任务0的页面仍然可以随时读写.只有当调用fork()的父进程代码处于主内存
			// (页面位置大于1MB)时才会执行.这种情况需要在进程调用execve(),并装载执行了新程序代码时才会出现.
			// 157行语句含义是令源页表项所指内存页也为只读.因为现在开始已有两个进程共用内存区了.若其中1个进程需要进行操作,则可以通过页异常写保护处理为执行写操作的进程分配
			// 1页新空闲页面,也即进行写时复制(copy_on_write)操作.
			if (this_page > LOW_MEM) {
    bfe7:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    bfee:	00 
    bfef:	76 34                	jbe    c025 <copy_page_tables+0x1a4>
				*from_page_table = this_page;		// 令源页表项也只读.
    bff1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bff5:	8b 54 24 08          	mov    0x8(%esp),%edx
    bff9:	89 10                	mov    %edx,(%eax)
				this_page -= LOW_MEM;
    bffb:	81 6c 24 08 00 00 10 	subl   $0x100000,0x8(%esp)
    c002:	00 
				this_page >>= 12;
    c003:	c1 6c 24 08 0c       	shrl   $0xc,0x8(%esp)
				mem_map[this_page]++;
    c008:	8b 44 24 08          	mov    0x8(%esp),%eax
    c00c:	05 a0 02 03 00       	add    $0x302a0,%eax
    c011:	0f b6 00             	movzbl (%eax),%eax
    c014:	8d 50 01             	lea    0x1(%eax),%edx
    c017:	8b 44 24 08          	mov    0x8(%esp),%eax
    c01b:	05 a0 02 03 00       	add    $0x302a0,%eax
    c020:	88 10                	mov    %dl,(%eax)
    c022:	eb 01                	jmp    c025 <copy_page_tables+0x1a4>
				continue;
    c024:	90                   	nop
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    c025:	83 44 24 1c 04       	addl   $0x4,0x1c(%esp)
    c02a:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
    c02f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c033:	8d 50 ff             	lea    -0x1(%eax),%edx
    c036:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c03a:	85 c0                	test   %eax,%eax
    c03c:	0f 85 23 ff ff ff    	jne    bf65 <copy_page_tables+0xe4>
    c042:	eb 01                	jmp    c045 <copy_page_tables+0x1c4>
			continue;
    c044:	90                   	nop
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    c045:	83 44 24 14 04       	addl   $0x4,0x14(%esp)
    c04a:	83 44 24 10 04       	addl   $0x4,0x10(%esp)
    c04f:	8b 44 24 38          	mov    0x38(%esp),%eax
    c053:	8d 50 ff             	lea    -0x1(%eax),%edx
    c056:	89 54 24 38          	mov    %edx,0x38(%esp)
    c05a:	85 c0                	test   %eax,%eax
    c05c:	0f 8f 81 fe ff ff    	jg     bee3 <copy_page_tables+0x62>
			}
        }
    }
	invalidate();									// 刷新页变换高速缓冲.
    c062:	b8 00 00 00 00       	mov    $0x0,%eax
    c067:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    c06a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c06f:	83 c4 2c             	add    $0x2c,%esp
    c072:	c3                   	ret    

0000c073 <put_page>:
// 或者说是把线性地址空间中指定地址address处的页面映射到主内存区页面page上.主要工作是在相关页目录项和页表项中设置指定页面的信息.若成功则返回物理页面地址.
// 在处理缺页异常的C函数do_no_page()中会调用此函数.对于缺页引起的异常,由于任何缺页缘故而对页表作修改时,并不需要刷新CPU的页变换缓冲(或称Translation Lookaside
// Buffer,TLB),即使页表项中标志P被从0修改成1.因为无效页项不会被缓冲,因此当修改了一个无效的页表项时不需要刷新.在此就表现为不用调用Invalidate()函数.
// 参数page是分配的主内存区中某一页面(页帧,页框)的指针;address是线性地址.
static unsigned long put_page(unsigned long page, unsigned long address)
{
    c073:	83 ec 1c             	sub    $0x1c,%esp
	/* 注意!!!这里使用了页目录表基地址pg_dir=0的条件 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c076:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c07d:	00 
    c07e:	76 0b                	jbe    c08b <put_page+0x18>
    c080:	a1 80 02 03 00       	mov    0x30280,%eax
    c085:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c089:	72 18                	jb     c0a3 <put_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c08b:	83 ec 04             	sub    $0x4,%esp
    c08e:	ff 74 24 28          	pushl  0x28(%esp)
    c092:	ff 74 24 28          	pushl  0x28(%esp)
    c096:	68 98 34 02 00       	push   $0x23498
    c09b:	e8 a6 cb ff ff       	call   8c46 <printk>
    c0a0:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page - LOW_MEM) >> 12] != 1)
    c0a3:	8b 44 24 20          	mov    0x20(%esp),%eax
    c0a7:	2d 00 00 10 00       	sub    $0x100000,%eax
    c0ac:	c1 e8 0c             	shr    $0xc,%eax
    c0af:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c0b6:	3c 01                	cmp    $0x1,%al
    c0b8:	74 18                	je     c0d2 <put_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c0ba:	83 ec 04             	sub    $0x4,%esp
    c0bd:	ff 74 24 28          	pushl  0x28(%esp)
    c0c1:	ff 74 24 28          	pushl  0x28(%esp)
    c0c5:	68 b8 34 02 00       	push   $0x234b8
    c0ca:	e8 77 cb ff ff       	call   8c46 <printk>
    c0cf:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c0d2:	8b 44 24 24          	mov    0x24(%esp),%eax
    c0d6:	c1 e8 14             	shr    $0x14,%eax
    c0d9:	25 fc 0f 00 00       	and    $0xffc,%eax
    c0de:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c0e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0e6:	8b 00                	mov    (%eax),%eax
    c0e8:	83 e0 01             	and    $0x1,%eax
    c0eb:	85 c0                	test   %eax,%eax
    c0ed:	74 11                	je     c100 <put_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c0ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0f3:	8b 00                	mov    (%eax),%eax
    c0f5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c0fa:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c0fe:	eb 2e                	jmp    c12e <put_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c100:	e8 5c 0f 00 00       	call   d061 <get_free_page>
    c105:	89 44 24 08          	mov    %eax,0x8(%esp)
    c109:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c10e:	75 07                	jne    c117 <put_page+0xa4>
			return 0;
    c110:	b8 00 00 00 00       	mov    $0x0,%eax
    c115:	eb 3d                	jmp    c154 <put_page+0xe1>
		*page_table = tmp | 7;
    c117:	8b 44 24 08          	mov    0x8(%esp),%eax
    c11b:	83 c8 07             	or     $0x7,%eax
    c11e:	89 c2                	mov    %eax,%edx
    c120:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c124:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c126:	8b 44 24 08          	mov    0x8(%esp),%eax
    c12a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | 7;
    c12e:	8b 44 24 24          	mov    0x24(%esp),%eax
    c132:	c1 e8 0c             	shr    $0xc,%eax
    c135:	25 ff 03 00 00       	and    $0x3ff,%eax
    c13a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c141:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c145:	01 d0                	add    %edx,%eax
    c147:	8b 54 24 20          	mov    0x20(%esp),%edx
    c14b:	83 ca 07             	or     $0x7,%edx
    c14e:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;					// 返回物理页面地址.
    c150:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c154:	83 c4 1c             	add    $0x1c,%esp
    c157:	c3                   	ret    

0000c158 <put_dirty_page>:
 * 已修改状态标志.因而下面就有了与上面相同的函数,但是该函数在放置页面时会把页面标志为已修改状态.
 */
// 把一内容已修改过的物理内存页面映射到线性地址空间指定处.
// 该函数与一个函数put_page()几乎完全一样,除了本函数在第223行设置页表项内容时,同时还设置了页面已修改标志(位6,PAGE_DIRTY).
unsigned long put_dirty_page(unsigned long page, unsigned long address)
{
    c158:	83 ec 1c             	sub    $0x1c,%esp
	/* NOTE !!! This uses the fact that _pg_dir=0 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c15b:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c162:	00 
    c163:	76 0b                	jbe    c170 <put_dirty_page+0x18>
    c165:	a1 80 02 03 00       	mov    0x30280,%eax
    c16a:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c16e:	72 18                	jb     c188 <put_dirty_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c170:	83 ec 04             	sub    $0x4,%esp
    c173:	ff 74 24 28          	pushl  0x28(%esp)
    c177:	ff 74 24 28          	pushl  0x28(%esp)
    c17b:	68 98 34 02 00       	push   $0x23498
    c180:	e8 c1 ca ff ff       	call   8c46 <printk>
    c185:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page-LOW_MEM)>>12] != 1)
    c188:	8b 44 24 20          	mov    0x20(%esp),%eax
    c18c:	2d 00 00 10 00       	sub    $0x100000,%eax
    c191:	c1 e8 0c             	shr    $0xc,%eax
    c194:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c19b:	3c 01                	cmp    $0x1,%al
    c19d:	74 18                	je     c1b7 <put_dirty_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c19f:	83 ec 04             	sub    $0x4,%esp
    c1a2:	ff 74 24 28          	pushl  0x28(%esp)
    c1a6:	ff 74 24 28          	pushl  0x28(%esp)
    c1aa:	68 b8 34 02 00       	push   $0x234b8
    c1af:	e8 92 ca ff ff       	call   8c46 <printk>
    c1b4:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c1b7:	8b 44 24 24          	mov    0x24(%esp),%eax
    c1bb:	c1 e8 14             	shr    $0x14,%eax
    c1be:	25 fc 0f 00 00       	and    $0xffc,%eax
    c1c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c1c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1cb:	8b 00                	mov    (%eax),%eax
    c1cd:	83 e0 01             	and    $0x1,%eax
    c1d0:	85 c0                	test   %eax,%eax
    c1d2:	74 11                	je     c1e5 <put_dirty_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c1d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1d8:	8b 00                	mov    (%eax),%eax
    c1da:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c1df:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c1e3:	eb 2e                	jmp    c213 <put_dirty_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c1e5:	e8 77 0e 00 00       	call   d061 <get_free_page>
    c1ea:	89 44 24 08          	mov    %eax,0x8(%esp)
    c1ee:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c1f3:	75 07                	jne    c1fc <put_dirty_page+0xa4>
			return 0;
    c1f5:	b8 00 00 00 00       	mov    $0x0,%eax
    c1fa:	eb 3d                	jmp    c239 <put_dirty_page+0xe1>
		*page_table = tmp | 7;
    c1fc:	8b 44 24 08          	mov    0x8(%esp),%eax
    c200:	83 c8 07             	or     $0x7,%eax
    c203:	89 c2                	mov    %eax,%edx
    c205:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c209:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c20b:	8b 44 24 08          	mov    0x8(%esp),%eax
    c20f:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | (PAGE_DIRTY | 7);
    c213:	8b 44 24 24          	mov    0x24(%esp),%eax
    c217:	c1 e8 0c             	shr    $0xc,%eax
    c21a:	25 ff 03 00 00       	and    $0x3ff,%eax
    c21f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c226:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c22a:	01 d0                	add    %edx,%eax
    c22c:	8b 54 24 20          	mov    0x20(%esp),%edx
    c230:	83 ca 47             	or     $0x47,%edx
    c233:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;
    c235:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c239:	83 c4 1c             	add    $0x1c,%esp
    c23c:	c3                   	ret    

0000c23d <un_wp_page>:
// 用于页异常中断过程中写保护异常的处理(写时复制).在内核创建进程时,新进程与父进程被设置成共享代码和数据内存页面,并且所有这些页面均被设置成只读页面.而当新进程或原
// 进程需要向内存页面写数据时,CPU就会检测到这个情况并产生页面写保护异常.于是在这个函数中内核就会首先判断要写的页面是否被共享.若没有则把页面设置成可写然后退出.若页面
// 处于共享状态,则要重新申请一新页面并复制被写页面内容,以供写进程单独使用.共享被取消.
// 输入参数为页面表项指针,是物理地址.[un_wp_page -- Un-Write Protect Page]
void un_wp_page(unsigned long * table_entry)
{
    c23d:	57                   	push   %edi
    c23e:	56                   	push   %esi
    c23f:	83 ec 14             	sub    $0x14,%esp
	unsigned long old_page, new_page;

	// 首先取参数指定的页表项中物理页面位置(地址)并判断该页面是不是共享页面.如果原页面地址大于内存低端LOW_MEM(表示在主内存区中),并且其在页面映射字节图数组中值为1(表示
	// 页面仅被引用1次,页面没有被共享),则在该页面的页表项中 R/W标志(可写),并刷新页变换高速缓冲,然后返回.即如果该内存页面此时只被一个进程使用,并且不是内核中的进程,就直接
	// 把属性改为可写即可,不必重新申请一个新页面.
	old_page = 0xfffff000 & *table_entry;				// 取指定页表项中物理页面地址.
    c242:	8b 44 24 20          	mov    0x20(%esp),%eax
    c246:	8b 00                	mov    (%eax),%eax
    c248:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c24d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (old_page >= LOW_MEM && mem_map[MAP_NR(old_page)] == 1) {
    c251:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c258:	00 
    c259:	76 32                	jbe    c28d <un_wp_page+0x50>
    c25b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c25f:	2d 00 00 10 00       	sub    $0x100000,%eax
    c264:	c1 e8 0c             	shr    $0xc,%eax
    c267:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    c26e:	3c 01                	cmp    $0x1,%al
    c270:	75 1b                	jne    c28d <un_wp_page+0x50>
		*table_entry |= 2;
    c272:	8b 44 24 20          	mov    0x20(%esp),%eax
    c276:	8b 00                	mov    (%eax),%eax
    c278:	83 c8 02             	or     $0x2,%eax
    c27b:	89 c2                	mov    %eax,%edx
    c27d:	8b 44 24 20          	mov    0x20(%esp),%eax
    c281:	89 10                	mov    %edx,(%eax)
		invalidate();
    c283:	b8 00 00 00 00       	mov    $0x0,%eax
    c288:	0f 22 d8             	mov    %eax,%cr3
		return;
    c28b:	eb 6a                	jmp    c2f7 <un_wp_page+0xba>
	}
	// 否则就需要在主内存区内申请一页空闲页面给执行写操作的进程单独使用,取消页面共享.如果原页面大于内存低端(则意味着mem_map[]>1,页面是共享的),则将原页面的页面映射字节数组
	// 值递减1.然后将指定页表项内容更新为新页面地址,并置可读写标志(U/S,R/W,P).在刷新页变换高速缓冲之后,最后将原页面内容复制到新页面.
	if (!(new_page = get_free_page()))
    c28d:	e8 cf 0d 00 00       	call   d061 <get_free_page>
    c292:	89 44 24 08          	mov    %eax,0x8(%esp)
    c296:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c29b:	75 05                	jne    c2a2 <un_wp_page+0x65>
		oom();											// 内存不够处理.
    c29d:	e8 0b fa ff ff       	call   bcad <oom>
	if (old_page >= LOW_MEM)
    c2a2:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c2a9:	00 
    c2aa:	76 1c                	jbe    c2c8 <un_wp_page+0x8b>
		mem_map[MAP_NR(old_page)]--;
    c2ac:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c2b0:	2d 00 00 10 00       	sub    $0x100000,%eax
    c2b5:	c1 e8 0c             	shr    $0xc,%eax
    c2b8:	0f b6 90 a0 02 03 00 	movzbl 0x302a0(%eax),%edx
    c2bf:	83 ea 01             	sub    $0x1,%edx
    c2c2:	88 90 a0 02 03 00    	mov    %dl,0x302a0(%eax)
	copy_page(old_page, new_page);
    c2c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c2cc:	8b 54 24 08          	mov    0x8(%esp),%edx
    c2d0:	b9 00 04 00 00       	mov    $0x400,%ecx
    c2d5:	89 c6                	mov    %eax,%esi
    c2d7:	89 d7                	mov    %edx,%edi
    c2d9:	57                   	push   %edi
    c2da:	56                   	push   %esi
    c2db:	fc                   	cld    
    c2dc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    c2de:	5e                   	pop    %esi
    c2df:	5f                   	pop    %edi
	// 将新的页面设置为可读可写且存在
	*table_entry = new_page | 7;
    c2e0:	8b 44 24 08          	mov    0x8(%esp),%eax
    c2e4:	83 c8 07             	or     $0x7,%eax
    c2e7:	89 c2                	mov    %eax,%edx
    c2e9:	8b 44 24 20          	mov    0x20(%esp),%eax
    c2ed:	89 10                	mov    %edx,(%eax)
	// 刷新高速缓冲
	invalidate();
    c2ef:	b8 00 00 00 00       	mov    $0x0,%eax
    c2f4:	0f 22 d8             	mov    %eax,%cr3
}
    c2f7:	83 c4 14             	add    $0x14,%esp
    c2fa:	5e                   	pop    %esi
    c2fb:	5f                   	pop    %edi
    c2fc:	c3                   	ret    

0000c2fd <do_wp_page>:
// 执行写保护页面处理.
// 是写共享页面处理函数.是页异常中断处理过程中调用的C函数.在page.s程序中被调用.
// 函数参数error_code和address是进程在写写保护页面时由CPU产生异常而自动生成的.error_code指出出错类型;address是产生异常的页面
// 线性地址.写共享页面时需复制页面(写时复制).
void do_wp_page(unsigned long error_code, unsigned long address)
{
    c2fd:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置
	// 在内核或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address - 当前进程代码起始地址)大于一个进程的
	// 长度(64MB),表示address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出.
	if (address < TASK_SIZE)
    c300:	81 7c 24 14 ff ff ff 	cmpl   $0x3ffffff,0x14(%esp)
    c307:	03 
    c308:	77 10                	ja     c31a <do_wp_page+0x1d>
		printk("\n\rBAD! KERNEL MEMORY WP-ERR!\n\r");
    c30a:	83 ec 0c             	sub    $0xc,%esp
    c30d:	68 dc 34 02 00       	push   $0x234dc
    c312:	e8 2f c9 ff ff       	call   8c46 <printk>
    c317:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c31a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c31f:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c325:	8b 54 24 14          	mov    0x14(%esp),%edx
    c329:	29 c2                	sub    %eax,%edx
    c32b:	89 d0                	mov    %edx,%eax
    c32d:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c332:	76 1d                	jbe    c351 <do_wp_page+0x54>
		printk("Bad things happen: page error in do_wp_page\n\r");
    c334:	83 ec 0c             	sub    $0xc,%esp
    c337:	68 fc 34 02 00       	push   $0x234fc
    c33c:	e8 05 c9 ff ff       	call   8c46 <printk>
    c341:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c344:	83 ec 0c             	sub    $0xc,%esp
    c347:	6a 0b                	push   $0xb
    c349:	e8 7c ea ff ff       	call   adca <do_exit>
    c34e:	83 c4 10             	add    $0x10,%esp
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c351:	8b 44 24 14          	mov    0x14(%esp),%eax
    c355:	c1 e8 0a             	shr    $0xa,%eax
    c358:	25 fc 0f 00 00       	and    $0xffc,%eax
    c35d:	89 c2                	mov    %eax,%edx
		*((unsigned long *) ((address >> 20) & 0xffc)))));
    c35f:	8b 44 24 14          	mov    0x14(%esp),%eax
    c363:	c1 e8 14             	shr    $0x14,%eax
    c366:	25 fc 0f 00 00       	and    $0xffc,%eax
    c36b:	8b 00                	mov    (%eax),%eax
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c36d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c372:	09 d0                	or     %edx,%eax
	un_wp_page((unsigned long *)
    c374:	83 ec 0c             	sub    $0xc,%esp
    c377:	50                   	push   %eax
    c378:	e8 c0 fe ff ff       	call   c23d <un_wp_page>
    c37d:	83 c4 10             	add    $0x10,%esp

}
    c380:	90                   	nop
    c381:	83 c4 0c             	add    $0xc,%esp
    c384:	c3                   	ret    

0000c385 <write_verify>:

// 写页面验证.
// 若页面不可写,则复制页面.在fork.c中被内存验证通用函数verify_area()调用.
// 参数address是指定页面在4GB空间中的线性地址.
void write_verify(unsigned long address)
{
    c385:	83 ec 1c             	sub    $0x1c,%esp

	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
    c388:	8b 44 24 20          	mov    0x20(%esp),%eax
    c38c:	c1 e8 14             	shr    $0x14,%eax
    c38f:	25 fc 0f 00 00       	and    $0xffc,%eax
    c394:	8b 00                	mov    (%eax),%eax
    c396:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c39a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c39e:	83 e0 01             	and    $0x1,%eax
    c3a1:	85 c0                	test   %eax,%eax
    c3a3:	74 39                	je     c3de <write_verify+0x59>
		return;
	page &= 0xfffff000;
    c3a5:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c3ac:	ff 
	// 得到页表项的物理地址
	page += ((address >> 10) & 0xffc);
    c3ad:	8b 44 24 20          	mov    0x20(%esp),%eax
    c3b1:	c1 e8 0a             	shr    $0xa,%eax
    c3b4:	25 fc 0f 00 00       	and    $0xffc,%eax
    c3b9:	01 44 24 0c          	add    %eax,0xc(%esp)
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
    c3bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3c1:	8b 00                	mov    (%eax),%eax
    c3c3:	83 e0 03             	and    $0x3,%eax
    c3c6:	83 f8 01             	cmp    $0x1,%eax
    c3c9:	75 16                	jne    c3e1 <write_verify+0x5c>
		un_wp_page((unsigned long *) page);
    c3cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3cf:	83 ec 0c             	sub    $0xc,%esp
    c3d2:	50                   	push   %eax
    c3d3:	e8 65 fe ff ff       	call   c23d <un_wp_page>
    c3d8:	83 c4 10             	add    $0x10,%esp
	return;
    c3db:	90                   	nop
    c3dc:	eb 03                	jmp    c3e1 <write_verify+0x5c>
		return;
    c3de:	90                   	nop
    c3df:	eb 01                	jmp    c3e2 <write_verify+0x5d>
	return;
    c3e1:	90                   	nop
}
    c3e2:	83 c4 1c             	add    $0x1c,%esp
    c3e5:	c3                   	ret    

0000c3e6 <get_empty_page>:

// 取得一页空闲内存并映射到指定线性地址处.
// get_free_page()仅是申请取得了主内存区的一页物理内存.而本函数则不仅是获取到一页物理内存页面,还进一步调用put_page(),将物理页面映射到指定的线性地址处.
// 参数address是指定页面的线性地址.
void get_empty_page(unsigned long address)
{
    c3e6:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long tmp;

	// 若不能取得一空闲页面,或者不能将所取页面放置到指定地址处,则显示内存不够的信息.292行上英文注释的含义是:free_page()函数的参数tmp是0也没有关系,该函数会忽略它
	// 并能正常返回.
	if (!(tmp = get_free_page()) || !put_page(tmp, address)) {
    c3e9:	e8 73 0c 00 00       	call   d061 <get_free_page>
    c3ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c3f2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    c3f7:	74 17                	je     c410 <get_empty_page+0x2a>
    c3f9:	83 ec 08             	sub    $0x8,%esp
    c3fc:	ff 74 24 28          	pushl  0x28(%esp)
    c400:	ff 74 24 18          	pushl  0x18(%esp)
    c404:	e8 6a fc ff ff       	call   c073 <put_page>
    c409:	83 c4 10             	add    $0x10,%esp
    c40c:	85 c0                	test   %eax,%eax
    c40e:	75 14                	jne    c424 <get_empty_page+0x3e>
		free_page(tmp);		/* 0 is ok - ignored */
    c410:	83 ec 0c             	sub    $0xc,%esp
    c413:	ff 74 24 18          	pushl  0x18(%esp)
    c417:	e8 b6 f8 ff ff       	call   bcd2 <free_page>
    c41c:	83 c4 10             	add    $0x10,%esp
		oom();
    c41f:	e8 89 f8 ff ff       	call   bcad <oom>
	}
}
    c424:	90                   	nop
    c425:	83 c4 1c             	add    $0x1c,%esp
    c428:	c3                   	ret    

0000c429 <try_to_share>:
// 段内容作过修改那么数据段内容也应一样。参数address是进程中的逻辑地址，即是当前进程欲与p进程共享页面的逻辑页面地址。进程
// p是将被共享页面的进程。如果p进程address处的页面存在并且没有被修改过的话，就让当前进程与p进程共享之。同时还需要验证指定
// 的地址处是否已经申请了页面，若是则出错，死机。
// 返回：1 - 页面共享处理成功；0 - 失败。
static int try_to_share(unsigned long address, struct task_struct * p)
{
    c429:	83 ec 2c             	sub    $0x2c,%esp

	// 首先分别求得指定进程p中和当前进程中逻辑地址address对应的页目录项。为了计算方便先求出指定逻辑地址address处的“逻辑”页
	// 目录号，即以进程空间（0 - 64MB）算出的页目录项号。该“逻辑”页目录项号加上进程p在CPU 4GB线性空间中起始地址对应的页目录
	// 项，即得到进程p中地址address处页面所对应的4GB线性空间中实际页目录项from_page。而“逻辑”页目录项号加上当前进程CPU 4GB
	// 线性空间中的实际页目录项to_page。
	from_page = to_page = ((address >> 20) & 0xffc);
    c42c:	8b 44 24 30          	mov    0x30(%esp),%eax
    c430:	c1 e8 14             	shr    $0x14,%eax
    c433:	25 fc 0f 00 00       	and    $0xffc,%eax
    c438:	89 44 24 18          	mov    %eax,0x18(%esp)
    c43c:	8b 44 24 18          	mov    0x18(%esp),%eax
    c440:	89 44 24 14          	mov    %eax,0x14(%esp)
	from_page += ((p->start_code >> 20) & 0xffc);             		// p进程目录项。
    c444:	8b 44 24 34          	mov    0x34(%esp),%eax
    c448:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c44e:	c1 e8 14             	shr    $0x14,%eax
    c451:	25 fc 0f 00 00       	and    $0xffc,%eax
    c456:	01 44 24 14          	add    %eax,0x14(%esp)
	to_page += ((current->start_code >> 20) & 0xffc);         		// 当前进程目录项。
    c45a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c45f:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c465:	c1 e8 14             	shr    $0x14,%eax
    c468:	25 fc 0f 00 00       	and    $0xffc,%eax
    c46d:	01 44 24 18          	add    %eax,0x18(%esp)
	// address对应的物理内在页面地址，并且该物理页面存在，而且干净（没有被修改过，不脏）。
	// 方法是先取目录项内容。如果该目录项元效（P=0），表示目录项对应的二级页表不存在，于是返回。否则取该目录项对应页表地址from，
	// 从而计算出逻辑地址address对应的页表项指针，并取出该面表项内容临时保存在phys_addr中。
	/* is there a page-directory at from? */
	/* 在from处是否存在页目录项？ */
	from = *(unsigned long *) from_page;                    		// p进程目录项内容。
    c471:	8b 44 24 14          	mov    0x14(%esp),%eax
    c475:	8b 00                	mov    (%eax),%eax
    c477:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!(from & 1))
    c47b:	8b 44 24 10          	mov    0x10(%esp),%eax
    c47f:	83 e0 01             	and    $0x1,%eax
    c482:	85 c0                	test   %eax,%eax
    c484:	75 0a                	jne    c490 <try_to_share+0x67>
		return 0;
    c486:	b8 00 00 00 00       	mov    $0x0,%eax
    c48b:	e9 2c 01 00 00       	jmp    c5bc <try_to_share+0x193>
	from &= 0xfffff000;                                     		// 页表地址。
    c490:	81 64 24 10 00 f0 ff 	andl   $0xfffff000,0x10(%esp)
    c497:	ff 
	from_page = from + ((address >> 10) & 0xffc);             		// 页表项指针。
    c498:	8b 44 24 30          	mov    0x30(%esp),%eax
    c49c:	c1 e8 0a             	shr    $0xa,%eax
    c49f:	25 fc 0f 00 00       	and    $0xffc,%eax
    c4a4:	89 c2                	mov    %eax,%edx
    c4a6:	8b 44 24 10          	mov    0x10(%esp),%eax
    c4aa:	01 d0                	add    %edx,%eax
    c4ac:	89 44 24 14          	mov    %eax,0x14(%esp)
	phys_addr = *(unsigned long *) from_page;               		// 页表项内容。
    c4b0:	8b 44 24 14          	mov    0x14(%esp),%eax
    c4b4:	8b 00                	mov    (%eax),%eax
    c4b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着看看页表项映射的物理页面是否存在并且干净。0x41对应页表项中的D（Dirty）和P（present）标志。如果页面不干净或无效则返回。
	// 然后我们从该表项中取出物理页面地址再保存在phys_addr中。最后我们再检查一下这个物理页面地址的有效性，即它不应该超过机器最大
	// 物理地址值，也不应该小于内在低端（1MB）。
	/* is the page clean and present? */
	/* 物理页面干净并且存在吗？ */
	if ((phys_addr & 0x41) != 0x01)
    c4ba:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c4be:	83 e0 41             	and    $0x41,%eax
    c4c1:	83 f8 01             	cmp    $0x1,%eax
    c4c4:	74 0a                	je     c4d0 <try_to_share+0xa7>
		return 0;
    c4c6:	b8 00 00 00 00       	mov    $0x0,%eax
    c4cb:	e9 ec 00 00 00       	jmp    c5bc <try_to_share+0x193>
	phys_addr &= 0xfffff000;                                		// 物理页面地址。
    c4d0:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c4d7:	ff 
	if (phys_addr >= HIGH_MEMORY || phys_addr < LOW_MEM)
    c4d8:	a1 80 02 03 00       	mov    0x30280,%eax
    c4dd:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    c4e1:	73 0a                	jae    c4ed <try_to_share+0xc4>
    c4e3:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c4ea:	00 
    c4eb:	77 0a                	ja     c4f7 <try_to_share+0xce>
		return 0;
    c4ed:	b8 00 00 00 00       	mov    $0x0,%eax
    c4f2:	e9 c5 00 00 00       	jmp    c5bc <try_to_share+0x193>
	// 下面首先对当前进程的表项进行操作。目标是取得当前进程中address对应的页表项地址，并且该页表项还没有映射物理页面，即其P=0。
	// 首先取当前进程页目录项内容->to。如果该目录项元效（P=0），即目录项对应的二级页表不存在，则申请一空闲页面来存放页表，并更新
	// 目录项to_page内容，让其指向该内存页面。
	to = *(unsigned long *) to_page;                        		// 当前进程目录项内容。
    c4f7:	8b 44 24 18          	mov    0x18(%esp),%eax
    c4fb:	8b 00                	mov    (%eax),%eax
    c4fd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!(to & 1))
    c501:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c505:	83 e0 01             	and    $0x1,%eax
    c508:	85 c0                	test   %eax,%eax
    c50a:	75 24                	jne    c530 <try_to_share+0x107>
		if (to = get_free_page())
    c50c:	e8 50 0b 00 00       	call   d061 <get_free_page>
    c511:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c515:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c51a:	74 0f                	je     c52b <try_to_share+0x102>
			*(unsigned long *) to_page = to | 7;
    c51c:	8b 44 24 18          	mov    0x18(%esp),%eax
    c520:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    c524:	83 ca 07             	or     $0x7,%edx
    c527:	89 10                	mov    %edx,(%eax)
    c529:	eb 05                	jmp    c530 <try_to_share+0x107>
		else
			oom();
    c52b:	e8 7d f7 ff ff       	call   bcad <oom>
	// 否则取目录项中的页表地址->to，加上页表索引值<<2，即页表项在表中偏移地址，得到页表项地址->to_page。针对该页表项，如果
	// 此时我们检查出其对应的物理页面已经存在，即页表项的存在位P=1,则说明原本我们想共享进程p中对应的物理页面，但现在我们自己已经
	// 占有了（映射有）物理页面。于是说明内核出错，死机。
	to &= 0xfffff000;                                       		// 当前进程的页表地址。
    c530:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c537:	ff 
	to_page = to + ((address >> 10) & 0xffc);                 		// 当前进程的页表项地址。
    c538:	8b 44 24 30          	mov    0x30(%esp),%eax
    c53c:	c1 e8 0a             	shr    $0xa,%eax
    c53f:	25 fc 0f 00 00       	and    $0xffc,%eax
    c544:	89 c2                	mov    %eax,%edx
    c546:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c54a:	01 d0                	add    %edx,%eax
    c54c:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (1 & *(unsigned long *) to_page)
    c550:	8b 44 24 18          	mov    0x18(%esp),%eax
    c554:	8b 00                	mov    (%eax),%eax
    c556:	83 e0 01             	and    $0x1,%eax
    c559:	85 c0                	test   %eax,%eax
    c55b:	74 10                	je     c56d <try_to_share+0x144>
		panic("try_to_share: to_page already exists");
    c55d:	83 ec 0c             	sub    $0xc,%esp
    c560:	68 2c 35 02 00       	push   $0x2352c
    c565:	e8 9d c6 ff ff       	call   8c07 <panic>
    c56a:	83 c4 10             	add    $0x10,%esp
	/* share them: write-protect */
	/* 对它们进行共享处理：写保护区*/
	*(unsigned long *) from_page &= ~2;
    c56d:	8b 44 24 14          	mov    0x14(%esp),%eax
    c571:	8b 10                	mov    (%eax),%edx
    c573:	8b 44 24 14          	mov    0x14(%esp),%eax
    c577:	83 e2 fd             	and    $0xfffffffd,%edx
    c57a:	89 10                	mov    %edx,(%eax)
	*(unsigned long *) to_page = *(unsigned long *) from_page;
    c57c:	8b 54 24 14          	mov    0x14(%esp),%edx
    c580:	8b 44 24 18          	mov    0x18(%esp),%eax
    c584:	8b 12                	mov    (%edx),%edx
    c586:	89 10                	mov    %edx,(%eax)
	// 随后刷新页变换高速缓冲。计算所操作物理页面的页面号，并将对应页面映射字节数组项中的引用递增1.最后返回1,表示共享处理成功。
	invalidate();
    c588:	b8 00 00 00 00       	mov    $0x0,%eax
    c58d:	0f 22 d8             	mov    %eax,%cr3
	phys_addr -= LOW_MEM;
    c590:	81 6c 24 0c 00 00 10 	subl   $0x100000,0xc(%esp)
    c597:	00 
	phys_addr >>= 12;                       						// 得页面号。
    c598:	c1 6c 24 0c 0c       	shrl   $0xc,0xc(%esp)
	mem_map[phys_addr]++;
    c59d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5a1:	05 a0 02 03 00       	add    $0x302a0,%eax
    c5a6:	0f b6 00             	movzbl (%eax),%eax
    c5a9:	8d 50 01             	lea    0x1(%eax),%edx
    c5ac:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5b0:	05 a0 02 03 00       	add    $0x302a0,%eax
    c5b5:	88 10                	mov    %dl,(%eax)
	return 1;
    c5b7:	b8 01 00 00 00       	mov    $0x1,%eax
}
    c5bc:	83 c4 2c             	add    $0x2c,%esp
    c5bf:	c3                   	ret    

0000c5c0 <share_page>:
// 点.根据该i节点的引用次数i_count我们可以进行这种判断.若节点的i_count值大于1,则表明系统中有两个进程正在运行同一个执行文件(或库
// 文件),于是可以再对任务结构数组中所有任务比较是否有相同的executable字段(或library字段)来最后确定多个进程运行着相同执行文件的
// 情况.参数inode是欲进行共享页面进程执行文件的内存i节点.address是进程中的逻辑地址,即当前进程欲与p进程共享页面的逻辑页面地址.返
// 回1 - 共享操作成功,0 - 失败.
static int share_page(struct m_inode * inode, unsigned long address)
{
    c5c0:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** p;

	// 首先检查一下参数指定的内存i节点引用计数值.如果该内存i节点的引用计数值等于1(executalbe->i_count=1)或者i节点指针空,表示当前系
	// 统中只有1个进程在运行该执行文件或者提供的i节点无效.因此无共享可言,直接退出函数.
	if (inode->i_count < 2 || !inode)
    c5c3:	8b 44 24 20          	mov    0x20(%esp),%eax
    c5c7:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    c5cb:	66 83 f8 01          	cmp    $0x1,%ax
    c5cf:	76 07                	jbe    c5d8 <share_page+0x18>
    c5d1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c5d6:	75 0a                	jne    c5e2 <share_page+0x22>
		return 0;
    c5d8:	b8 00 00 00 00       	mov    $0x0,%eax
    c5dd:	e9 8f 00 00 00       	jmp    c671 <share_page+0xb1>
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c5e2:	c7 44 24 0c bc f2 02 	movl   $0x2f2bc,0xc(%esp)
    c5e9:	00 
    c5ea:	eb 76                	jmp    c662 <share_page+0xa2>
		if (!*p)								// 如果该任务项空闲,则继续寻找.
    c5ec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5f0:	8b 00                	mov    (%eax),%eax
    c5f2:	85 c0                	test   %eax,%eax
    c5f4:	74 60                	je     c656 <share_page+0x96>
			continue;
		if (current == *p)						// 如果是当前任务,也继续寻找.
    c5f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5fa:	8b 10                	mov    (%eax),%edx
    c5fc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c601:	39 c2                	cmp    %eax,%edx
    c603:	74 54                	je     c659 <share_page+0x99>
			continue;
		if (address < LIBRARY_OFFSET) {
    c605:	81 7c 24 24 ff ff bf 	cmpl   $0x3bfffff,0x24(%esp)
    c60c:	03 
    c60d:	77 14                	ja     c623 <share_page+0x63>
			if (inode != (*p)->executable)		// 进程执行文件i节点.
    c60f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c613:	8b 00                	mov    (%eax),%eax
    c615:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c61b:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c61f:	74 14                	je     c635 <share_page+0x75>
				continue;
    c621:	eb 3a                	jmp    c65d <share_page+0x9d>
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
    c623:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c627:	8b 00                	mov    (%eax),%eax
    c629:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c62f:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c633:	75 27                	jne    c65c <share_page+0x9c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
    c635:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c639:	8b 00                	mov    (%eax),%eax
    c63b:	83 ec 08             	sub    $0x8,%esp
    c63e:	50                   	push   %eax
    c63f:	ff 74 24 30          	pushl  0x30(%esp)
    c643:	e8 e1 fd ff ff       	call   c429 <try_to_share>
    c648:	83 c4 10             	add    $0x10,%esp
    c64b:	85 c0                	test   %eax,%eax
    c64d:	74 0e                	je     c65d <share_page+0x9d>
			return 1;
    c64f:	b8 01 00 00 00       	mov    $0x1,%eax
    c654:	eb 1b                	jmp    c671 <share_page+0xb1>
			continue;
    c656:	90                   	nop
    c657:	eb 04                	jmp    c65d <share_page+0x9d>
			continue;
    c659:	90                   	nop
    c65a:	eb 01                	jmp    c65d <share_page+0x9d>
				continue;
    c65c:	90                   	nop
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c65d:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    c662:	81 7c 24 0c c0 f1 02 	cmpl   $0x2f1c0,0xc(%esp)
    c669:	00 
    c66a:	77 80                	ja     c5ec <share_page+0x2c>
	}
	return 0;
    c66c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c671:	83 c4 1c             	add    $0x1c,%esp
    c674:	c3                   	ret    

0000c675 <do_no_page>:
// 是访问不存在页面处理函数.页异常中断处理过程中调用的函数.在page.s程序中被调用.函数参数error_code和address是进程在访问页面时由CPU因
// 缺页产生异常而自动生成.error_code指出出错类型;address产生异常的页面线性地址.
// 该函数首先查看所缺页是否在交换设备中,若是则交换进来.否则尝试与已加载的相同文件进行页面共享,或者只是由于进程动态申请内存页面而只需映射一页
// 物理内存页即可.若共享操作不成功,那么只能从相应文件中读入所缺的数据页面到指定线性地址处.
void do_no_page(unsigned long error_code, unsigned long address)
{
    c675:	83 ec 3c             	sub    $0x3c,%esp
	struct m_inode * inode;

	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置在内核
	// 或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address-当前进程代码起始地址)大于一个进程的长度(64MB),表示
	// address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出
	if (address < TASK_SIZE)
    c678:	81 7c 24 44 ff ff ff 	cmpl   $0x3ffffff,0x44(%esp)
    c67f:	03 
    c680:	77 10                	ja     c692 <do_no_page+0x1d>
		printk("\n\rBAD!! KERNEL PAGE MISSING\n\r");
    c682:	83 ec 0c             	sub    $0xc,%esp
    c685:	68 51 35 02 00       	push   $0x23551
    c68a:	e8 b7 c5 ff ff       	call   8c46 <printk>
    c68f:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c692:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c697:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c69d:	8b 54 24 44          	mov    0x44(%esp),%edx
    c6a1:	29 c2                	sub    %eax,%edx
    c6a3:	89 d0                	mov    %edx,%eax
    c6a5:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c6aa:	76 1d                	jbe    c6c9 <do_no_page+0x54>
		printk("Bad things happen: nonexistent page error in do_no_page\n\r");
    c6ac:	83 ec 0c             	sub    $0xc,%esp
    c6af:	68 70 35 02 00       	push   $0x23570
    c6b4:	e8 8d c5 ff ff       	call   8c46 <printk>
    c6b9:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c6bc:	83 ec 0c             	sub    $0xc,%esp
    c6bf:	6a 0b                	push   $0xb
    c6c1:	e8 04 e7 ff ff       	call   adca <do_exit>
    c6c6:	83 c4 10             	add    $0x10,%esp
	}
	// 然后根据指定的线性地址address求出其对应的二级页表项指针,并根据该页表项内容判断address处的页面是否在交换设备中.若是则调入页面并退出.方法是首先
	// 取指定线性地址address对应的目录项内容.如果对应的二级页表存在,则取出该目录项中二级页表的地址,加上页表项偏移值即得到线性地址address处页面对应的
	// 页表项指针,从而获得页表项内容.若页表内容不为0并且页表项存在位P=0,则说明该页表项指定的物理页面应该在交换设备中.于是从交换设备中调入指定页面后退出函数.
	page = *(unsigned long *) ((address >> 20) & 0xffc);				// 取目录项内容.
    c6c9:	8b 44 24 44          	mov    0x44(%esp),%eax
    c6cd:	c1 e8 14             	shr    $0x14,%eax
    c6d0:	25 fc 0f 00 00       	and    $0xffc,%eax
    c6d5:	8b 00                	mov    (%eax),%eax
    c6d7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (page & 1) {
    c6db:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6df:	83 e0 01             	and    $0x1,%eax
    c6e2:	85 c0                	test   %eax,%eax
    c6e4:	74 49                	je     c72f <do_no_page+0xba>
		page &= 0xfffff000;												// 二级页表地址.
    c6e6:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c6ed:	ff 
		page += (address >> 10) & 0xffc;								// 页表项指针.
    c6ee:	8b 44 24 44          	mov    0x44(%esp),%eax
    c6f2:	c1 e8 0a             	shr    $0xa,%eax
    c6f5:	25 fc 0f 00 00       	and    $0xffc,%eax
    c6fa:	01 44 24 1c          	add    %eax,0x1c(%esp)
		tmp = *(unsigned long *) page;									// 页表项内容.
    c6fe:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c702:	8b 00                	mov    (%eax),%eax
    c704:	89 44 24 2c          	mov    %eax,0x2c(%esp)
		if (tmp && !(1 & tmp)) {
    c708:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
    c70d:	74 20                	je     c72f <do_no_page+0xba>
    c70f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c713:	83 e0 01             	and    $0x1,%eax
    c716:	85 c0                	test   %eax,%eax
    c718:	75 15                	jne    c72f <do_no_page+0xba>
			swap_in((unsigned long *) page);							// 从交换设备读页面.
    c71a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c71e:	83 ec 0c             	sub    $0xc,%esp
    c721:	50                   	push   %eax
    c722:	e8 31 06 00 00       	call   cd58 <swap_in>
    c727:	83 c4 10             	add    $0x10,%esp
			return;
    c72a:	e9 b9 01 00 00       	jmp    c8e8 <do_no_page+0x273>
		}
	}
	// 否则取线性空间中指定地址address处页面地址,并算出指定线性地址在进程空间中相对于进程基址的偏移长度值tmp,即对应的逻辑地址.从而可以算出缺页页面在执行文件映像
	// 中或在库文件中的具体起始数据块号.
	address &= 0xfffff000;												// address处缺页页面地址.
    c72f:	81 64 24 44 00 f0 ff 	andl   $0xfffff000,0x44(%esp)
    c736:	ff 
	tmp = address - current->start_code;								// 缺页页面对应逻辑地址.
    c737:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c73c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c742:	8b 54 24 44          	mov    0x44(%esp),%edx
    c746:	29 c2                	sub    %eax,%edx
    c748:	89 d0                	mov    %edx,%eax
    c74a:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	// 如果缺页对应的逻辑地址tmp大于库映像文件在进程逻辑空间中的起始位置,说明缺少的页面在库映像文件中.于是从当前进程任务数据结构中可以取得库映像文件的i节点library,
	// 并计算出该缺页在库文件中的起始数据块号block.
	// 因为设置上存放的执行文件映像第1块数据是程序头结构,因此在读取该文件时需要跳过第1块数据.所以需要首先计算缺页所在数据块号.因为每块数据长度为BLOCK_SIZE = 1KB,因此
	// 一页内存可存放4个数据块.进程逻辑地址tmp除以数据块大小再加1即可得出缺少的页面在执行映像文件中的起始块号block.
	if (tmp >= LIBRARY_OFFSET ) {
    c74e:	81 7c 24 2c ff ff bf 	cmpl   $0x3bfffff,0x2c(%esp)
    c755:	03 
    c756:	76 24                	jbe    c77c <do_no_page+0x107>
		inode = current->library;										// 库文件i节点和缺页起始块号.
    c758:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c75d:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c763:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + (tmp - LIBRARY_OFFSET) / BLOCK_SIZE;
    c767:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c76b:	2d 00 00 c0 03       	sub    $0x3c00000,%eax
    c770:	c1 e8 0a             	shr    $0xa,%eax
    c773:	83 c0 01             	add    $0x1,%eax
    c776:	89 44 24 28          	mov    %eax,0x28(%esp)
    c77a:	eb 40                	jmp    c7bc <do_no_page+0x147>
	// 如果缺页对应的逻辑地址tmp小于进程的执行映像文件在逻辑地址空间的末端位置,则说明缺少的页面在进程执行文件映像中,于是可
	// 以从当前进程任务数据机构中取得执行文件的i节点号executable,并计算出该缺页在执行文件映像中的起始数据块号block.若逻辑地址tmp既不在执行文件映像的地址范围内,
	} else if (tmp < current->end_data) {
    c77c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c781:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c787:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
    c78b:	73 1f                	jae    c7ac <do_no_page+0x137>
		inode = current->executable;									// 执行文件i节点和缺页起始块号.
    c78d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c792:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c798:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + tmp / BLOCK_SIZE;
    c79c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c7a0:	c1 e8 0a             	shr    $0xa,%eax
    c7a3:	83 c0 01             	add    $0x1,%eax
    c7a6:	89 44 24 28          	mov    %eax,0x28(%esp)
    c7aa:	eb 10                	jmp    c7bc <do_no_page+0x147>
	// 也不在库文件空间范围内,则说明缺页是进程访问动态申请的内存页面数据所致,因此没有对应i节点和数据块号(都置空).
	} else {
		inode = NULL;													// 是动态申请的数据或栈内存页面.
    c7ac:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
    c7b3:	00 
		block = 0;
    c7b4:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    c7bb:	00 
	}
	// 若是进程访问其动态申请的页面或为了存放栈信息而引起的缺页异常,则直接申请一页物理内存页面并映射到线性地址address处即可.
	if (!inode) {														// 是动态申请的数据内存页面.
    c7bc:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c7c1:	75 14                	jne    c7d7 <do_no_page+0x162>
		get_empty_page(address);
    c7c3:	83 ec 0c             	sub    $0xc,%esp
    c7c6:	ff 74 24 50          	pushl  0x50(%esp)
    c7ca:	e8 17 fc ff ff       	call   c3e6 <get_empty_page>
    c7cf:	83 c4 10             	add    $0x10,%esp
		return;
    c7d2:	e9 11 01 00 00       	jmp    c8e8 <do_no_page+0x273>
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
    c7d7:	83 ec 08             	sub    $0x8,%esp
    c7da:	ff 74 24 34          	pushl  0x34(%esp)
    c7de:	ff 74 24 2c          	pushl  0x2c(%esp)
    c7e2:	e8 d9 fd ff ff       	call   c5c0 <share_page>
    c7e7:	83 c4 10             	add    $0x10,%esp
    c7ea:	85 c0                	test   %eax,%eax
    c7ec:	0f 85 f2 00 00 00    	jne    c8e4 <do_no_page+0x26f>
		return;
	// 如果共享不成功就只能申请一页物理内存页面page,然后从设备上读取执行文件中的相应页面并放置(映射)到进程页面逻辑地址tmp处.
	if (!(page = get_free_page()))										// 申请一页物理内存.
    c7f2:	e8 6a 08 00 00       	call   d061 <get_free_page>
    c7f7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c7fb:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c800:	75 05                	jne    c807 <do_no_page+0x192>
		oom();
    c802:	e8 a6 f4 ff ff       	call   bcad <oom>
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c807:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c80e:	00 
    c80f:	eb 27                	jmp    c838 <do_no_page+0x1c3>
		nr[i] = bmap(inode, block);
    c811:	83 ec 08             	sub    $0x8,%esp
    c814:	ff 74 24 30          	pushl  0x30(%esp)
    c818:	ff 74 24 2c          	pushl  0x2c(%esp)
    c81c:	e8 63 1e 00 00       	call   e684 <bmap>
    c821:	83 c4 10             	add    $0x10,%esp
    c824:	89 c2                	mov    %eax,%edx
    c826:	8b 44 24 24          	mov    0x24(%esp),%eax
    c82a:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
	for (i = 0 ; i < 4 ; block++, i++)
    c82e:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    c833:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
    c838:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
    c83d:	7e d2                	jle    c811 <do_no_page+0x19c>
	bread_page(page, inode->i_dev, nr);
    c83f:	8b 44 24 20          	mov    0x20(%esp),%eax
    c843:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    c847:	0f b7 c0             	movzwl %ax,%eax
    c84a:	83 ec 04             	sub    $0x4,%esp
    c84d:	8d 54 24 10          	lea    0x10(%esp),%edx
    c851:	52                   	push   %edx
    c852:	50                   	push   %eax
    c853:	ff 74 24 28          	pushl  0x28(%esp)
    c857:	e8 d4 2e 00 00       	call   f730 <bread_page>
    c85c:	83 c4 10             	add    $0x10,%esp
	// 在读设备逻辑块操作时,可能会出现这样一种情况,即在执行文件中的读取页面位置可能离文件尾不到1个页面的长度.因此就可能读入一些无用
	// 的信息.下面的操作就是把这部分超出执行文件end_data以后的部分进行清零处理.当然,若该页面离末端超过1页,说明不是从执行文件映像中
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
    c85f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    c864:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c86a:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    c86e:	29 c2                	sub    %eax,%edx
    c870:	89 d0                	mov    %edx,%eax
    c872:	05 00 10 00 00       	add    $0x1000,%eax
    c877:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (i > 4095)														// 离末端超过1页则不用清零.
    c87b:	81 7c 24 24 ff 0f 00 	cmpl   $0xfff,0x24(%esp)
    c882:	00 
    c883:	7e 08                	jle    c88d <do_no_page+0x218>
		i = 0;
    c885:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c88c:	00 
	tmp = page + 4096;
    c88d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c891:	05 00 10 00 00       	add    $0x1000,%eax
    c896:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	while (i-- > 0) {
    c89a:	eb 0c                	jmp    c8a8 <do_no_page+0x233>
		tmp--;															// tmp指向页面末端.
    c89c:	83 6c 24 2c 01       	subl   $0x1,0x2c(%esp)
		*(char *)tmp = 0;       										// 页面末端i字节清零.
    c8a1:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c8a5:	c6 00 00             	movb   $0x0,(%eax)
	while (i-- > 0) {
    c8a8:	8b 44 24 24          	mov    0x24(%esp),%eax
    c8ac:	8d 50 ff             	lea    -0x1(%eax),%edx
    c8af:	89 54 24 24          	mov    %edx,0x24(%esp)
    c8b3:	85 c0                	test   %eax,%eax
    c8b5:	7f e5                	jg     c89c <do_no_page+0x227>
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
    c8b7:	83 ec 08             	sub    $0x8,%esp
    c8ba:	ff 74 24 4c          	pushl  0x4c(%esp)
    c8be:	ff 74 24 28          	pushl  0x28(%esp)
    c8c2:	e8 ac f7 ff ff       	call   c073 <put_page>
    c8c7:	83 c4 10             	add    $0x10,%esp
    c8ca:	85 c0                	test   %eax,%eax
    c8cc:	75 19                	jne    c8e7 <do_no_page+0x272>
		return;
	free_page(page);
    c8ce:	83 ec 0c             	sub    $0xc,%esp
    c8d1:	ff 74 24 28          	pushl  0x28(%esp)
    c8d5:	e8 f8 f3 ff ff       	call   bcd2 <free_page>
    c8da:	83 c4 10             	add    $0x10,%esp
	oom();
    c8dd:	e8 cb f3 ff ff       	call   bcad <oom>
    c8e2:	eb 04                	jmp    c8e8 <do_no_page+0x273>
		return;
    c8e4:	90                   	nop
    c8e5:	eb 01                	jmp    c8e8 <do_no_page+0x273>
		return;
    c8e7:	90                   	nop
}
    c8e8:	83 c4 3c             	add    $0x3c,%esp
    c8eb:	c3                   	ret    

0000c8ec <mem_init>:
// 不用.对于具有16MB内存的PC系统,在没有设置虚拟盘RAMDISK的情况下,共有3072个物理页面可供分配.而范围0~1MB内存空间用于内核系统(其实内核
// 只使用0~640KB,剩下的部分被部分高速缓冲和设备内存占用).
// 参数start_mem是可用作页面分配的主内存区起始地址(已去除RAMDISK所占内存空间).end_mem是实际物理内存最大地址.而地址范围start_mem到
// end_mem是主内存区.
void mem_init(long start_mem, long end_mem)
{
    c8ec:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
    c8ef:	8b 44 24 18          	mov    0x18(%esp),%eax
    c8f3:	a3 80 02 03 00       	mov    %eax,0x30280
	for (i = 0; i < PAGING_PAGES; i++)
    c8f8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c8ff:	00 
    c900:	eb 11                	jmp    c913 <mem_init+0x27>
		mem_map[i] = USED;
    c902:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c906:	05 a0 02 03 00       	add    $0x302a0,%eax
    c90b:	c6 00 64             	movb   $0x64,(%eax)
	for (i = 0; i < PAGING_PAGES; i++)
    c90e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    c913:	81 7c 24 0c ff 0e 00 	cmpl   $0xeff,0xc(%esp)
    c91a:	00 
    c91b:	7e e5                	jle    c902 <mem_init+0x16>
	// 然后计算主内存区起始内存start_mem处页面对应内存映射字节数组中项号i和主内存区页面数.此时mem_map[]数组的第i项正对应主内存区中第1个页面.
	// 最后将主内存区中页面对应的数组项清零(表示空闲).对于具有16MB物理内存的系统,mem_map[]中对应4MB~16MB主内存区的项被清零.
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
    c91d:	8b 44 24 14          	mov    0x14(%esp),%eax
    c921:	2d 00 00 10 00       	sub    $0x100000,%eax
    c926:	c1 f8 0c             	sar    $0xc,%eax
    c929:	89 44 24 0c          	mov    %eax,0xc(%esp)
	end_mem -= start_mem;
    c92d:	8b 44 24 14          	mov    0x14(%esp),%eax
    c931:	29 44 24 18          	sub    %eax,0x18(%esp)
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
    c935:	c1 7c 24 18 0c       	sarl   $0xc,0x18(%esp)
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c93a:	eb 12                	jmp    c94e <mem_init+0x62>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
    c93c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c940:	8d 50 01             	lea    0x1(%eax),%edx
    c943:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c947:	c6 80 a0 02 03 00 00 	movb   $0x0,0x302a0(%eax)
	while (end_mem-- > 0)
    c94e:	8b 44 24 18          	mov    0x18(%esp),%eax
    c952:	8d 50 ff             	lea    -0x1(%eax),%edx
    c955:	89 54 24 18          	mov    %edx,0x18(%esp)
    c959:	85 c0                	test   %eax,%eax
    c95b:	7f df                	jg     c93c <mem_init+0x50>
}
    c95d:	90                   	nop
    c95e:	83 c4 10             	add    $0x10,%esp
    c961:	c3                   	ret    

0000c962 <show_mem>:
// 显示系统内存信息.
// 根据内存映射字节数组mem_map[]中的信息以及页目录和页表内容统计系统中使用的内存页面数和主内存区中总物理内存页面数.该函数在chr_drv/keyboard.S程序
// 被调用.
// 即当按下"Shift + Scroll Lock"组合键时会显示系统内存统计信息.
void show_mem(void)
{
    c962:	83 ec 2c             	sub    $0x2c,%esp
	int i, j, k, free = 0, total = 0;
    c965:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    c96c:	00 
    c96d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c974:	00 
	int shared = 0;
    c975:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    c97c:	00 
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
    c97d:	83 ec 0c             	sub    $0xc,%esp
    c980:	68 aa 35 02 00       	push   $0x235aa
    c985:	e8 bc c2 ff ff       	call   8c46 <printk>
    c98a:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c98d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    c994:	00 
    c995:	eb 4a                	jmp    c9e1 <show_mem+0x7f>
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
    c997:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c99b:	05 a0 02 03 00       	add    $0x302a0,%eax
    c9a0:	0f b6 00             	movzbl (%eax),%eax
    c9a3:	3c 64                	cmp    $0x64,%al
    c9a5:	74 34                	je     c9db <show_mem+0x79>
			continue;
		// 统计主内存中的页面数
		total++;
    c9a7:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if (!mem_map[i])
    c9ac:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9b0:	05 a0 02 03 00       	add    $0x302a0,%eax
    c9b5:	0f b6 00             	movzbl (%eax),%eax
    c9b8:	84 c0                	test   %al,%al
    c9ba:	75 07                	jne    c9c3 <show_mem+0x61>
			// 统计未使用的主内存页面数
			free++;											// 主内存区空闲页面统计.
    c9bc:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    c9c1:	eb 19                	jmp    c9dc <show_mem+0x7a>
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
    c9c3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9c7:	05 a0 02 03 00       	add    $0x302a0,%eax
    c9cc:	0f b6 00             	movzbl (%eax),%eax
    c9cf:	0f b6 c0             	movzbl %al,%eax
    c9d2:	83 e8 01             	sub    $0x1,%eax
    c9d5:	01 44 24 08          	add    %eax,0x8(%esp)
    c9d9:	eb 01                	jmp    c9dc <show_mem+0x7a>
			continue;
    c9db:	90                   	nop
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c9dc:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    c9e1:	81 7c 24 1c ff 0e 00 	cmpl   $0xeff,0x1c(%esp)
    c9e8:	00 
    c9e9:	7e ac                	jle    c997 <show_mem+0x35>
	}
	printk("%d free pages of %d\n\r", free, total);
    c9eb:	83 ec 04             	sub    $0x4,%esp
    c9ee:	ff 74 24 10          	pushl  0x10(%esp)
    c9f2:	ff 74 24 18          	pushl  0x18(%esp)
    c9f6:	68 b6 35 02 00       	push   $0x235b6
    c9fb:	e8 46 c2 ff ff       	call   8c46 <printk>
    ca00:	83 c4 10             	add    $0x10,%esp
	printk("%d pages shared\n\r", shared);
    ca03:	83 ec 08             	sub    $0x8,%esp
    ca06:	ff 74 24 10          	pushl  0x10(%esp)
    ca0a:	68 cc 35 02 00       	push   $0x235cc
    ca0f:	e8 32 c2 ff ff       	call   8c46 <printk>
    ca14:	83 c4 10             	add    $0x10,%esp
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
    ca17:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    ca1e:	00 
	for(i = 4 ; i < 1024 ;) {
    ca1f:	c7 44 24 1c 04 00 00 	movl   $0x4,0x1c(%esp)
    ca26:	00 
    ca27:	e9 6c 01 00 00       	jmp    cb98 <show_mem+0x236>
		if (1 & pg_dir[i]) {
    ca2c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca30:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca37:	83 e0 01             	and    $0x1,%eax
    ca3a:	85 c0                	test   %eax,%eax
    ca3c:	0f 84 0e 01 00 00    	je     cb50 <show_mem+0x1ee>
			// (如果页目录项对应二级页表地址大于机器最高物理内存地址HIGH_MEMORY,说明该目录项有问题.于是显示该目录项信息并继续处理下一个目录项.
			if (pg_dir[i] > HIGH_MEMORY) {					// 目录项内容不正常.
    ca42:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca46:	8b 14 85 00 00 00 00 	mov    0x0(,%eax,4),%edx
    ca4d:	a1 80 02 03 00       	mov    0x30280,%eax
    ca52:	39 c2                	cmp    %eax,%edx
    ca54:	76 25                	jbe    ca7b <show_mem+0x119>
				printk("page directory[%d]: %08X\n\r",
    ca56:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca5a:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca61:	83 ec 04             	sub    $0x4,%esp
    ca64:	50                   	push   %eax
    ca65:	ff 74 24 24          	pushl  0x24(%esp)
    ca69:	68 de 35 02 00       	push   $0x235de
    ca6e:	e8 d3 c1 ff ff       	call   8c46 <printk>
    ca73:	83 c4 10             	add    $0x10,%esp
					i, pg_dir[i]);
				continue;
    ca76:	e9 1d 01 00 00       	jmp    cb98 <show_mem+0x236>
			}
			// 如果页目录项对应二级页表的"地址"大于LOW_MEM(即1MB),则把一个进程占用的物理内存页统计值k增1,把系统占用的所有物理内存页统计值free增1.
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
    ca7b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca7f:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca86:	3d 00 00 10 00       	cmp    $0x100000,%eax
    ca8b:	76 0a                	jbe    ca97 <show_mem+0x135>
				free++, k++;								// 统计页表占用页面.
    ca8d:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    ca92:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
    ca97:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca9b:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    caa2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    caa7:	89 44 24 04          	mov    %eax,0x4(%esp)
			for(j = 0 ; j < 1024 ; j++)
    caab:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    cab2:	00 
    cab3:	e9 8a 00 00 00       	jmp    cb42 <show_mem+0x1e0>
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
    cab8:	8b 44 24 18          	mov    0x18(%esp),%eax
    cabc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cac3:	8b 44 24 04          	mov    0x4(%esp),%eax
    cac7:	01 d0                	add    %edx,%eax
    cac9:	8b 00                	mov    (%eax),%eax
    cacb:	83 e0 01             	and    $0x1,%eax
    cace:	85 c0                	test   %eax,%eax
    cad0:	74 6b                	je     cb3d <show_mem+0x1db>
    cad2:	8b 44 24 18          	mov    0x18(%esp),%eax
    cad6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cadd:	8b 44 24 04          	mov    0x4(%esp),%eax
    cae1:	01 d0                	add    %edx,%eax
    cae3:	8b 00                	mov    (%eax),%eax
    cae5:	3d 00 00 10 00       	cmp    $0x100000,%eax
    caea:	76 51                	jbe    cb3d <show_mem+0x1db>
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
    caec:	8b 44 24 18          	mov    0x18(%esp),%eax
    caf0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    caf7:	8b 44 24 04          	mov    0x4(%esp),%eax
    cafb:	01 d0                	add    %edx,%eax
    cafd:	8b 10                	mov    (%eax),%edx
    caff:	a1 80 02 03 00       	mov    0x30280,%eax
    cb04:	39 c2                	cmp    %eax,%edx
    cb06:	76 2b                	jbe    cb33 <show_mem+0x1d1>
						printk("page_dir[%d][%d]: %08X\n\r",
							i, j, pg_tbl[j]);
    cb08:	8b 44 24 18          	mov    0x18(%esp),%eax
    cb0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cb13:	8b 44 24 04          	mov    0x4(%esp),%eax
    cb17:	01 d0                	add    %edx,%eax
						printk("page_dir[%d][%d]: %08X\n\r",
    cb19:	8b 00                	mov    (%eax),%eax
    cb1b:	50                   	push   %eax
    cb1c:	ff 74 24 1c          	pushl  0x1c(%esp)
    cb20:	ff 74 24 24          	pushl  0x24(%esp)
    cb24:	68 f9 35 02 00       	push   $0x235f9
    cb29:	e8 18 c1 ff ff       	call   8c46 <printk>
    cb2e:	83 c4 10             	add    $0x10,%esp
    cb31:	eb 0a                	jmp    cb3d <show_mem+0x1db>
					else
						k++, free++;						// 统计责表项对应页面.
    cb33:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb38:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			for(j = 0 ; j < 1024 ; j++)
    cb3d:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    cb42:	81 7c 24 18 ff 03 00 	cmpl   $0x3ff,0x18(%esp)
    cb49:	00 
    cb4a:	0f 8e 68 ff ff ff    	jle    cab8 <show_mem+0x156>
		}
		// 因每个任务线性空间长度是64MB,所以一个任务占用16个目录项.因此这每统计了16个目录项就把进程的任务结构占用的页表统计进来.若此时k=0则表示当前的16个页
		// 目录所对应的进程在系统中不存在(没有创建或者已经终止).在显示了对应进程号和其占用的物理内存页统计值k后,将k清零,以用于统计下一个进程占用的内存页面数.
		i++;
    cb50:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!(i & 15) && k) {
    cb55:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb59:	83 e0 0f             	and    $0xf,%eax
    cb5c:	85 c0                	test   %eax,%eax
    cb5e:	75 38                	jne    cb98 <show_mem+0x236>
    cb60:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    cb65:	74 31                	je     cb98 <show_mem+0x236>
			k++, free++;									/* one page/process for task_struct */
    cb67:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb6c:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
    cb71:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb75:	c1 f8 04             	sar    $0x4,%eax
    cb78:	83 e8 01             	sub    $0x1,%eax
    cb7b:	83 ec 04             	sub    $0x4,%esp
    cb7e:	ff 74 24 18          	pushl  0x18(%esp)
    cb82:	50                   	push   %eax
    cb83:	68 12 36 02 00       	push   $0x23612
    cb88:	e8 b9 c0 ff ff       	call   8c46 <printk>
    cb8d:	83 c4 10             	add    $0x10,%esp
			k = 0;
    cb90:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    cb97:	00 
	for(i = 4 ; i < 1024 ;) {
    cb98:	81 7c 24 1c ff 03 00 	cmpl   $0x3ff,0x1c(%esp)
    cb9f:	00 
    cba0:	0f 8e 86 fe ff ff    	jle    ca2c <show_mem+0xca>
		}
	}
	// 最后显示系统中正在使用的内存页面和主内存区中总的内存页面数.
	printk("Memory found: %d (%d)\n\r\n\r", free - shared, total);
    cba6:	8b 44 24 10          	mov    0x10(%esp),%eax
    cbaa:	2b 44 24 08          	sub    0x8(%esp),%eax
    cbae:	83 ec 04             	sub    $0x4,%esp
    cbb1:	ff 74 24 10          	pushl  0x10(%esp)
    cbb5:	50                   	push   %eax
    cbb6:	68 29 36 02 00       	push   $0x23629
    cbbb:	e8 86 c0 ff ff       	call   8c46 <printk>
    cbc0:	83 c4 10             	add    $0x10,%esp
}
    cbc3:	90                   	nop
    cbc4:	83 c4 2c             	add    $0x2c,%esp
    cbc7:	c3                   	ret    

0000cbc8 <strncmp>:
// 字符串与字符串2的前count个字符进行比较.
// 参数:cs - 字符串1,ct - 字符串2,count - 比较的字符数.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针,%3 - ecx(count).
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strncmp(const char * cs, const char * ct, int count)
{
    cbc8:	57                   	push   %edi
    cbc9:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
    cbca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cbce:	8b 54 24 10          	mov    0x10(%esp),%edx
    cbd2:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cbd6:	89 c7                	mov    %eax,%edi
    cbd8:	89 d6                	mov    %edx,%esi
    cbda:	fc                   	cld    
    cbdb:	49                   	dec    %ecx
    cbdc:	78 08                	js     cbe6 <strncmp+0x1e>
    cbde:	ac                   	lods   %ds:(%esi),%al
    cbdf:	ae                   	scas   %es:(%edi),%al
    cbe0:	75 08                	jne    cbea <strncmp+0x22>
    cbe2:	84 c0                	test   %al,%al
    cbe4:	75 f5                	jne    cbdb <strncmp+0x13>
    cbe6:	31 c0                	xor    %eax,%eax
    cbe8:	eb 09                	jmp    cbf3 <strncmp+0x2b>
    cbea:	b8 01 00 00 00       	mov    $0x1,%eax
    cbef:	7c 02                	jl     cbf3 <strncmp+0x2b>
    cbf1:	f7 d8                	neg    %eax
	"jl 4f\n\t"												// 如果前面比较中串2字符<串1字符,则返回1结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"4:"
	:"=a" (__res):"D" (cs), "S" (ct), "c" (count):);
return __res;												// 返回比较结果.
}
    cbf3:	5e                   	pop    %esi
    cbf4:	5f                   	pop    %edi
    cbf5:	c3                   	ret    

0000cbf6 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    cbf6:	57                   	push   %edi
    cbf7:	83 ec 04             	sub    $0x4,%esp
    cbfa:	8b 44 24 10          	mov    0x10(%esp),%eax
    cbfe:	88 04 24             	mov    %al,(%esp)
__asm__(
    cc01:	0f b6 04 24          	movzbl (%esp),%eax
    cc05:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cc09:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc0d:	89 d7                	mov    %edx,%edi
    cc0f:	fc                   	cld    
    cc10:	57                   	push   %edi
    cc11:	f3 aa                	rep stos %al,%es:(%edi)
    cc13:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    cc14:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    cc18:	83 c4 04             	add    $0x4,%esp
    cc1b:	5f                   	pop    %edi
    cc1c:	c3                   	ret    

0000cc1d <oom>:
{
    cc1d:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    cc20:	83 ec 0c             	sub    $0xc,%esp
    cc23:	68 44 36 02 00       	push   $0x23644
    cc28:	e8 19 c0 ff ff       	call   8c46 <printk>
    cc2d:	83 c4 10             	add    $0x10,%esp
	do_exit(SIGSEGV);
    cc30:	83 ec 0c             	sub    $0xc,%esp
    cc33:	6a 0b                	push   $0xb
    cc35:	e8 90 e1 ff ff       	call   adca <do_exit>
    cc3a:	83 c4 10             	add    $0x10,%esp
}
    cc3d:	90                   	nop
    cc3e:	83 c4 0c             	add    $0xc,%esp
    cc41:	c3                   	ret    

0000cc42 <bit>:
:"r" (nr),"m" (*(addr)),"0" (0)); \
return __res; \
}

// 这里根据不同的op字符定义3个内嵌函数.
bitop(bit, "")								// 定义内嵌函数bit(char * addr, unsigned int nr).
    cc42:	83 ec 10             	sub    $0x10,%esp
    cc45:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc49:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc4d:	b8 00 00 00 00       	mov    $0x0,%eax
    cc52:	b8 00 00 00 00       	mov    $0x0,%eax
    cc57:	0f a3 11             	bt     %edx,(%ecx)
    cc5a:	83 d0 00             	adc    $0x0,%eax
    cc5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc61:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc65:	83 c4 10             	add    $0x10,%esp
    cc68:	c3                   	ret    

0000cc69 <setbit>:
bitop(setbit, "s")							// 定义内嵌函数setbit(char * addr, unsigned int nr).
    cc69:	83 ec 10             	sub    $0x10,%esp
    cc6c:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc70:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc74:	b8 00 00 00 00       	mov    $0x0,%eax
    cc79:	b8 00 00 00 00       	mov    $0x0,%eax
    cc7e:	0f ab 11             	bts    %edx,(%ecx)
    cc81:	83 d0 00             	adc    $0x0,%eax
    cc84:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc88:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc8c:	83 c4 10             	add    $0x10,%esp
    cc8f:	c3                   	ret    

0000cc90 <clrbit>:
bitop(clrbit, "r")							// 定义内嵌函数clrbit(char * addr, unsigned int nr).
    cc90:	83 ec 10             	sub    $0x10,%esp
    cc93:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc97:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc9b:	b8 00 00 00 00       	mov    $0x0,%eax
    cca0:	b8 00 00 00 00       	mov    $0x0,%eax
    cca5:	0f b3 11             	btr    %edx,(%ecx)
    cca8:	83 d0 00             	adc    $0x0,%eax
    ccab:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ccaf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ccb3:	83 c4 10             	add    $0x10,%esp
    ccb6:	c3                   	ret    

0000ccb7 <get_swap_page>:
#define VM_PAGES (LAST_VM_PAGE - FIRST_VM_PAGE)					// = 1032192(从0开始计)(用总的页面数减去第0个任务的页面数)

// 申请1页交换页面.
// 扫描整个交换映射位图(除对应位图本身的位0以外),返回值为1的第一个比特位号,即目前空闲的交换页面号.若操作成功则返回交换页面号,否则返回0.
static int get_swap_page(void)
{
    ccb7:	83 ec 10             	sub    $0x10,%esp
	int nr;

	if (!swap_bitmap)
    ccba:	a1 a4 11 03 00       	mov    0x311a4,%eax
    ccbf:	85 c0                	test   %eax,%eax
    ccc1:	75 07                	jne    ccca <get_swap_page+0x13>
		return 0;
    ccc3:	b8 00 00 00 00       	mov    $0x0,%eax
    ccc8:	eb 3b                	jmp    cd05 <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    ccca:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    ccd1:	00 
    ccd2:	eb 22                	jmp    ccf6 <get_swap_page+0x3f>
		if (clrbit(swap_bitmap, nr))
    ccd4:	8b 54 24 0c          	mov    0xc(%esp),%edx
    ccd8:	a1 a4 11 03 00       	mov    0x311a4,%eax
    ccdd:	52                   	push   %edx
    ccde:	50                   	push   %eax
    ccdf:	e8 ac ff ff ff       	call   cc90 <clrbit>
    cce4:	83 c4 08             	add    $0x8,%esp
    cce7:	85 c0                	test   %eax,%eax
    cce9:	74 06                	je     ccf1 <get_swap_page+0x3a>
			return nr;					// 返回目前空闲的交换页面号.
    cceb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ccef:	eb 14                	jmp    cd05 <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    ccf1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ccf6:	81 7c 24 0c ff 7f 00 	cmpl   $0x7fff,0xc(%esp)
    ccfd:	00 
    ccfe:	7e d4                	jle    ccd4 <get_swap_page+0x1d>
	return 0;
    cd00:	b8 00 00 00 00       	mov    $0x0,%eax
}
    cd05:	83 c4 10             	add    $0x10,%esp
    cd08:	c3                   	ret    

0000cd09 <swap_free>:

// 释放交换设备中指定的交换页面.
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
    cd09:	83 ec 0c             	sub    $0xc,%esp
	if (!swap_nr)
    cd0c:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    cd11:	74 3d                	je     cd50 <swap_free+0x47>
		return;
	if (swap_bitmap && swap_nr < SWAP_BITS)
    cd13:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cd18:	85 c0                	test   %eax,%eax
    cd1a:	74 21                	je     cd3d <swap_free+0x34>
    cd1c:	81 7c 24 10 ff 7f 00 	cmpl   $0x7fff,0x10(%esp)
    cd23:	00 
    cd24:	7f 17                	jg     cd3d <swap_free+0x34>
		if (!setbit(swap_bitmap, swap_nr))
    cd26:	8b 54 24 10          	mov    0x10(%esp),%edx
    cd2a:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cd2f:	52                   	push   %edx
    cd30:	50                   	push   %eax
    cd31:	e8 33 ff ff ff       	call   cc69 <setbit>
    cd36:	83 c4 08             	add    $0x8,%esp
    cd39:	85 c0                	test   %eax,%eax
    cd3b:	74 16                	je     cd53 <swap_free+0x4a>
			return;
	printk("Swap-space bad (swap_free())\n\r");
    cd3d:	83 ec 0c             	sub    $0xc,%esp
    cd40:	68 54 36 02 00       	push   $0x23654
    cd45:	e8 fc be ff ff       	call   8c46 <printk>
    cd4a:	83 c4 10             	add    $0x10,%esp
	return;
    cd4d:	90                   	nop
    cd4e:	eb 04                	jmp    cd54 <swap_free+0x4b>
		return;
    cd50:	90                   	nop
    cd51:	eb 01                	jmp    cd54 <swap_free+0x4b>
			return;
    cd53:	90                   	nop
}
    cd54:	83 c4 0c             	add    $0xc,%esp
    cd57:	c3                   	ret    

0000cd58 <swap_in>:

// 把指定页面交换进内存中
// 把指定页表项的对应页面从交换设备中读入到新申请的内存页面中.修改交换位图中对应位(置位),同时修改页表项内容,让它指向该内存页面,并设置相应标志.
void swap_in(unsigned long *table_ptr)
{
    cd58:	83 ec 1c             	sub    $0x1c,%esp
	int swap_nr;
	unsigned long page;

	// 首先检查交换位图和参数有效性.如果交换位图不存在,或者指定页表项对应的页面已存在于内存中,或者交换页面号为0,则显示警告信息并退出.对于已放到交换
	// 设备中去的内存页面,相应页表项中存放的应是交换页面号*2,即(swap_nr << 1).
	if (!swap_bitmap) {
    cd5b:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cd60:	85 c0                	test   %eax,%eax
    cd62:	75 15                	jne    cd79 <swap_in+0x21>
		printk("Trying to swap in without swap bit-map");
    cd64:	83 ec 0c             	sub    $0xc,%esp
    cd67:	68 74 36 02 00       	push   $0x23674
    cd6c:	e8 d5 be ff ff       	call   8c46 <printk>
    cd71:	83 c4 10             	add    $0x10,%esp
		return;
    cd74:	e9 ae 00 00 00       	jmp    ce27 <swap_in+0xcf>
	}
	if (1 & *table_ptr) {
    cd79:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd7d:	8b 00                	mov    (%eax),%eax
    cd7f:	83 e0 01             	and    $0x1,%eax
    cd82:	85 c0                	test   %eax,%eax
    cd84:	74 15                	je     cd9b <swap_in+0x43>
		printk("trying to swap in present page\n\r");
    cd86:	83 ec 0c             	sub    $0xc,%esp
    cd89:	68 9c 36 02 00       	push   $0x2369c
    cd8e:	e8 b3 be ff ff       	call   8c46 <printk>
    cd93:	83 c4 10             	add    $0x10,%esp
		return;
    cd96:	e9 8c 00 00 00       	jmp    ce27 <swap_in+0xcf>
	}
	swap_nr = *table_ptr >> 1;
    cd9b:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd9f:	8b 00                	mov    (%eax),%eax
    cda1:	d1 e8                	shr    %eax
    cda3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_nr) {
    cda7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cdac:	75 12                	jne    cdc0 <swap_in+0x68>
		printk("No swap page in swap_in\n\r");
    cdae:	83 ec 0c             	sub    $0xc,%esp
    cdb1:	68 bd 36 02 00       	push   $0x236bd
    cdb6:	e8 8b be ff ff       	call   8c46 <printk>
    cdbb:	83 c4 10             	add    $0x10,%esp
		return;
    cdbe:	eb 67                	jmp    ce27 <swap_in+0xcf>
	}
	// 然后申请一页物理内存并从交换设备中读入页面号为swap_nr的页面.在把页面交换进来后,就把交换位图中对应比特位置位.如果其原本就是置位的,说明此次是再次
	// 从交换设备中读入相同的页面,于是显示一下警告信息.最后让页表指向该物理页面,并设置页面已修改,用户可读写和存在标志(Dirty,U/S,R/W,P).
	if (!(page = get_free_page()))
    cdc0:	e8 9c 02 00 00       	call   d061 <get_free_page>
    cdc5:	89 44 24 08          	mov    %eax,0x8(%esp)
    cdc9:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    cdce:	75 05                	jne    cdd5 <swap_in+0x7d>
		oom();
    cdd0:	e8 48 fe ff ff       	call   cc1d <oom>
	read_swap_page(swap_nr, (char *) page);
    cdd5:	8b 54 24 08          	mov    0x8(%esp),%edx
    cdd9:	a1 a0 11 03 00       	mov    0x311a0,%eax
    cdde:	52                   	push   %edx
    cddf:	ff 74 24 10          	pushl  0x10(%esp)
    cde3:	50                   	push   %eax
    cde4:	6a 00                	push   $0x0
    cde6:	e8 72 9a 00 00       	call   1685d <ll_rw_page>
    cdeb:	83 c4 10             	add    $0x10,%esp
	if (setbit(swap_bitmap, swap_nr))
    cdee:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cdf2:	a1 a4 11 03 00       	mov    0x311a4,%eax
    cdf7:	83 ec 08             	sub    $0x8,%esp
    cdfa:	52                   	push   %edx
    cdfb:	50                   	push   %eax
    cdfc:	e8 68 fe ff ff       	call   cc69 <setbit>
    ce01:	83 c4 10             	add    $0x10,%esp
    ce04:	85 c0                	test   %eax,%eax
    ce06:	74 10                	je     ce18 <swap_in+0xc0>
		printk("swapping in multiply from same page\n\r");
    ce08:	83 ec 0c             	sub    $0xc,%esp
    ce0b:	68 d8 36 02 00       	push   $0x236d8
    ce10:	e8 31 be ff ff       	call   8c46 <printk>
    ce15:	83 c4 10             	add    $0x10,%esp
	*table_ptr = page | (PAGE_DIRTY | 7);
    ce18:	8b 44 24 08          	mov    0x8(%esp),%eax
    ce1c:	83 c8 47             	or     $0x47,%eax
    ce1f:	89 c2                	mov    %eax,%edx
    ce21:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce25:	89 10                	mov    %edx,(%eax)
}
    ce27:	83 c4 1c             	add    $0x1c,%esp
    ce2a:	c3                   	ret    

0000ce2b <try_to_swap_out>:

// 尝试把页面交换出去.
// 若页面没有被修改过则不必保存在交换设备中,因为对应页面还可以再直接从相应映像文件中读入.于是可以直接释放掉相应物理页面了事.否则就申请一个交换页面号,然后
// 把页面交换出去.此时交换页面号要保存在对应页表项中,并且仍需要保持页表项存在位P=0.参数是页表项指针.页面换或释放成功返回1,否则返回0.
int try_to_swap_out(unsigned long * table_ptr)
{
    ce2b:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long page;
	unsigned long swap_nr;

	// 首先判断参数的有效性.若需要交换出去的内存页面并不存在(或称无效),则即可退出.若页表项指定的物理页面地址大于分页管理的内存高端PAGING_MEMORY(15MB),
	// 也退出.
	page = *table_ptr;
    ce2e:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce32:	8b 00                	mov    (%eax),%eax
    ce34:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(PAGE_PRESENT & page))
    ce38:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce3c:	83 e0 01             	and    $0x1,%eax
    ce3f:	85 c0                	test   %eax,%eax
    ce41:	75 0a                	jne    ce4d <try_to_swap_out+0x22>
		return 0;
    ce43:	b8 00 00 00 00       	mov    $0x0,%eax
    ce48:	e9 d4 00 00 00       	jmp    cf21 <try_to_swap_out+0xf6>
	if (page - LOW_MEM > PAGING_MEMORY)
    ce4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce51:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce56:	3d 00 00 f0 00       	cmp    $0xf00000,%eax
    ce5b:	76 0a                	jbe    ce67 <try_to_swap_out+0x3c>
		return 0;
    ce5d:	b8 00 00 00 00       	mov    $0x0,%eax
    ce62:	e9 ba 00 00 00       	jmp    cf21 <try_to_swap_out+0xf6>
	// 若内存页面已被修改过,但是该页面是被共享的,那么为了提高运行效率,此类页面不宜被交换出去,于是直接退出,函数返回0.否则就申请一交换页面号,并把它保存在页表
	// 项中,然后把页面交换出去并释放对应物理内存页面.
	if (PAGE_DIRTY & page) {
    ce67:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce6b:	83 e0 40             	and    $0x40,%eax
    ce6e:	85 c0                	test   %eax,%eax
    ce70:	0f 84 85 00 00 00    	je     cefb <try_to_swap_out+0xd0>
		page &= 0xfffff000;									// 取物理页面地址.
    ce76:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    ce7d:	ff 
		if (mem_map[MAP_NR(page)] != 1)
    ce7e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce82:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce87:	c1 e8 0c             	shr    $0xc,%eax
    ce8a:	0f b6 80 a0 02 03 00 	movzbl 0x302a0(%eax),%eax
    ce91:	3c 01                	cmp    $0x1,%al
    ce93:	74 0a                	je     ce9f <try_to_swap_out+0x74>
			return 0;
    ce95:	b8 00 00 00 00       	mov    $0x0,%eax
    ce9a:	e9 82 00 00 00       	jmp    cf21 <try_to_swap_out+0xf6>
		if (!(swap_nr = get_swap_page()))					// 申请交换页面号.
    ce9f:	e8 13 fe ff ff       	call   ccb7 <get_swap_page>
    cea4:	89 44 24 08          	mov    %eax,0x8(%esp)
    cea8:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    cead:	75 07                	jne    ceb6 <try_to_swap_out+0x8b>
			return 0;
    ceaf:	b8 00 00 00 00       	mov    $0x0,%eax
    ceb4:	eb 6b                	jmp    cf21 <try_to_swap_out+0xf6>
		// 对于要交换设备中的页面,相应页表项中将存放的是(swap_nr << 1).乘2(左移1位)是为了空出原来页表项的存在位(P).只有存在位P=0并且页表项内容不为0的页面才会在
		// 交换设备中.Intel手册中明确指出,当一个表项的存在位P=0时(无效页表项),所有其他位(位31-1)可供随意使用.下面写交换页函数write_swap_page(nr,buffer)被
		// 定义为ll_rw_page(WRITE,SWAP_DEV,(nr),(buffer)).
		*table_ptr = swap_nr << 1;
    ceb6:	8b 44 24 08          	mov    0x8(%esp),%eax
    ceba:	8d 14 00             	lea    (%eax,%eax,1),%edx
    cebd:	8b 44 24 20          	mov    0x20(%esp),%eax
    cec1:	89 10                	mov    %edx,(%eax)
		invalidate();										// 刷新CPU页变换高速缓冲.
    cec3:	b8 00 00 00 00       	mov    $0x0,%eax
    cec8:	0f 22 d8             	mov    %eax,%cr3
		write_swap_page(swap_nr, (char *) page);
    cecb:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    cecf:	8b 54 24 08          	mov    0x8(%esp),%edx
    ced3:	a1 a0 11 03 00       	mov    0x311a0,%eax
    ced8:	51                   	push   %ecx
    ced9:	52                   	push   %edx
    ceda:	50                   	push   %eax
    cedb:	6a 01                	push   $0x1
    cedd:	e8 7b 99 00 00       	call   1685d <ll_rw_page>
    cee2:	83 c4 10             	add    $0x10,%esp
		free_page(page);
    cee5:	83 ec 0c             	sub    $0xc,%esp
    cee8:	ff 74 24 18          	pushl  0x18(%esp)
    ceec:	e8 e1 ed ff ff       	call   bcd2 <free_page>
    cef1:	83 c4 10             	add    $0x10,%esp
		return 1;
    cef4:	b8 01 00 00 00       	mov    $0x1,%eax
    cef9:	eb 26                	jmp    cf21 <try_to_swap_out+0xf6>
	}
	// 否则表明页面没有修改过.那么就不用交换出去,而直接释放即可.
	*table_ptr = 0;
    cefb:	8b 44 24 20          	mov    0x20(%esp),%eax
    ceff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	invalidate();
    cf05:	b8 00 00 00 00       	mov    $0x0,%eax
    cf0a:	0f 22 d8             	mov    %eax,%cr3
	free_page(page);
    cf0d:	83 ec 0c             	sub    $0xc,%esp
    cf10:	ff 74 24 18          	pushl  0x18(%esp)
    cf14:	e8 b9 ed ff ff       	call   bcd2 <free_page>
    cf19:	83 c4 10             	add    $0x10,%esp
	return 1;
    cf1c:	b8 01 00 00 00       	mov    $0x1,%eax
}
    cf21:	83 c4 1c             	add    $0x1c,%esp
    cf24:	c3                   	ret    

0000cf25 <swap_out>:
 */
// 把内存页面放到交换设备中.
// 从线性地址64MB对应的目录项(FIRST_VM_PAGE>>10)开始,搜索整个4GB线性空间,对有效页目录二级页表指定的物理内存页面执行交换
// 到交换设备中去的尝试.一旦成功地交换出一个页面,就返回-1.否则返回0.该函数会在get_free_page()中被调用.
int swap_out(void)
{
    cf25:	83 ec 1c             	sub    $0x1c,%esp
	static int dir_entry = FIRST_VM_PAGE >> 10;	// 即任务1的第1个目录项索引.
	static int page_entry = -1;
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
    cf28:	c7 44 24 0c 00 c0 0f 	movl   $0xfc000,0xc(%esp)
    cf2f:	00 
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    cf30:	eb 46                	jmp    cf78 <swap_out+0x53>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
    cf32:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf37:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cf3e:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (pg_table & 1)
    cf42:	8b 44 24 08          	mov    0x8(%esp),%eax
    cf46:	83 e0 01             	and    $0x1,%eax
    cf49:	85 c0                	test   %eax,%eax
    cf4b:	75 34                	jne    cf81 <swap_out+0x5c>
			break;
		counter -= 1024;						// 1个页表对应1024个页帧
    cf4d:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cf54:	00 
		dir_entry++;							// 下一目录项.
    cf55:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf5a:	83 c0 01             	add    $0x1,%eax
    cf5d:	a3 50 f3 02 00       	mov    %eax,0x2f350
		// 如果整个4GB的1024个页目录项检查完了则又回到第1个任务重新开始检查
		if (dir_entry >= 1024)
    cf62:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cf67:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf6c:	7e 0a                	jle    cf78 <swap_out+0x53>
			dir_entry = FIRST_VM_PAGE >> 10;
    cf6e:	c7 05 50 f3 02 00 10 	movl   $0x10,0x2f350
    cf75:	00 00 00 
	while (counter > 0) {
    cf78:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cf7d:	7f b3                	jg     cf32 <swap_out+0xd>
    cf7f:	eb 01                	jmp    cf82 <swap_out+0x5d>
			break;
    cf81:	90                   	nop
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
    cf82:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cf89:	ff 
	while (counter-- > 0) {
    cf8a:	e9 a3 00 00 00       	jmp    d032 <swap_out+0x10d>
		page_entry++;
    cf8f:	a1 54 f3 02 00       	mov    0x2f354,%eax
    cf94:	83 c0 01             	add    $0x1,%eax
    cf97:	a3 54 f3 02 00       	mov    %eax,0x2f354
		// 如果已经尝试处理完当前页表所有项还没有能够成功地交换出一个页面,即此时页表项索引大于等于1024,则如同前面第135-143行执行相同的处理来选出一个
		// 二级页表存在的页目录项,并取得相应二级页表指针.
		if (page_entry >= 1024) {
    cf9c:	a1 54 f3 02 00       	mov    0x2f354,%eax
    cfa1:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cfa6:	7e 61                	jle    d009 <swap_out+0xe4>
			page_entry = 0;
    cfa8:	c7 05 54 f3 02 00 00 	movl   $0x0,0x2f354
    cfaf:	00 00 00 
		repeat:
			dir_entry++;
    cfb2:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cfb7:	83 c0 01             	add    $0x1,%eax
    cfba:	a3 50 f3 02 00       	mov    %eax,0x2f350
			if (dir_entry >= 1024)
    cfbf:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cfc4:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cfc9:	7e 0a                	jle    cfd5 <swap_out+0xb0>
				dir_entry = FIRST_VM_PAGE >> 10;
    cfcb:	c7 05 50 f3 02 00 10 	movl   $0x10,0x2f350
    cfd2:	00 00 00 
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
    cfd5:	a1 50 f3 02 00       	mov    0x2f350,%eax
    cfda:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cfe1:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!(pg_table & 1))
    cfe5:	8b 44 24 08          	mov    0x8(%esp),%eax
    cfe9:	83 e0 01             	and    $0x1,%eax
    cfec:	85 c0                	test   %eax,%eax
    cfee:	75 11                	jne    d001 <swap_out+0xdc>
				if ((counter -= 1024) > 0)
    cff0:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cff7:	00 
    cff8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cffd:	7e 48                	jle    d047 <swap_out+0x122>
					goto repeat;
    cfff:	eb b1                	jmp    cfb2 <swap_out+0x8d>
				else
					break;
			pg_table &= 0xfffff000;				// 页表指针.
    d001:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    d008:	ff 
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
    d009:	a1 54 f3 02 00       	mov    0x2f354,%eax
    d00e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    d015:	8b 44 24 08          	mov    0x8(%esp),%eax
    d019:	01 d0                	add    %edx,%eax
    d01b:	83 ec 0c             	sub    $0xc,%esp
    d01e:	50                   	push   %eax
    d01f:	e8 07 fe ff ff       	call   ce2b <try_to_swap_out>
    d024:	83 c4 10             	add    $0x10,%esp
    d027:	85 c0                	test   %eax,%eax
    d029:	74 07                	je     d032 <swap_out+0x10d>
			return 1;
    d02b:	b8 01 00 00 00       	mov    $0x1,%eax
    d030:	eb 2b                	jmp    d05d <swap_out+0x138>
	while (counter-- > 0) {
    d032:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d036:	8d 50 ff             	lea    -0x1(%eax),%edx
    d039:	89 54 24 0c          	mov    %edx,0xc(%esp)
    d03d:	85 c0                	test   %eax,%eax
    d03f:	0f 8f 4a ff ff ff    	jg     cf8f <swap_out+0x6a>
    d045:	eb 01                	jmp    d048 <swap_out+0x123>
					break;
    d047:	90                   	nop
        }
	printk("Out of swap-memory\n\r");
    d048:	83 ec 0c             	sub    $0xc,%esp
    d04b:	68 fe 36 02 00       	push   $0x236fe
    d050:	e8 f1 bb ff ff       	call   8c46 <printk>
    d055:	83 c4 10             	add    $0x10,%esp
	return 0;
    d058:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d05d:	83 c4 1c             	add    $0x1c,%esp
    d060:	c3                   	ret    

0000d061 <get_free_page>:
// 上面%4寄存器实际指向mem_map[]内存字节位图的最后一个字节.本函数从位图末端开始向前扫描所有页面标志(页面总数为PAGING_AGES),若有页面空闲
// (内存位图字节为0)则返回页面地址.注意!本函数只是指出在主内存区的一页空闲物理页面,但并没有映射到某个进程的地址空间中去.后面的put_page()函数
// 即用于把指定页面映射到某个进程的地址空间中.当然对于内核使用本函数并不需要再使用put_page()进行映射,因为内核代码和数据空间(16MB)已经对等
// 地映射到物理地址空间.
unsigned long get_free_page(void)
{
    d061:	57                   	push   %edi
    d062:	53                   	push   %ebx
    d063:	83 ec 04             	sub    $0x4,%esp
		"movl %%edx, %%eax							/* 将页面起始地址->eax(返回值). */\n\t"
		"1:\n\t"
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
    d066:	bb 9f 11 03 00       	mov    $0x3119f,%ebx
	__asm__(
    d06b:	b8 00 00 00 00       	mov    $0x0,%eax
    d070:	b9 00 0f 00 00       	mov    $0xf00,%ecx
    d075:	89 df                	mov    %ebx,%edi
    d077:	fd                   	std    
    d078:	f2 ae                	repnz scas %es:(%edi),%al
    d07a:	75 1e                	jne    d09a <get_free_page+0x39>
    d07c:	c6 47 01 01          	movb   $0x1,0x1(%edi)
    d080:	c1 e1 0c             	shl    $0xc,%ecx
    d083:	81 c1 00 00 10 00    	add    $0x100000,%ecx
    d089:	89 ca                	mov    %ecx,%edx
    d08b:	b9 00 04 00 00       	mov    $0x400,%ecx
    d090:	8d ba fc 0f 00 00    	lea    0xffc(%edx),%edi
    d096:	f3 ab                	rep stos %eax,%es:(%edi)
    d098:	89 d0                	mov    %edx,%eax
    d09a:	fc                   	cld    
    d09b:	89 c3                	mov    %eax,%ebx
		:"dx");
	if (__res >= HIGH_MEMORY)						// 页面地址大于实际内存容量则重新寻找
    d09d:	a1 80 02 03 00       	mov    0x30280,%eax
    d0a2:	39 c3                	cmp    %eax,%ebx
    d0a4:	72 02                	jb     d0a8 <get_free_page+0x47>
		goto repeat;
    d0a6:	eb be                	jmp    d066 <get_free_page+0x5>
	if (!__res && swap_out())						// 若没有得到空闲页面则执行交换处理,并重新查找.
    d0a8:	85 db                	test   %ebx,%ebx
    d0aa:	75 0b                	jne    d0b7 <get_free_page+0x56>
    d0ac:	e8 74 fe ff ff       	call   cf25 <swap_out>
    d0b1:	85 c0                	test   %eax,%eax
    d0b3:	74 02                	je     d0b7 <get_free_page+0x56>
		goto repeat;
    d0b5:	eb af                	jmp    d066 <get_free_page+0x5>
	return __res;									// 返回空闲物理页面地址.
    d0b7:	89 d8                	mov    %ebx,%eax
}
    d0b9:	83 c4 04             	add    $0x4,%esp
    d0bc:	5b                   	pop    %ebx
    d0bd:	5f                   	pop    %edi
    d0be:	c3                   	ret    

0000d0bf <init_swapping>:

// 内存交换初始化.
void init_swapping(void)
{
    d0bf:	83 ec 1c             	sub    $0x1c,%esp
	// blk_size[]指向指定主设备号的块设备块数数组.该块数数组每一项对应一个设备上所拥有的数据块总数(1块大小=1KB).
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
    d0c2:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d0c7:	85 c0                	test   %eax,%eax
    d0c9:	0f 84 2c 02 00 00    	je     d2fb <init_swapping+0x23c>
		return;
	if (!blk_size[MAJOR(SWAP_DEV)]) {
    d0cf:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d0d4:	c1 e8 08             	shr    $0x8,%eax
    d0d7:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    d0de:	85 c0                	test   %eax,%eax
    d0e0:	75 15                	jne    d0f7 <init_swapping+0x38>
		printk("Unable to get size of swap device\n\r");
    d0e2:	83 ec 0c             	sub    $0xc,%esp
    d0e5:	68 14 37 02 00       	push   $0x23714
    d0ea:	e8 57 bb ff ff       	call   8c46 <printk>
    d0ef:	83 c4 10             	add    $0x10,%esp
		return;
    d0f2:	e9 08 02 00 00       	jmp    d2ff <init_swapping+0x240>
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
    d0f7:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d0fc:	c1 e8 08             	shr    $0x8,%eax
    d0ff:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    d106:	8b 15 a0 11 03 00    	mov    0x311a0,%edx
    d10c:	0f b6 d2             	movzbl %dl,%edx
    d10f:	c1 e2 02             	shl    $0x2,%edx
    d112:	01 d0                	add    %edx,%eax
    d114:	8b 00                	mov    (%eax),%eax
    d116:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_size)
    d11a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d11f:	0f 84 d9 01 00 00    	je     d2fe <init_swapping+0x23f>
		return;
	if (swap_size < 100) {
    d125:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
    d12a:	7f 19                	jg     d145 <init_swapping+0x86>
		printk("Swap device too small (%d blocks)\n\r", swap_size);
    d12c:	83 ec 08             	sub    $0x8,%esp
    d12f:	ff 74 24 14          	pushl  0x14(%esp)
    d133:	68 38 37 02 00       	push   $0x23738
    d138:	e8 09 bb ff ff       	call   8c46 <printk>
    d13d:	83 c4 10             	add    $0x10,%esp
		return;
    d140:	e9 ba 01 00 00       	jmp    d2ff <init_swapping+0x240>
	}
	// 每页4个数据块,所以swap_size >>= 2计算出交换页面总数.
	// 交换数据块总数转换成对应可交换页面总数.该值不能大于SWAP_BITS所能表示的页面数.即交换页面总数不得大于32768.
	swap_size >>= 2;
    d145:	c1 7c 24 0c 02       	sarl   $0x2,0xc(%esp)
	if (swap_size > SWAP_BITS)
    d14a:	81 7c 24 0c 00 80 00 	cmpl   $0x8000,0xc(%esp)
    d151:	00 
    d152:	7e 08                	jle    d15c <init_swapping+0x9d>
		swap_size = SWAP_BITS;
    d154:	c7 44 24 0c 00 80 00 	movl   $0x8000,0xc(%esp)
    d15b:	00 
	// 然后申请一页物理内存来存放交换页面映射数组swap_bitmap,其中每1比特代表1页交换页面
	swap_bitmap = (char *) get_free_page();
    d15c:	e8 00 ff ff ff       	call   d061 <get_free_page>
    d161:	a3 a4 11 03 00       	mov    %eax,0x311a4
	if (!swap_bitmap) {
    d166:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d16b:	85 c0                	test   %eax,%eax
    d16d:	75 15                	jne    d184 <init_swapping+0xc5>
		printk("Unable to start swapping: out of memory :-)\n\r");
    d16f:	83 ec 0c             	sub    $0xc,%esp
    d172:	68 5c 37 02 00       	push   $0x2375c
    d177:	e8 ca ba ff ff       	call   8c46 <printk>
    d17c:	83 c4 10             	add    $0x10,%esp
		return;
    d17f:	e9 7b 01 00 00       	jmp    d2ff <init_swapping+0x240>
	}
	// read_swap_page(nr,buffer)被定义为ll_rw_page(READ,SWAP_DEV,(nr),(buffer)).这里把交换设备上的页面０读到swap_bitmap页面中.该页面
	//　是交换区管理页面.其中第4086字节开始处含有１０个字符的交换设备特征字符串"SWAP-SPACE".若没有找到该特征字符串,则说明不是一个有效的交换设备.
	// 于是显示信息,释放刚申请的物理页面并退出函数.否则将特征字符串字节清零.
	read_swap_page(0, swap_bitmap);
    d184:	8b 15 a4 11 03 00    	mov    0x311a4,%edx
    d18a:	a1 a0 11 03 00       	mov    0x311a0,%eax
    d18f:	52                   	push   %edx
    d190:	6a 00                	push   $0x0
    d192:	50                   	push   %eax
    d193:	6a 00                	push   $0x0
    d195:	e8 c3 96 00 00       	call   1685d <ll_rw_page>
    d19a:	83 c4 10             	add    $0x10,%esp
	if (strncmp("SWAP-SPACE", swap_bitmap + 4086, 10)) {
    d19d:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d1a2:	05 f6 0f 00 00       	add    $0xff6,%eax
    d1a7:	83 ec 04             	sub    $0x4,%esp
    d1aa:	6a 0a                	push   $0xa
    d1ac:	50                   	push   %eax
    d1ad:	68 8a 37 02 00       	push   $0x2378a
    d1b2:	e8 11 fa ff ff       	call   cbc8 <strncmp>
    d1b7:	83 c4 10             	add    $0x10,%esp
    d1ba:	85 c0                	test   %eax,%eax
    d1bc:	74 30                	je     d1ee <init_swapping+0x12f>
		printk("Unable to find swap-space signature\n\r");
    d1be:	83 ec 0c             	sub    $0xc,%esp
    d1c1:	68 98 37 02 00       	push   $0x23798
    d1c6:	e8 7b ba ff ff       	call   8c46 <printk>
    d1cb:	83 c4 10             	add    $0x10,%esp
		free_page((long) swap_bitmap);
    d1ce:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d1d3:	83 ec 0c             	sub    $0xc,%esp
    d1d6:	50                   	push   %eax
    d1d7:	e8 f6 ea ff ff       	call   bcd2 <free_page>
    d1dc:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d1df:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d1e6:	00 00 00 
		return;
    d1e9:	e9 11 01 00 00       	jmp    d2ff <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
    d1ee:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d1f3:	05 f6 0f 00 00       	add    $0xff6,%eax
    d1f8:	83 ec 04             	sub    $0x4,%esp
    d1fb:	6a 0a                	push   $0xa
    d1fd:	6a 00                	push   $0x0
    d1ff:	50                   	push   %eax
    d200:	e8 f1 f9 ff ff       	call   cbf6 <memset>
    d205:	83 c4 10             	add    $0x10,%esp
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d208:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d20f:	00 
    d210:	eb 5e                	jmp    d270 <init_swapping+0x1b1>
		if (i == 1)
    d212:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)
    d217:	75 08                	jne    d221 <init_swapping+0x162>
			i = swap_size;
    d219:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d21d:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (bit(swap_bitmap, i)) {
    d221:	8b 54 24 08          	mov    0x8(%esp),%edx
    d225:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d22a:	83 ec 08             	sub    $0x8,%esp
    d22d:	52                   	push   %edx
    d22e:	50                   	push   %eax
    d22f:	e8 0e fa ff ff       	call   cc42 <bit>
    d234:	83 c4 10             	add    $0x10,%esp
    d237:	85 c0                	test   %eax,%eax
    d239:	74 30                	je     d26b <init_swapping+0x1ac>
			printk("Bad swap-space bit-map\n\r");
    d23b:	83 ec 0c             	sub    $0xc,%esp
    d23e:	68 be 37 02 00       	push   $0x237be
    d243:	e8 fe b9 ff ff       	call   8c46 <printk>
    d248:	83 c4 10             	add    $0x10,%esp
			free_page((long) swap_bitmap);
    d24b:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d250:	83 ec 0c             	sub    $0xc,%esp
    d253:	50                   	push   %eax
    d254:	e8 79 ea ff ff       	call   bcd2 <free_page>
    d259:	83 c4 10             	add    $0x10,%esp
			swap_bitmap = NULL;
    d25c:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d263:	00 00 00 
			return;
    d266:	e9 94 00 00 00       	jmp    d2ff <init_swapping+0x240>
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d26b:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d270:	81 7c 24 08 ff 7f 00 	cmpl   $0x7fff,0x8(%esp)
    d277:	00 
    d278:	7e 98                	jle    d212 <init_swapping+0x153>
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
    d27a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d281:	00 
	for (i = 1 ; i < swap_size ; i++)
    d282:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
    d289:	00 
    d28a:	eb 24                	jmp    d2b0 <init_swapping+0x1f1>
		if (bit(swap_bitmap, i))
    d28c:	8b 54 24 08          	mov    0x8(%esp),%edx
    d290:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d295:	83 ec 08             	sub    $0x8,%esp
    d298:	52                   	push   %edx
    d299:	50                   	push   %eax
    d29a:	e8 a3 f9 ff ff       	call   cc42 <bit>
    d29f:	83 c4 10             	add    $0x10,%esp
    d2a2:	85 c0                	test   %eax,%eax
    d2a4:	74 05                	je     d2ab <init_swapping+0x1ec>
			j++;
    d2a6:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 1 ; i < swap_size ; i++)
    d2ab:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d2b0:	8b 44 24 08          	mov    0x8(%esp),%eax
    d2b4:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    d2b8:	7c d2                	jl     d28c <init_swapping+0x1cd>
	if (!j) {
    d2ba:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d2bf:	75 1d                	jne    d2de <init_swapping+0x21f>
		free_page((long) swap_bitmap);
    d2c1:	a1 a4 11 03 00       	mov    0x311a4,%eax
    d2c6:	83 ec 0c             	sub    $0xc,%esp
    d2c9:	50                   	push   %eax
    d2ca:	e8 03 ea ff ff       	call   bcd2 <free_page>
    d2cf:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d2d2:	c7 05 a4 11 03 00 00 	movl   $0x0,0x311a4
    d2d9:	00 00 00 
		return;
    d2dc:	eb 21                	jmp    d2ff <init_swapping+0x240>
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
    d2de:	8b 44 24 04          	mov    0x4(%esp),%eax
    d2e2:	c1 e0 0c             	shl    $0xc,%eax
    d2e5:	50                   	push   %eax
    d2e6:	ff 74 24 08          	pushl  0x8(%esp)
    d2ea:	68 d8 37 02 00       	push   $0x237d8
    d2ef:	6a 00                	push   $0x0
    d2f1:	e8 4e 56 01 00       	call   22944 <Log>
    d2f6:	83 c4 10             	add    $0x10,%esp
    d2f9:	eb 04                	jmp    d2ff <init_swapping+0x240>
		return;
    d2fb:	90                   	nop
    d2fc:	eb 01                	jmp    d2ff <init_swapping+0x240>
		return;
    d2fe:	90                   	nop
}
    d2ff:	83 c4 1c             	add    $0x1c,%esp
    d302:	c3                   	ret    

0000d303 <page_fault>:
    d303:	87 04 24             	xchg   %eax,(%esp)
    d306:	51                   	push   %ecx
    d307:	52                   	push   %edx
    d308:	1e                   	push   %ds
    d309:	06                   	push   %es
    d30a:	0f a0                	push   %fs
    d30c:	ba 10 00 00 00       	mov    $0x10,%edx
    d311:	8e da                	mov    %edx,%ds
    d313:	8e c2                	mov    %edx,%es
    d315:	8e e2                	mov    %edx,%fs
    d317:	0f 20 d2             	mov    %cr2,%edx
    d31a:	52                   	push   %edx
    d31b:	50                   	push   %eax
    d31c:	a9 01 00 00 00       	test   $0x1,%eax
    d321:	75 07                	jne    d32a <page_fault+0x27>
    d323:	e8 4d f3 ff ff       	call   c675 <do_no_page>
    d328:	eb 05                	jmp    d32f <page_fault+0x2c>
    d32a:	e8 ce ef ff ff       	call   c2fd <do_wp_page>
    d32f:	83 c4 08             	add    $0x8,%esp
    d332:	0f a1                	pop    %fs
    d334:	07                   	pop    %es
    d335:	1f                   	pop    %ds
    d336:	5a                   	pop    %edx
    d337:	59                   	pop    %ecx
    d338:	58                   	pop    %eax
    d339:	cf                   	iret   

0000d33a <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    d33a:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    d33d:	8b 44 24 14          	mov    0x14(%esp),%eax
    d341:	64 8b 00             	mov    %fs:(%eax),%eax
    d344:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    d348:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    d34c:	83 c4 10             	add    $0x10,%esp
    d34f:	c3                   	ret    

0000d350 <sys_ustat>:
// 参数dev是含有用户已安装文件系统的设备号。ubuf是一个ustat结构缓冲区指针，用于存放系统返回的文件系统信息。该系统
// 调用用于返回已安装（mounted）文件系统的统计信息。成功时返回0，并且ubuf指向的ustate结构被添入文件系统总空闲块
// 和空闲i节点数。ustat结构定义在include/sys/types.h中。
int sys_ustat(int dev, struct ustat * ubuf)
{
	return -ENOSYS;         						// 出错码：功能还未实现。
    d350:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    d355:	c3                   	ret    

0000d356 <sys_utime>:
// 设置文件访问和修改时间。
// 参数filename是文件名，times是访问和修改时间结构指针。
// 如果times指针不为NULL，则取utimbuf结构中的时间信息来设置文件的访问和修改时间。
// 如果times指针是NULL，则取系统当前时间来设置指定文件的访问和修改时间域。
int sys_utime(char * filename, struct utimbuf * times)
{
    d356:	83 ec 1c             	sub    $0x1c,%esp
	long actime, modtime;

	// 文件的时间信息保存在其i节点中。因此我们首先根据文件名取得对应i节点。如果没有找到，则返回出错码。如果提供的访问
	// 和修改时间结构指针times不为NULL，则从结构中读取用户设置的时间值。否则就用系统当前时间来设置文件的访问和修改时
	// 间。
	if (!(inode = namei(filename)))
    d359:	83 ec 0c             	sub    $0xc,%esp
    d35c:	ff 74 24 2c          	pushl  0x2c(%esp)
    d360:	e8 8a 61 00 00       	call   134ef <namei>
    d365:	83 c4 10             	add    $0x10,%esp
    d368:	89 44 24 04          	mov    %eax,0x4(%esp)
    d36c:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d371:	75 0a                	jne    d37d <sys_utime+0x27>
		return -ENOENT;
    d373:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d378:	e9 90 00 00 00       	jmp    d40d <sys_utime+0xb7>
	if (times) {
    d37d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    d382:	74 2d                	je     d3b1 <sys_utime+0x5b>
		actime = get_fs_long((unsigned long *) &times->actime);
    d384:	8b 44 24 24          	mov    0x24(%esp),%eax
    d388:	83 ec 0c             	sub    $0xc,%esp
    d38b:	50                   	push   %eax
    d38c:	e8 a9 ff ff ff       	call   d33a <get_fs_long>
    d391:	83 c4 10             	add    $0x10,%esp
    d394:	89 44 24 0c          	mov    %eax,0xc(%esp)
		modtime = get_fs_long((unsigned long *) &times->modtime);
    d398:	8b 44 24 24          	mov    0x24(%esp),%eax
    d39c:	83 c0 04             	add    $0x4,%eax
    d39f:	83 ec 0c             	sub    $0xc,%esp
    d3a2:	50                   	push   %eax
    d3a3:	e8 92 ff ff ff       	call   d33a <get_fs_long>
    d3a8:	83 c4 10             	add    $0x10,%esp
    d3ab:	89 44 24 08          	mov    %eax,0x8(%esp)
    d3af:	eb 2a                	jmp    d3db <sys_utime+0x85>
	} else
		actime = modtime = CURRENT_TIME;
    d3b1:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    d3b6:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    d3bc:	01 d0                	add    %edx,%eax
    d3be:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    d3c3:	f7 e2                	mul    %edx
    d3c5:	c1 ea 05             	shr    $0x5,%edx
    d3c8:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    d3cd:	01 d0                	add    %edx,%eax
    d3cf:	89 44 24 08          	mov    %eax,0x8(%esp)
    d3d3:	8b 44 24 08          	mov    0x8(%esp),%eax
    d3d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 然后修改i节点中的访问时间字段和修改时间字段。再设置i节点已修改标志，放回该i节点，并返回0。
	inode->i_atime = actime;
    d3db:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d3df:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3e3:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_mtime = modtime;
    d3e6:	8b 54 24 08          	mov    0x8(%esp),%edx
    d3ea:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3ee:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
    d3f1:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3f5:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d3f9:	83 ec 0c             	sub    $0xc,%esp
    d3fc:	ff 74 24 10          	pushl  0x10(%esp)
    d400:	e8 b7 12 00 00       	call   e6bc <iput>
    d405:	83 c4 10             	add    $0x10,%esp
	return 0;
    d408:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d40d:	83 c4 1c             	add    $0x1c,%esp
    d410:	c3                   	ret    

0000d411 <sys_access>:
 */
// 检查文件的访问权限。
// 参数filename是文件名，mode是检查的访问属性，它有3个有效位组成：R_OK（值4）、W_OK（2）、X_OK（1）和F_OK（0）
// 组成，分别表示检测文件是否可读、可写、可执行和文件是否存在。如果访问允许的话，则返回0,否则返回出错码。
int sys_access(const char * filename, int mode)
{
    d411:	83 ec 1c             	sub    $0x1c,%esp
	int res, i_mode;

	// 文件的访问权限信息同样保存在文件的i节点结构中，因此我们要先取得对应文件名的i节点。检测的访问属性mode由低3位组成，
	// 因此需要与上八进制0007来清除所有高位。如果文件名对应的i节点不存在，则返回没有许可权限出错码。若i节点存在，则取i
	// 节点中文件属性码，并放回该i节点。另外，57行上语句“iput(inode);”最好放在61行之后。
	mode &= 0007;
    d414:	83 64 24 24 07       	andl   $0x7,0x24(%esp)
	if (!(inode = namei(filename)))
    d419:	83 ec 0c             	sub    $0xc,%esp
    d41c:	ff 74 24 2c          	pushl  0x2c(%esp)
    d420:	e8 ca 60 00 00       	call   134ef <namei>
    d425:	83 c4 10             	add    $0x10,%esp
    d428:	89 44 24 08          	mov    %eax,0x8(%esp)
    d42c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    d431:	75 0a                	jne    d43d <sys_access+0x2c>
		return -EACCES;                 				// 出错码：无访问权限。
    d433:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d438:	e9 b6 00 00 00       	jmp    d4f3 <sys_access+0xe2>
	i_mode = res = inode->i_mode & 0777;
    d43d:	8b 44 24 08          	mov    0x8(%esp),%eax
    d441:	0f b7 00             	movzwl (%eax),%eax
    d444:	0f b7 c0             	movzwl %ax,%eax
    d447:	25 ff 01 00 00       	and    $0x1ff,%eax
    d44c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d450:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d454:	89 44 24 04          	mov    %eax,0x4(%esp)
	iput(inode);
    d458:	83 ec 0c             	sub    $0xc,%esp
    d45b:	ff 74 24 14          	pushl  0x14(%esp)
    d45f:	e8 58 12 00 00       	call   e6bc <iput>
    d464:	83 c4 10             	add    $0x10,%esp
	// 如果当前进程用户是该文件的宿主，则取文件宿主属性。否则如果当前进程用户与该文件宿主同属一个级，则取文件组属性。否则
	// 此时res低3位是其他人访问该文件的许可属性。
	// [??这里应res >> 3 ??]
	if (current->uid == inode->i_uid)
    d467:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d46c:	0f b7 90 cc 02 00 00 	movzwl 0x2cc(%eax),%edx
    d473:	8b 44 24 08          	mov    0x8(%esp),%eax
    d477:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d47b:	66 39 c2             	cmp    %ax,%dx
    d47e:	75 07                	jne    d487 <sys_access+0x76>
		res >>= 6;
    d480:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
    d485:	eb 21                	jmp    d4a8 <sys_access+0x97>
	else if (current->gid == inode->i_gid)
    d487:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d48c:	0f b7 90 d2 02 00 00 	movzwl 0x2d2(%eax),%edx
    d493:	8b 44 24 08          	mov    0x8(%esp),%eax
    d497:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    d49b:	0f b6 c0             	movzbl %al,%eax
    d49e:	66 39 c2             	cmp    %ax,%dx
    d4a1:	75 05                	jne    d4a8 <sys_access+0x97>
		res >>= 3;
    d4a3:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 此时res的最低3位是根据当前进程用户与文件的关系选择出来的访问属性位。现在我们来判断这3位。如果文件属性具有参数所查询
	// 的属性位mode，则访问许可，返回0。
	if ((res & 0007 & mode) == mode)
    d4a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d4ac:	83 e0 07             	and    $0x7,%eax
    d4af:	23 44 24 24          	and    0x24(%esp),%eax
    d4b3:	39 44 24 24          	cmp    %eax,0x24(%esp)
    d4b7:	75 07                	jne    d4c0 <sys_access+0xaf>
		return 0;
    d4b9:	b8 00 00 00 00       	mov    $0x0,%eax
    d4be:	eb 33                	jmp    d4f3 <sys_access+0xe2>
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d4c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d4c5:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    d4cc:	66 85 c0             	test   %ax,%ax
    d4cf:	75 1d                	jne    d4ee <sys_access+0xdd>
	    (!(mode & 1) || (i_mode & 0111)))
    d4d1:	8b 44 24 24          	mov    0x24(%esp),%eax
    d4d5:	83 e0 01             	and    $0x1,%eax
	if ((!current->uid) &&
    d4d8:	85 c0                	test   %eax,%eax
    d4da:	74 0b                	je     d4e7 <sys_access+0xd6>
	    (!(mode & 1) || (i_mode & 0111)))
    d4dc:	8b 44 24 04          	mov    0x4(%esp),%eax
    d4e0:	83 e0 49             	and    $0x49,%eax
    d4e3:	85 c0                	test   %eax,%eax
    d4e5:	74 07                	je     d4ee <sys_access+0xdd>
		return 0;
    d4e7:	b8 00 00 00 00       	mov    $0x0,%eax
    d4ec:	eb 05                	jmp    d4f3 <sys_access+0xe2>
	return -EACCES;         							// 出错码：无访问权限。
    d4ee:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
    d4f3:	83 c4 1c             	add    $0x1c,%esp
    d4f6:	c3                   	ret    

0000d4f7 <sys_chdir>:

// 改变当前工作目录系统调用。
// 参数filename是目录名。
// 操作成功则返回0,否则返回出错码。
int sys_chdir(const char * filename)
{
    d4f7:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 改变当前工作目录就是要求把进程任务结构的当前工作目录字段指向给定目录名的i节点。因此我们首先取目录名的i节点。如果目录名对应
	// 的i节点不存在，则返回出错码。如果该i节点不是一个目录i节点，则放回该i节点，并返回出错码。
	if (!(inode = namei(filename)))
    d4fa:	83 ec 0c             	sub    $0xc,%esp
    d4fd:	ff 74 24 2c          	pushl  0x2c(%esp)
    d501:	e8 e9 5f 00 00       	call   134ef <namei>
    d506:	83 c4 10             	add    $0x10,%esp
    d509:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d50d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d512:	75 07                	jne    d51b <sys_chdir+0x24>
		return -ENOENT;                 				// 出错码：文件或目录不存在。
    d514:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d519:	eb 57                	jmp    d572 <sys_chdir+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d51b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d51f:	0f b7 00             	movzwl (%eax),%eax
    d522:	0f b7 c0             	movzwl %ax,%eax
    d525:	25 00 f0 00 00       	and    $0xf000,%eax
    d52a:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d52f:	74 16                	je     d547 <sys_chdir+0x50>
		iput(inode);
    d531:	83 ec 0c             	sub    $0xc,%esp
    d534:	ff 74 24 18          	pushl  0x18(%esp)
    d538:	e8 7f 11 00 00       	call   e6bc <iput>
    d53d:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;                				// 出错码：不是目录名。
    d540:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d545:	eb 2b                	jmp    d572 <sys_chdir+0x7b>
	}
	// 然后释放进程原工作目录i节点，并使其指向新设置的工作目录i节点。返回0.
	iput(current->pwd);
    d547:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d54c:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    d552:	83 ec 0c             	sub    $0xc,%esp
    d555:	50                   	push   %eax
    d556:	e8 61 11 00 00       	call   e6bc <iput>
    d55b:	83 c4 10             	add    $0x10,%esp
	current->pwd = inode;
    d55e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d563:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d567:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	return (0);
    d56d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d572:	83 c4 1c             	add    $0x1c,%esp
    d575:	c3                   	ret    

0000d576 <sys_chroot>:

// 改变根目录系统调用。
// 把指定的目录名设置成为当前进程的根目录“/”。
// 如果操作成功则返回0，否则返回出错码。
int sys_chroot(const char * filename)
{
    d576:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于改变当前进程任务结构中的根目录字段root，让其指向参数给定目录名的i节点。如果目录名对应i节点不存在，则返回出错码。
	// 如果该i节点不是目录i节点，则放回该i节点，也返回出错码。
	if (!(inode = namei(filename)))
    d579:	83 ec 0c             	sub    $0xc,%esp
    d57c:	ff 74 24 2c          	pushl  0x2c(%esp)
    d580:	e8 6a 5f 00 00       	call   134ef <namei>
    d585:	83 c4 10             	add    $0x10,%esp
    d588:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d58c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d591:	75 07                	jne    d59a <sys_chroot+0x24>
		return -ENOENT;
    d593:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d598:	eb 57                	jmp    d5f1 <sys_chroot+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d59a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d59e:	0f b7 00             	movzwl (%eax),%eax
    d5a1:	0f b7 c0             	movzwl %ax,%eax
    d5a4:	25 00 f0 00 00       	and    $0xf000,%eax
    d5a9:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d5ae:	74 16                	je     d5c6 <sys_chroot+0x50>
		iput(inode);
    d5b0:	83 ec 0c             	sub    $0xc,%esp
    d5b3:	ff 74 24 18          	pushl  0x18(%esp)
    d5b7:	e8 00 11 00 00       	call   e6bc <iput>
    d5bc:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
    d5bf:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d5c4:	eb 2b                	jmp    d5f1 <sys_chroot+0x7b>
	}
	// 然后释放当前进程的根目录，并重新设置为指定目录名的i节点，返回0。
	iput(current->root);
    d5c6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d5cb:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    d5d1:	83 ec 0c             	sub    $0xc,%esp
    d5d4:	50                   	push   %eax
    d5d5:	e8 e2 10 00 00       	call   e6bc <iput>
    d5da:	83 c4 10             	add    $0x10,%esp
	current->root = inode;
    d5dd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d5e2:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d5e6:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	return (0);
    d5ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d5f1:	83 c4 1c             	add    $0x1c,%esp
    d5f4:	c3                   	ret    

0000d5f5 <sys_chmod>:

// 修改文件属性系统调用。
// 参数filename是文件名，mode是新的文件属性。
int sys_chmod(const char * filename, int mode)
{
    d5f5:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用为指定文件设置新的访问属性mode。文件的访问属性在文件名对应的i节点中，因此我们首先取文件名对应的i节点。如果i节点不存
	// 在，则返回出错码（文件或目录不存在）。如果当前进程的有效用户名id与文件i节点的用户id不同，并且也不是超级用户，则放回该文件
	// i节点，返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d5f8:	83 ec 0c             	sub    $0xc,%esp
    d5fb:	ff 74 24 2c          	pushl  0x2c(%esp)
    d5ff:	e8 eb 5e 00 00       	call   134ef <namei>
    d604:	83 c4 10             	add    $0x10,%esp
    d607:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d60b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d610:	75 07                	jne    d619 <sys_chmod+0x24>
		return -ENOENT;
    d612:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d617:	eb 7c                	jmp    d695 <sys_chmod+0xa0>
	if ((current->euid != inode->i_uid) && !suser()) {
    d619:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d61e:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    d625:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d629:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d62d:	66 39 c2             	cmp    %ax,%dx
    d630:	74 27                	je     d659 <sys_chmod+0x64>
    d632:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d637:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d63e:	66 85 c0             	test   %ax,%ax
    d641:	74 16                	je     d659 <sys_chmod+0x64>
		iput(inode);
    d643:	83 ec 0c             	sub    $0xc,%esp
    d646:	ff 74 24 18          	pushl  0x18(%esp)
    d64a:	e8 6d 10 00 00       	call   e6bc <iput>
    d64f:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d652:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d657:	eb 3c                	jmp    d695 <sys_chmod+0xa0>
	}
	// 否则就重新设置该i节点的文件属性，并置该i节点已修改标志。放回该i节点，返回0。
	inode->i_mode = (mode & 07777) | (inode->i_mode & ~07777);
    d659:	8b 44 24 24          	mov    0x24(%esp),%eax
    d65d:	66 25 ff 0f          	and    $0xfff,%ax
    d661:	89 c2                	mov    %eax,%edx
    d663:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d667:	0f b7 00             	movzwl (%eax),%eax
    d66a:	66 25 00 f0          	and    $0xf000,%ax
    d66e:	09 d0                	or     %edx,%eax
    d670:	89 c2                	mov    %eax,%edx
    d672:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d676:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
    d679:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d67d:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d681:	83 ec 0c             	sub    $0xc,%esp
    d684:	ff 74 24 18          	pushl  0x18(%esp)
    d688:	e8 2f 10 00 00       	call   e6bc <iput>
    d68d:	83 c4 10             	add    $0x10,%esp
	return 0;
    d690:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d695:	83 c4 1c             	add    $0x1c,%esp
    d698:	c3                   	ret    

0000d699 <sys_chown>:

// 修改文件宿主系统调用。
// 参数filename是文件名，uid是用户标识符（用户ID），gid是组ID。
// 若操作成功则返回0，否则返回出错码。
int sys_chown(const char * filename, int uid, int gid)
{
    d699:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于设置文件i节点中的用户和组ID，因此首先要取得给定文件名的i节点。如果文件名的i节点不存在，则返回出错码（文件
	// 或目录不存在）。如果当前进程不是超级用户，则放回该i节点，并返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d69c:	83 ec 0c             	sub    $0xc,%esp
    d69f:	ff 74 24 2c          	pushl  0x2c(%esp)
    d6a3:	e8 47 5e 00 00       	call   134ef <namei>
    d6a8:	83 c4 10             	add    $0x10,%esp
    d6ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d6af:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d6b4:	75 07                	jne    d6bd <sys_chown+0x24>
		return -ENOENT;
    d6b6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d6bb:	eb 5e                	jmp    d71b <sys_chown+0x82>
	if (!suser()) {
    d6bd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d6c2:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d6c9:	66 85 c0             	test   %ax,%ax
    d6cc:	74 16                	je     d6e4 <sys_chown+0x4b>
		iput(inode);
    d6ce:	83 ec 0c             	sub    $0xc,%esp
    d6d1:	ff 74 24 18          	pushl  0x18(%esp)
    d6d5:	e8 e2 0f 00 00       	call   e6bc <iput>
    d6da:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d6dd:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d6e2:	eb 37                	jmp    d71b <sys_chown+0x82>
	}
	// 否则我们就用参数提供的值来设置文件i节点的用户ID和组ID，并置i节点已经修改标志，放回该i节点，返回0。
	inode->i_uid = uid;
    d6e4:	8b 44 24 24          	mov    0x24(%esp),%eax
    d6e8:	89 c2                	mov    %eax,%edx
    d6ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6ee:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = gid;
    d6f2:	8b 44 24 28          	mov    0x28(%esp),%eax
    d6f6:	89 c2                	mov    %eax,%edx
    d6f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6fc:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;
    d6ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d703:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d707:	83 ec 0c             	sub    $0xc,%esp
    d70a:	ff 74 24 18          	pushl  0x18(%esp)
    d70e:	e8 a9 0f 00 00       	call   e6bc <iput>
    d713:	83 c4 10             	add    $0x10,%esp
	return 0;
    d716:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d71b:	83 c4 1c             	add    $0x1c,%esp
    d71e:	c3                   	ret    

0000d71f <check_char_dev>:

// 检查字符设备类型.
// 该函数仅用于下面文件打开系统调用sys_open(),用于检查若打开的文件是tty终端字符设备时,需要对当前进程的设置和对tty表的设置.
// 返回0检测处理成功,返回-1表示失败,对应字符设备不能打开.
static int check_char_dev(struct m_inode * inode, int dev, int flag)
{
    d71f:	83 ec 10             	sub    $0x10,%esp
	// 的同义名.即/dev/tty设备是一个虚拟设备,它对应到进程实际使用的/dev/ttyxx设备之一.对于一个进程来说,若其有控制终端,那么它的任务结构
	// 中的tty字段将是4号设备的某一个子设备号.
	// 如果打开操作的文件是/dev/tty(即MAJOR(dev) = 5),那么我们令min = 进程任务结构中的tty字段,即取4号设备的子设备号.否则如果打开的是
	// 某个4号设备,则直接取其子设备号.如果得到的4号设备子设备号小于0,那么说明进程没有控制终端,或者设备号错误,则返回-1,表示由于进程没有控制终端
	// 或者不能打开这个设备.
	if (MAJOR(dev) == 4 || MAJOR(dev) == 5) {
    d722:	8b 44 24 18          	mov    0x18(%esp),%eax
    d726:	c1 e8 08             	shr    $0x8,%eax
    d729:	83 f8 04             	cmp    $0x4,%eax
    d72c:	74 10                	je     d73e <check_char_dev+0x1f>
    d72e:	8b 44 24 18          	mov    0x18(%esp),%eax
    d732:	c1 e8 08             	shr    $0x8,%eax
    d735:	83 f8 05             	cmp    $0x5,%eax
    d738:	0f 85 12 02 00 00    	jne    d950 <check_char_dev+0x231>
		if (MAJOR(dev) == 5)
    d73e:	8b 44 24 18          	mov    0x18(%esp),%eax
    d742:	c1 e8 08             	shr    $0x8,%eax
    d745:	83 f8 05             	cmp    $0x5,%eax
    d748:	75 11                	jne    d75b <check_char_dev+0x3c>
			min = current->tty;
    d74a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d74f:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    d755:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d759:	eb 0b                	jmp    d766 <check_char_dev+0x47>
		else
			min = MINOR(dev);
    d75b:	8b 44 24 18          	mov    0x18(%esp),%eax
    d75f:	0f b6 c0             	movzbl %al,%eax
    d762:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (min < 0)
    d766:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d76b:	79 0a                	jns    d777 <check_char_dev+0x58>
			return -1;
    d76d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d772:	e9 de 01 00 00       	jmp    d955 <check_char_dev+0x236>
		// 主伪终端设备文件只能被进程独占使用.如果子设备号表明是一个主伪终端,并且该打开文件i节点引用计数大于1,则说明该设备已被其他进程使用.因此不能再
		// 打开该字符设备文件,于是返回-1.否则,我们让tty结构指针tty指向tty表中对应结构项.若打开文件操作标志flag中不含无需控制终端标志O_NOCTTY,并且进程
		// 是进程组首领,并且当前进程没有控制终端,并且tty结构中session字段为0(表示该终端还不是任何进程组的控制终端),那么就允许为进程设置这个终端设备min
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
    d777:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d77b:	25 c0 00 00 00       	and    $0xc0,%eax
    d780:	3d 80 00 00 00       	cmp    $0x80,%eax
    d785:	75 18                	jne    d79f <check_char_dev+0x80>
    d787:	8b 44 24 14          	mov    0x14(%esp),%eax
    d78b:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    d78f:	66 83 f8 01          	cmp    $0x1,%ax
    d793:	76 0a                	jbe    d79f <check_char_dev+0x80>
			return -1;
    d795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d79a:	e9 b6 01 00 00       	jmp    d955 <check_char_dev+0x236>
		tty = TTY_TABLE(min);
    d79f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d7a4:	74 26                	je     d7cc <check_char_dev+0xad>
    d7a6:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d7ab:	7f 11                	jg     d7be <check_char_dev+0x9f>
    d7ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d7b1:	83 e8 01             	sub    $0x1,%eax
    d7b4:	c1 e0 06             	shl    $0x6,%eax
    d7b7:	05 20 28 04 00       	add    $0x42820,%eax
    d7bc:	eb 1b                	jmp    d7d9 <check_char_dev+0xba>
    d7be:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d7c2:	c1 e0 06             	shl    $0x6,%eax
    d7c5:	05 20 28 04 00       	add    $0x42820,%eax
    d7ca:	eb 0d                	jmp    d7d9 <check_char_dev+0xba>
    d7cc:	a1 80 22 03 00       	mov    0x32280,%eax
    d7d1:	c1 e0 06             	shl    $0x6,%eax
    d7d4:	05 20 28 04 00       	add    $0x42820,%eax
    d7d9:	89 44 24 08          	mov    %eax,0x8(%esp)
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d7dd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d7e1:	25 00 01 00 00       	and    $0x100,%eax
    d7e6:	85 c0                	test   %eax,%eax
    d7e8:	75 5c                	jne    d846 <check_char_dev+0x127>
		    current->leader &&
    d7ea:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d7ef:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
		if (!(flag & O_NOCTTY) &&
    d7f5:	85 c0                	test   %eax,%eax
    d7f7:	74 4d                	je     d846 <check_char_dev+0x127>
		    current->tty < 0 &&
    d7f9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d7fe:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
		    current->leader &&
    d804:	85 c0                	test   %eax,%eax
    d806:	79 3e                	jns    d846 <check_char_dev+0x127>
		    tty->session == 0) {
    d808:	8b 44 24 08          	mov    0x8(%esp),%eax
    d80c:	8b 40 28             	mov    0x28(%eax),%eax
		    current->tty < 0 &&
    d80f:	85 c0                	test   %eax,%eax
    d811:	75 33                	jne    d846 <check_char_dev+0x127>
			current->tty = min;
    d813:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d818:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d81c:	89 90 2c 03 00 00    	mov    %edx,0x32c(%eax)
			tty->session = current->session;
    d822:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d827:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    d82d:	8b 44 24 08          	mov    0x8(%esp),%eax
    d831:	89 50 28             	mov    %edx,0x28(%eax)
			tty->pgrp = current->pgrp;
    d834:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d839:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    d83f:	8b 44 24 08          	mov    0x8(%esp),%eax
    d843:	89 50 24             	mov    %edx,0x24(%eax)
		}
		// 如果打开文件操作标志flag中含有O_NONBLOCK(非阻塞)标志,则我们需要对该字符终端设备进行相关设置,设置为满足读操作需要读取的最少字符数为0,设置超时
		// 定时值为0,并把终端设备设置成非规范模式.非阻塞方式只能工作于非规范模式.在此模式下当VMIN和VTIME均设置为0时,辅助队列中有多少支进程就读取多少字符,
		// 并立刻返回.
		if (flag & O_NONBLOCK) {
    d846:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d84a:	25 00 08 00 00       	and    $0x800,%eax
    d84f:	85 c0                	test   %eax,%eax
    d851:	0f 84 f9 00 00 00    	je     d950 <check_char_dev+0x231>
			TTY_TABLE(min)->termios.c_cc[VMIN] = 0;
    d857:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d85c:	74 26                	je     d884 <check_char_dev+0x165>
    d85e:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d863:	7f 11                	jg     d876 <check_char_dev+0x157>
    d865:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d869:	83 e8 01             	sub    $0x1,%eax
    d86c:	c1 e0 06             	shl    $0x6,%eax
    d86f:	05 20 28 04 00       	add    $0x42820,%eax
    d874:	eb 1b                	jmp    d891 <check_char_dev+0x172>
    d876:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d87a:	c1 e0 06             	shl    $0x6,%eax
    d87d:	05 20 28 04 00       	add    $0x42820,%eax
    d882:	eb 0d                	jmp    d891 <check_char_dev+0x172>
    d884:	a1 80 22 03 00       	mov    0x32280,%eax
    d889:	c1 e0 06             	shl    $0x6,%eax
    d88c:	05 20 28 04 00       	add    $0x42820,%eax
    d891:	c6 40 17 00          	movb   $0x0,0x17(%eax)
			TTY_TABLE(min)->termios.c_cc[VTIME] = 0;
    d895:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d89a:	74 26                	je     d8c2 <check_char_dev+0x1a3>
    d89c:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8a1:	7f 11                	jg     d8b4 <check_char_dev+0x195>
    d8a3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8a7:	83 e8 01             	sub    $0x1,%eax
    d8aa:	c1 e0 06             	shl    $0x6,%eax
    d8ad:	05 20 28 04 00       	add    $0x42820,%eax
    d8b2:	eb 1b                	jmp    d8cf <check_char_dev+0x1b0>
    d8b4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8b8:	c1 e0 06             	shl    $0x6,%eax
    d8bb:	05 20 28 04 00       	add    $0x42820,%eax
    d8c0:	eb 0d                	jmp    d8cf <check_char_dev+0x1b0>
    d8c2:	a1 80 22 03 00       	mov    0x32280,%eax
    d8c7:	c1 e0 06             	shl    $0x6,%eax
    d8ca:	05 20 28 04 00       	add    $0x42820,%eax
    d8cf:	c6 40 16 00          	movb   $0x0,0x16(%eax)
			TTY_TABLE(min)->termios.c_lflag &= ~ICANON;
    d8d3:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d8d8:	74 26                	je     d900 <check_char_dev+0x1e1>
    d8da:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8df:	7f 11                	jg     d8f2 <check_char_dev+0x1d3>
    d8e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8e5:	83 e8 01             	sub    $0x1,%eax
    d8e8:	c1 e0 06             	shl    $0x6,%eax
    d8eb:	05 20 28 04 00       	add    $0x42820,%eax
    d8f0:	eb 1b                	jmp    d90d <check_char_dev+0x1ee>
    d8f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8f6:	c1 e0 06             	shl    $0x6,%eax
    d8f9:	05 20 28 04 00       	add    $0x42820,%eax
    d8fe:	eb 0d                	jmp    d90d <check_char_dev+0x1ee>
    d900:	a1 80 22 03 00       	mov    0x32280,%eax
    d905:	c1 e0 06             	shl    $0x6,%eax
    d908:	05 20 28 04 00       	add    $0x42820,%eax
    d90d:	8b 50 0c             	mov    0xc(%eax),%edx
    d910:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d915:	74 26                	je     d93d <check_char_dev+0x21e>
    d917:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d91c:	7f 11                	jg     d92f <check_char_dev+0x210>
    d91e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d922:	83 e8 01             	sub    $0x1,%eax
    d925:	c1 e0 06             	shl    $0x6,%eax
    d928:	05 20 28 04 00       	add    $0x42820,%eax
    d92d:	eb 1b                	jmp    d94a <check_char_dev+0x22b>
    d92f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d933:	c1 e0 06             	shl    $0x6,%eax
    d936:	05 20 28 04 00       	add    $0x42820,%eax
    d93b:	eb 0d                	jmp    d94a <check_char_dev+0x22b>
    d93d:	a1 80 22 03 00       	mov    0x32280,%eax
    d942:	c1 e0 06             	shl    $0x6,%eax
    d945:	05 20 28 04 00       	add    $0x42820,%eax
    d94a:	83 e2 fd             	and    $0xfffffffd,%edx
    d94d:	89 50 0c             	mov    %edx,0xc(%eax)
		}
	}
	return 0;
    d950:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d955:	83 c4 10             	add    $0x10,%esp
    d958:	c3                   	ret    

0000d959 <sys_open>:
// O_EXCL(被创建文件必须不存在),O_APPEND(在文件尾添加数据)等其他一些标志的组合,如果本调用创建了一个新文件,则mode就用于指定
// 文件的许可属性.这些属性有S_IRWXU(文件宿主具有读,写和执行权限),S_IRUSR(用户具有读文件权限),S_IRWXG(组成员有读,写
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/tat.h,fcntl.h.
int sys_open(const char * filename, int flag, int mode)
{
    d959:	53                   	push   %ebx
    d95a:	83 ec 18             	sub    $0x18,%esp
	struct file * f;
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
    d95d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d962:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    d969:	0f b7 c0             	movzwl %ax,%eax
    d96c:	f7 d0                	not    %eax
    d96e:	25 ff 01 00 00       	and    $0x1ff,%eax
    d973:	21 44 24 28          	and    %eax,0x28(%esp)
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d977:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d97e:	00 
    d97f:	eb 1c                	jmp    d99d <sys_open+0x44>
		if (!current->filp[fd])
    d981:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d986:	8b 54 24 04          	mov    0x4(%esp),%edx
    d98a:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    d990:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    d994:	85 c0                	test   %eax,%eax
    d996:	74 0e                	je     d9a6 <sys_open+0x4d>
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d998:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    d99d:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d9a2:	7e dd                	jle    d981 <sys_open+0x28>
    d9a4:	eb 01                	jmp    d9a7 <sys_open+0x4e>
			break;          						// 找到空闲项.
    d9a6:	90                   	nop
	if (fd >= NR_OPEN)
    d9a7:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d9ac:	7e 0a                	jle    d9b8 <sys_open+0x5f>
		return -EINVAL;
    d9ae:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    d9b3:	e9 c2 01 00 00       	jmp    db7a <sys_open+0x221>
	// 该子进程中调用execve()函数加载执行另一个新程序.此时子进程中开始执行新程序.若一个文件句柄close_on_exec中的对应位被置位,那么在
	// 执行execve()时该对应文件句柄将被关闭,否则该文件句柄将始终处于打开状态.当打开一个文件时,默认情况下文件句柄在子进程中也处于打开
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
    d9b8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d9bd:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
    d9c3:	8b 44 24 04          	mov    0x4(%esp),%eax
    d9c7:	bb 01 00 00 00       	mov    $0x1,%ebx
    d9cc:	89 c1                	mov    %eax,%ecx
    d9ce:	d3 e3                	shl    %cl,%ebx
    d9d0:	89 d8                	mov    %ebx,%eax
    d9d2:	f7 d0                	not    %eax
    d9d4:	89 c1                	mov    %eax,%ecx
    d9d6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    d9db:	21 ca                	and    %ecx,%edx
    d9dd:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	f = 0 + file_table;
    d9e3:	c7 44 24 0c 80 1f 04 	movl   $0x41f80,0xc(%esp)
    d9ea:	00 
	for (i = 0 ; i < NR_FILE ; i++, f++)
    d9eb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d9f2:	00 
    d9f3:	eb 17                	jmp    da0c <sys_open+0xb3>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    d9f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d9f9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    d9fd:	66 85 c0             	test   %ax,%ax
    da00:	74 13                	je     da15 <sys_open+0xbc>
	for (i = 0 ; i < NR_FILE ; i++, f++)
    da02:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    da07:	83 44 24 0c 10       	addl   $0x10,0xc(%esp)
    da0c:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    da11:	7e e2                	jle    d9f5 <sys_open+0x9c>
    da13:	eb 01                	jmp    da16 <sys_open+0xbd>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    da15:	90                   	nop
	if (i >= NR_FILE)
    da16:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    da1b:	7e 0a                	jle    da27 <sys_open+0xce>
		return -EINVAL;
    da1d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    da22:	e9 53 01 00 00       	jmp    db7a <sys_open+0x221>
	// 此时我们让进程对应文件句柄fd的文件结构指针指向搜索到的文件结构,并令文件引用计数递增1.然后调用函数open_namei()执行打开操作,若返回
	// 值小于0,则说明出错,于是释放刚申请到的文件结构,返回出错码i.若文件打开操作成功,则inode是已打开文件的i节点指针.
	(current->filp[fd] = f)->f_count++;
    da27:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    da2c:	8b 54 24 04          	mov    0x4(%esp),%edx
    da30:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
    da36:	8b 54 24 0c          	mov    0xc(%esp),%edx
    da3a:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
    da3e:	8b 54 24 04          	mov    0x4(%esp),%edx
    da42:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da48:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    da4c:	0f b7 50 04          	movzwl 0x4(%eax),%edx
    da50:	83 c2 01             	add    $0x1,%edx
    da53:	66 89 50 04          	mov    %dx,0x4(%eax)
	// Log(LOG_INFO_TYPE, "<<<<< sys_open : fd = %d\n", fd);
	if ((i = open_namei(filename, flag, mode, &inode)) < 0) {
    da57:	89 e0                	mov    %esp,%eax
    da59:	50                   	push   %eax
    da5a:	ff 74 24 2c          	pushl  0x2c(%esp)
    da5e:	ff 74 24 2c          	pushl  0x2c(%esp)
    da62:	ff 74 24 2c          	pushl  0x2c(%esp)
    da66:	e8 9e 5a 00 00       	call   13509 <open_namei>
    da6b:	83 c4 10             	add    $0x10,%esp
    da6e:	89 44 24 08          	mov    %eax,0x8(%esp)
    da72:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    da77:	79 2a                	jns    daa3 <sys_open+0x14a>
		current->filp[fd] = NULL;
    da79:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    da7e:	8b 54 24 04          	mov    0x4(%esp),%edx
    da82:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da88:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    da8f:	00 
		f->f_count = 0;
    da90:	8b 44 24 0c          	mov    0xc(%esp),%eax
    da94:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
		return i;
    da9a:	8b 44 24 08          	mov    0x8(%esp),%eax
    da9e:	e9 d7 00 00 00       	jmp    db7a <sys_open+0x221>
	}
	// 根据已打开文件i节点的属性字段,我们可以知道文件的类型.对于不同类型的文件,我们需要作一些特别处理.如果打开的是字符设备文件,那么我们就要调用
	// check_char_dev()函数来检查当前进程是否能打开这个字符设备文件.如果允许(函数返回0),那么在check_char_dev()中会根据具体文件打开标志为进程
	// 设置控制终端.如果不允许打开使用该字符设备文件,那么我们只能释放上面申请的文件项和句柄资源.返回出错码.
	/* ttys are somewhat special (ttyxx major==4, tty major==5) */
	if (S_ISCHR(inode->i_mode))
    daa3:	8b 04 24             	mov    (%esp),%eax
    daa6:	0f b7 00             	movzwl (%eax),%eax
    daa9:	0f b7 c0             	movzwl %ax,%eax
    daac:	25 00 f0 00 00       	and    $0xf000,%eax
    dab1:	3d 00 20 00 00       	cmp    $0x2000,%eax
    dab6:	75 59                	jne    db11 <sys_open+0x1b8>
		if (check_char_dev(inode, inode->i_zone[0], flag)) {
    dab8:	8b 04 24             	mov    (%esp),%eax
    dabb:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    dabf:	0f b7 d0             	movzwl %ax,%edx
    dac2:	8b 04 24             	mov    (%esp),%eax
    dac5:	83 ec 04             	sub    $0x4,%esp
    dac8:	ff 74 24 28          	pushl  0x28(%esp)
    dacc:	52                   	push   %edx
    dacd:	50                   	push   %eax
    dace:	e8 4c fc ff ff       	call   d71f <check_char_dev>
    dad3:	83 c4 10             	add    $0x10,%esp
    dad6:	85 c0                	test   %eax,%eax
    dad8:	74 37                	je     db11 <sys_open+0x1b8>
			iput(inode);
    dada:	8b 04 24             	mov    (%esp),%eax
    dadd:	83 ec 0c             	sub    $0xc,%esp
    dae0:	50                   	push   %eax
    dae1:	e8 d6 0b 00 00       	call   e6bc <iput>
    dae6:	83 c4 10             	add    $0x10,%esp
			current->filp[fd] = NULL;
    dae9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    daee:	8b 54 24 04          	mov    0x4(%esp),%edx
    daf2:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    daf8:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    daff:	00 
			f->f_count = 0;
    db00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db04:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
			return -EAGAIN;         				// 出错号:资源暂不可用.
    db0a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    db0f:	eb 69                	jmp    db7a <sys_open+0x221>
		}
	// 如果打开的是块设备文件,则检查盘片是否更换过.若更换过则需要让高速缓冲区中该设备的所有缓冲块失效.
	/* Likewise with block-devices: check for floppy_change */
	/* 同样对于块设备文件:需要检查盘片是否被更换 */
	if (S_ISBLK(inode->i_mode))
    db11:	8b 04 24             	mov    (%esp),%eax
    db14:	0f b7 00             	movzwl (%eax),%eax
    db17:	0f b7 c0             	movzwl %ax,%eax
    db1a:	25 00 f0 00 00       	and    $0xf000,%eax
    db1f:	3d 00 60 00 00       	cmp    $0x6000,%eax
    db24:	75 16                	jne    db3c <sys_open+0x1e3>
		check_disk_change(inode->i_zone[0]);
    db26:	8b 04 24             	mov    (%esp),%eax
    db29:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    db2d:	0f b7 c0             	movzwl %ax,%eax
    db30:	83 ec 0c             	sub    $0xc,%esp
    db33:	50                   	push   %eax
    db34:	e8 c1 15 00 00       	call   f0fa <check_disk_change>
    db39:	83 c4 10             	add    $0x10,%esp
	// 现在我们初始化打开文件的文件结构.设置文件结构属性和标志,置句柄引用计数为1,并设置i节点字段为打开文件的i节点,初始化文件读写指针为0.最后返回文件句柄号.
	f->f_mode = inode->i_mode;
    db3c:	8b 04 24             	mov    (%esp),%eax
    db3f:	0f b7 10             	movzwl (%eax),%edx
    db42:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db46:	66 89 10             	mov    %dx,(%eax)
	f->f_flags = flag;
    db49:	8b 44 24 24          	mov    0x24(%esp),%eax
    db4d:	89 c2                	mov    %eax,%edx
    db4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db53:	66 89 50 02          	mov    %dx,0x2(%eax)
	f->f_count = 1;
    db57:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db5b:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)
	f->f_inode = inode;
    db61:	8b 14 24             	mov    (%esp),%edx
    db64:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db68:	89 50 08             	mov    %edx,0x8(%eax)
	f->f_pos = 0;
    db6b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db6f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return (fd);
    db76:	8b 44 24 04          	mov    0x4(%esp),%eax
}
    db7a:	83 c4 18             	add    $0x18,%esp
    db7d:	5b                   	pop    %ebx
    db7e:	c3                   	ret    

0000db7f <sys_creat>:

// 创建文件系统调用。
// 参数pathname是路径名，mode与上面的sys_open()函数相同。
// 成功则返回文件句柄，否则返回出错码。
int sys_creat(const char * pathname, int mode)
{
    db7f:	83 ec 0c             	sub    $0xc,%esp
	return sys_open(pathname, O_CREAT | O_TRUNC, mode);
    db82:	83 ec 04             	sub    $0x4,%esp
    db85:	ff 74 24 18          	pushl  0x18(%esp)
    db89:	68 40 02 00 00       	push   $0x240
    db8e:	ff 74 24 1c          	pushl  0x1c(%esp)
    db92:	e8 c2 fd ff ff       	call   d959 <sys_open>
    db97:	83 c4 10             	add    $0x10,%esp
}
    db9a:	83 c4 0c             	add    $0xc,%esp
    db9d:	c3                   	ret    

0000db9e <sys_close>:

// 关闭文件系统调用.
// 参数fd是文件句柄.
// 成功则返回0,否则返回出错码.
int sys_close(unsigned int fd)
{
    db9e:	53                   	push   %ebx
    db9f:	83 ec 18             	sub    $0x18,%esp
	struct file * filp;

	// 首先检查参数有效性.若给出的文件句柄值大于程序同时打开的文件数NR_OPEN,则返回出错码(参数无效).然后复位进程的执行时关闭文件句柄位图对应位.若该文件句柄对应的
	// 文件结构指针是NULL,则返回出错码.
	if (fd >= NR_OPEN)
    dba2:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dba7:	76 0a                	jbe    dbb3 <sys_close+0x15>
		return -EINVAL;
    dba9:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dbae:	e9 c3 00 00 00       	jmp    dc76 <sys_close+0xd8>
	current->close_on_exec &= ~(1 << fd);
    dbb3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dbb8:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
    dbbe:	8b 44 24 20          	mov    0x20(%esp),%eax
    dbc2:	bb 01 00 00 00       	mov    $0x1,%ebx
    dbc7:	89 c1                	mov    %eax,%ecx
    dbc9:	d3 e3                	shl    %cl,%ebx
    dbcb:	89 d8                	mov    %ebx,%eax
    dbcd:	f7 d0                	not    %eax
    dbcf:	89 c1                	mov    %eax,%ecx
    dbd1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dbd6:	21 ca                	and    %ecx,%edx
    dbd8:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	if (!(filp = current->filp[fd]))
    dbde:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dbe3:	8b 54 24 20          	mov    0x20(%esp),%edx
    dbe7:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dbed:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dbf1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dbf5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dbfa:	75 07                	jne    dc03 <sys_close+0x65>
		return -EINVAL;
    dbfc:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dc01:	eb 73                	jmp    dc76 <sys_close+0xd8>
	// 现在置该文件句柄的文件结构指针为NULL.若在关闭文件之前,对应文件结构中的句柄引用计数已经为0,则说明内核出错,停机.否则将对应文件结构的引用计数减1.此时如果它还不
	// 为0,则说明有其他进程正在使用该文件,于是返回0(成功).如果引用计数已等于0,说明该文件已经没有进程引用,该文件结构已变为空闲.则释放该文件i节点,返回0.
	current->filp[fd] = NULL;
    dc03:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dc08:	8b 54 24 20          	mov    0x20(%esp),%edx
    dc0c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc12:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dc19:	00 
	if (filp->f_count == 0)
    dc1a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc1e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc22:	66 85 c0             	test   %ax,%ax
    dc25:	75 10                	jne    dc37 <sys_close+0x99>
		panic("Close: file count is 0");
    dc27:	83 ec 0c             	sub    $0xc,%esp
    dc2a:	68 18 38 02 00       	push   $0x23818
    dc2f:	e8 d3 af ff ff       	call   8c07 <panic>
    dc34:	83 c4 10             	add    $0x10,%esp
	if (--filp->f_count)
    dc37:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc3b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc3f:	8d 50 ff             	lea    -0x1(%eax),%edx
    dc42:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc46:	66 89 50 04          	mov    %dx,0x4(%eax)
    dc4a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc4e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc52:	66 85 c0             	test   %ax,%ax
    dc55:	74 07                	je     dc5e <sys_close+0xc0>
		return (0);
    dc57:	b8 00 00 00 00       	mov    $0x0,%eax
    dc5c:	eb 18                	jmp    dc76 <sys_close+0xd8>
	iput(filp->f_inode);
    dc5e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc62:	8b 40 08             	mov    0x8(%eax),%eax
    dc65:	83 ec 0c             	sub    $0xc,%esp
    dc68:	50                   	push   %eax
    dc69:	e8 4e 0a 00 00       	call   e6bc <iput>
    dc6e:	83 c4 10             	add    $0x10,%esp
	return (0);
    dc71:	b8 00 00 00 00       	mov    $0x0,%eax
}
    dc76:	83 c4 18             	add    $0x18,%esp
    dc79:	5b                   	pop    %ebx
    dc7a:	c3                   	ret    

0000dc7b <sys_lseek>:

// 重定位文件读写指针系统调用。
// 参数fd是文件句柄，offset是新的文件读写指针偏移值，origin是偏移的起始位置，可有三种选择：SEEK_SET（0,
// 从文件开始处）、SEEK_CUR（1,从当前读写位置）、SEEK_END（2,从文件尾处）。
int sys_lseek(unsigned int fd, off_t offset, int origin)
{
    dc7b:	83 ec 10             	sub    $0x10,%esp
	int tmp;

	// 首先判断函数提供的参数有效性。如果文件句柄大于程序最多打开文件数NR_OPEN（20），或者该句柄的文件结构指针为空，
	// 或者对应文件结构的i节点字段为空，或者指定设备文件指针是不可定位的，则返回出错码并退出。如果文件对应i节点是管道
	// 节点，则返回出错码退出。因为管道头尾指针不可随意移动！
	if (fd >= NR_OPEN || !(file = current->filp[fd]) || !(file->f_inode)
    dc7e:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    dc83:	77 52                	ja     dcd7 <sys_lseek+0x5c>
    dc85:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    dc8a:	8b 54 24 14          	mov    0x14(%esp),%edx
    dc8e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc94:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dc98:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dc9c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dca1:	74 34                	je     dcd7 <sys_lseek+0x5c>
    dca3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dca7:	8b 40 08             	mov    0x8(%eax),%eax
    dcaa:	85 c0                	test   %eax,%eax
    dcac:	74 29                	je     dcd7 <sys_lseek+0x5c>
	   || !IS_SEEKABLE(MAJOR(file->f_inode->i_dev)))
    dcae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcb2:	8b 40 08             	mov    0x8(%eax),%eax
    dcb5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dcb9:	66 c1 e8 08          	shr    $0x8,%ax
    dcbd:	66 85 c0             	test   %ax,%ax
    dcc0:	74 15                	je     dcd7 <sys_lseek+0x5c>
    dcc2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcc6:	8b 40 08             	mov    0x8(%eax),%eax
    dcc9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dccd:	66 c1 e8 08          	shr    $0x8,%ax
    dcd1:	66 83 f8 03          	cmp    $0x3,%ax
    dcd5:	76 0a                	jbe    dce1 <sys_lseek+0x66>
		return -EBADF;
    dcd7:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    dcdc:	e9 b1 00 00 00       	jmp    dd92 <sys_lseek+0x117>
	if (file->f_inode->i_pipe)
    dce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dce5:	8b 40 08             	mov    0x8(%eax),%eax
    dce8:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dcec:	84 c0                	test   %al,%al
    dcee:	74 0a                	je     dcfa <sys_lseek+0x7f>
		return -ESPIPE;
    dcf0:	b8 e3 ff ff ff       	mov    $0xffffffe3,%eax
    dcf5:	e9 98 00 00 00       	jmp    dd92 <sys_lseek+0x117>
	// 然后根据设置的定位标志，分别重新定位文件读写指针。
	switch (origin) {
    dcfa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    dcfe:	83 f8 01             	cmp    $0x1,%eax
    dd01:	74 24                	je     dd27 <sys_lseek+0xac>
    dd03:	83 f8 02             	cmp    $0x2,%eax
    dd06:	74 4d                	je     dd55 <sys_lseek+0xda>
    dd08:	85 c0                	test   %eax,%eax
    dd0a:	75 78                	jne    dd84 <sys_lseek+0x109>
		// origin = SEEK_SET，要求以文件起始处作为原点设置文件读写指针。若偏移值小于零，则出错返回错误码。否则设置文件
		// 读写指针等于offset。
		case 0:
			if (offset < 0) return -EINVAL;
    dd0c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    dd11:	79 07                	jns    dd1a <sys_lseek+0x9f>
    dd13:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd18:	eb 78                	jmp    dd92 <sys_lseek+0x117>
			file->f_pos = offset;
    dd1a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd1e:	8b 54 24 18          	mov    0x18(%esp),%edx
    dd22:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd25:	eb 64                	jmp    dd8b <sys_lseek+0x110>
		// origin = SEEK_CUR，要求以文件当前读写指针处作为原点重定位读写指针。如果文件当前指针加上偏移值小于0,则返回
		// 出错码退出。否则在当前读写指针上加上偏移值。
		case 1:
			if (file->f_pos + offset < 0) return -EINVAL;
    dd27:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd2b:	8b 50 0c             	mov    0xc(%eax),%edx
    dd2e:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd32:	01 d0                	add    %edx,%eax
    dd34:	85 c0                	test   %eax,%eax
    dd36:	79 07                	jns    dd3f <sys_lseek+0xc4>
    dd38:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd3d:	eb 53                	jmp    dd92 <sys_lseek+0x117>
			file->f_pos += offset;
    dd3f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd43:	8b 50 0c             	mov    0xc(%eax),%edx
    dd46:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd4a:	01 c2                	add    %eax,%edx
    dd4c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd50:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd53:	eb 36                	jmp    dd8b <sys_lseek+0x110>
		// origin = SEEK_END，要求以文件末尾作为原点重定位读写指针。此时若文件大小加上偏移值小于零则返回出错码退出。否则
		// 重定位读写指针为文件长度加上偏移值。
		case 2:
			if ((tmp = file->f_inode->i_size + offset) < 0)
    dd55:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd59:	8b 40 08             	mov    0x8(%eax),%eax
    dd5c:	8b 50 04             	mov    0x4(%eax),%edx
    dd5f:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd63:	01 d0                	add    %edx,%eax
    dd65:	89 44 24 08          	mov    %eax,0x8(%esp)
    dd69:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    dd6e:	79 07                	jns    dd77 <sys_lseek+0xfc>
				return -EINVAL;
    dd70:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd75:	eb 1b                	jmp    dd92 <sys_lseek+0x117>
			file->f_pos = tmp;
    dd77:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd7b:	8b 54 24 08          	mov    0x8(%esp),%edx
    dd7f:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd82:	eb 07                	jmp    dd8b <sys_lseek+0x110>
		// origin设置无效，返回出错码退出。
		default:
			return -EINVAL;
    dd84:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd89:	eb 07                	jmp    dd92 <sys_lseek+0x117>
	}
	return file->f_pos;             					// 最后返回重定位后的文件读写指针值。
    dd8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd8f:	8b 40 0c             	mov    0xc(%eax),%eax
}
    dd92:	83 c4 10             	add    $0x10,%esp
    dd95:	c3                   	ret    

0000dd96 <sys_read>:

// 读文件系统调用。
// 参数fd是文件句柄，buf是缓冲区，count是欲读字节数。
int sys_read(unsigned int fd, char * buf, int count)
{
    dd96:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    dd99:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dd9e:	77 25                	ja     ddc5 <sys_read+0x2f>
    dda0:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dda5:	78 1e                	js     ddc5 <sys_read+0x2f>
    dda7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    ddac:	8b 54 24 20          	mov    0x20(%esp),%edx
    ddb0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    ddb6:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    ddba:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ddbe:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ddc3:	75 0a                	jne    ddcf <sys_read+0x39>
		return -EINVAL;
    ddc5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ddca:	e9 99 01 00 00       	jmp    df68 <sys_read+0x1d2>
	if (!count)
    ddcf:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    ddd4:	75 0a                	jne    dde0 <sys_read+0x4a>
		return 0;
    ddd6:	b8 00 00 00 00       	mov    $0x0,%eax
    dddb:	e9 88 01 00 00       	jmp    df68 <sys_read+0x1d2>
	// 然后验证存放数据的缓冲区内存限制。并取文件的i节点。用于根据该i节点的属性，分别调用相应的读操作函数。若是管道操作，并且是读管道文件模式，则进行读
	// 管道操作，若成功则返回读取的字节数，否则返回出错码，退出。如果是字符型文件，则进行读字符设备操作，并返回读取的字符数。如果是块设备文件，则执行
	// 块设备读操作，并返回读取的字节数。
	verify_area(buf, count);
    dde0:	83 ec 08             	sub    $0x8,%esp
    dde3:	ff 74 24 30          	pushl  0x30(%esp)
    dde7:	ff 74 24 30          	pushl  0x30(%esp)
    ddeb:	e8 af a5 ff ff       	call   839f <verify_area>
    ddf0:	83 c4 10             	add    $0x10,%esp
	inode = file->f_inode;
    ddf3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddf7:	8b 40 08             	mov    0x8(%eax),%eax
    ddfa:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道文件的读操作
	if (inode->i_pipe)
    ddfe:	8b 44 24 08          	mov    0x8(%esp),%eax
    de02:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    de06:	84 c0                	test   %al,%al
    de08:	74 37                	je     de41 <sys_read+0xab>
		return (file->f_mode & 1) ? read_pipe(inode, buf, count) : -EIO;
    de0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de0e:	0f b7 00             	movzwl (%eax),%eax
    de11:	0f b7 c0             	movzwl %ax,%eax
    de14:	83 e0 01             	and    $0x1,%eax
    de17:	85 c0                	test   %eax,%eax
    de19:	74 1c                	je     de37 <sys_read+0xa1>
    de1b:	83 ec 04             	sub    $0x4,%esp
    de1e:	ff 74 24 2c          	pushl  0x2c(%esp)
    de22:	ff 74 24 2c          	pushl  0x2c(%esp)
    de26:	ff 74 24 14          	pushl  0x14(%esp)
    de2a:	e8 37 46 00 00       	call   12466 <read_pipe>
    de2f:	83 c4 10             	add    $0x10,%esp
    de32:	e9 31 01 00 00       	jmp    df68 <sys_read+0x1d2>
    de37:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    de3c:	e9 27 01 00 00       	jmp    df68 <sys_read+0x1d2>
	// 字符设备的读操作
	if (S_ISCHR(inode->i_mode))
    de41:	8b 44 24 08          	mov    0x8(%esp),%eax
    de45:	0f b7 00             	movzwl (%eax),%eax
    de48:	0f b7 c0             	movzwl %ax,%eax
    de4b:	25 00 f0 00 00       	and    $0xf000,%eax
    de50:	3d 00 20 00 00       	cmp    $0x2000,%eax
    de55:	75 2e                	jne    de85 <sys_read+0xef>
		return rw_char(READ, inode->i_zone[0], buf, count, &file->f_pos);
    de57:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de5b:	8d 50 0c             	lea    0xc(%eax),%edx
    de5e:	8b 44 24 08          	mov    0x8(%esp),%eax
    de62:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de66:	0f b7 c0             	movzwl %ax,%eax
    de69:	83 ec 0c             	sub    $0xc,%esp
    de6c:	52                   	push   %edx
    de6d:	ff 74 24 38          	pushl  0x38(%esp)
    de71:	ff 74 24 38          	pushl  0x38(%esp)
    de75:	50                   	push   %eax
    de76:	6a 00                	push   $0x0
    de78:	e8 fb 2b 00 00       	call   10a78 <rw_char>
    de7d:	83 c4 20             	add    $0x20,%esp
    de80:	e9 e3 00 00 00       	jmp    df68 <sys_read+0x1d2>
	// 块设备的读操作
	if (S_ISBLK(inode->i_mode))
    de85:	8b 44 24 08          	mov    0x8(%esp),%eax
    de89:	0f b7 00             	movzwl (%eax),%eax
    de8c:	0f b7 c0             	movzwl %ax,%eax
    de8f:	25 00 f0 00 00       	and    $0xf000,%eax
    de94:	3d 00 60 00 00       	cmp    $0x6000,%eax
    de99:	75 29                	jne    dec4 <sys_read+0x12e>
		return block_read(inode->i_zone[0], &file->f_pos, buf, count);
    de9b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de9f:	8d 50 0c             	lea    0xc(%eax),%edx
    dea2:	8b 44 24 08          	mov    0x8(%esp),%eax
    dea6:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    deaa:	0f b7 c0             	movzwl %ax,%eax
    dead:	ff 74 24 28          	pushl  0x28(%esp)
    deb1:	ff 74 24 28          	pushl  0x28(%esp)
    deb5:	52                   	push   %edx
    deb6:	50                   	push   %eax
    deb7:	e8 42 28 00 00       	call   106fe <block_read>
    debc:	83 c4 10             	add    $0x10,%esp
    debf:	e9 a4 00 00 00       	jmp    df68 <sys_read+0x1d2>
	// 如果是目录文件或者是常规文件，则首先验证读取字节数count的有效性并进行调整（若读取字节数加上文件当前读写指针值大于文件长度，则重新设置读取字节
	// 数为文件长度-当前读写指针值，若读取数等于0,则返回0退出），然后执行文件读操作，返回读取的字节数并退出。
	if (S_ISDIR(inode->i_mode) || S_ISREG(inode->i_mode)) {
    dec4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dec8:	0f b7 00             	movzwl (%eax),%eax
    decb:	0f b7 c0             	movzwl %ax,%eax
    dece:	25 00 f0 00 00       	and    $0xf000,%eax
    ded3:	3d 00 40 00 00       	cmp    $0x4000,%eax
    ded8:	74 16                	je     def0 <sys_read+0x15a>
    deda:	8b 44 24 08          	mov    0x8(%esp),%eax
    dede:	0f b7 00             	movzwl (%eax),%eax
    dee1:	0f b7 c0             	movzwl %ax,%eax
    dee4:	25 00 f0 00 00       	and    $0xf000,%eax
    dee9:	3d 00 80 00 00       	cmp    $0x8000,%eax
    deee:	75 58                	jne    df48 <sys_read+0x1b2>
		if (count + file->f_pos > inode->i_size)
    def0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    def4:	8b 50 0c             	mov    0xc(%eax),%edx
    def7:	8b 44 24 28          	mov    0x28(%esp),%eax
    defb:	01 d0                	add    %edx,%eax
    defd:	89 c2                	mov    %eax,%edx
    deff:	8b 44 24 08          	mov    0x8(%esp),%eax
    df03:	8b 40 04             	mov    0x4(%eax),%eax
    df06:	39 c2                	cmp    %eax,%edx
    df08:	76 16                	jbe    df20 <sys_read+0x18a>
			count = inode->i_size - file->f_pos;
    df0a:	8b 44 24 08          	mov    0x8(%esp),%eax
    df0e:	8b 50 04             	mov    0x4(%eax),%edx
    df11:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df15:	8b 40 0c             	mov    0xc(%eax),%eax
    df18:	29 c2                	sub    %eax,%edx
    df1a:	89 d0                	mov    %edx,%eax
    df1c:	89 44 24 28          	mov    %eax,0x28(%esp)
		if (count <= 0)
    df20:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df25:	7f 07                	jg     df2e <sys_read+0x198>
			return 0;
    df27:	b8 00 00 00 00       	mov    $0x0,%eax
    df2c:	eb 3a                	jmp    df68 <sys_read+0x1d2>
		return file_read(inode, file, buf, count);
    df2e:	ff 74 24 28          	pushl  0x28(%esp)
    df32:	ff 74 24 28          	pushl  0x28(%esp)
    df36:	ff 74 24 14          	pushl  0x14(%esp)
    df3a:	ff 74 24 14          	pushl  0x14(%esp)
    df3e:	e8 bb 2b 00 00       	call   10afe <file_read>
    df43:	83 c4 10             	add    $0x10,%esp
    df46:	eb 20                	jmp    df68 <sys_read+0x1d2>
	}
	// 执行到这里，说明我们无法判断文件的属性。则打印节点文件的属性，并返回出错码退出。
	printk("(Read)inode->i_mode=%06o\n\r", inode->i_mode);
    df48:	8b 44 24 08          	mov    0x8(%esp),%eax
    df4c:	0f b7 00             	movzwl (%eax),%eax
    df4f:	0f b7 c0             	movzwl %ax,%eax
    df52:	83 ec 08             	sub    $0x8,%esp
    df55:	50                   	push   %eax
    df56:	68 2f 38 02 00       	push   $0x2382f
    df5b:	e8 e6 ac ff ff       	call   8c46 <printk>
    df60:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    df63:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    df68:	83 c4 1c             	add    $0x1c,%esp
    df6b:	c3                   	ret    

0000df6c <sys_write>:

// 写文件系统调用.
// 参数fd是文件句柄,buf是用户缓冲区,count是欲写字节数.
int sys_write(unsigned int fd, char * buf, int count)
{
    df6c:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    df6f:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    df74:	77 25                	ja     df9b <sys_write+0x2f>
    df76:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df7b:	78 1e                	js     df9b <sys_write+0x2f>
    df7d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
    df82:	8b 54 24 20          	mov    0x20(%esp),%edx
    df86:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    df8c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    df90:	89 44 24 0c          	mov    %eax,0xc(%esp)
    df94:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    df99:	75 0a                	jne    dfa5 <sys_write+0x39>
		return -EINVAL;
    df9b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dfa0:	e9 2f 01 00 00       	jmp    e0d4 <sys_write+0x168>
	// Log(LOG_INFO_TYPE, "<<<<< sys_write : fd = %d>>>>>\n", fd);
	if (!count)
    dfa5:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dfaa:	75 0a                	jne    dfb6 <sys_write+0x4a>
		return 0;
    dfac:	b8 00 00 00 00       	mov    $0x0,%eax
    dfb1:	e9 1e 01 00 00       	jmp    e0d4 <sys_write+0x168>
	// 然后验证存放数据的缓冲区内存限制.并取文件的i节点.根据该i节点的属性,分别调用相应的写操作函数.若是管道文件,并且是写管道文件模式,则进行写管道操作,若成功则
	// 返回写入的字节数,否则返回出错码退出.如果是字符设备文件,则进行写字符设备操作,返回写入的字符数退出.如果是块设备文件,则进行块设备写操作,并返回写入的字节数
	// 退出.若是常规文件,则执行文件写操作,并返回写入的字节数.退出.
	inode = file->f_inode;
    dfb6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dfba:	8b 40 08             	mov    0x8(%eax),%eax
    dfbd:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道的写操作
	if (inode->i_pipe)
    dfc1:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfc5:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dfc9:	84 c0                	test   %al,%al
    dfcb:	74 37                	je     e004 <sys_write+0x98>
		return (file->f_mode & 2) ? write_pipe(inode, buf, count) : -EIO;
    dfcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dfd1:	0f b7 00             	movzwl (%eax),%eax
    dfd4:	0f b7 c0             	movzwl %ax,%eax
    dfd7:	83 e0 02             	and    $0x2,%eax
    dfda:	85 c0                	test   %eax,%eax
    dfdc:	74 1c                	je     dffa <sys_write+0x8e>
    dfde:	83 ec 04             	sub    $0x4,%esp
    dfe1:	ff 74 24 2c          	pushl  0x2c(%esp)
    dfe5:	ff 74 24 2c          	pushl  0x2c(%esp)
    dfe9:	ff 74 24 14          	pushl  0x14(%esp)
    dfed:	e8 13 46 00 00       	call   12605 <write_pipe>
    dff2:	83 c4 10             	add    $0x10,%esp
    dff5:	e9 da 00 00 00       	jmp    e0d4 <sys_write+0x168>
    dffa:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    dfff:	e9 d0 00 00 00       	jmp    e0d4 <sys_write+0x168>
	// 字符设备的写操作
	if (S_ISCHR(inode->i_mode))
    e004:	8b 44 24 08          	mov    0x8(%esp),%eax
    e008:	0f b7 00             	movzwl (%eax),%eax
    e00b:	0f b7 c0             	movzwl %ax,%eax
    e00e:	25 00 f0 00 00       	and    $0xf000,%eax
    e013:	3d 00 20 00 00       	cmp    $0x2000,%eax
    e018:	75 2e                	jne    e048 <sys_write+0xdc>
		return rw_char(WRITE, inode->i_zone[0], buf, count, &file->f_pos);
    e01a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e01e:	8d 50 0c             	lea    0xc(%eax),%edx
    e021:	8b 44 24 08          	mov    0x8(%esp),%eax
    e025:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e029:	0f b7 c0             	movzwl %ax,%eax
    e02c:	83 ec 0c             	sub    $0xc,%esp
    e02f:	52                   	push   %edx
    e030:	ff 74 24 38          	pushl  0x38(%esp)
    e034:	ff 74 24 38          	pushl  0x38(%esp)
    e038:	50                   	push   %eax
    e039:	6a 01                	push   $0x1
    e03b:	e8 38 2a 00 00       	call   10a78 <rw_char>
    e040:	83 c4 20             	add    $0x20,%esp
    e043:	e9 8c 00 00 00       	jmp    e0d4 <sys_write+0x168>
	// 块设备的写操作
	if (S_ISBLK(inode->i_mode))
    e048:	8b 44 24 08          	mov    0x8(%esp),%eax
    e04c:	0f b7 00             	movzwl (%eax),%eax
    e04f:	0f b7 c0             	movzwl %ax,%eax
    e052:	25 00 f0 00 00       	and    $0xf000,%eax
    e057:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e05c:	75 26                	jne    e084 <sys_write+0x118>
		return block_write(inode->i_zone[0], &file->f_pos, buf, count);
    e05e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e062:	8d 50 0c             	lea    0xc(%eax),%edx
    e065:	8b 44 24 08          	mov    0x8(%esp),%eax
    e069:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e06d:	0f b7 c0             	movzwl %ax,%eax
    e070:	ff 74 24 28          	pushl  0x28(%esp)
    e074:	ff 74 24 28          	pushl  0x28(%esp)
    e078:	52                   	push   %edx
    e079:	50                   	push   %eax
    e07a:	e8 cb 24 00 00       	call   1054a <block_write>
    e07f:	83 c4 10             	add    $0x10,%esp
    e082:	eb 50                	jmp    e0d4 <sys_write+0x168>
	// 文件的写操作
	if (S_ISREG(inode->i_mode))
    e084:	8b 44 24 08          	mov    0x8(%esp),%eax
    e088:	0f b7 00             	movzwl (%eax),%eax
    e08b:	0f b7 c0             	movzwl %ax,%eax
    e08e:	25 00 f0 00 00       	and    $0xf000,%eax
    e093:	3d 00 80 00 00       	cmp    $0x8000,%eax
    e098:	75 1a                	jne    e0b4 <sys_write+0x148>
		return file_write(inode, file, buf, count);
    e09a:	ff 74 24 28          	pushl  0x28(%esp)
    e09e:	ff 74 24 28          	pushl  0x28(%esp)
    e0a2:	ff 74 24 14          	pushl  0x14(%esp)
    e0a6:	ff 74 24 14          	pushl  0x14(%esp)
    e0aa:	e8 f3 2b 00 00       	call   10ca2 <file_write>
    e0af:	83 c4 10             	add    $0x10,%esp
    e0b2:	eb 20                	jmp    e0d4 <sys_write+0x168>
	// 执行到这里,说明我们无法判断文件的属性.则打印节点文件属性,并返回出错码退出.
	printk("(Write)inode->i_mode=%06o\n\r", inode->i_mode);
    e0b4:	8b 44 24 08          	mov    0x8(%esp),%eax
    e0b8:	0f b7 00             	movzwl (%eax),%eax
    e0bb:	0f b7 c0             	movzwl %ax,%eax
    e0be:	83 ec 08             	sub    $0x8,%esp
    e0c1:	50                   	push   %eax
    e0c2:	68 4a 38 02 00       	push   $0x2384a
    e0c7:	e8 7a ab ff ff       	call   8c46 <printk>
    e0cc:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    e0cf:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    e0d4:	83 c4 1c             	add    $0x1c,%esp
    e0d7:	c3                   	ret    

0000e0d8 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    e0d8:	57                   	push   %edi
    e0d9:	83 ec 04             	sub    $0x4,%esp
    e0dc:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0e0:	88 04 24             	mov    %al,(%esp)
__asm__(
    e0e3:	0f b6 04 24          	movzbl (%esp),%eax
    e0e7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e0eb:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    e0ef:	89 d7                	mov    %edx,%edi
    e0f1:	fc                   	cld    
    e0f2:	57                   	push   %edi
    e0f3:	f3 aa                	rep stos %al,%es:(%edi)
    e0f5:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    e0f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e0fa:	83 c4 04             	add    $0x4,%esp
    e0fd:	5f                   	pop    %edi
    e0fe:	c3                   	ret    

0000e0ff <wait_on_inode>:
static void write_inode(struct m_inode * inode);					// 写i节点信息到高速缓冲中.

// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
    e0ff:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e102:	fa                   	cli    
	while (inode->i_lock)
    e103:	eb 13                	jmp    e118 <wait_on_inode+0x19>
		sleep_on(&inode->i_wait);									// kernel/sched.c
    e105:	8b 44 24 10          	mov    0x10(%esp),%eax
    e109:	83 c0 20             	add    $0x20,%eax
    e10c:	83 ec 0c             	sub    $0xc,%esp
    e10f:	50                   	push   %eax
    e110:	e8 1f 90 ff ff       	call   7134 <sleep_on>
    e115:	83 c4 10             	add    $0x10,%esp
	while (inode->i_lock)
    e118:	8b 44 24 10          	mov    0x10(%esp),%eax
    e11c:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e120:	84 c0                	test   %al,%al
    e122:	75 e1                	jne    e105 <wait_on_inode+0x6>
	sti();
    e124:	fb                   	sti    
}
    e125:	90                   	nop
    e126:	83 c4 0c             	add    $0xc,%esp
    e129:	c3                   	ret    

0000e12a <lock_inode>:

// 对i节点上锁(锁定指定的i节点)
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
    e12a:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e12d:	fa                   	cli    
	while (inode->i_lock)
    e12e:	eb 13                	jmp    e143 <lock_inode+0x19>
		sleep_on(&inode->i_wait);
    e130:	8b 44 24 10          	mov    0x10(%esp),%eax
    e134:	83 c0 20             	add    $0x20,%eax
    e137:	83 ec 0c             	sub    $0xc,%esp
    e13a:	50                   	push   %eax
    e13b:	e8 f4 8f ff ff       	call   7134 <sleep_on>
    e140:	83 c4 10             	add    $0x10,%esp
	while (inode->i_lock)
    e143:	8b 44 24 10          	mov    0x10(%esp),%eax
    e147:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e14b:	84 c0                	test   %al,%al
    e14d:	75 e1                	jne    e130 <lock_inode+0x6>
	inode->i_lock = 1;												// 置锁定标志.
    e14f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e153:	c6 40 36 01          	movb   $0x1,0x36(%eax)
	sti();
    e157:	fb                   	sti    
}
    e158:	90                   	nop
    e159:	83 c4 0c             	add    $0xc,%esp
    e15c:	c3                   	ret    

0000e15d <unlock_inode>:

// 对指定的i节点解锁.
// 复位i节点的锁定标志,并明确地唤醒等待在此i节点等待队列i_wait上的所有进程.
static inline void unlock_inode(struct m_inode * inode)
{
    e15d:	83 ec 0c             	sub    $0xc,%esp
	inode->i_lock = 0;
    e160:	8b 44 24 10          	mov    0x10(%esp),%eax
    e164:	c6 40 36 00          	movb   $0x0,0x36(%eax)
	wake_up(&inode->i_wait);										// kernel/sched.c
    e168:	8b 44 24 10          	mov    0x10(%esp),%eax
    e16c:	83 c0 20             	add    $0x20,%eax
    e16f:	83 ec 0c             	sub    $0xc,%esp
    e172:	50                   	push   %eax
    e173:	e8 d5 8f ff ff       	call   714d <wake_up>
    e178:	83 c4 10             	add    $0x10,%esp
}
    e17b:	90                   	nop
    e17c:	83 c4 0c             	add    $0xc,%esp
    e17f:	c3                   	ret    

0000e180 <invalidate_inodes>:

// 释放设备dev在内存i节点表中的所有i节点。
// 扫描内存中的i节点表数组，如果是指定设备使用的i节点就释放之。
void invalidate_inodes(int dev)
{
    e180:	83 ec 1c             	sub    $0x1c,%esp

	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
    e183:	c7 44 24 08 c0 11 03 	movl   $0x311c0,0x8(%esp)
    e18a:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e18b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e192:	00 
    e193:	eb 59                	jmp    e1ee <invalidate_inodes+0x6e>
		wait_on_inode(inode);           							// 等待该i节点可用（解锁）。
    e195:	83 ec 0c             	sub    $0xc,%esp
    e198:	ff 74 24 14          	pushl  0x14(%esp)
    e19c:	e8 5e ff ff ff       	call   e0ff <wait_on_inode>
    e1a1:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev == dev) {
    e1a4:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1a8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e1ac:	0f b7 c0             	movzwl %ax,%eax
    e1af:	39 44 24 20          	cmp    %eax,0x20(%esp)
    e1b3:	75 2f                	jne    e1e4 <invalidate_inodes+0x64>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
    e1b5:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1b9:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e1bd:	66 85 c0             	test   %ax,%ax
    e1c0:	74 10                	je     e1d2 <invalidate_inodes+0x52>
				printk("inode in use on removed disk\n\r");
    e1c2:	83 ec 0c             	sub    $0xc,%esp
    e1c5:	68 68 38 02 00       	push   $0x23868
    e1ca:	e8 77 aa ff ff       	call   8c46 <printk>
    e1cf:	83 c4 10             	add    $0x10,%esp
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
    e1d2:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1d6:	c6 40 37 00          	movb   $0x0,0x37(%eax)
    e1da:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1de:	66 c7 40 30 00 00    	movw   $0x0,0x30(%eax)
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e1e4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e1e9:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e1ee:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e1f3:	7e a0                	jle    e195 <invalidate_inodes+0x15>
		}
	}
}
    e1f5:	90                   	nop
    e1f6:	83 c4 1c             	add    $0x1c,%esp
    e1f9:	c3                   	ret    

0000e1fa <sync_inodes>:

// 同步所有i节点。
// 把内存i节点表中所有i节点与设备上i节点作同步操作。
void sync_inodes(void)
{
    e1fa:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
    e1fd:	c7 44 24 08 c0 11 03 	movl   $0x311c0,0x8(%esp)
    e204:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e205:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e20c:	00 
    e20d:	eb 40                	jmp    e24f <sync_inodes+0x55>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
    e20f:	83 ec 0c             	sub    $0xc,%esp
    e212:	ff 74 24 14          	pushl  0x14(%esp)
    e216:	e8 e4 fe ff ff       	call   e0ff <wait_on_inode>
    e21b:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
    e21e:	8b 44 24 08          	mov    0x8(%esp),%eax
    e222:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e226:	84 c0                	test   %al,%al
    e228:	74 1b                	je     e245 <sync_inodes+0x4b>
    e22a:	8b 44 24 08          	mov    0x8(%esp),%eax
    e22e:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e232:	84 c0                	test   %al,%al
    e234:	75 0f                	jne    e245 <sync_inodes+0x4b>
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
    e236:	83 ec 0c             	sub    $0xc,%esp
    e239:	ff 74 24 14          	pushl  0x14(%esp)
    e23d:	e8 4f 0b 00 00       	call   ed91 <write_inode>
    e242:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e245:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e24a:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e24f:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e254:	7e b9                	jle    e20f <sync_inodes+0x15>
	}
}
    e256:	90                   	nop
    e257:	83 c4 1c             	add    $0x1c,%esp
    e25a:	c3                   	ret    

0000e25b <_bmap>:

// 文件数据块映射到盘块的处理操作.(block位图处理函数,bmap - block map)
// 参数:inode - 文件的i节点指针;block - 文件中的数据块号;create - 创建块标志.该函数把指定的文件数据块block对应到设备上逻辑块上,并返回逻辑块号.
// 如果创建标志置位,则在设备上对应逻辑块不存在时就申请新磁盘块,返回文件数据块block对应在设备上的逻辑块号(盘块号).
static int _bmap(struct m_inode * inode, int block, int create)
{
    e25b:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i;

	// 首先判断参数文件数据块号block的有效性.如果块号小于0,则停机.如果块号大于直接块数 + 间接块数 + 二次间接块数,超出文件系统表示范围,则停机.
	if (block < 0)
    e25e:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    e263:	79 10                	jns    e275 <_bmap+0x1a>
		panic("_bmap: block<0");
    e265:	83 ec 0c             	sub    $0xc,%esp
    e268:	68 87 38 02 00       	push   $0x23887
    e26d:	e8 95 a9 ff ff       	call   8c07 <panic>
    e272:	83 c4 10             	add    $0x10,%esp
	if (block >= 7 + 512 + 512 * 512)
    e275:	81 7c 24 24 06 02 04 	cmpl   $0x40206,0x24(%esp)
    e27c:	00 
    e27d:	7e 10                	jle    e28f <_bmap+0x34>
		panic("_bmap: block>big");
    e27f:	83 ec 0c             	sub    $0xc,%esp
    e282:	68 96 38 02 00       	push   $0x23896
    e287:	e8 7b a9 ff ff       	call   8c07 <panic>
    e28c:	83 c4 10             	add    $0x10,%esp
	// 然后根据文件块号的大小值和是否设置了创建标志分别进行处理.如果该块号小于7,则使用直接块表示.如果创建标志置位,并且i节点中对应该块的逻辑块(区段)字段为0,
	// 则向相应设备申请一磁盘块(逻辑块),并且将盘上逻辑块号(盘块号)填入逻辑块字段中.然后设置i节点改变时间,置i节点已修改标志.最后返回逻辑块号.函数new_block()
	// 定义在bitmap.c程序中.
	if (block < 7) {
    e28f:	83 7c 24 24 06       	cmpl   $0x6,0x24(%esp)
    e294:	0f 8f 93 00 00 00    	jg     e32d <_bmap+0xd2>
		if (create && !inode->i_zone[block])
    e29a:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e29f:	74 77                	je     e318 <_bmap+0xbd>
    e2a1:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2a5:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2a9:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e2ae:	66 85 c0             	test   %ax,%ax
    e2b1:	75 65                	jne    e318 <_bmap+0xbd>
			if (inode->i_zone[block] = new_block(inode->i_dev)) {
    e2b3:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2b7:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e2bb:	0f b7 c0             	movzwl %ax,%eax
    e2be:	83 ec 0c             	sub    $0xc,%esp
    e2c1:	50                   	push   %eax
    e2c2:	e8 6e 6b 00 00       	call   14e35 <new_block>
    e2c7:	83 c4 10             	add    $0x10,%esp
    e2ca:	89 c1                	mov    %eax,%ecx
    e2cc:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2d0:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2d4:	66 89 4c 50 0e       	mov    %cx,0xe(%eax,%edx,2)
    e2d9:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2dd:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2e1:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e2e6:	66 85 c0             	test   %ax,%ax
    e2e9:	74 2d                	je     e318 <_bmap+0xbd>
				inode->i_ctime = CURRENT_TIME;
    e2eb:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e2f0:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e2f6:	01 d0                	add    %edx,%eax
    e2f8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e2fd:	f7 e2                	mul    %edx
    e2ff:	c1 ea 05             	shr    $0x5,%edx
    e302:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e307:	01 c2                	add    %eax,%edx
    e309:	8b 44 24 20          	mov    0x20(%esp),%eax
    e30d:	89 50 2c             	mov    %edx,0x2c(%eax)
				inode->i_dirt = 1;
    e310:	8b 44 24 20          	mov    0x20(%esp),%eax
    e314:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			}
		return inode->i_zone[block];
    e318:	8b 44 24 20          	mov    0x20(%esp),%eax
    e31c:	8b 54 24 24          	mov    0x24(%esp),%edx
    e320:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e325:	0f b7 c0             	movzwl %ax,%eax
    e328:	e9 53 03 00 00       	jmp    e680 <_bmap+0x425>
	}
	// 如果该块号>=7,且小于7+512,则说明使用的是一次间接块.下面对一次间接块进行处理.如果是创建,并且该i节点中对应间接块字段i_zone[7]是0,表明文件是首次使用间接块,
	// 则需申请一磁盘块用于存放间接块信息,并将此实际磁盘块号填入间接块字段中.然后设置i节点已修改标志和修改时间.如果创建时申请磁盘块失败,则此时i节点间接块字段i_zone[7]
	// 为0,则返回0.或者不是创建,但i_zone[7]原来就为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 7;
    e32d:	83 6c 24 24 07       	subl   $0x7,0x24(%esp)
	if (block < 512) {
    e332:	81 7c 24 24 ff 01 00 	cmpl   $0x1ff,0x24(%esp)
    e339:	00 
    e33a:	0f 8f 3b 01 00 00    	jg     e47b <_bmap+0x220>
		// 如果创建标志置位，同时索引7这个位置没有绑定到对应的逻辑块,则申请一个逻辑块
		if (create && !inode->i_zone[7])
    e340:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e345:	74 68                	je     e3af <_bmap+0x154>
    e347:	8b 44 24 20          	mov    0x20(%esp),%eax
    e34b:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e34f:	66 85 c0             	test   %ax,%ax
    e352:	75 5b                	jne    e3af <_bmap+0x154>
			if (inode->i_zone[7] = new_block(inode->i_dev)) {
    e354:	8b 44 24 20          	mov    0x20(%esp),%eax
    e358:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e35c:	0f b7 c0             	movzwl %ax,%eax
    e35f:	83 ec 0c             	sub    $0xc,%esp
    e362:	50                   	push   %eax
    e363:	e8 cd 6a 00 00       	call   14e35 <new_block>
    e368:	83 c4 10             	add    $0x10,%esp
    e36b:	89 c2                	mov    %eax,%edx
    e36d:	8b 44 24 20          	mov    0x20(%esp),%eax
    e371:	66 89 50 1c          	mov    %dx,0x1c(%eax)
    e375:	8b 44 24 20          	mov    0x20(%esp),%eax
    e379:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e37d:	66 85 c0             	test   %ax,%ax
    e380:	74 2d                	je     e3af <_bmap+0x154>
				inode->i_dirt = 1;
    e382:	8b 44 24 20          	mov    0x20(%esp),%eax
    e386:	c6 40 37 01          	movb   $0x1,0x37(%eax)
				inode->i_ctime = CURRENT_TIME;
    e38a:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e38f:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e395:	01 d0                	add    %edx,%eax
    e397:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e39c:	f7 e2                	mul    %edx
    e39e:	c1 ea 05             	shr    $0x5,%edx
    e3a1:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e3a6:	01 c2                	add    %eax,%edx
    e3a8:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3ac:	89 50 2c             	mov    %edx,0x2c(%eax)
			}
		if (!inode->i_zone[7])
    e3af:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3b3:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e3b7:	66 85 c0             	test   %ax,%ax
    e3ba:	75 0a                	jne    e3c6 <_bmap+0x16b>
			return 0;
    e3bc:	b8 00 00 00 00       	mov    $0x0,%eax
    e3c1:	e9 ba 02 00 00       	jmp    e680 <_bmap+0x425>
		// 现在读取设备上该i节点的一次间接块.并取该间接块上第block项中的逻辑块号(盘块号)i.每一项占2个字节.如果是创建并且间接块的第block项中的逻辑块号为0的话,则申请一磁盘块,
		// 并让间接块中的第block项等于该新逻辑块块号.然后置位间接块的已修改标志.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
		if (!(bh = bread(inode->i_dev, inode->i_zone[7])))
    e3c6:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3ca:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e3ce:	0f b7 d0             	movzwl %ax,%edx
    e3d1:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3d5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e3d9:	0f b7 c0             	movzwl %ax,%eax
    e3dc:	83 ec 08             	sub    $0x8,%esp
    e3df:	52                   	push   %edx
    e3e0:	50                   	push   %eax
    e3e1:	e8 bd 12 00 00       	call   f6a3 <bread>
    e3e6:	83 c4 10             	add    $0x10,%esp
    e3e9:	89 44 24 08          	mov    %eax,0x8(%esp)
    e3ed:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e3f2:	75 0a                	jne    e3fe <_bmap+0x1a3>
			return 0;
    e3f4:	b8 00 00 00 00       	mov    $0x0,%eax
    e3f9:	e9 82 02 00 00       	jmp    e680 <_bmap+0x425>
		i = ((unsigned short *) (bh->b_data))[block];
    e3fe:	8b 44 24 08          	mov    0x8(%esp),%eax
    e402:	8b 00                	mov    (%eax),%eax
    e404:	8b 54 24 24          	mov    0x24(%esp),%edx
    e408:	01 d2                	add    %edx,%edx
    e40a:	01 d0                	add    %edx,%eax
    e40c:	0f b7 00             	movzwl (%eax),%eax
    e40f:	0f b7 c0             	movzwl %ax,%eax
    e412:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (create && !i)
    e416:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e41b:	74 46                	je     e463 <_bmap+0x208>
    e41d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e422:	75 3f                	jne    e463 <_bmap+0x208>
			if (i = new_block(inode->i_dev)) {
    e424:	8b 44 24 20          	mov    0x20(%esp),%eax
    e428:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e42c:	0f b7 c0             	movzwl %ax,%eax
    e42f:	83 ec 0c             	sub    $0xc,%esp
    e432:	50                   	push   %eax
    e433:	e8 fd 69 00 00       	call   14e35 <new_block>
    e438:	83 c4 10             	add    $0x10,%esp
    e43b:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e43f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e444:	74 1d                	je     e463 <_bmap+0x208>
				((unsigned short *) (bh->b_data))[block] = i;
    e446:	8b 44 24 08          	mov    0x8(%esp),%eax
    e44a:	8b 00                	mov    (%eax),%eax
    e44c:	8b 54 24 24          	mov    0x24(%esp),%edx
    e450:	01 d2                	add    %edx,%edx
    e452:	01 d0                	add    %edx,%eax
    e454:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e458:	66 89 10             	mov    %dx,(%eax)
				bh->b_dirt = 1;
    e45b:	8b 44 24 08          	mov    0x8(%esp),%eax
    e45f:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			}
		// 最后释放该间接块占用的缓冲块,并返回磁盘上新申请或原有的对应block的逻辑块块号.
		brelse(bh);
    e463:	83 ec 0c             	sub    $0xc,%esp
    e466:	ff 74 24 14          	pushl  0x14(%esp)
    e46a:	e8 de 11 00 00       	call   f64d <brelse>
    e46f:	83 c4 10             	add    $0x10,%esp
		return i;
    e472:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e476:	e9 05 02 00 00       	jmp    e680 <_bmap+0x425>
	}
	// 若程序运行到此,则表明数据块属于二次间接块.其处理过程与一次间接块类似.下面是对二次间接块的处理.首先将block再减去间接块所容纳的块数(512).然后根据
	// 是否设置了创建标志进行创建或寻找处理.如果是新创建并且i节点的二次间接块字段为0,则需申请一磁盘块用于存放二次间接块的一级块信息,并将此实际磁盘块号填入
	// 二次间接块字段中.之后,置i节点已修改编制和修改时间.同样地,如果创建时申请磁盘块失败,则此时i节点二次间接块字段i_zone[8]为0,则返回0.或者不是创建,但
	// i_zone[8]原来变为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 512;
    e47b:	81 6c 24 24 00 02 00 	subl   $0x200,0x24(%esp)
    e482:	00 
	if (create && !inode->i_zone[8])
    e483:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e488:	74 68                	je     e4f2 <_bmap+0x297>
    e48a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e48e:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e492:	66 85 c0             	test   %ax,%ax
    e495:	75 5b                	jne    e4f2 <_bmap+0x297>
		if (inode->i_zone[8] = new_block(inode->i_dev)) {
    e497:	8b 44 24 20          	mov    0x20(%esp),%eax
    e49b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e49f:	0f b7 c0             	movzwl %ax,%eax
    e4a2:	83 ec 0c             	sub    $0xc,%esp
    e4a5:	50                   	push   %eax
    e4a6:	e8 8a 69 00 00       	call   14e35 <new_block>
    e4ab:	83 c4 10             	add    $0x10,%esp
    e4ae:	89 c2                	mov    %eax,%edx
    e4b0:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4b4:	66 89 50 1e          	mov    %dx,0x1e(%eax)
    e4b8:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4bc:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4c0:	66 85 c0             	test   %ax,%ax
    e4c3:	74 2d                	je     e4f2 <_bmap+0x297>
			inode->i_dirt = 1;
    e4c5:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4c9:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			inode->i_ctime = CURRENT_TIME;
    e4cd:	a1 00 fb 02 00       	mov    0x2fb00,%eax
    e4d2:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
    e4d8:	01 d0                	add    %edx,%eax
    e4da:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e4df:	f7 e2                	mul    %edx
    e4e1:	c1 ea 05             	shr    $0x5,%edx
    e4e4:	a1 04 fb 02 00       	mov    0x2fb04,%eax
    e4e9:	01 c2                	add    %eax,%edx
    e4eb:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4ef:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
	if (!inode->i_zone[8])
    e4f2:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4f6:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4fa:	66 85 c0             	test   %ax,%ax
    e4fd:	75 0a                	jne    e509 <_bmap+0x2ae>
		return 0;
    e4ff:	b8 00 00 00 00       	mov    $0x0,%eax
    e504:	e9 77 01 00 00       	jmp    e680 <_bmap+0x425>
	// 现在读取设备上该i节点的二次间接块.并取该二次间接块的一级块上第(block/512)项中的逻辑块号i.如果是创建并且二次间接块的一级块上第(block/512)项中的逻辑
	// 块号为0的话,则需申请一磁盘块(逻辑块)作为二次间接块的二级块i,并让二次间接块的一级块中第(block/512)项等于该二级块的块号i.然后置位二次间接块的一级块已
	// 修改标志.并释放二次间接块的一级块.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
	if (!(bh = bread(inode->i_dev, inode->i_zone[8])))
    e509:	8b 44 24 20          	mov    0x20(%esp),%eax
    e50d:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e511:	0f b7 d0             	movzwl %ax,%edx
    e514:	8b 44 24 20          	mov    0x20(%esp),%eax
    e518:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e51c:	0f b7 c0             	movzwl %ax,%eax
    e51f:	83 ec 08             	sub    $0x8,%esp
    e522:	52                   	push   %edx
    e523:	50                   	push   %eax
    e524:	e8 7a 11 00 00       	call   f6a3 <bread>
    e529:	83 c4 10             	add    $0x10,%esp
    e52c:	89 44 24 08          	mov    %eax,0x8(%esp)
    e530:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e535:	75 0a                	jne    e541 <_bmap+0x2e6>
		return 0;
    e537:	b8 00 00 00 00       	mov    $0x0,%eax
    e53c:	e9 3f 01 00 00       	jmp    e680 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block >> 9];
    e541:	8b 44 24 08          	mov    0x8(%esp),%eax
    e545:	8b 00                	mov    (%eax),%eax
    e547:	8b 54 24 24          	mov    0x24(%esp),%edx
    e54b:	c1 fa 09             	sar    $0x9,%edx
    e54e:	01 d2                	add    %edx,%edx
    e550:	01 d0                	add    %edx,%eax
    e552:	0f b7 00             	movzwl (%eax),%eax
    e555:	0f b7 c0             	movzwl %ax,%eax
    e558:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (create && !i)
    e55c:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e561:	74 49                	je     e5ac <_bmap+0x351>
    e563:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e568:	75 42                	jne    e5ac <_bmap+0x351>
		if (i = new_block(inode->i_dev)) {
    e56a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e56e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e572:	0f b7 c0             	movzwl %ax,%eax
    e575:	83 ec 0c             	sub    $0xc,%esp
    e578:	50                   	push   %eax
    e579:	e8 b7 68 00 00       	call   14e35 <new_block>
    e57e:	83 c4 10             	add    $0x10,%esp
    e581:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e585:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e58a:	74 20                	je     e5ac <_bmap+0x351>
			((unsigned short *) (bh->b_data))[block >> 9] = i;
    e58c:	8b 44 24 08          	mov    0x8(%esp),%eax
    e590:	8b 00                	mov    (%eax),%eax
    e592:	8b 54 24 24          	mov    0x24(%esp),%edx
    e596:	c1 fa 09             	sar    $0x9,%edx
    e599:	01 d2                	add    %edx,%edx
    e59b:	01 d0                	add    %edx,%eax
    e59d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e5a1:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt=1;
    e5a4:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5a8:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	brelse(bh);
    e5ac:	83 ec 0c             	sub    $0xc,%esp
    e5af:	ff 74 24 14          	pushl  0x14(%esp)
    e5b3:	e8 95 10 00 00       	call   f64d <brelse>
    e5b8:	83 c4 10             	add    $0x10,%esp
	// 如果二次间接块的二级块块号为0,表示申请磁盘失败或者原来对应块号就为0,则返回0退出.否则就从设备上读取二次间接块的二级块,并取该二级块上第block项中的逻辑块
	// 号(与上511是为了限定block值不超过511).
	if (!i)
    e5bb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5c0:	75 0a                	jne    e5cc <_bmap+0x371>
		return 0;
    e5c2:	b8 00 00 00 00       	mov    $0x0,%eax
    e5c7:	e9 b4 00 00 00       	jmp    e680 <_bmap+0x425>
	if (!(bh = bread(inode->i_dev, i)))
    e5cc:	8b 44 24 20          	mov    0x20(%esp),%eax
    e5d0:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e5d4:	0f b7 c0             	movzwl %ax,%eax
    e5d7:	83 ec 08             	sub    $0x8,%esp
    e5da:	ff 74 24 14          	pushl  0x14(%esp)
    e5de:	50                   	push   %eax
    e5df:	e8 bf 10 00 00       	call   f6a3 <bread>
    e5e4:	83 c4 10             	add    $0x10,%esp
    e5e7:	89 44 24 08          	mov    %eax,0x8(%esp)
    e5eb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e5f0:	75 0a                	jne    e5fc <_bmap+0x3a1>
		return 0;
    e5f2:	b8 00 00 00 00       	mov    $0x0,%eax
    e5f7:	e9 84 00 00 00       	jmp    e680 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block & 511];
    e5fc:	8b 44 24 08          	mov    0x8(%esp),%eax
    e600:	8b 00                	mov    (%eax),%eax
    e602:	8b 54 24 24          	mov    0x24(%esp),%edx
    e606:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e60c:	01 d2                	add    %edx,%edx
    e60e:	01 d0                	add    %edx,%eax
    e610:	0f b7 00             	movzwl (%eax),%eax
    e613:	0f b7 c0             	movzwl %ax,%eax
    e616:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 如果是创建并且二级块的第block项中逻辑块号为0的话,则申请一磁盘块(逻辑块),作为最终存放数据信息的块.并让二级块中的第block项等于该新逻辑块块号(i).然后置位
	// 二级块的已修改标志.
	if (create && !i)
    e61a:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e61f:	74 4c                	je     e66d <_bmap+0x412>
    e621:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e626:	75 45                	jne    e66d <_bmap+0x412>
		if (i = new_block(inode->i_dev)) {
    e628:	8b 44 24 20          	mov    0x20(%esp),%eax
    e62c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e630:	0f b7 c0             	movzwl %ax,%eax
    e633:	83 ec 0c             	sub    $0xc,%esp
    e636:	50                   	push   %eax
    e637:	e8 f9 67 00 00       	call   14e35 <new_block>
    e63c:	83 c4 10             	add    $0x10,%esp
    e63f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e643:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e648:	74 23                	je     e66d <_bmap+0x412>
			((unsigned short *) (bh->b_data))[block & 511] = i;
    e64a:	8b 44 24 08          	mov    0x8(%esp),%eax
    e64e:	8b 00                	mov    (%eax),%eax
    e650:	8b 54 24 24          	mov    0x24(%esp),%edx
    e654:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e65a:	01 d2                	add    %edx,%edx
    e65c:	01 d0                	add    %edx,%eax
    e65e:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e662:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt = 1;
    e665:	8b 44 24 08          	mov    0x8(%esp),%eax
    e669:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	// 最后释放该二次间接块的二级块,返回磁盘上新申请的或原有的对应block的逻辑块块号.
	brelse(bh);
    e66d:	83 ec 0c             	sub    $0xc,%esp
    e670:	ff 74 24 14          	pushl  0x14(%esp)
    e674:	e8 d4 0f 00 00       	call   f64d <brelse>
    e679:	83 c4 10             	add    $0x10,%esp
	return i;
    e67c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e680:	83 c4 1c             	add    $0x1c,%esp
    e683:	c3                   	ret    

0000e684 <bmap>:

// 取文件数据块block在设备上对应的逻辑块号.
// 参数:inode - 文件的内存i节点指针;block - 文件中的数据块号.
// 若操作成功则返回对应的逻辑块号,否则返回0.
int bmap(struct m_inode * inode, int block)
{
    e684:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 0);
    e687:	83 ec 04             	sub    $0x4,%esp
    e68a:	6a 00                	push   $0x0
    e68c:	ff 74 24 1c          	pushl  0x1c(%esp)
    e690:	ff 74 24 1c          	pushl  0x1c(%esp)
    e694:	e8 c2 fb ff ff       	call   e25b <_bmap>
    e699:	83 c4 10             	add    $0x10,%esp
}
    e69c:	83 c4 0c             	add    $0xc,%esp
    e69f:	c3                   	ret    

0000e6a0 <create_block>:

// 取文件数据块block在设备上对应的逻辑块号。如果对应的逻辑块不存在就创建一块。并返回设备上对应的逻辑块号。
// 参数：inode - 文件的内在i节点指针；block - 文件中的数据块号。
// 若操作成功则返回对应的逻辑块号，否则返回0.
int create_block(struct m_inode * inode, int block)
{
    e6a0:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 1);
    e6a3:	83 ec 04             	sub    $0x4,%esp
    e6a6:	6a 01                	push   $0x1
    e6a8:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6ac:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6b0:	e8 a6 fb ff ff       	call   e25b <_bmap>
    e6b5:	83 c4 10             	add    $0x10,%esp
}
    e6b8:	83 c4 0c             	add    $0xc,%esp
    e6bb:	c3                   	ret    

0000e6bc <iput>:

// 放回(放置)一个i节点(加写入设备).
// 该函数主要用于把i节点引用计数值递减1,并且若是管道i节点,则唤醒等待的进程.若是块设备文件i节点则刷新设备.并且若i节点的链接计数为0,则释放该
// i节点占用的所有磁盘逻辑块,并释放该i节点.
void iput(struct m_inode * inode)
{
    e6bc:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
    e6bf:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    e6c4:	0f 84 a9 01 00 00    	je     e873 <iput+0x1b7>
		return;
	wait_on_inode(inode);
    e6ca:	83 ec 0c             	sub    $0xc,%esp
    e6cd:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6d1:	e8 29 fa ff ff       	call   e0ff <wait_on_inode>
    e6d6:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_count)
    e6d9:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6dd:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e6e1:	66 85 c0             	test   %ax,%ax
    e6e4:	75 10                	jne    e6f6 <iput+0x3a>
		panic("iput: trying to free free inode");
    e6e6:	83 ec 0c             	sub    $0xc,%esp
    e6e9:	68 a8 38 02 00       	push   $0x238a8
    e6ee:	e8 14 a5 ff ff       	call   8c07 <panic>
    e6f3:	83 c4 10             	add    $0x10,%esp
	// 如果是管道i节点,则唤醒等待该管道的进程,引用次数减1,如果还有引用则返回.否则释放管道占用的内存页面,并复位该节点的引用计数值,已修改标志和管道
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
    e6f6:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6fa:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e6fe:	84 c0                	test   %al,%al
    e700:	74 7c                	je     e77e <iput+0xc2>
		wake_up(&inode->i_wait);
    e702:	8b 44 24 10          	mov    0x10(%esp),%eax
    e706:	83 c0 20             	add    $0x20,%eax
    e709:	83 ec 0c             	sub    $0xc,%esp
    e70c:	50                   	push   %eax
    e70d:	e8 3b 8a ff ff       	call   714d <wake_up>
    e712:	83 c4 10             	add    $0x10,%esp
		wake_up(&inode->i_wait2);
    e715:	8b 44 24 10          	mov    0x10(%esp),%eax
    e719:	83 c0 24             	add    $0x24,%eax
    e71c:	83 ec 0c             	sub    $0xc,%esp
    e71f:	50                   	push   %eax
    e720:	e8 28 8a ff ff       	call   714d <wake_up>
    e725:	83 c4 10             	add    $0x10,%esp
		if (--inode->i_count)
    e728:	8b 44 24 10          	mov    0x10(%esp),%eax
    e72c:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e730:	8d 50 ff             	lea    -0x1(%eax),%edx
    e733:	8b 44 24 10          	mov    0x10(%esp),%eax
    e737:	66 89 50 34          	mov    %dx,0x34(%eax)
    e73b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e73f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e743:	66 85 c0             	test   %ax,%ax
    e746:	0f 85 2a 01 00 00    	jne    e876 <iput+0x1ba>
			return;
		free_page(inode->i_size);
    e74c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e750:	8b 40 04             	mov    0x4(%eax),%eax
    e753:	83 ec 0c             	sub    $0xc,%esp
    e756:	50                   	push   %eax
    e757:	e8 76 d5 ff ff       	call   bcd2 <free_page>
    e75c:	83 c4 10             	add    $0x10,%esp
		inode->i_count = 0;
    e75f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e763:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		inode->i_dirt = 0;
    e769:	8b 44 24 10          	mov    0x10(%esp),%eax
    e76d:	c6 40 37 00          	movb   $0x0,0x37(%eax)
		inode->i_pipe = 0;
    e771:	8b 44 24 10          	mov    0x10(%esp),%eax
    e775:	c6 40 38 00          	movb   $0x0,0x38(%eax)
		return;
    e779:	e9 f9 00 00 00       	jmp    e877 <iput+0x1bb>
	}
	// 如果i节点对应的设备号 =0,则将此节点的引用计数递减1,返回.例如用于管道操作的i节点,其i节点的设备号为0.
	if (!inode->i_dev) {
    e77e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e782:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e786:	66 85 c0             	test   %ax,%ax
    e789:	75 18                	jne    e7a3 <iput+0xe7>
		inode->i_count--;
    e78b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e78f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e793:	8d 50 ff             	lea    -0x1(%eax),%edx
    e796:	8b 44 24 10          	mov    0x10(%esp),%eax
    e79a:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e79e:	e9 d4 00 00 00       	jmp    e877 <iput+0x1bb>
	}
	// 如果是块设备文件的i节点,此时逻辑块字段0(i_zone[0])中是设备号,则刷新该设备.并等待i节点解锁.
	if (S_ISBLK(inode->i_mode)) {
    e7a3:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7a7:	0f b7 00             	movzwl (%eax),%eax
    e7aa:	0f b7 c0             	movzwl %ax,%eax
    e7ad:	25 00 f0 00 00       	and    $0xf000,%eax
    e7b2:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e7b7:	75 28                	jne    e7e1 <iput+0x125>
		sync_dev(inode->i_zone[0]);
    e7b9:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7bd:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e7c1:	0f b7 c0             	movzwl %ax,%eax
    e7c4:	83 ec 0c             	sub    $0xc,%esp
    e7c7:	50                   	push   %eax
    e7c8:	e8 af 07 00 00       	call   ef7c <sync_dev>
    e7cd:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);
    e7d0:	83 ec 0c             	sub    $0xc,%esp
    e7d3:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7d7:	e8 23 f9 ff ff       	call   e0ff <wait_on_inode>
    e7dc:	83 c4 10             	add    $0x10,%esp
    e7df:	eb 01                	jmp    e7e2 <iput+0x126>
	}
	// 如果i节点引用计数大于1,则计数递减1后就直接返回(因为该i节点还有人在用,不能释放),否则就说明i节点的引用计数值为1(因为第157行已经判断过计数是否为零).
	// 如果i节点的链接数为0,则说明i节点对应文件被删除.于是释放该i节点的所有逻辑块,并释放该i节点.函数free_inode()用于实际释放i节点操作,即复位i节点
	// 对应的i节点位图,清空i节点结构内容.
repeat:
    e7e1:	90                   	nop
	if (inode->i_count > 1) {
    e7e2:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7e6:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e7ea:	66 83 f8 01          	cmp    $0x1,%ax
    e7ee:	76 15                	jbe    e805 <iput+0x149>
		inode->i_count--;
    e7f0:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7f4:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e7f8:	8d 50 ff             	lea    -0x1(%eax),%edx
    e7fb:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7ff:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e803:	eb 72                	jmp    e877 <iput+0x1bb>
	}
	if (!inode->i_nlinks) {
    e805:	8b 44 24 10          	mov    0x10(%esp),%eax
    e809:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    e80d:	84 c0                	test   %al,%al
    e80f:	75 20                	jne    e831 <iput+0x175>
		// 释放该i节点对应的所有逻辑块
		truncate(inode);
    e811:	83 ec 0c             	sub    $0xc,%esp
    e814:	ff 74 24 1c          	pushl  0x1c(%esp)
    e818:	e8 56 70 00 00       	call   15873 <truncate>
    e81d:	83 c4 10             	add    $0x10,%esp
		// 从该设备的超级块中删除该i节点
		free_inode(inode);      								// bitmap.c
    e820:	83 ec 0c             	sub    $0xc,%esp
    e823:	ff 74 24 1c          	pushl  0x1c(%esp)
    e827:	e8 c7 67 00 00       	call   14ff3 <free_inode>
    e82c:	83 c4 10             	add    $0x10,%esp
		return;
    e82f:	eb 46                	jmp    e877 <iput+0x1bb>
	}
	// 如果该i节点已作过修改,则回写更新该i节点,并等待该i节点解锁.由于这里在写i节点时需要等待睡眠,此时其他进程有可能修改该i节点,因此在进程被唤醒后需要重复
	// 进行上述判断过程(repeat).
	if (inode->i_dirt) {
    e831:	8b 44 24 10          	mov    0x10(%esp),%eax
    e835:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e839:	84 c0                	test   %al,%al
    e83b:	74 20                	je     e85d <iput+0x1a1>
		write_inode(inode);										/* we can sleep - so do again */
    e83d:	83 ec 0c             	sub    $0xc,%esp
    e840:	ff 74 24 1c          	pushl  0x1c(%esp)
    e844:	e8 48 05 00 00       	call   ed91 <write_inode>
    e849:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);									/* 因为我们睡眠了,所以要重复判断 */
    e84c:	83 ec 0c             	sub    $0xc,%esp
    e84f:	ff 74 24 1c          	pushl  0x1c(%esp)
    e853:	e8 a7 f8 ff ff       	call   e0ff <wait_on_inode>
    e858:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    e85b:	eb 85                	jmp    e7e2 <iput+0x126>
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
    e85d:	8b 44 24 10          	mov    0x10(%esp),%eax
    e861:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e865:	8d 50 ff             	lea    -0x1(%eax),%edx
    e868:	8b 44 24 10          	mov    0x10(%esp),%eax
    e86c:	66 89 50 34          	mov    %dx,0x34(%eax)
	return;
    e870:	90                   	nop
    e871:	eb 04                	jmp    e877 <iput+0x1bb>
		return;
    e873:	90                   	nop
    e874:	eb 01                	jmp    e877 <iput+0x1bb>
			return;
    e876:	90                   	nop
}
    e877:	83 c4 0c             	add    $0xc,%esp
    e87a:	c3                   	ret    

0000e87b <get_empty_inode>:

// 从i节点表(inode_table)中获取一个空闲i节点项.
// 寻找引用计数count为0的i节点,并将其写盘后清零,返回其指针.引用计数被置1.
struct m_inode * get_empty_inode(void)
{
    e87b:	83 ec 1c             	sub    $0x1c,%esp

	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
    e87e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e885:	00 
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e886:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
    e88d:	00 
    e88e:	eb 59                	jmp    e8e9 <get_empty_inode+0x6e>
			if (++last_inode >= inode_table + NR_INODE)
    e890:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e895:	83 c0 3c             	add    $0x3c,%eax
    e898:	a3 60 f3 02 00       	mov    %eax,0x2f360
    e89d:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e8a2:	ba c0 20 03 00       	mov    $0x320c0,%edx
    e8a7:	39 d0                	cmp    %edx,%eax
    e8a9:	72 0a                	jb     e8b5 <get_empty_inode+0x3a>
				last_inode = inode_table;
    e8ab:	c7 05 60 f3 02 00 c0 	movl   $0x311c0,0x2f360
    e8b2:	11 03 00 
			if (!last_inode->i_count) {
    e8b5:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e8ba:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e8be:	66 85 c0             	test   %ax,%ax
    e8c1:	75 21                	jne    e8e4 <get_empty_inode+0x69>
				inode = last_inode;
    e8c3:	a1 60 f3 02 00       	mov    0x2f360,%eax
    e8c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
				if (!inode->i_dirt && !inode->i_lock)
    e8cc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e8d0:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e8d4:	84 c0                	test   %al,%al
    e8d6:	75 0c                	jne    e8e4 <get_empty_inode+0x69>
    e8d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e8dc:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e8e0:	84 c0                	test   %al,%al
    e8e2:	74 0e                	je     e8f2 <get_empty_inode+0x77>
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e8e4:	83 6c 24 08 01       	subl   $0x1,0x8(%esp)
    e8e9:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e8ee:	75 a0                	jne    e890 <get_empty_inode+0x15>
    e8f0:	eb 01                	jmp    e8f3 <get_empty_inode+0x78>
					break;
    e8f2:	90                   	nop
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
    e8f3:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e8f8:	75 5c                	jne    e956 <get_empty_inode+0xdb>
			for (i = 0 ; i < NR_INODE ; i++)
    e8fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    e901:	00 
    e902:	eb 3b                	jmp    e93f <get_empty_inode+0xc4>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
    e904:	8b 44 24 08          	mov    0x8(%esp),%eax
    e908:	6b c0 3c             	imul   $0x3c,%eax,%eax
    e90b:	05 f2 11 03 00       	add    $0x311f2,%eax
    e910:	0f b7 00             	movzwl (%eax),%eax
				printk("%04x: %6d\t", inode_table[i].i_dev,
    e913:	0f b7 d0             	movzwl %ax,%edx
    e916:	8b 44 24 08          	mov    0x8(%esp),%eax
    e91a:	6b c0 3c             	imul   $0x3c,%eax,%eax
    e91d:	05 f0 11 03 00       	add    $0x311f0,%eax
    e922:	0f b7 00             	movzwl (%eax),%eax
    e925:	0f b7 c0             	movzwl %ax,%eax
    e928:	83 ec 04             	sub    $0x4,%esp
    e92b:	52                   	push   %edx
    e92c:	50                   	push   %eax
    e92d:	68 c8 38 02 00       	push   $0x238c8
    e932:	e8 0f a3 ff ff       	call   8c46 <printk>
    e937:	83 c4 10             	add    $0x10,%esp
			for (i = 0 ; i < NR_INODE ; i++)
    e93a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    e93f:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    e944:	7e be                	jle    e904 <get_empty_inode+0x89>
			panic("No free inodes in mem");
    e946:	83 ec 0c             	sub    $0xc,%esp
    e949:	68 d3 38 02 00       	push   $0x238d3
    e94e:	e8 b4 a2 ff ff       	call   8c07 <panic>
    e953:	83 c4 10             	add    $0x10,%esp
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
    e956:	83 ec 0c             	sub    $0xc,%esp
    e959:	ff 74 24 18          	pushl  0x18(%esp)
    e95d:	e8 9d f7 ff ff       	call   e0ff <wait_on_inode>
    e962:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e965:	eb 1e                	jmp    e985 <get_empty_inode+0x10a>
			write_inode(inode);
    e967:	83 ec 0c             	sub    $0xc,%esp
    e96a:	ff 74 24 18          	pushl  0x18(%esp)
    e96e:	e8 1e 04 00 00       	call   ed91 <write_inode>
    e973:	83 c4 10             	add    $0x10,%esp
			wait_on_inode(inode);
    e976:	83 ec 0c             	sub    $0xc,%esp
    e979:	ff 74 24 18          	pushl  0x18(%esp)
    e97d:	e8 7d f7 ff ff       	call   e0ff <wait_on_inode>
    e982:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e985:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e989:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e98d:	84 c0                	test   %al,%al
    e98f:	75 d6                	jne    e967 <get_empty_inode+0xec>
		}
	} while (inode->i_count);
    e991:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e995:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e999:	66 85 c0             	test   %ax,%ax
    e99c:	0f 85 dc fe ff ff    	jne    e87e <get_empty_inode+0x3>
	// 如果i节点又被其他占用的话(i节点的计数值不为0了),则重新寻找空闲i节点.否则说明已找到符合要求的空闲i节点项.则将该i节点项内容清零,并置引用计数为1,返回该
	// i节点指针.
	memset(inode, 0, sizeof(*inode));
    e9a2:	83 ec 04             	sub    $0x4,%esp
    e9a5:	6a 3c                	push   $0x3c
    e9a7:	6a 00                	push   $0x0
    e9a9:	ff 74 24 18          	pushl  0x18(%esp)
    e9ad:	e8 26 f7 ff ff       	call   e0d8 <memset>
    e9b2:	83 c4 10             	add    $0x10,%esp
	inode->i_count = 1;
    e9b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9b9:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	return inode;
    e9bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e9c3:	83 c4 1c             	add    $0x1c,%esp
    e9c6:	c3                   	ret    

0000e9c7 <get_pipe_inode>:

// 获取管道节点。
// 首先扫描i节点表，寻找一个空闲i节点项，然后取得一页空闲内存供管道使用。然后将得到的i节点的引用计数置为2（读者
// 和写者），初始化管道头和尾，置i节点的管道类型标志。返回i节点指针，如果失败则返回NULL。
struct m_inode * get_pipe_inode(void)
{
    e9c7:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先从内存i节点表中取得一个空闲i节点。如果找不到空闲i节点则返回NULL。然后为该i节点申请一页内存，并让节点的
	// i_size字段指向该页面。如果已没有空闲内存，则释放该i节点，并返回NULL。
	if (!(inode = get_empty_inode()))
    e9ca:	e8 ac fe ff ff       	call   e87b <get_empty_inode>
    e9cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e9d3:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e9d8:	75 07                	jne    e9e1 <get_pipe_inode+0x1a>
		return NULL;
    e9da:	b8 00 00 00 00       	mov    $0x0,%eax
    e9df:	eb 5a                	jmp    ea3b <get_pipe_inode+0x74>
	if (!(inode->i_size = get_free_page())) {         			// 节点的i_size字段指向缓冲区。
    e9e1:	e8 7b e6 ff ff       	call   d061 <get_free_page>
    e9e6:	89 c2                	mov    %eax,%edx
    e9e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9ec:	89 50 04             	mov    %edx,0x4(%eax)
    e9ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9f3:	8b 40 04             	mov    0x4(%eax),%eax
    e9f6:	85 c0                	test   %eax,%eax
    e9f8:	75 11                	jne    ea0b <get_pipe_inode+0x44>
		inode->i_count = 0;
    e9fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9fe:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		return NULL;
    ea04:	b8 00 00 00 00       	mov    $0x0,%eax
    ea09:	eb 30                	jmp    ea3b <get_pipe_inode+0x74>
	}
	// 然后设置该i节点的引用计数为2,并复位管道头尾指针。i节点逻辑块号数组i_zone[]的i_zone[0]和i_zone[1]中分别用
	// 来存放管道头和管道尾指针。最后设置i节点是管道i节点标志并返回该i节点号。
	inode->i_count = 2;											/* sum of readers/writers */    /* 读/写两者总计 */
    ea0b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea0f:	66 c7 40 34 02 00    	movw   $0x2,0x34(%eax)
	PIPE_HEAD(*inode) = PIPE_TAIL(*inode) = 0;      			// 复位管道头尾指针。
    ea15:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea19:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    ea1f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea23:	0f b7 50 10          	movzwl 0x10(%eax),%edx
    ea27:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea2b:	66 89 50 0e          	mov    %dx,0xe(%eax)
	inode->i_pipe = 1;                              			// 置节点为管道使用标志。
    ea2f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea33:	c6 40 38 01          	movb   $0x1,0x38(%eax)
	return inode;
    ea37:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ea3b:	83 c4 1c             	add    $0x1c,%esp
    ea3e:	c3                   	ret    

0000ea3f <iget>:
// 取得一个i节点.
// 参数:dev - 设备号;nr - i节点号.
// 从设备上读取指定节点号的i节点结构内容到内存i节点表中,并且返回该i节点指针.首先在位于高速缓冲区中的i节点表中搜寻,若找到指定节点号的i节点则在经过一些
// 判断处理后返回该i节点指针.否则从设备dev上读取指定i节点号的i节点信息放入i节点表中,并返回该i节点指针.
struct m_inode * iget(int dev, int nr)
{
    ea3f:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode, * empty;

	// 首先判断参数有效性.若设备号是0,则表明内核代码问题,显示出错信息并停机.然后预先从i节点表中取一个空闲i节点备用.
	if (!dev)
    ea42:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    ea47:	75 10                	jne    ea59 <iget+0x1a>
		panic("iget with dev==0");
    ea49:	83 ec 0c             	sub    $0xc,%esp
    ea4c:	68 e9 38 02 00       	push   $0x238e9
    ea51:	e8 b1 a1 ff ff       	call   8c07 <panic>
    ea56:	83 c4 10             	add    $0x10,%esp
	empty = get_empty_inode();
    ea59:	e8 1d fe ff ff       	call   e87b <get_empty_inode>
    ea5e:	89 44 24 04          	mov    %eax,0x4(%esp)
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
    ea62:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    ea69:	00 
	while (inode < NR_INODE + inode_table) {
    ea6a:	e9 43 01 00 00       	jmp    ebb2 <iget+0x173>
		if (inode->i_dev != dev || inode->i_num != nr) {
    ea6f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea73:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ea77:	0f b7 c0             	movzwl %ax,%eax
    ea7a:	39 44 24 20          	cmp    %eax,0x20(%esp)
    ea7e:	75 11                	jne    ea91 <iget+0x52>
    ea80:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea84:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ea88:	0f b7 c0             	movzwl %ax,%eax
    ea8b:	39 44 24 24          	cmp    %eax,0x24(%esp)
    ea8f:	74 0a                	je     ea9b <iget+0x5c>
			inode++;
    ea91:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
			continue;
    ea96:	e9 17 01 00 00       	jmp    ebb2 <iget+0x173>
		}
		// 如果找到指定设备号dev和节点号nr的i节点,则等待该节点解锁(如果已上锁的话).在等待该节点解锁过程中,i节点可能会发生变化.所以再次进行上述相同判断.如果发生
		// 了变化,则重新扫描整个i节点表.
		wait_on_inode(inode);
    ea9b:	83 ec 0c             	sub    $0xc,%esp
    ea9e:	ff 74 24 18          	pushl  0x18(%esp)
    eaa2:	e8 58 f6 ff ff       	call   e0ff <wait_on_inode>
    eaa7:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev != dev || inode->i_num != nr) {
    eaaa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eaae:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eab2:	0f b7 c0             	movzwl %ax,%eax
    eab5:	39 44 24 20          	cmp    %eax,0x20(%esp)
    eab9:	75 11                	jne    eacc <iget+0x8d>
    eabb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eabf:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    eac3:	0f b7 c0             	movzwl %ax,%eax
    eac6:	39 44 24 24          	cmp    %eax,0x24(%esp)
    eaca:	74 0d                	je     ead9 <iget+0x9a>
			inode = inode_table;
    eacc:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    ead3:	00 
			continue;
    ead4:	e9 d9 00 00 00       	jmp    ebb2 <iget+0x173>
		}
		// 到这里表示找到相应的i节点.于是将该i节点引用计数增1.然后再作进一步检查,看它是否是另一个文件系统的安装点.若是则寻找被安装文件系统根节点并返回.如果该i节点
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
    ead9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eadd:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    eae1:	8d 50 01             	lea    0x1(%eax),%edx
    eae4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eae8:	66 89 50 34          	mov    %dx,0x34(%eax)
		if (inode->i_mount) {
    eaec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eaf0:	0f b6 40 39          	movzbl 0x39(%eax),%eax
    eaf4:	84 c0                	test   %al,%al
    eaf6:	0f 84 9a 00 00 00    	je     eb96 <iget+0x157>
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    eafc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    eb03:	00 
    eb04:	eb 19                	jmp    eb1f <iget+0xe0>
				if (super_block[i].s_imount == inode)
    eb06:	8b 44 24 08          	mov    0x8(%esp),%eax
    eb0a:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eb0d:	05 7c 1c 04 00       	add    $0x41c7c,%eax
    eb12:	8b 00                	mov    (%eax),%eax
    eb14:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    eb18:	74 0e                	je     eb28 <iget+0xe9>
			for (i = 0 ; i < NR_SUPER ; i++)
    eb1a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    eb1f:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb24:	7e e0                	jle    eb06 <iget+0xc7>
    eb26:	eb 01                	jmp    eb29 <iget+0xea>
					break;
    eb28:	90                   	nop
			if (i >= NR_SUPER) {
    eb29:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb2e:	7e 2f                	jle    eb5f <iget+0x120>
				printk("Mounted inode hasn't got sb\n");
    eb30:	83 ec 0c             	sub    $0xc,%esp
    eb33:	68 fa 38 02 00       	push   $0x238fa
    eb38:	e8 09 a1 ff ff       	call   8c46 <printk>
    eb3d:	83 c4 10             	add    $0x10,%esp
				if (empty)
    eb40:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb45:	74 0f                	je     eb56 <iget+0x117>
					iput(empty);
    eb47:	83 ec 0c             	sub    $0xc,%esp
    eb4a:	ff 74 24 10          	pushl  0x10(%esp)
    eb4e:	e8 69 fb ff ff       	call   e6bc <iput>
    eb53:	83 c4 10             	add    $0x10,%esp
				return inode;
    eb56:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb5a:	e9 a7 00 00 00       	jmp    ec06 <iget+0x1c7>
			}
			// 执行到这里表示已经找到安装到inode节点的文件系统超级块.于是将该i节点写盘放回,并从安装在此i节点上的文件系统超级块中取设备号,并令i节点号为ROOT_INO.然后
			// 重新扫描整个i节点表,以获取该被安装文件系统的根i节点信息.
			iput(inode);
    eb5f:	83 ec 0c             	sub    $0xc,%esp
    eb62:	ff 74 24 18          	pushl  0x18(%esp)
    eb66:	e8 51 fb ff ff       	call   e6bc <iput>
    eb6b:	83 c4 10             	add    $0x10,%esp
			dev = super_block[i].s_dev;
    eb6e:	8b 44 24 08          	mov    0x8(%esp),%eax
    eb72:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eb75:	05 74 1c 04 00       	add    $0x41c74,%eax
    eb7a:	0f b7 00             	movzwl (%eax),%eax
    eb7d:	0f b7 c0             	movzwl %ax,%eax
    eb80:	89 44 24 20          	mov    %eax,0x20(%esp)
			nr = ROOT_INO;
    eb84:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
    eb8b:	00 
			inode = inode_table;
    eb8c:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
    eb93:	00 
			continue;
    eb94:	eb 1c                	jmp    ebb2 <iget+0x173>
		}
		// 最终我们找到了相应的i节点.因此可以放弃本函数开始处临时 的空闲i节点,返回找到的i节点指针.
		if (empty)
    eb96:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb9b:	74 0f                	je     ebac <iget+0x16d>
			iput(empty);
    eb9d:	83 ec 0c             	sub    $0xc,%esp
    eba0:	ff 74 24 10          	pushl  0x10(%esp)
    eba4:	e8 13 fb ff ff       	call   e6bc <iput>
    eba9:	83 c4 10             	add    $0x10,%esp
		return inode;
    ebac:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebb0:	eb 54                	jmp    ec06 <iget+0x1c7>
	while (inode < NR_INODE + inode_table) {
    ebb2:	b8 c0 20 03 00       	mov    $0x320c0,%eax
    ebb7:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ebbb:	0f 82 ae fe ff ff    	jb     ea6f <iget+0x30>
    }
	// 如果我们在i节点表中没有找到指定的i节点,则利用前面申请的空闲i节点empty在i节点表中建立该i节点.并从相应设备上读取该i节点信息,返回该i节点指针.
	if (!empty)
    ebc1:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ebc6:	75 07                	jne    ebcf <iget+0x190>
		return (NULL);
    ebc8:	b8 00 00 00 00       	mov    $0x0,%eax
    ebcd:	eb 37                	jmp    ec06 <iget+0x1c7>
	inode = empty;
    ebcf:	8b 44 24 04          	mov    0x4(%esp),%eax
    ebd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	inode->i_dev = dev;									// 设置i节点的设备.
    ebd7:	8b 44 24 20          	mov    0x20(%esp),%eax
    ebdb:	89 c2                	mov    %eax,%edx
    ebdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebe1:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_num = nr;									// 设置i节点号.
    ebe5:	8b 44 24 24          	mov    0x24(%esp),%eax
    ebe9:	89 c2                	mov    %eax,%edx
    ebeb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebef:	66 89 50 32          	mov    %dx,0x32(%eax)
	read_inode(inode);      							// 读取i节点信息
    ebf3:	83 ec 0c             	sub    $0xc,%esp
    ebf6:	ff 74 24 18          	pushl  0x18(%esp)
    ebfa:	e8 0b 00 00 00       	call   ec0a <read_inode>
    ebff:	83 c4 10             	add    $0x10,%esp
	return inode;
    ec02:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ec06:	83 c4 1c             	add    $0x1c,%esp
    ec09:	c3                   	ret    

0000ec0a <read_inode>:
// 读取指定i节点信息.
// 从设备上读取含有指定i节点信息的i节点盘块,然后复制到指定的i节点结构中.为了确定i节点所在设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,以
// 获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把缓冲块中相应位置处的i节点
// 内容复制到指定的位置处.
static void read_inode(struct m_inode * inode)
{
    ec0a:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,并取该节点所在设备的超级块.
	lock_inode(inode);
    ec0d:	83 ec 0c             	sub    $0xc,%esp
    ec10:	ff 74 24 2c          	pushl  0x2c(%esp)
    ec14:	e8 11 f5 ff ff       	call   e12a <lock_inode>
    ec19:	83 c4 10             	add    $0x10,%esp
	if (!(sb = get_super(inode->i_dev)))
    ec1c:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec20:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec24:	0f b7 c0             	movzwl %ax,%eax
    ec27:	83 ec 0c             	sub    $0xc,%esp
    ec2a:	50                   	push   %eax
    ec2b:	e8 e4 0e 00 00       	call   fb14 <get_super>
    ec30:	83 c4 10             	add    $0x10,%esp
    ec33:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ec37:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ec3c:	75 10                	jne    ec4e <read_inode+0x44>
		panic("trying to read inode without dev");
    ec3e:	83 ec 0c             	sub    $0xc,%esp
    ec41:	68 18 39 02 00       	push   $0x23918
    ec46:	e8 bc 9f ff ff       	call   8c07 <panic>
    ec4b:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec4e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec52:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ec56:	0f b7 c0             	movzwl %ax,%eax
    ec59:	8d 50 02             	lea    0x2(%eax),%edx
    ec5c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec60:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ec64:	0f b7 c0             	movzwl %ax,%eax
    ec67:	01 d0                	add    %edx,%eax
    ec69:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ec6b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec6f:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ec73:	0f b7 c0             	movzwl %ax,%eax
    ec76:	83 e8 01             	sub    $0x1,%eax
    ec79:	c1 e8 05             	shr    $0x5,%eax
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec7c:	01 d0                	add    %edx,%eax
    ec7e:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
    ec82:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec86:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec8a:	0f b7 c0             	movzwl %ax,%eax
    ec8d:	83 ec 08             	sub    $0x8,%esp
    ec90:	ff 74 24 10          	pushl  0x10(%esp)
    ec94:	50                   	push   %eax
    ec95:	e8 09 0a 00 00       	call   f6a3 <bread>
    ec9a:	83 c4 10             	add    $0x10,%esp
    ec9d:	89 44 24 04          	mov    %eax,0x4(%esp)
    eca1:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eca6:	75 10                	jne    ecb8 <read_inode+0xae>
		panic("unable to read i-node block");
    eca8:	83 ec 0c             	sub    $0xc,%esp
    ecab:	68 39 39 02 00       	push   $0x23939
    ecb0:	e8 52 9f ff ff       	call   8c07 <panic>
    ecb5:	83 c4 10             	add    $0x10,%esp
	*(struct d_inode *)inode =
		((struct d_inode *)bh->b_data)
    ecb8:	8b 44 24 04          	mov    0x4(%esp),%eax
    ecbc:	8b 10                	mov    (%eax),%edx
			[(inode->i_num - 1) % INODES_PER_BLOCK];
    ecbe:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecc2:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ecc6:	0f b7 c0             	movzwl %ax,%eax
    ecc9:	83 e8 01             	sub    $0x1,%eax
    eccc:	83 e0 1f             	and    $0x1f,%eax
    eccf:	c1 e0 05             	shl    $0x5,%eax
    ecd2:	01 c2                	add    %eax,%edx
	*(struct d_inode *)inode =
    ecd4:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecd8:	8b 0a                	mov    (%edx),%ecx
    ecda:	89 08                	mov    %ecx,(%eax)
    ecdc:	8b 4a 04             	mov    0x4(%edx),%ecx
    ecdf:	89 48 04             	mov    %ecx,0x4(%eax)
    ece2:	8b 4a 08             	mov    0x8(%edx),%ecx
    ece5:	89 48 08             	mov    %ecx,0x8(%eax)
    ece8:	8b 4a 0c             	mov    0xc(%edx),%ecx
    eceb:	89 48 0c             	mov    %ecx,0xc(%eax)
    ecee:	8b 4a 10             	mov    0x10(%edx),%ecx
    ecf1:	89 48 10             	mov    %ecx,0x10(%eax)
    ecf4:	8b 4a 14             	mov    0x14(%edx),%ecx
    ecf7:	89 48 14             	mov    %ecx,0x14(%eax)
    ecfa:	8b 4a 18             	mov    0x18(%edx),%ecx
    ecfd:	89 48 18             	mov    %ecx,0x18(%eax)
    ed00:	8b 52 1c             	mov    0x1c(%edx),%edx
    ed03:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 最后释放读入的缓冲块,并解锁该i节点.对于块设备文件,还需要设置i节点的文件最大长度值.
	brelse(bh);
    ed06:	83 ec 0c             	sub    $0xc,%esp
    ed09:	ff 74 24 10          	pushl  0x10(%esp)
    ed0d:	e8 3b 09 00 00       	call   f64d <brelse>
    ed12:	83 c4 10             	add    $0x10,%esp
	if (S_ISBLK(inode->i_mode)) {
    ed15:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed19:	0f b7 00             	movzwl (%eax),%eax
    ed1c:	0f b7 c0             	movzwl %ax,%eax
    ed1f:	25 00 f0 00 00       	and    $0xf000,%eax
    ed24:	3d 00 60 00 00       	cmp    $0x6000,%eax
    ed29:	75 52                	jne    ed7d <read_inode+0x173>
		int i = inode->i_zone[0];							// 对于块设备文件,i_zone[0]中是设备号.
    ed2b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed2f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    ed33:	0f b7 c0             	movzwl %ax,%eax
    ed36:	89 04 24             	mov    %eax,(%esp)
		if (blk_size[MAJOR(i)])
    ed39:	8b 04 24             	mov    (%esp),%eax
    ed3c:	c1 e8 08             	shr    $0x8,%eax
    ed3f:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    ed46:	85 c0                	test   %eax,%eax
    ed48:	74 28                	je     ed72 <read_inode+0x168>
			inode->i_size = 1024 * blk_size[MAJOR(i)][MINOR(i)];
    ed4a:	8b 04 24             	mov    (%esp),%eax
    ed4d:	c1 e8 08             	shr    $0x8,%eax
    ed50:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
    ed57:	8b 14 24             	mov    (%esp),%edx
    ed5a:	0f b6 d2             	movzbl %dl,%edx
    ed5d:	c1 e2 02             	shl    $0x2,%edx
    ed60:	01 d0                	add    %edx,%eax
    ed62:	8b 00                	mov    (%eax),%eax
    ed64:	c1 e0 0a             	shl    $0xa,%eax
    ed67:	89 c2                	mov    %eax,%edx
    ed69:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed6d:	89 50 04             	mov    %edx,0x4(%eax)
    ed70:	eb 0b                	jmp    ed7d <read_inode+0x173>
		else
			inode->i_size = 0x7fffffff;
    ed72:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed76:	c7 40 04 ff ff ff 7f 	movl   $0x7fffffff,0x4(%eax)
	}
	unlock_inode(inode);
    ed7d:	83 ec 0c             	sub    $0xc,%esp
    ed80:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed84:	e8 d4 f3 ff ff       	call   e15d <unlock_inode>
    ed89:	83 c4 10             	add    $0x10,%esp
}
    ed8c:	90                   	nop
    ed8d:	83 c4 1c             	add    $0x1c,%esp
    ed90:	c3                   	ret    

0000ed91 <write_inode>:
// 将i节点信息写入缓冲区中.
// 该函数把参数指定的i节点写入缓冲区相应的缓冲块中,待缓冲区刷新时会写入盘中.为了确定i节点所在的设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,
// 以获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把i节点内容复制到缓冲块的
// 相应位置处.
static void write_inode(struct m_inode * inode)
{
    ed91:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,如果该i节点没有被修改过或者该i节点的设备号等于零,则解锁该i节点,并退出.对于没有被修改过的i节点,其内容与缓冲区中或设备中的相同.然后获取
	// 该i节点的超级块.
	lock_inode(inode);
    ed94:	83 ec 0c             	sub    $0xc,%esp
    ed97:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed9b:	e8 8a f3 ff ff       	call   e12a <lock_inode>
    eda0:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_dirt || !inode->i_dev) {
    eda3:	8b 44 24 20          	mov    0x20(%esp),%eax
    eda7:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    edab:	84 c0                	test   %al,%al
    edad:	74 0d                	je     edbc <write_inode+0x2b>
    edaf:	8b 44 24 20          	mov    0x20(%esp),%eax
    edb3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    edb7:	66 85 c0             	test   %ax,%ax
    edba:	75 14                	jne    edd0 <write_inode+0x3f>
		unlock_inode(inode);
    edbc:	83 ec 0c             	sub    $0xc,%esp
    edbf:	ff 74 24 2c          	pushl  0x2c(%esp)
    edc3:	e8 95 f3 ff ff       	call   e15d <unlock_inode>
    edc8:	83 c4 10             	add    $0x10,%esp
		return;
    edcb:	e9 18 01 00 00       	jmp    eee8 <write_inode+0x157>
	}
	if (!(sb = get_super(inode->i_dev)))
    edd0:	8b 44 24 20          	mov    0x20(%esp),%eax
    edd4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    edd8:	0f b7 c0             	movzwl %ax,%eax
    eddb:	83 ec 0c             	sub    $0xc,%esp
    edde:	50                   	push   %eax
    eddf:	e8 30 0d 00 00       	call   fb14 <get_super>
    ede4:	83 c4 10             	add    $0x10,%esp
    ede7:	89 44 24 0c          	mov    %eax,0xc(%esp)
    edeb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    edf0:	75 10                	jne    ee02 <write_inode+0x71>
		panic("trying to write inode without device");
    edf2:	83 ec 0c             	sub    $0xc,%esp
    edf5:	68 58 39 02 00       	push   $0x23958
    edfa:	e8 08 9e ff ff       	call   8c07 <panic>
    edff:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ee02:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ee06:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ee0a:	0f b7 c0             	movzwl %ax,%eax
    ee0d:	8d 50 02             	lea    0x2(%eax),%edx
    ee10:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ee14:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ee18:	0f b7 c0             	movzwl %ax,%eax
    ee1b:	01 d0                	add    %edx,%eax
    ee1d:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ee1f:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee23:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee27:	0f b7 c0             	movzwl %ax,%eax
    ee2a:	83 e8 01             	sub    $0x1,%eax
    ee2d:	c1 e8 05             	shr    $0x5,%eax
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ee30:	01 d0                	add    %edx,%eax
    ee32:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!(bh = bread(inode->i_dev, block)))
    ee36:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee3a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ee3e:	0f b7 c0             	movzwl %ax,%eax
    ee41:	83 ec 08             	sub    $0x8,%esp
    ee44:	ff 74 24 10          	pushl  0x10(%esp)
    ee48:	50                   	push   %eax
    ee49:	e8 55 08 00 00       	call   f6a3 <bread>
    ee4e:	83 c4 10             	add    $0x10,%esp
    ee51:	89 44 24 04          	mov    %eax,0x4(%esp)
    ee55:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ee5a:	75 10                	jne    ee6c <write_inode+0xdb>
		panic("unable to read i-node block");
    ee5c:	83 ec 0c             	sub    $0xc,%esp
    ee5f:	68 39 39 02 00       	push   $0x23939
    ee64:	e8 9e 9d ff ff       	call   8c07 <panic>
    ee69:	83 c4 10             	add    $0x10,%esp
	((struct d_inode *)bh->b_data)
    ee6c:	8b 44 24 04          	mov    0x4(%esp),%eax
    ee70:	8b 10                	mov    (%eax),%edx
		[(inode->i_num - 1) % INODES_PER_BLOCK] =
    ee72:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee76:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee7a:	0f b7 c0             	movzwl %ax,%eax
    ee7d:	83 e8 01             	sub    $0x1,%eax
    ee80:	83 e0 1f             	and    $0x1f,%eax
    ee83:	c1 e0 05             	shl    $0x5,%eax
    ee86:	01 c2                	add    %eax,%edx
    ee88:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee8c:	8b 08                	mov    (%eax),%ecx
    ee8e:	89 0a                	mov    %ecx,(%edx)
    ee90:	8b 48 04             	mov    0x4(%eax),%ecx
    ee93:	89 4a 04             	mov    %ecx,0x4(%edx)
    ee96:	8b 48 08             	mov    0x8(%eax),%ecx
    ee99:	89 4a 08             	mov    %ecx,0x8(%edx)
    ee9c:	8b 48 0c             	mov    0xc(%eax),%ecx
    ee9f:	89 4a 0c             	mov    %ecx,0xc(%edx)
    eea2:	8b 48 10             	mov    0x10(%eax),%ecx
    eea5:	89 4a 10             	mov    %ecx,0x10(%edx)
    eea8:	8b 48 14             	mov    0x14(%eax),%ecx
    eeab:	89 4a 14             	mov    %ecx,0x14(%edx)
    eeae:	8b 48 18             	mov    0x18(%eax),%ecx
    eeb1:	89 4a 18             	mov    %ecx,0x18(%edx)
    eeb4:	8b 40 1c             	mov    0x1c(%eax),%eax
    eeb7:	89 42 1c             	mov    %eax,0x1c(%edx)
			*(struct d_inode *)inode;
	// 然后置缓冲区已修改标志,而i节点内容已经与缓冲区中的一致,因此修改标志置零.然后释放该含有i节点的缓冲区,并解锁该i节点.
	bh->b_dirt = 1;
    eeba:	8b 44 24 04          	mov    0x4(%esp),%eax
    eebe:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_dirt = 0;
    eec2:	8b 44 24 20          	mov    0x20(%esp),%eax
    eec6:	c6 40 37 00          	movb   $0x0,0x37(%eax)
	brelse(bh);
    eeca:	83 ec 0c             	sub    $0xc,%esp
    eecd:	ff 74 24 10          	pushl  0x10(%esp)
    eed1:	e8 77 07 00 00       	call   f64d <brelse>
    eed6:	83 c4 10             	add    $0x10,%esp
	unlock_inode(inode);
    eed9:	83 ec 0c             	sub    $0xc,%esp
    eedc:	ff 74 24 2c          	pushl  0x2c(%esp)
    eee0:	e8 78 f2 ff ff       	call   e15d <unlock_inode>
    eee5:	83 c4 10             	add    $0x10,%esp
}
    eee8:	83 c4 1c             	add    $0x1c,%esp
    eeeb:	c3                   	ret    

0000eeec <wait_on_buffer>:
// 等待指定缓冲块解锁
// 如果指定的缓冲块bh已经上锁就让进程不可中断地睡眠在该缓冲块的等待队列b_wait中.在缓冲块解锁时,其等待队列上的所有进程将被唤醒.虽然是在关闭
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
    eeec:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 关中断
    eeef:	fa                   	cli    
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    eef0:	eb 13                	jmp    ef05 <wait_on_buffer+0x19>
		sleep_on(&bh->b_wait);
    eef2:	8b 44 24 10          	mov    0x10(%esp),%eax
    eef6:	83 c0 10             	add    $0x10,%eax
    eef9:	83 ec 0c             	sub    $0xc,%esp
    eefc:	50                   	push   %eax
    eefd:	e8 32 82 ff ff       	call   7134 <sleep_on>
    ef02:	83 c4 10             	add    $0x10,%esp
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    ef05:	8b 44 24 10          	mov    0x10(%esp),%eax
    ef09:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    ef0d:	84 c0                	test   %al,%al
    ef0f:	75 e1                	jne    eef2 <wait_on_buffer+0x6>
	sti();							// 开中断.
    ef11:	fb                   	sti    
}
    ef12:	90                   	nop
    ef13:	83 c4 0c             	add    $0xc,%esp
    ef16:	c3                   	ret    

0000ef17 <sys_sync>:

// 设备数据同步。
// 同步设备和内存高速缓冲中数据。其中，sync_inodes()定义在inode.c。
int sys_sync(void)
{
    ef17:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
    ef1a:	e8 db f2 ff ff       	call   e1fa <sync_inodes>
	bh = start_buffer;      				// bh指向缓冲开始处。
    ef1f:	a1 64 f3 02 00       	mov    0x2f364,%eax
    ef24:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef28:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef2f:	00 
    ef30:	eb 36                	jmp    ef68 <sys_sync+0x51>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
    ef32:	83 ec 0c             	sub    $0xc,%esp
    ef35:	ff 74 24 14          	pushl  0x14(%esp)
    ef39:	e8 ae ff ff ff       	call   eeec <wait_on_buffer>
    ef3e:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dirt)
    ef41:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef45:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    ef49:	84 c0                	test   %al,%al
    ef4b:	74 11                	je     ef5e <sys_sync+0x47>
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
    ef4d:	83 ec 08             	sub    $0x8,%esp
    ef50:	ff 74 24 10          	pushl  0x10(%esp)
    ef54:	6a 01                	push   $0x1
    ef56:	e8 37 7a 00 00       	call   16992 <ll_rw_block>
    ef5b:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef5e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ef63:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    ef68:	a1 c0 20 03 00       	mov    0x320c0,%eax
    ef6d:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ef71:	7c bf                	jl     ef32 <sys_sync+0x1b>
	}
	return 0;
    ef73:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ef78:	83 c4 1c             	add    $0x1c,%esp
    ef7b:	c3                   	ret    

0000ef7c <sync_dev>:

// 对指定设备进行高速缓冲数据与设备上数据的同步操作。
// 该函数首先搜索高速缓冲区中所有缓冲块。对于指定设备dev的缓冲块，若其数据已被修改过就写入盘中（同步操作）。然后
// 把内存中i节点数据写入高速缓冲中。之后再指定设备dev执行一次与上述相同的写盘操作。
int sync_dev(int dev)
{
    ef7c:	83 ec 1c             	sub    $0x1c,%esp

	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
    ef7f:	a1 64 f3 02 00       	mov    0x2f364,%eax
    ef84:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef88:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef8f:	00 
    ef90:	eb 5b                	jmp    efed <sync_dev+0x71>
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
    ef92:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef96:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    ef9a:	0f b7 c0             	movzwl %ax,%eax
    ef9d:	39 44 24 20          	cmp    %eax,0x20(%esp)
    efa1:	75 3f                	jne    efe2 <sync_dev+0x66>
			continue;
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
    efa3:	83 ec 0c             	sub    $0xc,%esp
    efa6:	ff 74 24 14          	pushl  0x14(%esp)
    efaa:	e8 3d ff ff ff       	call   eeec <wait_on_buffer>
    efaf:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    efb2:	8b 44 24 08          	mov    0x8(%esp),%eax
    efb6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    efba:	0f b7 c0             	movzwl %ax,%eax
    efbd:	39 44 24 20          	cmp    %eax,0x20(%esp)
    efc1:	75 20                	jne    efe3 <sync_dev+0x67>
    efc3:	8b 44 24 08          	mov    0x8(%esp),%eax
    efc7:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    efcb:	84 c0                	test   %al,%al
    efcd:	74 14                	je     efe3 <sync_dev+0x67>
			ll_rw_block(WRITE, bh);
    efcf:	83 ec 08             	sub    $0x8,%esp
    efd2:	ff 74 24 10          	pushl  0x10(%esp)
    efd6:	6a 01                	push   $0x1
    efd8:	e8 b5 79 00 00       	call   16992 <ll_rw_block>
    efdd:	83 c4 10             	add    $0x10,%esp
    efe0:	eb 01                	jmp    efe3 <sync_dev+0x67>
			continue;
    efe2:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    efe3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    efe8:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    efed:	a1 c0 20 03 00       	mov    0x320c0,%eax
    eff2:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    eff6:	7c 9a                	jl     ef92 <sync_dev+0x16>
	}
	// 再将i节点数据写入高速缓冲。让i节点表inode_table中的inode与缓冲中的信息同步。
	sync_inodes();
    eff8:	e8 fd f1 ff ff       	call   e1fa <sync_inodes>
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
    effd:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f002:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f006:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f00d:	00 
    f00e:	eb 5b                	jmp    f06b <sync_dev+0xef>
		if (bh->b_dev != dev)
    f010:	8b 44 24 08          	mov    0x8(%esp),%eax
    f014:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f018:	0f b7 c0             	movzwl %ax,%eax
    f01b:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f01f:	75 3f                	jne    f060 <sync_dev+0xe4>
			continue;
		wait_on_buffer(bh);
    f021:	83 ec 0c             	sub    $0xc,%esp
    f024:	ff 74 24 14          	pushl  0x14(%esp)
    f028:	e8 bf fe ff ff       	call   eeec <wait_on_buffer>
    f02d:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    f030:	8b 44 24 08          	mov    0x8(%esp),%eax
    f034:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f038:	0f b7 c0             	movzwl %ax,%eax
    f03b:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f03f:	75 20                	jne    f061 <sync_dev+0xe5>
    f041:	8b 44 24 08          	mov    0x8(%esp),%eax
    f045:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f049:	84 c0                	test   %al,%al
    f04b:	74 14                	je     f061 <sync_dev+0xe5>
			ll_rw_block(WRITE, bh);
    f04d:	83 ec 08             	sub    $0x8,%esp
    f050:	ff 74 24 10          	pushl  0x10(%esp)
    f054:	6a 01                	push   $0x1
    f056:	e8 37 79 00 00       	call   16992 <ll_rw_block>
    f05b:	83 c4 10             	add    $0x10,%esp
    f05e:	eb 01                	jmp    f061 <sync_dev+0xe5>
			continue;
    f060:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f061:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f066:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f06b:	a1 c0 20 03 00       	mov    0x320c0,%eax
    f070:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f074:	7c 9a                	jl     f010 <sync_dev+0x94>
	}
	return 0;
    f076:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f07b:	83 c4 1c             	add    $0x1c,%esp
    f07e:	c3                   	ret    

0000f07f <invalidate_buffers>:

// 使指定设备在高速缓冲区中的数据无效。
// 扫描高速缓冲中所有的缓冲块。对指定设备的缓冲块复位其有效（更新）标志和修改标志。
void invalidate_buffers(int dev)
{
    f07f:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
    f082:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f087:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f08b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f092:	00 
    f093:	eb 55                	jmp    f0ea <invalidate_buffers+0x6b>
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
    f095:	8b 44 24 08          	mov    0x8(%esp),%eax
    f099:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f09d:	0f b7 c0             	movzwl %ax,%eax
    f0a0:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f0a4:	75 39                	jne    f0df <invalidate_buffers+0x60>
			continue;
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
    f0a6:	83 ec 0c             	sub    $0xc,%esp
    f0a9:	ff 74 24 14          	pushl  0x14(%esp)
    f0ad:	e8 3a fe ff ff       	call   eeec <wait_on_buffer>
    f0b2:	83 c4 10             	add    $0x10,%esp
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
    f0b5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0b9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f0bd:	0f b7 c0             	movzwl %ax,%eax
    f0c0:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f0c4:	75 1a                	jne    f0e0 <invalidate_buffers+0x61>
			bh->b_uptodate = bh->b_dirt = 0;
    f0c6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0ca:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
    f0ce:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0d2:	0f b6 50 0b          	movzbl 0xb(%eax),%edx
    f0d6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0da:	88 50 0a             	mov    %dl,0xa(%eax)
    f0dd:	eb 01                	jmp    f0e0 <invalidate_buffers+0x61>
			continue;
    f0df:	90                   	nop
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f0e0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f0e5:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f0ea:	a1 c0 20 03 00       	mov    0x320c0,%eax
    f0ef:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f0f3:	7c a0                	jl     f095 <invalidate_buffers+0x16>
	}
}
    f0f5:	90                   	nop
    f0f6:	83 c4 1c             	add    $0x1c,%esp
    f0f9:	c3                   	ret    

0000f0fa <check_disk_change>:
 * 注意！尽管目前该子程序仅用于软盘，以后任何可移动介质的块设备都有将使用该程序，mount/open操作不需要知道
 * 是软盘还是其他什么特殊介质。
 */
// 检查磁盘是否更换，如果已更换就使用对应调整缓冲区无效。
void check_disk_change(int dev)
{
    f0fa:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
    f0fd:	8b 44 24 20          	mov    0x20(%esp),%eax
    f101:	c1 e8 08             	shr    $0x8,%eax
    f104:	83 f8 02             	cmp    $0x2,%eax
    f107:	0f 85 83 00 00 00    	jne    f190 <check_disk_change+0x96>
		return;
	if (!floppy_change(dev & 0x03))
    f10d:	8b 44 24 20          	mov    0x20(%esp),%eax
    f111:	83 e0 03             	and    $0x3,%eax
    f114:	83 ec 0c             	sub    $0xc,%esp
    f117:	50                   	push   %eax
    f118:	e8 64 7a 00 00       	call   16b81 <floppy_change>
    f11d:	83 c4 10             	add    $0x10,%esp
    f120:	85 c0                	test   %eax,%eax
    f122:	74 6f                	je     f193 <check_disk_change+0x99>
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f124:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f12b:	00 
    f12c:	eb 3b                	jmp    f169 <check_disk_change+0x6f>
		if (super_block[i].s_dev == dev)
    f12e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f132:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f135:	05 74 1c 04 00       	add    $0x41c74,%eax
    f13a:	0f b7 00             	movzwl (%eax),%eax
    f13d:	0f b7 c0             	movzwl %ax,%eax
    f140:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f144:	75 1e                	jne    f164 <check_disk_change+0x6a>
			put_super(super_block[i].s_dev);
    f146:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f14a:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f14d:	05 74 1c 04 00       	add    $0x41c74,%eax
    f152:	0f b7 00             	movzwl (%eax),%eax
    f155:	0f b7 c0             	movzwl %ax,%eax
    f158:	83 ec 0c             	sub    $0xc,%esp
    f15b:	50                   	push   %eax
    f15c:	e8 28 0a 00 00       	call   fb89 <put_super>
    f161:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_SUPER ; i++)
    f164:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f169:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    f16e:	7e be                	jle    f12e <check_disk_change+0x34>
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
    f170:	83 ec 0c             	sub    $0xc,%esp
    f173:	ff 74 24 2c          	pushl  0x2c(%esp)
    f177:	e8 04 f0 ff ff       	call   e180 <invalidate_inodes>
    f17c:	83 c4 10             	add    $0x10,%esp
	invalidate_buffers(dev);        //
    f17f:	83 ec 0c             	sub    $0xc,%esp
    f182:	ff 74 24 2c          	pushl  0x2c(%esp)
    f186:	e8 f4 fe ff ff       	call   f07f <invalidate_buffers>
    f18b:	83 c4 10             	add    $0x10,%esp
    f18e:	eb 04                	jmp    f194 <check_disk_change+0x9a>
		return;
    f190:	90                   	nop
    f191:	eb 01                	jmp    f194 <check_disk_change+0x9a>
		return;
    f193:	90                   	nop
}
    f194:	83 c4 1c             	add    $0x1c,%esp
    f197:	c3                   	ret    

0000f198 <remove_from_queues>:
#define hash(dev, block) hash_table[_hashfn(dev, block)]

// 从hash队列和空闲缓冲队列中移走缓冲块.
// hash队列是双向链表结构,空闲缓冲块队列是双向循环链表结构.
static inline void remove_from_queues(struct buffer_head * bh)
{
    f198:	83 ec 0c             	sub    $0xc,%esp
	/* remove from hash-queue */
	/* 从hash队列中移除缓冲块 */
	if (bh->b_next)
    f19b:	8b 44 24 10          	mov    0x10(%esp),%eax
    f19f:	8b 40 18             	mov    0x18(%eax),%eax
    f1a2:	85 c0                	test   %eax,%eax
    f1a4:	74 11                	je     f1b7 <remove_from_queues+0x1f>
		bh->b_next->b_prev = bh->b_prev;
    f1a6:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1aa:	8b 40 18             	mov    0x18(%eax),%eax
    f1ad:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1b1:	8b 52 14             	mov    0x14(%edx),%edx
    f1b4:	89 50 14             	mov    %edx,0x14(%eax)
	if (bh->b_prev)
    f1b7:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1bb:	8b 40 14             	mov    0x14(%eax),%eax
    f1be:	85 c0                	test   %eax,%eax
    f1c0:	74 11                	je     f1d3 <remove_from_queues+0x3b>
		bh->b_prev->b_next = bh->b_next;
    f1c2:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1c6:	8b 40 14             	mov    0x14(%eax),%eax
    f1c9:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1cd:	8b 52 18             	mov    0x18(%edx),%edx
    f1d0:	89 50 18             	mov    %edx,0x18(%eax)
	// 如果该缓冲我是该队列的头一个块,则让hash表的对应项指向本队列中的下一个缓冲区.
	if (hash(bh->b_dev, bh->b_blocknr) == bh)
    f1d3:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1d7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f1db:	0f b7 d0             	movzwl %ax,%edx
    f1de:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1e2:	8b 40 04             	mov    0x4(%eax),%eax
    f1e5:	89 d1                	mov    %edx,%ecx
    f1e7:	31 c1                	xor    %eax,%ecx
    f1e9:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f1ee:	89 c8                	mov    %ecx,%eax
    f1f0:	f7 e2                	mul    %edx
    f1f2:	89 d0                	mov    %edx,%eax
    f1f4:	c1 e8 08             	shr    $0x8,%eax
    f1f7:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f1fd:	29 c1                	sub    %eax,%ecx
    f1ff:	89 c8                	mov    %ecx,%eax
    f201:	8b 04 85 40 17 04 00 	mov    0x41740(,%eax,4),%eax
    f208:	39 44 24 10          	cmp    %eax,0x10(%esp)
    f20c:	75 3c                	jne    f24a <remove_from_queues+0xb2>
		hash(bh->b_dev, bh->b_blocknr) = bh->b_next;
    f20e:	8b 44 24 10          	mov    0x10(%esp),%eax
    f212:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f216:	0f b7 d0             	movzwl %ax,%edx
    f219:	8b 44 24 10          	mov    0x10(%esp),%eax
    f21d:	8b 40 04             	mov    0x4(%eax),%eax
    f220:	89 d1                	mov    %edx,%ecx
    f222:	31 c1                	xor    %eax,%ecx
    f224:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f229:	89 c8                	mov    %ecx,%eax
    f22b:	f7 e2                	mul    %edx
    f22d:	89 d0                	mov    %edx,%eax
    f22f:	c1 e8 08             	shr    $0x8,%eax
    f232:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f238:	29 c1                	sub    %eax,%ecx
    f23a:	89 c8                	mov    %ecx,%eax
    f23c:	8b 54 24 10          	mov    0x10(%esp),%edx
    f240:	8b 52 18             	mov    0x18(%edx),%edx
    f243:	89 14 85 40 17 04 00 	mov    %edx,0x41740(,%eax,4)
	/* remove from free list */
	/* 从空闲缓冲块表中移除缓冲块 */
	if (!(bh->b_prev_free) || !(bh->b_next_free))
    f24a:	8b 44 24 10          	mov    0x10(%esp),%eax
    f24e:	8b 40 1c             	mov    0x1c(%eax),%eax
    f251:	85 c0                	test   %eax,%eax
    f253:	74 0b                	je     f260 <remove_from_queues+0xc8>
    f255:	8b 44 24 10          	mov    0x10(%esp),%eax
    f259:	8b 40 20             	mov    0x20(%eax),%eax
    f25c:	85 c0                	test   %eax,%eax
    f25e:	75 10                	jne    f270 <remove_from_queues+0xd8>
		panic("Free block list corrupted");
    f260:	83 ec 0c             	sub    $0xc,%esp
    f263:	68 7d 39 02 00       	push   $0x2397d
    f268:	e8 9a 99 ff ff       	call   8c07 <panic>
    f26d:	83 c4 10             	add    $0x10,%esp
	bh->b_prev_free->b_next_free = bh->b_next_free;
    f270:	8b 44 24 10          	mov    0x10(%esp),%eax
    f274:	8b 40 1c             	mov    0x1c(%eax),%eax
    f277:	8b 54 24 10          	mov    0x10(%esp),%edx
    f27b:	8b 52 20             	mov    0x20(%edx),%edx
    f27e:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_next_free->b_prev_free = bh->b_prev_free;
    f281:	8b 44 24 10          	mov    0x10(%esp),%eax
    f285:	8b 40 20             	mov    0x20(%eax),%eax
    f288:	8b 54 24 10          	mov    0x10(%esp),%edx
    f28c:	8b 52 1c             	mov    0x1c(%edx),%edx
    f28f:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 如果空闲链表头指向本缓冲区,则让其指向下一缓冲区.
	if (free_list == bh)
    f292:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f297:	39 44 24 10          	cmp    %eax,0x10(%esp)
    f29b:	75 0c                	jne    f2a9 <remove_from_queues+0x111>
		free_list = bh->b_next_free;
    f29d:	8b 44 24 10          	mov    0x10(%esp),%eax
    f2a1:	8b 40 20             	mov    0x20(%eax),%eax
    f2a4:	a3 c4 20 03 00       	mov    %eax,0x320c4
}
    f2a9:	90                   	nop
    f2aa:	83 c4 0c             	add    $0xc,%esp
    f2ad:	c3                   	ret    

0000f2ae <insert_into_queues>:
// 将缓冲块插入空闲链表尾部,同时放入hash队列中.
static inline void insert_into_queues(struct buffer_head * bh)
{
	/* put at end of free list */
	/* 放在空闲链表末尾处 */
	bh->b_next_free = free_list;
    f2ae:	8b 15 c4 20 03 00    	mov    0x320c4,%edx
    f2b4:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2b8:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_prev_free = free_list->b_prev_free;
    f2bb:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f2c0:	8b 50 1c             	mov    0x1c(%eax),%edx
    f2c3:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2c7:	89 50 1c             	mov    %edx,0x1c(%eax)
	free_list->b_prev_free->b_next_free = bh;
    f2ca:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f2cf:	8b 40 1c             	mov    0x1c(%eax),%eax
    f2d2:	8b 54 24 04          	mov    0x4(%esp),%edx
    f2d6:	89 50 20             	mov    %edx,0x20(%eax)
	free_list->b_prev_free = bh;
    f2d9:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f2de:	8b 54 24 04          	mov    0x4(%esp),%edx
    f2e2:	89 50 1c             	mov    %edx,0x1c(%eax)
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
    f2e5:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2e9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	bh->b_next = NULL;
    f2f0:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2f4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	if (!bh->b_dev)
    f2fb:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2ff:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f303:	66 85 c0             	test   %ax,%ax
    f306:	0f 84 8f 00 00 00    	je     f39b <insert_into_queues+0xed>
		return;
	bh->b_next = hash(bh->b_dev, bh->b_blocknr);
    f30c:	8b 44 24 04          	mov    0x4(%esp),%eax
    f310:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f314:	0f b7 d0             	movzwl %ax,%edx
    f317:	8b 44 24 04          	mov    0x4(%esp),%eax
    f31b:	8b 40 04             	mov    0x4(%eax),%eax
    f31e:	89 d1                	mov    %edx,%ecx
    f320:	31 c1                	xor    %eax,%ecx
    f322:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f327:	89 c8                	mov    %ecx,%eax
    f329:	f7 e2                	mul    %edx
    f32b:	89 d0                	mov    %edx,%eax
    f32d:	c1 e8 08             	shr    $0x8,%eax
    f330:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f336:	29 c1                	sub    %eax,%ecx
    f338:	89 c8                	mov    %ecx,%eax
    f33a:	8b 14 85 40 17 04 00 	mov    0x41740(,%eax,4),%edx
    f341:	8b 44 24 04          	mov    0x4(%esp),%eax
    f345:	89 50 18             	mov    %edx,0x18(%eax)
	hash(bh->b_dev, bh->b_blocknr) = bh;
    f348:	8b 44 24 04          	mov    0x4(%esp),%eax
    f34c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f350:	0f b7 d0             	movzwl %ax,%edx
    f353:	8b 44 24 04          	mov    0x4(%esp),%eax
    f357:	8b 40 04             	mov    0x4(%eax),%eax
    f35a:	89 d1                	mov    %edx,%ecx
    f35c:	31 c1                	xor    %eax,%ecx
    f35e:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f363:	89 c8                	mov    %ecx,%eax
    f365:	f7 e2                	mul    %edx
    f367:	89 d0                	mov    %edx,%eax
    f369:	c1 e8 08             	shr    $0x8,%eax
    f36c:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f372:	29 c1                	sub    %eax,%ecx
    f374:	89 c8                	mov    %ecx,%eax
    f376:	8b 54 24 04          	mov    0x4(%esp),%edx
    f37a:	89 14 85 40 17 04 00 	mov    %edx,0x41740(,%eax,4)
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
    f381:	8b 44 24 04          	mov    0x4(%esp),%eax
    f385:	8b 40 18             	mov    0x18(%eax),%eax
    f388:	85 c0                	test   %eax,%eax
    f38a:	74 10                	je     f39c <insert_into_queues+0xee>
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
    f38c:	8b 44 24 04          	mov    0x4(%esp),%eax
    f390:	8b 40 18             	mov    0x18(%eax),%eax
    f393:	8b 54 24 04          	mov    0x4(%esp),%edx
    f397:	89 50 14             	mov    %edx,0x14(%eax)
    f39a:	c3                   	ret    
		return;
    f39b:	90                   	nop
}
    f39c:	c3                   	ret    

0000f39d <find_buffer>:

// 利用hash表在高速缓冲中寻找给定设备和指定块号的缓冲区块.
// 如果找到则返回缓冲区块的指针,否则返回NULL.
static struct buffer_head * find_buffer(int dev, int block)
{
    f39d:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f3a0:	8b 44 24 14          	mov    0x14(%esp),%eax
    f3a4:	33 44 24 18          	xor    0x18(%esp),%eax
    f3a8:	89 c1                	mov    %eax,%ecx
    f3aa:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f3af:	89 c8                	mov    %ecx,%eax
    f3b1:	f7 e2                	mul    %edx
    f3b3:	89 d0                	mov    %edx,%eax
    f3b5:	c1 e8 08             	shr    $0x8,%eax
    f3b8:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f3be:	29 c1                	sub    %eax,%ecx
    f3c0:	89 c8                	mov    %ecx,%eax
    f3c2:	8b 04 85 40 17 04 00 	mov    0x41740(,%eax,4),%eax
    f3c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f3cd:	eb 31                	jmp    f400 <find_buffer+0x63>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
    f3cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3d3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f3d7:	0f b7 c0             	movzwl %ax,%eax
    f3da:	39 44 24 14          	cmp    %eax,0x14(%esp)
    f3de:	75 15                	jne    f3f5 <find_buffer+0x58>
    f3e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3e4:	8b 50 04             	mov    0x4(%eax),%edx
    f3e7:	8b 44 24 18          	mov    0x18(%esp),%eax
    f3eb:	39 c2                	cmp    %eax,%edx
    f3ed:	75 06                	jne    f3f5 <find_buffer+0x58>
			return tmp;
    f3ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3f3:	eb 17                	jmp    f40c <find_buffer+0x6f>
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f3f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3f9:	8b 40 18             	mov    0x18(%eax),%eax
    f3fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f400:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f405:	75 c8                	jne    f3cf <find_buffer+0x32>
	return NULL;
    f407:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f40c:	83 c4 10             	add    $0x10,%esp
    f40f:	c3                   	ret    

0000f410 <get_hash_table>:
 * 代码为什么会是这样子的?我听见你问......原因是竞争条件.由于我们没有对缓冲块上锁(除非我们正在读取它们的数据),那么当我们(进程)睡眠时缓冲块可能
 * 发生一些问题(例如一个读错误将导致该缓冲块出错).目前这种情况实际上是不会发生的,但处理的代码已经准备好了.
 */
// 利用hash表在高速缓冲区中寻找指定的缓冲块.若找到则对该缓冲块上锁并返回块头指针.
struct buffer_head * get_hash_table(int dev, int block)
{
    f410:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	for (;;) {
		// 在高速缓冲中寻找给定设备和指定块的缓冲区块,如果没有找到则返回NULL,退出.
		if (!(bh = find_buffer(dev, block)))
    f413:	ff 74 24 24          	pushl  0x24(%esp)
    f417:	ff 74 24 24          	pushl  0x24(%esp)
    f41b:	e8 7d ff ff ff       	call   f39d <find_buffer>
    f420:	83 c4 08             	add    $0x8,%esp
    f423:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f427:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f42c:	75 07                	jne    f435 <get_hash_table+0x25>
			return NULL;
    f42e:	b8 00 00 00 00       	mov    $0x0,%eax
    f433:	eb 5b                	jmp    f490 <get_hash_table+0x80>
		// 对该缓冲块增加引用计数,并等待该缓冲块解锁(如果已被上锁).由于经过了睡眠状态,因此有必要再验证该缓冲块的正确性,并返回缓冲块头指针.
		bh->b_count++;
    f435:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f439:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f43d:	8d 50 01             	lea    0x1(%eax),%edx
    f440:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f444:	88 50 0c             	mov    %dl,0xc(%eax)
		wait_on_buffer(bh);
    f447:	83 ec 0c             	sub    $0xc,%esp
    f44a:	ff 74 24 18          	pushl  0x18(%esp)
    f44e:	e8 99 fa ff ff       	call   eeec <wait_on_buffer>
    f453:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_blocknr == block)
    f456:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f45a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f45e:	0f b7 c0             	movzwl %ax,%eax
    f461:	39 44 24 20          	cmp    %eax,0x20(%esp)
    f465:	75 15                	jne    f47c <get_hash_table+0x6c>
    f467:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f46b:	8b 50 04             	mov    0x4(%eax),%edx
    f46e:	8b 44 24 24          	mov    0x24(%esp),%eax
    f472:	39 c2                	cmp    %eax,%edx
    f474:	75 06                	jne    f47c <get_hash_table+0x6c>
			return bh;
    f476:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f47a:	eb 14                	jmp    f490 <get_hash_table+0x80>
		// 如果在睡眠时该缓冲块所属的设备号或块号发生的改变,则撤消对它的用计数.重新寻找.
		bh->b_count--;
    f47c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f480:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f484:	8d 50 ff             	lea    -0x1(%eax),%edx
    f487:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f48b:	88 50 0c             	mov    %dl,0xc(%eax)
		if (!(bh = find_buffer(dev, block)))
    f48e:	eb 83                	jmp    f413 <get_hash_table+0x3>
	}
}
    f490:	83 c4 1c             	add    $0x1c,%esp
    f493:	c3                   	ret    

0000f494 <getblk>:
#define BADNESS(bh) (((bh)->b_dirt << 1) + (bh)->b_lock)
// 取高速缓冲中指定的缓冲块.
// 检查指定(设备号和块号)的缓冲区是否已经在高速缓冲中.如果指定块已经在高速缓冲中,则返回对应缓冲区头指针退出;如果不在,就需要在高速中
// 中设置一个对应设备号和块号的新项.返回相应缓冲区头指针.
struct buffer_head * getblk(int dev, int block)
{
    f494:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * tmp, * bh;

repeat:
	if (bh = get_hash_table(dev, block))
    f497:	83 ec 08             	sub    $0x8,%esp
    f49a:	ff 74 24 2c          	pushl  0x2c(%esp)
    f49e:	ff 74 24 2c          	pushl  0x2c(%esp)
    f4a2:	e8 69 ff ff ff       	call   f410 <get_hash_table>
    f4a7:	83 c4 10             	add    $0x10,%esp
    f4aa:	89 44 24 08          	mov    %eax,0x8(%esp)
    f4ae:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f4b3:	74 09                	je     f4be <getblk+0x2a>
		return bh;
    f4b5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4b9:	e9 8b 01 00 00       	jmp    f649 <getblk+0x1b5>
	// 扫描空闲数据块链表,寻找空闲缓冲区.
	// 首先让tmp指向空闲链表的第一个空闲缓冲区头.
	tmp = free_list;
    f4be:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f4c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	do {
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
    f4c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4cb:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f4cf:	84 c0                	test   %al,%al
    f4d1:	75 6a                	jne    f53d <getblk+0xa9>
			continue;
		// 如果缓冲头指针bh为空,或者tmp所指缓冲头的标志(修改,锁定)权重小于bh头标志的权重,则让bh指向tmp缓冲块头.如果该tmp缓冲块头表明缓冲
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
    f4d3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f4d8:	74 3a                	je     f514 <getblk+0x80>
    f4da:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4de:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4e2:	0f b6 c0             	movzbl %al,%eax
    f4e5:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f4e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4ec:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f4f0:	0f b6 c0             	movzbl %al,%eax
    f4f3:	01 c2                	add    %eax,%edx
    f4f5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4f9:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4fd:	0f b6 c0             	movzbl %al,%eax
    f500:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
    f503:	8b 44 24 08          	mov    0x8(%esp),%eax
    f507:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f50b:	0f b6 c0             	movzbl %al,%eax
    f50e:	01 c8                	add    %ecx,%eax
    f510:	39 c2                	cmp    %eax,%edx
    f512:	7d 2a                	jge    f53e <getblk+0xaa>
			bh = tmp;
    f514:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f518:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!BADNESS(tmp))
    f51c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f520:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f524:	0f b6 c0             	movzbl %al,%eax
    f527:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f52a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f52e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f532:	0f b6 c0             	movzbl %al,%eax
    f535:	01 d0                	add    %edx,%eax
    f537:	85 c0                	test   %eax,%eax
    f539:	74 1f                	je     f55a <getblk+0xc6>
    f53b:	eb 01                	jmp    f53e <getblk+0xaa>
			continue;
    f53d:	90                   	nop
				break;
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
    f53e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f542:	8b 40 20             	mov    0x20(%eax),%eax
    f545:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f549:	a1 c4 20 03 00       	mov    0x320c4,%eax
    f54e:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f552:	0f 85 6f ff ff ff    	jne    f4c7 <getblk+0x33>
    f558:	eb 01                	jmp    f55b <getblk+0xc7>
				break;
    f55a:	90                   	nop
	// 如果循环检查发现所有缓冲块都正在被使用(所有缓冲块的状况引用计数者>0)中,则睡眠等待有空闲缓冲区可用.当有空闲缓冲块可用时本各会被明确地唤醒.然后
	// 我们就跳转到函数开始处重新查找空闲缓冲块.
	if (!bh) {
    f55b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f560:	75 15                	jne    f577 <getblk+0xe3>
		sleep_on(&buffer_wait);
    f562:	83 ec 0c             	sub    $0xc,%esp
    f565:	68 c8 20 03 00       	push   $0x320c8
    f56a:	e8 c5 7b ff ff       	call   7134 <sleep_on>
    f56f:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    f572:	e9 20 ff ff ff       	jmp    f497 <getblk+0x3>
	}
	// 执行到这里,说明我们已经找到了一个比较适合的空闲缓冲块了.于是先等待该缓冲区解锁(如果已被上锁的话).如果在我们睡眠阶段该缓冲区又被其他任务使用的话,
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
    f577:	83 ec 0c             	sub    $0xc,%esp
    f57a:	ff 74 24 14          	pushl  0x14(%esp)
    f57e:	e8 69 f9 ff ff       	call   eeec <wait_on_buffer>
    f583:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count)	// 又被占用??
    f586:	8b 44 24 08          	mov    0x8(%esp),%eax
    f58a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f58e:	84 c0                	test   %al,%al
    f590:	74 3c                	je     f5ce <getblk+0x13a>
		goto repeat;
    f592:	e9 00 ff ff ff       	jmp    f497 <getblk+0x3>
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
		sync_dev(bh->b_dev);
    f597:	8b 44 24 08          	mov    0x8(%esp),%eax
    f59b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f59f:	0f b7 c0             	movzwl %ax,%eax
    f5a2:	83 ec 0c             	sub    $0xc,%esp
    f5a5:	50                   	push   %eax
    f5a6:	e8 d1 f9 ff ff       	call   ef7c <sync_dev>
    f5ab:	83 c4 10             	add    $0x10,%esp
		wait_on_buffer(bh);
    f5ae:	83 ec 0c             	sub    $0xc,%esp
    f5b1:	ff 74 24 14          	pushl  0x14(%esp)
    f5b5:	e8 32 f9 ff ff       	call   eeec <wait_on_buffer>
    f5ba:	83 c4 10             	add    $0x10,%esp
		if (bh->b_count)	// 又被占用??
    f5bd:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5c1:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f5c5:	84 c0                	test   %al,%al
    f5c7:	74 05                	je     f5ce <getblk+0x13a>
			goto repeat;
    f5c9:	e9 c9 fe ff ff       	jmp    f497 <getblk+0x3>
	while (bh->b_dirt) {
    f5ce:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5d2:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f5d6:	84 c0                	test   %al,%al
    f5d8:	75 bd                	jne    f597 <getblk+0x103>
	}
	/* NOTE!! While we slept waiting for this block, somebody else might */
	/* already have added "this" block to the cache. check it */
	/* 注意!!当进程为了等待该缓冲块而睡眠时,其他进程可能已经将该缓冲块加入进高速缓冲中,所以我们也要对此进行检查. */
	// 在高速缓冲hash表中检查指定设备和块的缓冲块是否乘我们睡眠之即已经被加入进去.如果是的话就再次重复上述寻找过程.
	if (find_buffer(dev, block))
    f5da:	83 ec 08             	sub    $0x8,%esp
    f5dd:	ff 74 24 2c          	pushl  0x2c(%esp)
    f5e1:	ff 74 24 2c          	pushl  0x2c(%esp)
    f5e5:	e8 b3 fd ff ff       	call   f39d <find_buffer>
    f5ea:	83 c4 10             	add    $0x10,%esp
    f5ed:	85 c0                	test   %eax,%eax
    f5ef:	74 05                	je     f5f6 <getblk+0x162>
		goto repeat;
    f5f1:	e9 a1 fe ff ff       	jmp    f497 <getblk+0x3>
	/* OK, FINALLY we know that this buffer is the only one of it's kind, */
	/* and that it's unused (b_count=0), unlocked (b_lock=0), and clean */
	/* OK,最终我们知道该缓冲块是指定参数的唯一一块,而且目前还没有被占用 */
	/* (b_count=0),也未被上锁(b_lock=0),并且是干净的(未被修改的) */
	// 于是让我们占用此缓冲块.置引用计数为1,复位修改标志和有效(更新)标志.
	bh->b_count = 1;
    f5f6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5fa:	c6 40 0c 01          	movb   $0x1,0xc(%eax)
	bh->b_dirt = 0;
    f5fe:	8b 44 24 08          	mov    0x8(%esp),%eax
    f602:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	bh->b_uptodate = 0;
    f606:	8b 44 24 08          	mov    0x8(%esp),%eax
    f60a:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
	// 从hash队列和空闲块链表中移出该缓冲头,让该缓冲区用于指定设备和其上的指定块.然后根据此新设备号和块号重新插入空闲链表和hash队列新位置处.并最终返回缓冲
	// 头指针.
	remove_from_queues(bh);
    f60e:	83 ec 0c             	sub    $0xc,%esp
    f611:	ff 74 24 14          	pushl  0x14(%esp)
    f615:	e8 7e fb ff ff       	call   f198 <remove_from_queues>
    f61a:	83 c4 10             	add    $0x10,%esp
	bh->b_dev = dev;
    f61d:	8b 44 24 20          	mov    0x20(%esp),%eax
    f621:	89 c2                	mov    %eax,%edx
    f623:	8b 44 24 08          	mov    0x8(%esp),%eax
    f627:	66 89 50 08          	mov    %dx,0x8(%eax)
	bh->b_blocknr = block;
    f62b:	8b 54 24 24          	mov    0x24(%esp),%edx
    f62f:	8b 44 24 08          	mov    0x8(%esp),%eax
    f633:	89 50 04             	mov    %edx,0x4(%eax)
	insert_into_queues(bh);
    f636:	83 ec 0c             	sub    $0xc,%esp
    f639:	ff 74 24 14          	pushl  0x14(%esp)
    f63d:	e8 6c fc ff ff       	call   f2ae <insert_into_queues>
    f642:	83 c4 10             	add    $0x10,%esp
	return bh;
    f645:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    f649:	83 c4 1c             	add    $0x1c,%esp
    f64c:	c3                   	ret    

0000f64d <brelse>:

// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
    f64d:	83 ec 0c             	sub    $0xc,%esp
	if (!buf)						// 如果缓冲头指针无效则返回.
    f650:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    f655:	74 47                	je     f69e <brelse+0x51>
		return;
	wait_on_buffer(buf);
    f657:	83 ec 0c             	sub    $0xc,%esp
    f65a:	ff 74 24 1c          	pushl  0x1c(%esp)
    f65e:	e8 89 f8 ff ff       	call   eeec <wait_on_buffer>
    f663:	83 c4 10             	add    $0x10,%esp
	if (!(buf->b_count--))
    f666:	8b 44 24 10          	mov    0x10(%esp),%eax
    f66a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f66e:	8d 50 ff             	lea    -0x1(%eax),%edx
    f671:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    f675:	88 51 0c             	mov    %dl,0xc(%ecx)
    f678:	84 c0                	test   %al,%al
    f67a:	75 10                	jne    f68c <brelse+0x3f>
		panic("Trying to free free buffer");
    f67c:	83 ec 0c             	sub    $0xc,%esp
    f67f:	68 97 39 02 00       	push   $0x23997
    f684:	e8 7e 95 ff ff       	call   8c07 <panic>
    f689:	83 c4 10             	add    $0x10,%esp
	wake_up(&buffer_wait);
    f68c:	83 ec 0c             	sub    $0xc,%esp
    f68f:	68 c8 20 03 00       	push   $0x320c8
    f694:	e8 b4 7a ff ff       	call   714d <wake_up>
    f699:	83 c4 10             	add    $0x10,%esp
    f69c:	eb 01                	jmp    f69f <brelse+0x52>
		return;
    f69e:	90                   	nop
}
    f69f:	83 c4 0c             	add    $0xc,%esp
    f6a2:	c3                   	ret    

0000f6a3 <bread>:
 */
// 从设备上读取数据块.
// 该函数根据指定的设备号dev和数据块号block,首先在高速缓冲区中申请一块缓冲块.如果该缓冲块中经包含有有效的数据就直接返回该缓冲块指针,否则就从设备中
// 读取指定的数据块到该缓冲块中并返回缓冲块指针.
struct buffer_head * bread(int dev, int block)
{
    f6a3:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 从高速缓冲区中申请一块缓冲块.如果返回值是NULL,则表示内核出错,停机.否则我们判断其中是否已有可用数据.
	if (!(bh = getblk(dev, block)))
    f6a6:	83 ec 08             	sub    $0x8,%esp
    f6a9:	ff 74 24 2c          	pushl  0x2c(%esp)
    f6ad:	ff 74 24 2c          	pushl  0x2c(%esp)
    f6b1:	e8 de fd ff ff       	call   f494 <getblk>
    f6b6:	83 c4 10             	add    $0x10,%esp
    f6b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f6bd:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f6c2:	75 10                	jne    f6d4 <bread+0x31>
		panic("bread: getblk returned NULL\n");
    f6c4:	83 ec 0c             	sub    $0xc,%esp
    f6c7:	68 b2 39 02 00       	push   $0x239b2
    f6cc:	e8 36 95 ff ff       	call   8c07 <panic>
    f6d1:	83 c4 10             	add    $0x10,%esp
	// 如果该缓冲块中数据是有效的(已更新的)可以直接使用,则返回.
	if (bh->b_uptodate)
    f6d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6d8:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f6dc:	84 c0                	test   %al,%al
    f6de:	74 06                	je     f6e6 <bread+0x43>
		return bh;
    f6e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6e4:	eb 46                	jmp    f72c <bread+0x89>
	// 否则我们就调用底层块设备读写ll_rw_block()函数,产生读设备块请求.然后等待指定数据块被读入,并等待缓冲区解锁.在睡眠醒来之后,如果该缓冲区已更新,则返回
	// 缓冲区头指针,退出.否则表明读设备操作失败,于是释放该缓冲区,返回NULL,退出.
	ll_rw_block(READ, bh);
    f6e6:	83 ec 08             	sub    $0x8,%esp
    f6e9:	ff 74 24 14          	pushl  0x14(%esp)
    f6ed:	6a 00                	push   $0x0
    f6ef:	e8 9e 72 00 00       	call   16992 <ll_rw_block>
    f6f4:	83 c4 10             	add    $0x10,%esp
	wait_on_buffer(bh);
    f6f7:	83 ec 0c             	sub    $0xc,%esp
    f6fa:	ff 74 24 18          	pushl  0x18(%esp)
    f6fe:	e8 e9 f7 ff ff       	call   eeec <wait_on_buffer>
    f703:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f706:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f70a:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f70e:	84 c0                	test   %al,%al
    f710:	74 06                	je     f718 <bread+0x75>
		return bh;
    f712:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f716:	eb 14                	jmp    f72c <bread+0x89>
	brelse(bh);
    f718:	83 ec 0c             	sub    $0xc,%esp
    f71b:	ff 74 24 18          	pushl  0x18(%esp)
    f71f:	e8 29 ff ff ff       	call   f64d <brelse>
    f724:	83 c4 10             	add    $0x10,%esp
	return NULL;
    f727:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f72c:	83 c4 1c             	add    $0x1c,%esp
    f72f:	c3                   	ret    

0000f730 <bread_page>:
 */
// 读设备上一个页面(4个缓冲块)的内容到指定内存地址处.
// 参数address是保存页面数据的地址;dev是指定的设备号;b[4]是含有4个设备数据块号的数组.
// 该函数仅用于mm/memory.c文件的do_no_page()函数中.
void bread_page(unsigned long address, int dev, int b[4])
{
    f730:	57                   	push   %edi
    f731:	56                   	push   %esi
    f732:	53                   	push   %ebx
    f733:	83 ec 20             	sub    $0x20,%esp
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f736:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f73d:	00 
    f73e:	e9 89 00 00 00       	jmp    f7cc <bread_page+0x9c>
		if (b[i]) {
    f743:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f747:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f74e:	8b 44 24 38          	mov    0x38(%esp),%eax
    f752:	01 d0                	add    %edx,%eax
    f754:	8b 00                	mov    (%eax),%eax
    f756:	85 c0                	test   %eax,%eax
    f758:	74 61                	je     f7bb <bread_page+0x8b>
			// 先给该逻辑块号申请一个缓存块
			if (bh[i] = getblk(dev, b[i]))
    f75a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f75e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f765:	8b 44 24 38          	mov    0x38(%esp),%eax
    f769:	01 d0                	add    %edx,%eax
    f76b:	8b 00                	mov    (%eax),%eax
    f76d:	83 ec 08             	sub    $0x8,%esp
    f770:	50                   	push   %eax
    f771:	ff 74 24 40          	pushl  0x40(%esp)
    f775:	e8 1a fd ff ff       	call   f494 <getblk>
    f77a:	83 c4 10             	add    $0x10,%esp
    f77d:	89 c2                	mov    %eax,%edx
    f77f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f783:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
    f787:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f78b:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f78f:	85 c0                	test   %eax,%eax
    f791:	74 34                	je     f7c7 <bread_page+0x97>
				// 如果该缓冲块没有更新,则从块设备中读取出来
				if (!bh[i]->b_uptodate)
    f793:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f797:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f79b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f79f:	84 c0                	test   %al,%al
    f7a1:	75 24                	jne    f7c7 <bread_page+0x97>
					ll_rw_block(READ, bh[i]);
    f7a3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7a7:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7ab:	83 ec 08             	sub    $0x8,%esp
    f7ae:	50                   	push   %eax
    f7af:	6a 00                	push   $0x0
    f7b1:	e8 dc 71 00 00       	call   16992 <ll_rw_block>
    f7b6:	83 c4 10             	add    $0x10,%esp
    f7b9:	eb 0c                	jmp    f7c7 <bread_page+0x97>
		} else
			bh[i] = NULL;
    f7bb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7bf:	c7 44 84 0c 00 00 00 	movl   $0x0,0xc(%esp,%eax,4)
    f7c6:	00 
	for (i = 0 ; i < 4 ; i++)
    f7c7:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f7cc:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f7d1:	0f 8e 6c ff ff ff    	jle    f743 <bread_page+0x13>
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f7d7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f7de:	00 
    f7df:	eb 73                	jmp    f854 <bread_page+0x124>
		if (bh[i]) {
    f7e1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7e5:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7e9:	85 c0                	test   %eax,%eax
    f7eb:	74 5a                	je     f847 <bread_page+0x117>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
    f7ed:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7f1:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7f5:	83 ec 0c             	sub    $0xc,%esp
    f7f8:	50                   	push   %eax
    f7f9:	e8 ee f6 ff ff       	call   eeec <wait_on_buffer>
    f7fe:	83 c4 10             	add    $0x10,%esp
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
    f801:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f805:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f809:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f80d:	84 c0                	test   %al,%al
    f80f:	74 22                	je     f833 <bread_page+0x103>
				COPYBLK((unsigned long) bh[i]->b_data, address);
    f811:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f815:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f819:	8b 00                	mov    (%eax),%eax
    f81b:	89 c3                	mov    %eax,%ebx
    f81d:	ba 00 01 00 00       	mov    $0x100,%edx
    f822:	8b 44 24 30          	mov    0x30(%esp),%eax
    f826:	89 d1                	mov    %edx,%ecx
    f828:	89 de                	mov    %ebx,%esi
    f82a:	89 c7                	mov    %eax,%edi
    f82c:	fc                   	cld    
    f82d:	57                   	push   %edi
    f82e:	56                   	push   %esi
    f82f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    f831:	5e                   	pop    %esi
    f832:	5f                   	pop    %edi
			brelse(bh[i]);								// 释放该缓冲区.
    f833:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f837:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f83b:	83 ec 0c             	sub    $0xc,%esp
    f83e:	50                   	push   %eax
    f83f:	e8 09 fe ff ff       	call   f64d <brelse>
    f844:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f847:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f84c:	81 44 24 30 00 04 00 	addl   $0x400,0x30(%esp)
    f853:	00 
    f854:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f859:	7e 86                	jle    f7e1 <bread_page+0xb1>
		}
}
    f85b:	90                   	nop
    f85c:	83 c4 20             	add    $0x20,%esp
    f85f:	5b                   	pop    %ebx
    f860:	5e                   	pop    %esi
    f861:	5f                   	pop    %edi
    f862:	c3                   	ret    

0000f863 <breada>:
 * OK,breada可以象bread一样使用,但会另外预读一些块.该函数参数列表需要使用一个负数来表明参数列表的结束.
 */
// 从指定设备读取指定的一些块.
// 函数参数个数可变,是一系列指定的块号.成功时返回第1块的缓冲块头指针,否则返回NULL.
struct buffer_head * breada(int dev, int first, ...)
{
    f863:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	struct buffer_head * bh, *tmp;

	// 首先取可变参数表中第1个参数(块号).接着从调整缓冲区中取指定设备和块号的缓冲块.如果该缓冲块数据无效(更新标志未置位),则
	// 发出读设备数据块请求.
	va_start(args, first);
    f866:	8d 44 24 24          	lea    0x24(%esp),%eax
    f86a:	83 c0 04             	add    $0x4,%eax
    f86d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(bh = getblk(dev, first)))
    f871:	8b 44 24 24          	mov    0x24(%esp),%eax
    f875:	83 ec 08             	sub    $0x8,%esp
    f878:	50                   	push   %eax
    f879:	ff 74 24 2c          	pushl  0x2c(%esp)
    f87d:	e8 12 fc ff ff       	call   f494 <getblk>
    f882:	83 c4 10             	add    $0x10,%esp
    f885:	89 44 24 08          	mov    %eax,0x8(%esp)
    f889:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f88e:	75 10                	jne    f8a0 <breada+0x3d>
		panic("bread: getblk returned NULL\n");
    f890:	83 ec 0c             	sub    $0xc,%esp
    f893:	68 b2 39 02 00       	push   $0x239b2
    f898:	e8 6a 93 ff ff       	call   8c07 <panic>
    f89d:	83 c4 10             	add    $0x10,%esp
	if (!bh->b_uptodate)
    f8a0:	8b 44 24 08          	mov    0x8(%esp),%eax
    f8a4:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f8a8:	84 c0                	test   %al,%al
    f8aa:	75 61                	jne    f90d <breada+0xaa>
		ll_rw_block(READ, bh);
    f8ac:	83 ec 08             	sub    $0x8,%esp
    f8af:	ff 74 24 10          	pushl  0x10(%esp)
    f8b3:	6a 00                	push   $0x0
    f8b5:	e8 d8 70 00 00       	call   16992 <ll_rw_block>
    f8ba:	83 c4 10             	add    $0x10,%esp
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f8bd:	eb 4e                	jmp    f90d <breada+0xaa>
		tmp = getblk(dev, first);
    f8bf:	8b 44 24 24          	mov    0x24(%esp),%eax
    f8c3:	83 ec 08             	sub    $0x8,%esp
    f8c6:	50                   	push   %eax
    f8c7:	ff 74 24 2c          	pushl  0x2c(%esp)
    f8cb:	e8 c4 fb ff ff       	call   f494 <getblk>
    f8d0:	83 c4 10             	add    $0x10,%esp
    f8d3:	89 44 24 04          	mov    %eax,0x4(%esp)
		if (tmp) {
    f8d7:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    f8dc:	74 2f                	je     f90d <breada+0xaa>
			if (!tmp->b_uptodate)
    f8de:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8e2:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f8e6:	84 c0                	test   %al,%al
    f8e8:	75 11                	jne    f8fb <breada+0x98>
				ll_rw_block(READA, tmp);
    f8ea:	83 ec 08             	sub    $0x8,%esp
    f8ed:	ff 74 24 0c          	pushl  0xc(%esp)
    f8f1:	6a 02                	push   $0x2
    f8f3:	e8 9a 70 00 00       	call   16992 <ll_rw_block>
    f8f8:	83 c4 10             	add    $0x10,%esp
			tmp->b_count--;					// 暂时释放掉该预读块.
    f8fb:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8ff:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f903:	8d 50 ff             	lea    -0x1(%eax),%edx
    f906:	8b 44 24 04          	mov    0x4(%esp),%eax
    f90a:	88 50 0c             	mov    %dl,0xc(%eax)
	while ((first = va_arg(args, int)) >= 0) {
    f90d:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
    f912:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f916:	8b 40 fc             	mov    -0x4(%eax),%eax
    f919:	89 44 24 24          	mov    %eax,0x24(%esp)
    f91d:	8b 44 24 24          	mov    0x24(%esp),%eax
    f921:	85 c0                	test   %eax,%eax
    f923:	79 9a                	jns    f8bf <breada+0x5c>
		}
	}
	// 此时可变参数表中所有参数处理完毕.于是等待第1个缓冲区解锁(如果已被上锁).在等待退出之后如果缓冲区中数据仍然有效,则返回缓冲区头指针
	// 退出.否则释放该缓冲区返回NULL,退出.
	va_end(args);
	wait_on_buffer(bh);
    f925:	83 ec 0c             	sub    $0xc,%esp
    f928:	ff 74 24 14          	pushl  0x14(%esp)
    f92c:	e8 bb f5 ff ff       	call   eeec <wait_on_buffer>
    f931:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f934:	8b 44 24 08          	mov    0x8(%esp),%eax
    f938:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f93c:	84 c0                	test   %al,%al
    f93e:	74 06                	je     f946 <breada+0xe3>
		return bh;
    f940:	8b 44 24 08          	mov    0x8(%esp),%eax
    f944:	eb 14                	jmp    f95a <breada+0xf7>
	brelse(bh);
    f946:	83 ec 0c             	sub    $0xc,%esp
    f949:	ff 74 24 14          	pushl  0x14(%esp)
    f94d:	e8 fb fc ff ff       	call   f64d <brelse>
    f952:	83 c4 10             	add    $0x10,%esp
	return (NULL);
    f955:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f95a:	83 c4 1c             	add    $0x1c,%esp
    f95d:	c3                   	ret    

0000f95e <buffer_init>:

// 缓冲区初始化函数
// 参数buffer_end是缓冲区内存末端.对于具有16M内存的系统,缓冲区末端被设置为4MB.对于有8MB内存的系统,缓冲区末端被设置2MB.该函数从缓冲区开始位置
// start_buffer处和缓冲区末端buffer_end处分别同时设置(初始化)缓冲块头结构和对应的数据块.直到缓冲区中所有内存被分配完毕.
void buffer_init(long buffer_end)
{
    f95e:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * h = start_buffer;
    f961:	a1 64 f3 02 00       	mov    0x2f364,%eax
    f966:	89 44 24 0c          	mov    %eax,0xc(%esp)
	void * b;
	int i;

	// 首先根据参数提供的缓冲区高端位置确定实际缓冲区高端位置b.如果缓冲区高端等于1MB,则因为从640KB-1MB被显示内存和BIOS占用,所以实际可用缓冲区内存
	// 高端位置应该是640KB.否则缓冲区内存高端一定大于1MB.
	if (buffer_end == 1 << 20)
    f96a:	81 7c 24 14 00 00 10 	cmpl   $0x100000,0x14(%esp)
    f971:	00 
    f972:	75 0d                	jne    f981 <buffer_init+0x23>
		b = (void *) (640 * 1024);
    f974:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    f97b:	00 
    f97c:	e9 a2 00 00 00       	jmp    fa23 <buffer_init+0xc5>
	else
		b = (void *) buffer_end;
    f981:	8b 44 24 14          	mov    0x14(%esp),%eax
    f985:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    f989:	e9 95 00 00 00       	jmp    fa23 <buffer_init+0xc5>
		h->b_dev = 0;								// 使用该缓冲块的设备号.
    f98e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f992:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		h->b_dirt = 0;								// 脏标志,即缓冲块修改标志.
    f998:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f99c:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		h->b_count = 0;								// 缓冲块引用计数.
    f9a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9a4:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
		h->b_lock = 0;								// 缓冲块锁定标志.
    f9a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ac:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		h->b_uptodate = 0;							// 缓冲块更新标志(或称数据有效标志).
    f9b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9b4:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		h->b_wait = NULL;							// 指向等待该缓冲块解锁的进程.
    f9b8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9bc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		h->b_next = NULL;							// 指向具有相同hash值的下一个缓冲头.
    f9c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9c7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		h->b_prev = NULL;							// 指向具有相同hash值的前一个缓冲头.
    f9ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9d2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
		h->b_data = (char *) b;						// 指向对应缓冲块数据块(1024字节).
    f9d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9dd:	8b 54 24 08          	mov    0x8(%esp),%edx
    f9e1:	89 10                	mov    %edx,(%eax)
		h->b_prev_free = h - 1;						// 指向链表中前一项.
    f9e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9e7:	8d 50 dc             	lea    -0x24(%eax),%edx
    f9ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ee:	89 50 1c             	mov    %edx,0x1c(%eax)
		h->b_next_free = h + 1;						// 指向链表中下一项.
    f9f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9f5:	8d 50 24             	lea    0x24(%eax),%edx
    f9f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9fc:	89 50 20             	mov    %edx,0x20(%eax)
		h++;										// h指向下一新缓冲头位置.
    f9ff:	83 44 24 0c 24       	addl   $0x24,0xc(%esp)
		NR_BUFFERS++;								// 缓冲区块数累加.
    fa04:	a1 c0 20 03 00       	mov    0x320c0,%eax
    fa09:	83 c0 01             	add    $0x1,%eax
    fa0c:	a3 c0 20 03 00       	mov    %eax,0x320c0
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
    fa11:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    fa18:	00 
    fa19:	75 08                	jne    fa23 <buffer_init+0xc5>
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
    fa1b:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    fa22:	00 
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    fa23:	81 6c 24 08 00 04 00 	subl   $0x400,0x8(%esp)
    fa2a:	00 
    fa2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa2f:	83 c0 24             	add    $0x24,%eax
    fa32:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fa36:	0f 83 52 ff ff ff    	jae    f98e <buffer_init+0x30>
	}
	h--;											// 让h指向最后一个有效缓冲块头.
    fa3c:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
    fa41:	a1 64 f3 02 00       	mov    0x2f364,%eax
    fa46:	a3 c4 20 03 00       	mov    %eax,0x320c4
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
    fa4b:	a1 c4 20 03 00       	mov    0x320c4,%eax
    fa50:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fa54:	89 50 1c             	mov    %edx,0x1c(%eax)
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
    fa57:	8b 15 c4 20 03 00    	mov    0x320c4,%edx
    fa5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa61:	89 50 20             	mov    %edx,0x20(%eax)
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    fa64:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    fa6b:	00 
    fa6c:	eb 14                	jmp    fa82 <buffer_init+0x124>
		hash_table[i] = NULL;
    fa6e:	8b 44 24 04          	mov    0x4(%esp),%eax
    fa72:	c7 04 85 40 17 04 00 	movl   $0x0,0x41740(,%eax,4)
    fa79:	00 00 00 00 
	for (i = 0; i < NR_HASH; i++)
    fa7d:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    fa82:	81 7c 24 04 32 01 00 	cmpl   $0x132,0x4(%esp)
    fa89:	00 
    fa8a:	7e e2                	jle    fa6e <buffer_init+0x110>
}
    fa8c:	90                   	nop
    fa8d:	83 c4 10             	add    $0x10,%esp
    fa90:	c3                   	ret    

0000fa91 <lock_super>:
//　以下３个函数(lock_super(),free_super()和wait_on_super())的作用与inode.c文件中头３个函数的作用相同,只是这里操作的对象
//　换成了超级块.
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
    fa91:	83 ec 0c             	sub    $0xc,%esp
	cli();													//　关中断
    fa94:	fa                   	cli    
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fa95:	eb 13                	jmp    faaa <lock_super+0x19>
		sleep_on(&(sb->s_wait));
    fa97:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa9b:	83 c0 64             	add    $0x64,%eax
    fa9e:	83 ec 0c             	sub    $0xc,%esp
    faa1:	50                   	push   %eax
    faa2:	e8 8d 76 ff ff       	call   7134 <sleep_on>
    faa7:	83 c4 10             	add    $0x10,%esp
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    faaa:	8b 44 24 10          	mov    0x10(%esp),%eax
    faae:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    fab2:	84 c0                	test   %al,%al
    fab4:	75 e1                	jne    fa97 <lock_super+0x6>
	sb->s_lock = 1;											//　给该超级块加锁(置锁定标志)
    fab6:	8b 44 24 10          	mov    0x10(%esp),%eax
    faba:	c6 40 68 01          	movb   $0x1,0x68(%eax)
	sti();													//　开中断.
    fabe:	fb                   	sti    
}
    fabf:	90                   	nop
    fac0:	83 c4 0c             	add    $0xc,%esp
    fac3:	c3                   	ret    

0000fac4 <free_super>:

//　对指定超级块解锁
//　复位超级块的锁定标志,并明确地唤醒等待此超级块等待队列s_wait上的所有进程.
//　如果使用unlock_super这个名称则可能更妥帖.
static void free_super(struct super_block * sb)
{
    fac4:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fac7:	fa                   	cli    
	sb->s_lock = 0;											// 复位锁定标志.
    fac8:	8b 44 24 10          	mov    0x10(%esp),%eax
    facc:	c6 40 68 00          	movb   $0x0,0x68(%eax)
	wake_up(&(sb->s_wait));									// 唤醒等待该超级块的进程.
    fad0:	8b 44 24 10          	mov    0x10(%esp),%eax
    fad4:	83 c0 64             	add    $0x64,%eax
    fad7:	83 ec 0c             	sub    $0xc,%esp
    fada:	50                   	push   %eax
    fadb:	e8 6d 76 ff ff       	call   714d <wake_up>
    fae0:	83 c4 10             	add    $0x10,%esp
	sti();													// wake_up()在kernel/sched.c
    fae3:	fb                   	sti    
}
    fae4:	90                   	nop
    fae5:	83 c4 0c             	add    $0xc,%esp
    fae8:	c3                   	ret    

0000fae9 <wait_on_super>:

// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
    fae9:	83 ec 0c             	sub    $0xc,%esp
	cli();
    faec:	fa                   	cli    
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    faed:	eb 13                	jmp    fb02 <wait_on_super+0x19>
		sleep_on(&(sb->s_wait));
    faef:	8b 44 24 10          	mov    0x10(%esp),%eax
    faf3:	83 c0 64             	add    $0x64,%eax
    faf6:	83 ec 0c             	sub    $0xc,%esp
    faf9:	50                   	push   %eax
    fafa:	e8 35 76 ff ff       	call   7134 <sleep_on>
    faff:	83 c4 10             	add    $0x10,%esp
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    fb02:	8b 44 24 10          	mov    0x10(%esp),%eax
    fb06:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    fb0a:	84 c0                	test   %al,%al
    fb0c:	75 e1                	jne    faef <wait_on_super+0x6>
	sti();
    fb0e:	fb                   	sti    
}
    fb0f:	90                   	nop
    fb10:	83 c4 0c             	add    $0xc,%esp
    fb13:	c3                   	ret    

0000fb14 <get_super>:

// 取指定设备的超级块.
// 在超级块表(数组)中搜索指定设备dev的超级块结构信息.若找到则返回超级块的指针,否则返回空指针.
struct super_block * get_super(int dev)
{
    fb14:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * s;									// s是超级块数据结构指针.

	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
    fb17:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fb1c:	75 07                	jne    fb25 <get_super+0x11>
		return NULL;
    fb1e:	b8 00 00 00 00       	mov    $0x0,%eax
    fb23:	eb 60                	jmp    fb85 <get_super+0x71>
	s = 0 + super_block;
    fb25:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    fb2c:	00 
	while (s < NR_SUPER + super_block)
    fb2d:	eb 46                	jmp    fb75 <get_super+0x61>
		// 如果当前搜索项是指定设备的超级块,即该超级块的设备号字段值与函数参数指定的相同,则先等待该超级块解锁(若已被其他进程上锁的话).在等待期间,
		// 该超级块项有可能被其他设备使用,因此等待返回之后需再判断一次是否是指定设备的超级块,如果是则返回该超级块的指针.否则就重新对超级块数组再
		// 搜索一遍,因此此时s需重又指向超级块数组开始处.
		if (s->s_dev == dev) {
    fb2f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb33:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb37:	0f b7 c0             	movzwl %ax,%eax
    fb3a:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb3e:	75 30                	jne    fb70 <get_super+0x5c>
			wait_on_super(s);
    fb40:	83 ec 0c             	sub    $0xc,%esp
    fb43:	ff 74 24 18          	pushl  0x18(%esp)
    fb47:	e8 9d ff ff ff       	call   fae9 <wait_on_super>
    fb4c:	83 c4 10             	add    $0x10,%esp
			if (s->s_dev == dev)
    fb4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb53:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb57:	0f b7 c0             	movzwl %ax,%eax
    fb5a:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb5e:	75 06                	jne    fb66 <get_super+0x52>
				return s;
    fb60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb64:	eb 1f                	jmp    fb85 <get_super+0x71>
			s = 0 + super_block;
    fb66:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    fb6d:	00 
    fb6e:	eb 05                	jmp    fb75 <get_super+0x61>
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
    fb70:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
	while (s < NR_SUPER + super_block)
    fb75:	b8 80 1f 04 00       	mov    $0x41f80,%eax
    fb7a:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fb7e:	72 af                	jb     fb2f <get_super+0x1b>
	return NULL;
    fb80:	b8 00 00 00 00       	mov    $0x0,%eax
}
    fb85:	83 c4 1c             	add    $0x1c,%esp
    fb88:	c3                   	ret    

0000fb89 <put_super>:

// 释放（放回）指定设备的超级块。
// 释放设备所使用的超级块数组项（置s_dev = 0），并释放该设备i节点位图和逻辑块位图所占用的高速缓冲块。如果超级块对应的
// 文件系统是根文件系统，或者其某个i节点上已经安装了其他的文件系统，则不能释放该超级块。
void put_super(int dev)
{
    fb89:	83 ec 1c             	sub    $0x1c,%esp

	// 首先判断参数的有效性和合法性。如果指定设备是根文件系统设备，则显示警告信息“根系统盘改变了，准备生死决战吧”，并返回。
	// 然后在超级块表中寻找指定设备号的文件系统超级块。如果找不到指定设备超级块，则返回。另外，如果该超级块指明该文件系统
	// 所安装到的i节点还没有被处理过，则显示警告信息并返回。在文件系统卸载（umount）操作中，s_imount会先被置成NULL以后
	// 才会调用本函数。
	if (dev == ROOT_DEV) {
    fb8c:	a1 cc 20 03 00       	mov    0x320cc,%eax
    fb91:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb95:	75 15                	jne    fbac <put_super+0x23>
		printk("root diskette changed: prepare for armageddon\n\r");
    fb97:	83 ec 0c             	sub    $0xc,%esp
    fb9a:	68 d0 39 02 00       	push   $0x239d0
    fb9f:	e8 a2 90 ff ff       	call   8c46 <printk>
    fba4:	83 c4 10             	add    $0x10,%esp
		return;
    fba7:	e9 cc 00 00 00       	jmp    fc78 <put_super+0xef>
	}
	if (!(sb = get_super(dev)))
    fbac:	83 ec 0c             	sub    $0xc,%esp
    fbaf:	ff 74 24 2c          	pushl  0x2c(%esp)
    fbb3:	e8 5c ff ff ff       	call   fb14 <get_super>
    fbb8:	83 c4 10             	add    $0x10,%esp
    fbbb:	89 44 24 08          	mov    %eax,0x8(%esp)
    fbbf:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    fbc4:	0f 84 ad 00 00 00    	je     fc77 <put_super+0xee>
		return;
	if (sb->s_imount) {
    fbca:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbce:	8b 40 5c             	mov    0x5c(%eax),%eax
    fbd1:	85 c0                	test   %eax,%eax
    fbd3:	74 15                	je     fbea <put_super+0x61>
		printk("Mounted disk changed - tssk, tssk\n\r");
    fbd5:	83 ec 0c             	sub    $0xc,%esp
    fbd8:	68 00 3a 02 00       	push   $0x23a00
    fbdd:	e8 64 90 ff ff       	call   8c46 <printk>
    fbe2:	83 c4 10             	add    $0x10,%esp
		return;
    fbe5:	e9 8e 00 00 00       	jmp    fc78 <put_super+0xef>
	}
	// 然后在找到指定设备的超级块之后，我们先锁定该超级块，再置该超级块对应的设备号字段s_dev为0，也即释放该设备上的文件系统
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
    fbea:	83 ec 0c             	sub    $0xc,%esp
    fbed:	ff 74 24 14          	pushl  0x14(%esp)
    fbf1:	e8 9b fe ff ff       	call   fa91 <lock_super>
    fbf6:	83 c4 10             	add    $0x10,%esp
	sb->s_dev = 0;                          		// 置超级块空闲。
    fbf9:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbfd:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
	for(i = 0; i < I_MAP_SLOTS; i++)
    fc03:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fc0a:	00 
    fc0b:	eb 20                	jmp    fc2d <put_super+0xa4>
		brelse(sb->s_imap[i]);
    fc0d:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc11:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc15:	83 c2 04             	add    $0x4,%edx
    fc18:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc1c:	83 ec 0c             	sub    $0xc,%esp
    fc1f:	50                   	push   %eax
    fc20:	e8 28 fa ff ff       	call   f64d <brelse>
    fc25:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < I_MAP_SLOTS; i++)
    fc28:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc2d:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc32:	7e d9                	jle    fc0d <put_super+0x84>
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc34:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fc3b:	00 
    fc3c:	eb 20                	jmp    fc5e <put_super+0xd5>
		brelse(sb->s_zmap[i]);
    fc3e:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc42:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc46:	83 c2 0c             	add    $0xc,%edx
    fc49:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc4d:	83 ec 0c             	sub    $0xc,%esp
    fc50:	50                   	push   %eax
    fc51:	e8 f7 f9 ff ff       	call   f64d <brelse>
    fc56:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc59:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc5e:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc63:	7e d9                	jle    fc3e <put_super+0xb5>
	free_super(sb);
    fc65:	83 ec 0c             	sub    $0xc,%esp
    fc68:	ff 74 24 14          	pushl  0x14(%esp)
    fc6c:	e8 53 fe ff ff       	call   fac4 <free_super>
    fc71:	83 c4 10             	add    $0x10,%esp
	return;
    fc74:	90                   	nop
    fc75:	eb 01                	jmp    fc78 <put_super+0xef>
		return;
    fc77:	90                   	nop
}
    fc78:	83 c4 1c             	add    $0x1c,%esp
    fc7b:	c3                   	ret    

0000fc7c <read_super>:

// 读取指定设备的超级块.
// 如果指定设备dev上的文件系统超级块已经在超级块表中,则直接返回该超级块项的指针.否则就从设备dev上读取超级块到缓冲块中,并复制到超级块表中.并
// 返回超级块指针.
static struct super_block * read_super(int dev)
{
    fc7c:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i, block;

	// 首先判断参数的有效性.如果没有指明设备,则返回空指针.然后检查该设备是否可更换过盘片(也即是否是软盘设备).如果更换过盘,则高速缓冲区有关该设备的所有
	// 缓冲块均失效,需要进行失效处理,即释放原来加载的文件系统.
	if (!dev)
    fc7f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fc84:	75 0a                	jne    fc90 <read_super+0x14>
		return NULL;
    fc86:	b8 00 00 00 00       	mov    $0x0,%eax
    fc8b:	e9 5a 03 00 00       	jmp    ffea <read_super+0x36e>
	check_disk_change(dev);
    fc90:	83 ec 0c             	sub    $0xc,%esp
    fc93:	ff 74 24 2c          	pushl  0x2c(%esp)
    fc97:	e8 5e f4 ff ff       	call   f0fa <check_disk_change>
    fc9c:	83 c4 10             	add    $0x10,%esp
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
    fc9f:	83 ec 0c             	sub    $0xc,%esp
    fca2:	ff 74 24 2c          	pushl  0x2c(%esp)
    fca6:	e8 69 fe ff ff       	call   fb14 <get_super>
    fcab:	83 c4 10             	add    $0x10,%esp
    fcae:	89 44 24 0c          	mov    %eax,0xc(%esp)
    fcb2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    fcb7:	74 09                	je     fcc2 <read_super+0x46>
		return s;
    fcb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcbd:	e9 28 03 00 00       	jmp    ffea <read_super+0x36e>
	for (s = 0 + super_block ;; s++) {
    fcc2:	c7 44 24 0c 20 1c 04 	movl   $0x41c20,0xc(%esp)
    fcc9:	00 
		if (s >= NR_SUPER + super_block)
    fcca:	b8 80 1f 04 00       	mov    $0x41f80,%eax
    fccf:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fcd3:	72 0a                	jb     fcdf <read_super+0x63>
			return NULL;
    fcd5:	b8 00 00 00 00       	mov    $0x0,%eax
    fcda:	e9 0b 03 00 00       	jmp    ffea <read_super+0x36e>
		if (!s->s_dev)
    fcdf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fce3:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fce7:	66 85 c0             	test   %ax,%ax
    fcea:	74 07                	je     fcf3 <read_super+0x77>
	for (s = 0 + super_block ;; s++) {
    fcec:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
		if (s >= NR_SUPER + super_block)
    fcf1:	eb d7                	jmp    fcca <read_super+0x4e>
			break;
    fcf3:	90                   	nop
	}
	// 在超级块数组中找到空项之后,就将该超级块项用于指定设备dev上的文件系统.于是对该超级块结构中的内存字段进行部分初始化处理.
	s->s_dev = dev;										// 用于dev设备上的文件系统.
    fcf4:	8b 44 24 20          	mov    0x20(%esp),%eax
    fcf8:	89 c2                	mov    %eax,%edx
    fcfa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcfe:	66 89 50 54          	mov    %dx,0x54(%eax)
	s->s_isup = NULL;
    fd02:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd06:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	s->s_imount = NULL;
    fd0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd11:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	s->s_time = 0;
    fd18:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd1c:	c7 40 60 00 00 00 00 	movl   $0x0,0x60(%eax)
	s->s_rd_only = 0;
    fd23:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd27:	c6 40 69 00          	movb   $0x0,0x69(%eax)
	s->s_dirt = 0;
    fd2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd2f:	c6 40 6a 00          	movb   $0x0,0x6a(%eax)
	//　然后锁定该超级块,并从设备上读取超级块信息到bh指向的缓冲块中.超级块位于块设备的第２个逻辑块(１号块)中,(第１个是引导盘块).如果读超级块操作失败,则释放
	//　上面选定的超级块数组中的项(即置s_dev=0),并解锁该项,返回空指针退出.否则就将设备上读取的超级块信息从缓冲块数据区复制到超级块数组相应项结构中.并释放存放
	//　读取信息的高速缓冲块.
	lock_super(s);
    fd33:	83 ec 0c             	sub    $0xc,%esp
    fd36:	ff 74 24 18          	pushl  0x18(%esp)
    fd3a:	e8 52 fd ff ff       	call   fa91 <lock_super>
    fd3f:	83 c4 10             	add    $0x10,%esp
	if (!(bh = bread(dev, 1))) {
    fd42:	83 ec 08             	sub    $0x8,%esp
    fd45:	6a 01                	push   $0x1
    fd47:	ff 74 24 2c          	pushl  0x2c(%esp)
    fd4b:	e8 53 f9 ff ff       	call   f6a3 <bread>
    fd50:	83 c4 10             	add    $0x10,%esp
    fd53:	89 04 24             	mov    %eax,(%esp)
    fd56:	83 3c 24 00          	cmpl   $0x0,(%esp)
    fd5a:	75 23                	jne    fd7f <read_super+0x103>
		s->s_dev = 0;
    fd5c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd60:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fd66:	83 ec 0c             	sub    $0xc,%esp
    fd69:	ff 74 24 18          	pushl  0x18(%esp)
    fd6d:	e8 52 fd ff ff       	call   fac4 <free_super>
    fd72:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fd75:	b8 00 00 00 00       	mov    $0x0,%eax
    fd7a:	e9 6b 02 00 00       	jmp    ffea <read_super+0x36e>
	}
	*((struct d_super_block *) s) =
		*((struct d_super_block *) bh->b_data);
    fd7f:	8b 04 24             	mov    (%esp),%eax
    fd82:	8b 10                	mov    (%eax),%edx
	*((struct d_super_block *) s) =
    fd84:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd88:	8b 0a                	mov    (%edx),%ecx
    fd8a:	89 08                	mov    %ecx,(%eax)
    fd8c:	8b 4a 04             	mov    0x4(%edx),%ecx
    fd8f:	89 48 04             	mov    %ecx,0x4(%eax)
    fd92:	8b 4a 08             	mov    0x8(%edx),%ecx
    fd95:	89 48 08             	mov    %ecx,0x8(%eax)
    fd98:	8b 4a 0c             	mov    0xc(%edx),%ecx
    fd9b:	89 48 0c             	mov    %ecx,0xc(%eax)
    fd9e:	8b 52 10             	mov    0x10(%edx),%edx
    fda1:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
    fda4:	83 ec 0c             	sub    $0xc,%esp
    fda7:	ff 74 24 0c          	pushl  0xc(%esp)
    fdab:	e8 9d f8 ff ff       	call   f64d <brelse>
    fdb0:	83 c4 10             	add    $0x10,%esp
	// 现在我们从设备dev上得到了文件系统的超级块,于是开始检查这个超级块的有效性并从设备上读取i节点位图和逻辑块位图等信息.如果所读取的超级块的文件系统魔数字段不对,
	// 说明设备上不是正确的文件系统,因此向上面一样,释放上面选定的超级块数组中的项,并解锁该项,返回空指针退出.
	// 对于该版Linux内核,只支持MINIX文件系统1.0版本,其魔数是0x137f.
	if (s->s_magic != SUPER_MAGIC) {
    fdb3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdb7:	0f b7 40 10          	movzwl 0x10(%eax),%eax
    fdbb:	66 3d 7f 13          	cmp    $0x137f,%ax
    fdbf:	74 23                	je     fde4 <read_super+0x168>
		s->s_dev = 0;
    fdc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdc5:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fdcb:	83 ec 0c             	sub    $0xc,%esp
    fdce:	ff 74 24 18          	pushl  0x18(%esp)
    fdd2:	e8 ed fc ff ff       	call   fac4 <free_super>
    fdd7:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fdda:	b8 00 00 00 00       	mov    $0x0,%eax
    fddf:	e9 06 02 00 00       	jmp    ffea <read_super+0x36e>
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fde4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fdeb:	00 
    fdec:	eb 18                	jmp    fe06 <read_super+0x18a>
		s->s_imap[i] = NULL;
    fdee:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdf2:	8b 54 24 08          	mov    0x8(%esp),%edx
    fdf6:	83 c2 04             	add    $0x4,%edx
    fdf9:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fe00:	00 
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fe01:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe06:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fe0b:	7e e1                	jle    fdee <read_super+0x172>
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fe0d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe14:	00 
    fe15:	eb 18                	jmp    fe2f <read_super+0x1b3>
		s->s_zmap[i] = NULL;
    fe17:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe1b:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe1f:	83 c2 0c             	add    $0xc,%edx
    fe22:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fe29:	00 
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fe2a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe2f:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fe34:	7e e1                	jle    fe17 <read_super+0x19b>
	block = 2;
    fe36:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
    fe3d:	00 
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe3e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe45:	00 
    fe46:	eb 41                	jmp    fe89 <read_super+0x20d>
		if (s->s_imap[i] = bread(dev, block))
    fe48:	83 ec 08             	sub    $0x8,%esp
    fe4b:	ff 74 24 0c          	pushl  0xc(%esp)
    fe4f:	ff 74 24 2c          	pushl  0x2c(%esp)
    fe53:	e8 4b f8 ff ff       	call   f6a3 <bread>
    fe58:	83 c4 10             	add    $0x10,%esp
    fe5b:	89 c1                	mov    %eax,%ecx
    fe5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe61:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe65:	83 c2 04             	add    $0x4,%edx
    fe68:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    fe6c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe70:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe74:	83 c2 04             	add    $0x4,%edx
    fe77:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fe7b:	85 c0                	test   %eax,%eax
    fe7d:	74 1d                	je     fe9c <read_super+0x220>
			block++;
    fe7f:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe84:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe89:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe8d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fe91:	0f b7 c0             	movzwl %ax,%eax
    fe94:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fe98:	7c ae                	jl     fe48 <read_super+0x1cc>
    fe9a:	eb 01                	jmp    fe9d <read_super+0x221>
		else
			break;
    fe9c:	90                   	nop
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fe9d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fea4:	00 
    fea5:	eb 41                	jmp    fee8 <read_super+0x26c>
		if (s->s_zmap[i] = bread(dev, block))
    fea7:	83 ec 08             	sub    $0x8,%esp
    feaa:	ff 74 24 0c          	pushl  0xc(%esp)
    feae:	ff 74 24 2c          	pushl  0x2c(%esp)
    feb2:	e8 ec f7 ff ff       	call   f6a3 <bread>
    feb7:	83 c4 10             	add    $0x10,%esp
    feba:	89 c1                	mov    %eax,%ecx
    febc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fec0:	8b 54 24 08          	mov    0x8(%esp),%edx
    fec4:	83 c2 0c             	add    $0xc,%edx
    fec7:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    fecb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fecf:	8b 54 24 08          	mov    0x8(%esp),%edx
    fed3:	83 c2 0c             	add    $0xc,%edx
    fed6:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    feda:	85 c0                	test   %eax,%eax
    fedc:	74 1d                	je     fefb <read_super+0x27f>
			block++;
    fede:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fee3:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fee8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    feec:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    fef0:	0f b7 c0             	movzwl %ax,%eax
    fef3:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fef7:	7c ae                	jl     fea7 <read_super+0x22b>
    fef9:	eb 01                	jmp    fefc <read_super+0x280>
		else
			break;
    fefb:	90                   	nop
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
    fefc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff00:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ff04:	0f b7 c0             	movzwl %ax,%eax
    ff07:	8d 50 02             	lea    0x2(%eax),%edx
    ff0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff0e:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ff12:	0f b7 c0             	movzwl %ax,%eax
    ff15:	01 d0                	add    %edx,%eax
    ff17:	39 44 24 04          	cmp    %eax,0x4(%esp)
    ff1b:	0f 84 82 00 00 00    	je     ffa3 <read_super+0x327>
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff21:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff28:	00 
    ff29:	eb 20                	jmp    ff4b <read_super+0x2cf>
			brelse(s->s_imap[i]);
    ff2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff2f:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff33:	83 c2 04             	add    $0x4,%edx
    ff36:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff3a:	83 ec 0c             	sub    $0xc,%esp
    ff3d:	50                   	push   %eax
    ff3e:	e8 0a f7 ff ff       	call   f64d <brelse>
    ff43:	83 c4 10             	add    $0x10,%esp
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff46:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff4b:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff50:	7e d9                	jle    ff2b <read_super+0x2af>
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff52:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff59:	00 
    ff5a:	eb 20                	jmp    ff7c <read_super+0x300>
			brelse(s->s_zmap[i]);
    ff5c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff60:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff64:	83 c2 0c             	add    $0xc,%edx
    ff67:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff6b:	83 ec 0c             	sub    $0xc,%esp
    ff6e:	50                   	push   %eax
    ff6f:	e8 d9 f6 ff ff       	call   f64d <brelse>
    ff74:	83 c4 10             	add    $0x10,%esp
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff77:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff7c:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff81:	7e d9                	jle    ff5c <read_super+0x2e0>
		s->s_dev = 0;									// 释放选定的超级块数组项.
    ff83:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff87:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);									// 解锁该超级块项.
    ff8d:	83 ec 0c             	sub    $0xc,%esp
    ff90:	ff 74 24 18          	pushl  0x18(%esp)
    ff94:	e8 2b fb ff ff       	call   fac4 <free_super>
    ff99:	83 c4 10             	add    $0x10,%esp
		return NULL;
    ff9c:	b8 00 00 00 00       	mov    $0x0,%eax
    ffa1:	eb 47                	jmp    ffea <read_super+0x36e>
	}
	// 否则一切成功.另外,由于对于申请空闲i节点的函数来讲,如果设备所有的i节点已经全被使用,则查找函数会返回0值.因此0号i节点是不能用的,所以这里将位图中第1块的最低位设置为
	// 1,以防止文件系统分配0号i节点.同样的道理,也将逻辑块位图的最低位设置为1.最后函数解锁该超级块,并返回超级块指针.
	s->s_imap[0]->b_data[0] |= 1;
    ffa3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffa7:	8b 40 14             	mov    0x14(%eax),%eax
    ffaa:	8b 00                	mov    (%eax),%eax
    ffac:	0f b6 10             	movzbl (%eax),%edx
    ffaf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffb3:	8b 40 14             	mov    0x14(%eax),%eax
    ffb6:	8b 00                	mov    (%eax),%eax
    ffb8:	83 ca 01             	or     $0x1,%edx
    ffbb:	88 10                	mov    %dl,(%eax)
	s->s_zmap[0]->b_data[0] |= 1;
    ffbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffc1:	8b 40 34             	mov    0x34(%eax),%eax
    ffc4:	8b 00                	mov    (%eax),%eax
    ffc6:	0f b6 10             	movzbl (%eax),%edx
    ffc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffcd:	8b 40 34             	mov    0x34(%eax),%eax
    ffd0:	8b 00                	mov    (%eax),%eax
    ffd2:	83 ca 01             	or     $0x1,%edx
    ffd5:	88 10                	mov    %dl,(%eax)
	free_super(s);
    ffd7:	83 ec 0c             	sub    $0xc,%esp
    ffda:	ff 74 24 18          	pushl  0x18(%esp)
    ffde:	e8 e1 fa ff ff       	call   fac4 <free_super>
    ffe3:	83 c4 10             	add    $0x10,%esp
	return s;
    ffe6:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ffea:	83 c4 1c             	add    $0x1c,%esp
    ffed:	c3                   	ret    

0000ffee <sys_umount>:
// 卸载文件系统（系统调用）。
// 参数dev_name是文件系统所在设备的设备文件名。
// 该函数首先根据参数给出的块设备文件名获得设备号，然后复位文件系统超级块中的相应字段，释放超级块和位图占用的缓冲块，最后对该
// 设备执行高速缓冲与设备上数据的同步操作。若卸载操作成功则返回0，否则返回出错码。
int sys_umount(char * dev_name)
{
    ffee:	83 ec 1c             	sub    $0x1c,%esp
	int dev;

	// 首先根据设备文件名找到对应的i节点，并取其中的设备号。设备文件所定义设备号是保存在其i节点的i_zone[0]中的。参见后面namei.c
	// 程序中系统调用sys_mknod()的代码第445行。另外，由于文件系统需要存放在块设备上，因此如果不是块设备文件，则放回刚申请的i节点
	// dev_i，返回出错码。
	if (!(inode = namei(dev_name)))
    fff1:	83 ec 0c             	sub    $0xc,%esp
    fff4:	ff 74 24 2c          	pushl  0x2c(%esp)
    fff8:	e8 f2 34 00 00       	call   134ef <namei>
    fffd:	83 c4 10             	add    $0x10,%esp
   10000:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10004:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10009:	75 0a                	jne    10015 <sys_umount+0x27>
		return -ENOENT;
   1000b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10010:	e9 59 01 00 00       	jmp    1016e <sys_umount+0x180>
	dev = inode->i_zone[0];
   10015:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10019:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1001d:	0f b7 c0             	movzwl %ax,%eax
   10020:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(inode->i_mode)) {
   10024:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10028:	0f b7 00             	movzwl (%eax),%eax
   1002b:	0f b7 c0             	movzwl %ax,%eax
   1002e:	25 00 f0 00 00       	and    $0xf000,%eax
   10033:	3d 00 60 00 00       	cmp    $0x6000,%eax
   10038:	74 19                	je     10053 <sys_umount+0x65>
		iput(inode);                    				// fs/inode.c。
   1003a:	83 ec 0c             	sub    $0xc,%esp
   1003d:	ff 74 24 18          	pushl  0x18(%esp)
   10041:	e8 76 e6 ff ff       	call   e6bc <iput>
   10046:	83 c4 10             	add    $0x10,%esp
		return -ENOTBLK;
   10049:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
   1004e:	e9 1b 01 00 00       	jmp    1016e <sys_umount+0x180>
	}
	// OK，现在上面为了得到设备号而取得的i节点已完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一下卸载该文件系统的
	// 条件是否满足。如果设备上是根文件系统，则不能卸载，返回忙出错号。
	iput(inode);
   10053:	83 ec 0c             	sub    $0xc,%esp
   10056:	ff 74 24 18          	pushl  0x18(%esp)
   1005a:	e8 5d e6 ff ff       	call   e6bc <iput>
   1005f:	83 c4 10             	add    $0x10,%esp
	if (dev == ROOT_DEV)
   10062:	a1 cc 20 03 00       	mov    0x320cc,%eax
   10067:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1006b:	75 0a                	jne    10077 <sys_umount+0x89>
		return -EBUSY;
   1006d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   10072:	e9 f7 00 00 00       	jmp    1016e <sys_umount+0x180>
	// 如果在超级块表中没有找到该设备上文件系统的超级块，或者已找到但是该设备上文件系统没有安装过，则返回出错码。如果超级块所指明
	// 被安装到的i节点并没有置位其安装标志i_mount，则显示警告信息。然后查找一下i节点表，看看是否有进程在使用该设备上的文件，如果
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
   10077:	83 ec 0c             	sub    $0xc,%esp
   1007a:	ff 74 24 14          	pushl  0x14(%esp)
   1007e:	e8 91 fa ff ff       	call   fb14 <get_super>
   10083:	83 c4 10             	add    $0x10,%esp
   10086:	89 44 24 04          	mov    %eax,0x4(%esp)
   1008a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1008f:	74 0b                	je     1009c <sys_umount+0xae>
   10091:	8b 44 24 04          	mov    0x4(%esp),%eax
   10095:	8b 40 5c             	mov    0x5c(%eax),%eax
   10098:	85 c0                	test   %eax,%eax
   1009a:	75 0a                	jne    100a6 <sys_umount+0xb8>
		return -ENOENT;
   1009c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   100a1:	e9 c8 00 00 00       	jmp    1016e <sys_umount+0x180>
	if (!sb->s_imount->i_mount)
   100a6:	8b 44 24 04          	mov    0x4(%esp),%eax
   100aa:	8b 40 5c             	mov    0x5c(%eax),%eax
   100ad:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   100b1:	84 c0                	test   %al,%al
   100b3:	75 10                	jne    100c5 <sys_umount+0xd7>
		printk("Mounted inode has i_mount=0\n");
   100b5:	83 ec 0c             	sub    $0xc,%esp
   100b8:	68 24 3a 02 00       	push   $0x23a24
   100bd:	e8 84 8b ff ff       	call   8c46 <printk>
   100c2:	83 c4 10             	add    $0x10,%esp
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   100c5:	c7 44 24 0c c0 11 03 	movl   $0x311c0,0xc(%esp)
   100cc:	00 
   100cd:	eb 2a                	jmp    100f9 <sys_umount+0x10b>
		if (inode->i_dev == dev && inode->i_count)
   100cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   100d3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   100d7:	0f b7 c0             	movzwl %ax,%eax
   100da:	39 44 24 08          	cmp    %eax,0x8(%esp)
   100de:	75 14                	jne    100f4 <sys_umount+0x106>
   100e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   100e4:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   100e8:	66 85 c0             	test   %ax,%ax
   100eb:	74 07                	je     100f4 <sys_umount+0x106>
				return -EBUSY;
   100ed:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   100f2:	eb 7a                	jmp    1016e <sys_umount+0x180>
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   100f4:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
   100f9:	b8 c0 20 03 00       	mov    $0x320c0,%eax
   100fe:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   10102:	72 cb                	jb     100cf <sys_umount+0xe1>
	// 现在该设备上文件系统的卸载条件均得到满足，因此我们可以开始实施真正的卸载操作了。首先复位被安装到的i节点的安装标志，释放该
	// i节点。然后置超级块中被安装i节点字段为空，并放回设备文件系统的根i节点，接着置超级块中被安装系统根i节点指针为空。
	sb->s_imount->i_mount = 0;
   10104:	8b 44 24 04          	mov    0x4(%esp),%eax
   10108:	8b 40 5c             	mov    0x5c(%eax),%eax
   1010b:	c6 40 39 00          	movb   $0x0,0x39(%eax)
	iput(sb->s_imount);
   1010f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10113:	8b 40 5c             	mov    0x5c(%eax),%eax
   10116:	83 ec 0c             	sub    $0xc,%esp
   10119:	50                   	push   %eax
   1011a:	e8 9d e5 ff ff       	call   e6bc <iput>
   1011f:	83 c4 10             	add    $0x10,%esp
	sb->s_imount = NULL;
   10122:	8b 44 24 04          	mov    0x4(%esp),%eax
   10126:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	iput(sb->s_isup);
   1012d:	8b 44 24 04          	mov    0x4(%esp),%eax
   10131:	8b 40 58             	mov    0x58(%eax),%eax
   10134:	83 ec 0c             	sub    $0xc,%esp
   10137:	50                   	push   %eax
   10138:	e8 7f e5 ff ff       	call   e6bc <iput>
   1013d:	83 c4 10             	add    $0x10,%esp
	sb->s_isup = NULL;
   10140:	8b 44 24 04          	mov    0x4(%esp),%eax
   10144:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	// 最后我们释放该设备上的超级块以及位图占用的高速缓冲块，并对该设备执行高速缓冲与设备上数据的同步操作。然后返回0（卸载成功）。
	put_super(dev);
   1014b:	83 ec 0c             	sub    $0xc,%esp
   1014e:	ff 74 24 14          	pushl  0x14(%esp)
   10152:	e8 32 fa ff ff       	call   fb89 <put_super>
   10157:	83 c4 10             	add    $0x10,%esp
	sync_dev(dev);
   1015a:	83 ec 0c             	sub    $0xc,%esp
   1015d:	ff 74 24 14          	pushl  0x14(%esp)
   10161:	e8 16 ee ff ff       	call   ef7c <sync_dev>
   10166:	83 c4 10             	add    $0x10,%esp
	return 0;
   10169:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1016e:	83 c4 1c             	add    $0x1c,%esp
   10171:	c3                   	ret    

00010172 <sys_mount>:

// 安装文件系统（系统调用）。
// 参数dev_name是设备文件名，dir_name是安装到的目录名，rw_flag被安装文件系统的可读写标志。将被加载的地方必须是一
// 个目录名，并且对应的i节点没有被其他程序占用。若操作成功则返回0,否则返回出错号。
int sys_mount(char * dev_name, char * dir_name, int rw_flag)
{
   10172:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	int dev;

	// 首先根据设备文件名找到对应的i节点，以取得其中的设备号。对于块特殊设备文件，设备号在其i节点的i_zone[0]中。另外，
	// 由于文件系统必须在块设备中，因此如果不是块设备文件，则放回刚得的i节点dev_i，返回出错码。
	if (!(dev_i = namei(dev_name)))
   10175:	83 ec 0c             	sub    $0xc,%esp
   10178:	ff 74 24 2c          	pushl  0x2c(%esp)
   1017c:	e8 6e 33 00 00       	call   134ef <namei>
   10181:	83 c4 10             	add    $0x10,%esp
   10184:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10188:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1018d:	75 0a                	jne    10199 <sys_mount+0x27>
		return -ENOENT;
   1018f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10194:	e9 64 01 00 00       	jmp    102fd <sys_mount+0x18b>
	dev = dev_i->i_zone[0];
   10199:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1019d:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   101a1:	0f b7 c0             	movzwl %ax,%eax
   101a4:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(dev_i->i_mode)) {
   101a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   101ac:	0f b7 00             	movzwl (%eax),%eax
   101af:	0f b7 c0             	movzwl %ax,%eax
   101b2:	25 00 f0 00 00       	and    $0xf000,%eax
   101b7:	3d 00 60 00 00       	cmp    $0x6000,%eax
   101bc:	74 19                	je     101d7 <sys_mount+0x65>
		iput(dev_i);
   101be:	83 ec 0c             	sub    $0xc,%esp
   101c1:	ff 74 24 18          	pushl  0x18(%esp)
   101c5:	e8 f2 e4 ff ff       	call   e6bc <iput>
   101ca:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   101cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   101d2:	e9 26 01 00 00       	jmp    102fd <sys_mount+0x18b>
	}
	// OK，现在上面为了得到设备号而取得的i节点dev_i已经完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一
	// 下文件系统安装到的目录名是否有效。于是根据给定的目录文件名找到对应的i节点dir_i。如果该i节点的引用计数不为1（仅在
	// 这里引用），或者该i节点的节点号是根文件系统的节点号1,则放回该i节点返回出错码。另外，如果该节点不是一个目录文件节点，
	// 则也放回该i节点，返回出错码。因为文件系统只能安装在一个目录名上。
	iput(dev_i);
   101d7:	83 ec 0c             	sub    $0xc,%esp
   101da:	ff 74 24 18          	pushl  0x18(%esp)
   101de:	e8 d9 e4 ff ff       	call   e6bc <iput>
   101e3:	83 c4 10             	add    $0x10,%esp
	if (!(dir_i = namei(dir_name)))
   101e6:	83 ec 0c             	sub    $0xc,%esp
   101e9:	ff 74 24 30          	pushl  0x30(%esp)
   101ed:	e8 fd 32 00 00       	call   134ef <namei>
   101f2:	83 c4 10             	add    $0x10,%esp
   101f5:	89 44 24 04          	mov    %eax,0x4(%esp)
   101f9:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   101fe:	75 0a                	jne    1020a <sys_mount+0x98>
		return -ENOENT;
   10200:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10205:	e9 f3 00 00 00       	jmp    102fd <sys_mount+0x18b>
	if (dir_i->i_count != 1 || dir_i->i_num == ROOT_INO) {
   1020a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1020e:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   10212:	66 83 f8 01          	cmp    $0x1,%ax
   10216:	75 0e                	jne    10226 <sys_mount+0xb4>
   10218:	8b 44 24 04          	mov    0x4(%esp),%eax
   1021c:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10220:	66 83 f8 01          	cmp    $0x1,%ax
   10224:	75 19                	jne    1023f <sys_mount+0xcd>
		iput(dir_i);
   10226:	83 ec 0c             	sub    $0xc,%esp
   10229:	ff 74 24 10          	pushl  0x10(%esp)
   1022d:	e8 8a e4 ff ff       	call   e6bc <iput>
   10232:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10235:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1023a:	e9 be 00 00 00       	jmp    102fd <sys_mount+0x18b>
	}
	if (!S_ISDIR(dir_i->i_mode)) {          			// 安装点需要是一个目录名。
   1023f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10243:	0f b7 00             	movzwl (%eax),%eax
   10246:	0f b7 c0             	movzwl %ax,%eax
   10249:	25 00 f0 00 00       	and    $0xf000,%eax
   1024e:	3d 00 40 00 00       	cmp    $0x4000,%eax
   10253:	74 19                	je     1026e <sys_mount+0xfc>
		iput(dir_i);
   10255:	83 ec 0c             	sub    $0xc,%esp
   10258:	ff 74 24 10          	pushl  0x10(%esp)
   1025c:	e8 5b e4 ff ff       	call   e6bc <iput>
   10261:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   10264:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10269:	e9 8f 00 00 00       	jmp    102fd <sys_mount+0x18b>
	}
	// 现在安装点也检查完毕，我们开始读取要安装文件系统的超级块信息。如果读超级块操作失败，则放回该安装点i节点dir_i并返回
	// 出错码。一个文件系统的超级块会首先从超级块表中进行搜索，如果不在超级块表中就从设备上读取。
	if (!(sb = read_super(dev))) {
   1026e:	83 ec 0c             	sub    $0xc,%esp
   10271:	ff 74 24 14          	pushl  0x14(%esp)
   10275:	e8 02 fa ff ff       	call   fc7c <read_super>
   1027a:	83 c4 10             	add    $0x10,%esp
   1027d:	89 04 24             	mov    %eax,(%esp)
   10280:	83 3c 24 00          	cmpl   $0x0,(%esp)
   10284:	75 16                	jne    1029c <sys_mount+0x12a>
		iput(dir_i);
   10286:	83 ec 0c             	sub    $0xc,%esp
   10289:	ff 74 24 10          	pushl  0x10(%esp)
   1028d:	e8 2a e4 ff ff       	call   e6bc <iput>
   10292:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10295:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1029a:	eb 61                	jmp    102fd <sys_mount+0x18b>
	}
	// 在等到了文件系统超级块之后，我们对它先进行检测一番。如果将要被安装的文件系统已经安装在其他地方，则放回该i节点，返回
	// 出错码。如果将要安装到的i节点已经安装了文件系统（安装标志已经置位），则放回该i节点，也返回出错码。
	if (sb->s_imount) {
   1029c:	8b 04 24             	mov    (%esp),%eax
   1029f:	8b 40 5c             	mov    0x5c(%eax),%eax
   102a2:	85 c0                	test   %eax,%eax
   102a4:	74 16                	je     102bc <sys_mount+0x14a>
		iput(dir_i);
   102a6:	83 ec 0c             	sub    $0xc,%esp
   102a9:	ff 74 24 10          	pushl  0x10(%esp)
   102ad:	e8 0a e4 ff ff       	call   e6bc <iput>
   102b2:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   102b5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   102ba:	eb 41                	jmp    102fd <sys_mount+0x18b>
	}
	if (dir_i->i_mount) {
   102bc:	8b 44 24 04          	mov    0x4(%esp),%eax
   102c0:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   102c4:	84 c0                	test   %al,%al
   102c6:	74 16                	je     102de <sys_mount+0x16c>
		iput(dir_i);
   102c8:	83 ec 0c             	sub    $0xc,%esp
   102cb:	ff 74 24 10          	pushl  0x10(%esp)
   102cf:	e8 e8 e3 ff ff       	call   e6bc <iput>
   102d4:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   102d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102dc:	eb 1f                	jmp    102fd <sys_mount+0x18b>
	}
	// 最后设置被安装文件系统超级块的“被安装到i节点”字段指向安装到的目录名的i节点。并设置安装位置i节点的安装标志和节点已修改
	// 标志。然后返回0（安装成功）。
	sb->s_imount = dir_i;
   102de:	8b 04 24             	mov    (%esp),%eax
   102e1:	8b 54 24 04          	mov    0x4(%esp),%edx
   102e5:	89 50 5c             	mov    %edx,0x5c(%eax)
	dir_i->i_mount = 1;
   102e8:	8b 44 24 04          	mov    0x4(%esp),%eax
   102ec:	c6 40 39 01          	movb   $0x1,0x39(%eax)
	dir_i->i_dirt = 1;									/* NOTE! we don't iput(dir_i) */        /* 注意！这里没有用iput(dir_i) */
   102f0:	8b 44 24 04          	mov    0x4(%esp),%eax
   102f4:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return 0;											/* we do that in umount */      /* 这将在umount内操作 */
   102f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   102fd:	83 c4 1c             	add    $0x1c,%esp
   10300:	c3                   	ret    

00010301 <mount_root>:

// 安装根文件系统.
// 该函数属于系统初始化操作的一部分.函数首先初始化文件表数组file_table[]和超级块表(数组),然后读取根文件系统超级块,并取得文件系统根i
// 节点.最后统计并显示出根文件系统上的可用资源(空闲块数和空闲i节点数0.该函数会在系统开机进行初始化设置时(sys_setup())调用(blk_drv/hd.c)>
void mount_root(void)
{
   10301:	53                   	push   %ebx
   10302:	83 ec 18             	sub    $0x18,%esp
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   10305:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1030c:	00 
   1030d:	eb 16                	jmp    10325 <mount_root+0x24>
		file_table[i].f_count = 0;
   1030f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10313:	c1 e0 04             	shl    $0x4,%eax
   10316:	05 84 1f 04 00       	add    $0x41f84,%eax
   1031b:	66 c7 00 00 00       	movw   $0x0,(%eax)
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   10320:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   10325:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   1032a:	7e e3                	jle    1030f <mount_root+0xe>
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
   1032c:	a1 cc 20 03 00       	mov    0x320cc,%eax
   10331:	c1 e8 08             	shr    $0x8,%eax
   10334:	83 f8 02             	cmp    $0x2,%eax
   10337:	75 15                	jne    1034e <mount_root+0x4d>
		printk("Insert root floppy and press ENTER\r\n");
   10339:	83 ec 0c             	sub    $0xc,%esp
   1033c:	68 44 3a 02 00       	push   $0x23a44
   10341:	e8 00 89 ff ff       	call   8c46 <printk>
   10346:	83 c4 10             	add    $0x10,%esp
		wait_for_keypress();
   10349:	e8 4c 88 00 00       	call   18b9a <wait_for_keypress>
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   1034e:	c7 44 24 04 20 1c 04 	movl   $0x41c20,0x4(%esp)
   10355:	00 
   10356:	eb 22                	jmp    1037a <mount_root+0x79>
		p->s_dev = 0;												// 初始化超级块表
   10358:	8b 44 24 04          	mov    0x4(%esp),%eax
   1035c:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		p->s_lock = 0;
   10362:	8b 44 24 04          	mov    0x4(%esp),%eax
   10366:	c6 40 68 00          	movb   $0x0,0x68(%eax)
		p->s_wait = NULL;
   1036a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1036e:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   10375:	83 44 24 04 6c       	addl   $0x6c,0x4(%esp)
   1037a:	81 7c 24 04 80 1f 04 	cmpl   $0x41f80,0x4(%esp)
   10381:	00 
   10382:	72 d4                	jb     10358 <mount_root+0x57>
	}
	// 做好以上"份外"的初始化工作之后,我们开始安装根文件系统.于是从根设备上读取文件系统超级块,并取得文件系统的根i节点(1号节点)在内存i节点表中的指针.
	// 如果读根设备上超级块失败或取根节点失败,则都显示信息并停机.
	if (!(p = read_super(ROOT_DEV)))
   10384:	a1 cc 20 03 00       	mov    0x320cc,%eax
   10389:	83 ec 0c             	sub    $0xc,%esp
   1038c:	50                   	push   %eax
   1038d:	e8 ea f8 ff ff       	call   fc7c <read_super>
   10392:	83 c4 10             	add    $0x10,%esp
   10395:	89 44 24 04          	mov    %eax,0x4(%esp)
   10399:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1039e:	75 10                	jne    103b0 <mount_root+0xaf>
		panic("Unable to mount root");
   103a0:	83 ec 0c             	sub    $0xc,%esp
   103a3:	68 69 3a 02 00       	push   $0x23a69
   103a8:	e8 5a 88 ff ff       	call   8c07 <panic>
   103ad:	83 c4 10             	add    $0x10,%esp
	if (!(mi = iget(ROOT_DEV, ROOT_INO)))							// 在fs.h中ROOT_INO定义为1.
   103b0:	a1 cc 20 03 00       	mov    0x320cc,%eax
   103b5:	83 ec 08             	sub    $0x8,%esp
   103b8:	6a 01                	push   $0x1
   103ba:	50                   	push   %eax
   103bb:	e8 7f e6 ff ff       	call   ea3f <iget>
   103c0:	83 c4 10             	add    $0x10,%esp
   103c3:	89 04 24             	mov    %eax,(%esp)
   103c6:	83 3c 24 00          	cmpl   $0x0,(%esp)
   103ca:	75 10                	jne    103dc <mount_root+0xdb>
		panic("Unable to read root i-node");
   103cc:	83 ec 0c             	sub    $0xc,%esp
   103cf:	68 7e 3a 02 00       	push   $0x23a7e
   103d4:	e8 2e 88 ff ff       	call   8c07 <panic>
   103d9:	83 c4 10             	add    $0x10,%esp
	// 现在我们对超级块和根i节点进行设置.把根i节点引用次数递增3次.因为下面266行上也引用了该i节点.另外,iget()函数中i节点引用计数已被设置为1.然后置该
	// 超级块的被安装文件系统i节点和被安装到i节点字段为该i节点.再设置当前进程的当前工作目录和根目录i节点.此时当前进程是1号进程(init进程).
	mi->i_count += 3 ;												/* NOTE! it is logically used 4 times, not 1 */
   103dc:	8b 04 24             	mov    (%esp),%eax
   103df:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   103e3:	8d 50 03             	lea    0x3(%eax),%edx
   103e6:	8b 04 24             	mov    (%esp),%eax
   103e9:	66 89 50 34          	mov    %dx,0x34(%eax)
                                									/* 注意!从逻辑上讲,它已被引用了4次,而不是1次 */
	p->s_isup = p->s_imount = mi;
   103ed:	8b 44 24 04          	mov    0x4(%esp),%eax
   103f1:	8b 14 24             	mov    (%esp),%edx
   103f4:	89 50 5c             	mov    %edx,0x5c(%eax)
   103f7:	8b 44 24 04          	mov    0x4(%esp),%eax
   103fb:	8b 50 5c             	mov    0x5c(%eax),%edx
   103fe:	8b 44 24 04          	mov    0x4(%esp),%eax
   10402:	89 50 58             	mov    %edx,0x58(%eax)
	current->pwd = mi;
   10405:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1040a:	8b 14 24             	mov    (%esp),%edx
   1040d:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	current->root = mi;
   10413:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   10418:	8b 14 24             	mov    (%esp),%edx
   1041b:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
   10421:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   10428:	00 
	i = p->s_nzones;
   10429:	8b 44 24 04          	mov    0x4(%esp),%eax
   1042d:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10431:	0f b7 c0             	movzwl %ax,%eax
   10434:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   10438:	eb 39                	jmp    10473 <mount_root+0x172>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
   1043a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1043e:	25 ff 1f 00 00       	and    $0x1fff,%eax
   10443:	89 c1                	mov    %eax,%ecx
   10445:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10449:	c1 f8 0d             	sar    $0xd,%eax
   1044c:	89 c2                	mov    %eax,%edx
   1044e:	8b 44 24 04          	mov    0x4(%esp),%eax
   10452:	83 c2 0c             	add    $0xc,%edx
   10455:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   10459:	8b 10                	mov    (%eax),%edx
   1045b:	b8 00 00 00 00       	mov    $0x0,%eax
   10460:	0f a3 0a             	bt     %ecx,(%edx)
   10463:	0f 92 c0             	setb   %al
   10466:	89 c3                	mov    %eax,%ebx
   10468:	89 d8                	mov    %ebx,%eax
   1046a:	85 c0                	test   %eax,%eax
   1046c:	75 05                	jne    10473 <mount_root+0x172>
			free++;
   1046e:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	while (-- i >= 0)
   10473:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   10478:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1047d:	79 bb                	jns    1043a <mount_root+0x139>
	// 打印当前主设备上空闲和总的逻辑块数
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
   1047f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10483:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10487:	0f b7 c0             	movzwl %ax,%eax
   1048a:	50                   	push   %eax
   1048b:	ff 74 24 0c          	pushl  0xc(%esp)
   1048f:	68 9c 3a 02 00       	push   $0x23a9c
   10494:	6a 00                	push   $0x0
   10496:	e8 a9 24 01 00       	call   22944 <Log>
   1049b:	83 c4 10             	add    $0x10,%esp
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
   1049e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   104a5:	00 
	i = p->s_ninodes + 1;
   104a6:	8b 44 24 04          	mov    0x4(%esp),%eax
   104aa:	0f b7 00             	movzwl (%eax),%eax
   104ad:	0f b7 c0             	movzwl %ax,%eax
   104b0:	83 c0 01             	add    $0x1,%eax
   104b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   104b7:	eb 39                	jmp    104f2 <mount_root+0x1f1>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
   104b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   104bd:	25 ff 1f 00 00       	and    $0x1fff,%eax
   104c2:	89 c1                	mov    %eax,%ecx
   104c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   104c8:	c1 f8 0d             	sar    $0xd,%eax
   104cb:	89 c2                	mov    %eax,%edx
   104cd:	8b 44 24 04          	mov    0x4(%esp),%eax
   104d1:	83 c2 04             	add    $0x4,%edx
   104d4:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   104d8:	8b 10                	mov    (%eax),%edx
   104da:	b8 00 00 00 00       	mov    $0x0,%eax
   104df:	0f a3 0a             	bt     %ecx,(%edx)
   104e2:	0f 92 c0             	setb   %al
   104e5:	89 c3                	mov    %eax,%ebx
   104e7:	89 d8                	mov    %ebx,%eax
   104e9:	85 c0                	test   %eax,%eax
   104eb:	75 05                	jne    104f2 <mount_root+0x1f1>
			free++;
   104ed:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	while (-- i >= 0)
   104f2:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   104f7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   104fc:	79 bb                	jns    104b9 <mount_root+0x1b8>
	// 打印当前主设备上i节点空闲和总的数量
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free inodes >>>>>\n\r", free, p->s_ninodes);
   104fe:	8b 44 24 04          	mov    0x4(%esp),%eax
   10502:	0f b7 00             	movzwl (%eax),%eax
   10505:	0f b7 c0             	movzwl %ax,%eax
   10508:	50                   	push   %eax
   10509:	ff 74 24 0c          	pushl  0xc(%esp)
   1050d:	68 bc 3a 02 00       	push   $0x23abc
   10512:	6a 00                	push   $0x0
   10514:	e8 2b 24 01 00       	call   22944 <Log>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	83 c4 18             	add    $0x18,%esp
   10520:	5b                   	pop    %ebx
   10521:	c3                   	ret    

00010522 <get_fs_byte>:
{
   10522:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10523:	8b 44 24 08          	mov    0x8(%esp),%eax
   10527:	64 8a 00             	mov    %fs:(%eax),%al
   1052a:	89 c3                	mov    %eax,%ebx
	return _v;
   1052c:	89 d8                	mov    %ebx,%eax
}
   1052e:	5b                   	pop    %ebx
   1052f:	c3                   	ret    

00010530 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10530:	83 ec 04             	sub    $0x4,%esp
   10533:	8b 44 24 08          	mov    0x8(%esp),%eax
   10537:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1053a:	0f b6 04 24          	movzbl (%esp),%eax
   1053e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10542:	64 88 02             	mov    %al,%fs:(%edx)
}
   10545:	90                   	nop
   10546:	83 c4 04             	add    $0x4,%esp
   10549:	c3                   	ret    

0001054a <block_write>:
// 返回已写入字节数。若没有写入任何字节或出错，则返回出错号。
// 对于内核来说，写操作是向高速缓冲区中写入数据。什么时候数据最终写入设备是高速缓冲管理程序决定并处理的。另外，因为
// 块设备是以块为单位进行读写，因此对于写开始位置不处于块起始处时，需要先将开始字节所在整个块读出，然后将需要写的数据
// 从开始处填写满该块，再将完整的一块数据写盘（即交由高速缓冲程序去处理）。
int block_write(int dev, long * pos, char * buf, int count)
{
   1054a:	53                   	push   %ebx
   1054b:	83 ec 28             	sub    $0x28,%esp
	// 首先由文件中位置pos换算成开始写盘块的块序号block，并求出需写第1字节在该块中的偏移位置offset。
	int block = *pos >> BLOCK_SIZE_BITS;            			// pos所在文件数据块号。
   1054e:	8b 44 24 34          	mov    0x34(%esp),%eax
   10552:	8b 00                	mov    (%eax),%eax
   10554:	c1 f8 0a             	sar    $0xa,%eax
   10557:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);             			// pos在数据块中偏移值。
   1055b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1055f:	8b 00                	mov    (%eax),%eax
   10561:	25 ff 03 00 00       	and    $0x3ff,%eax
   10566:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int written = 0;
   1056a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10571:	00 
	register char * p;               	       					// 局部寄存器变量，被存放在寄存器中。

	// 在写一个块设备文件时，要求写的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10572:	8b 44 24 30          	mov    0x30(%esp),%eax
   10576:	c1 e8 08             	shr    $0x8,%eax
   10579:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10580:	85 c0                	test   %eax,%eax
   10582:	74 25                	je     105a9 <block_write+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   10584:	8b 44 24 30          	mov    0x30(%esp),%eax
   10588:	c1 e8 08             	shr    $0x8,%eax
   1058b:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10592:	8b 54 24 30          	mov    0x30(%esp),%edx
   10596:	0f b6 d2             	movzbl %dl,%edx
   10599:	c1 e2 02             	shl    $0x2,%edx
   1059c:	01 d0                	add    %edx,%eax
   1059e:	8b 00                	mov    (%eax),%eax
   105a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   105a4:	e9 41 01 00 00       	jmp    106ea <block_write+0x1a0>
	else
		size = 0x7fffffff;
   105a9:	c7 44 24 0c ff ff ff 	movl   $0x7fffffff,0xc(%esp)
   105b0:	7f 
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   105b1:	e9 34 01 00 00       	jmp    106ea <block_write+0x1a0>
		if (block >= size)
   105b6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   105ba:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   105be:	7c 1a                	jl     105da <block_write+0x90>
			return written ? written : -EIO;
   105c0:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   105c5:	74 09                	je     105d0 <block_write+0x86>
   105c7:	8b 44 24 10          	mov    0x10(%esp),%eax
   105cb:	e9 29 01 00 00       	jmp    106f9 <block_write+0x1af>
   105d0:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   105d5:	e9 1f 01 00 00       	jmp    106f9 <block_write+0x1af>
		chars = BLOCK_SIZE - offset;
   105da:	b8 00 04 00 00       	mov    $0x400,%eax
   105df:	2b 44 24 18          	sub    0x18(%esp),%eax
   105e3:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   105e7:	8b 44 24 14          	mov    0x14(%esp),%eax
   105eb:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   105ef:	7e 08                	jle    105f9 <block_write+0xaf>
			chars = count;
   105f1:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   105f5:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars == BLOCK_SIZE)
   105f9:	81 7c 24 14 00 04 00 	cmpl   $0x400,0x14(%esp)
   10600:	00 
   10601:	75 19                	jne    1061c <block_write+0xd2>
			bh = getblk(dev, block);
   10603:	83 ec 08             	sub    $0x8,%esp
   10606:	ff 74 24 24          	pushl  0x24(%esp)
   1060a:	ff 74 24 3c          	pushl  0x3c(%esp)
   1060e:	e8 81 ee ff ff       	call   f494 <getblk>
   10613:	83 c4 10             	add    $0x10,%esp
   10616:	89 44 24 08          	mov    %eax,0x8(%esp)
   1061a:	eb 29                	jmp    10645 <block_write+0xfb>
		else
			bh = breada(dev, block, block + 1, block + 2, -1);
   1061c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10620:	8d 50 02             	lea    0x2(%eax),%edx
   10623:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10627:	83 c0 01             	add    $0x1,%eax
   1062a:	83 ec 0c             	sub    $0xc,%esp
   1062d:	6a ff                	push   $0xffffffff
   1062f:	52                   	push   %edx
   10630:	50                   	push   %eax
   10631:	ff 74 24 34          	pushl  0x34(%esp)
   10635:	ff 74 24 4c          	pushl  0x4c(%esp)
   10639:	e8 25 f2 ff ff       	call   f863 <breada>
   1063e:	83 c4 20             	add    $0x20,%esp
   10641:	89 44 24 08          	mov    %eax,0x8(%esp)
		block++;
   10645:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!bh)
   1064a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1064f:	75 1a                	jne    1066b <block_write+0x121>
			return written ? written : -EIO;
   10651:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10656:	74 09                	je     10661 <block_write+0x117>
   10658:	8b 44 24 10          	mov    0x10(%esp),%eax
   1065c:	e9 98 00 00 00       	jmp    106f9 <block_write+0x1af>
   10661:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10666:	e9 8e 00 00 00       	jmp    106f9 <block_write+0x1af>
		// 接着先把指针p指向读出数据的缓冲块中开始写入数据的位置处。若最后一次循环写入的数据不足一块，则需要从块开始
		// 处填写（修改）所需的字节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要写的字节数chars
		// 并累加这些要写的字节数到统计值written中。再把还需要写的计数值count减去此次要写的字节数chars。然后我们从
		// 用户缓冲区复制chars个字节到p指向的高速缓冲块中开始写入的位置处。复制完后就设置该缓冲区块已修改标志，并释放
		// 该缓冲区（即该缓冲区引用计数递减1）。
		p = offset + bh->b_data;
   1066b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1066f:	8b 10                	mov    (%eax),%edx
   10671:	8b 44 24 18          	mov    0x18(%esp),%eax
   10675:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   10678:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   1067f:	00 
		*pos += chars;
   10680:	8b 44 24 34          	mov    0x34(%esp),%eax
   10684:	8b 10                	mov    (%eax),%edx
   10686:	8b 44 24 14          	mov    0x14(%esp),%eax
   1068a:	01 c2                	add    %eax,%edx
   1068c:	8b 44 24 34          	mov    0x34(%esp),%eax
   10690:	89 10                	mov    %edx,(%eax)
		written += chars;               						// 累计写入字节数。
   10692:	8b 44 24 14          	mov    0x14(%esp),%eax
   10696:	01 44 24 10          	add    %eax,0x10(%esp)
		count -= chars;
   1069a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1069e:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   106a2:	eb 20                	jmp    106c4 <block_write+0x17a>
			*(p++) = get_fs_byte(buf++);
   106a4:	8b 44 24 38          	mov    0x38(%esp),%eax
   106a8:	8d 50 01             	lea    0x1(%eax),%edx
   106ab:	89 54 24 38          	mov    %edx,0x38(%esp)
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	50                   	push   %eax
   106b3:	e8 6a fe ff ff       	call   10522 <get_fs_byte>
   106b8:	83 c4 10             	add    $0x10,%esp
   106bb:	89 c2                	mov    %eax,%edx
   106bd:	89 d8                	mov    %ebx,%eax
   106bf:	8d 58 01             	lea    0x1(%eax),%ebx
   106c2:	88 10                	mov    %dl,(%eax)
		while (chars-- > 0)
   106c4:	8b 44 24 14          	mov    0x14(%esp),%eax
   106c8:	8d 50 ff             	lea    -0x1(%eax),%edx
   106cb:	89 54 24 14          	mov    %edx,0x14(%esp)
   106cf:	85 c0                	test   %eax,%eax
   106d1:	7f d1                	jg     106a4 <block_write+0x15a>
		bh->b_dirt = 1;
   106d3:	8b 44 24 08          	mov    0x8(%esp),%eax
   106d7:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   106db:	83 ec 0c             	sub    $0xc,%esp
   106de:	ff 74 24 14          	pushl  0x14(%esp)
   106e2:	e8 66 ef ff ff       	call   f64d <brelse>
   106e7:	83 c4 10             	add    $0x10,%esp
	while (count > 0) {
   106ea:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   106ef:	0f 8f c1 fe ff ff    	jg     105b6 <block_write+0x6c>
	}
	return written;                         					// 返回已写入的字节数，正常退出。
   106f5:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   106f9:	83 c4 28             	add    $0x28,%esp
   106fc:	5b                   	pop    %ebx
   106fd:	c3                   	ret    

000106fe <block_read>:

// 数据块读函数 - 从指定设备和位置处读入指定长度数据到用户缓冲区中。
// 参数：dev - 设备号；pos - 设备文件中领衔量指针；buf - 用户空间中缓冲区地址；count - 要传送的字节数。
// 返回已读入字节数。若没有读入任何字节或出错，则返回出错号。
int block_read(int dev, unsigned long * pos, char * buf, int count)
{
   106fe:	53                   	push   %ebx
   106ff:	83 ec 28             	sub    $0x28,%esp
	int block = *pos >> BLOCK_SIZE_BITS;
   10702:	8b 44 24 34          	mov    0x34(%esp),%eax
   10706:	8b 00                	mov    (%eax),%eax
   10708:	c1 e8 0a             	shr    $0xa,%eax
   1070b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);
   1070f:	8b 44 24 34          	mov    0x34(%esp),%eax
   10713:	8b 00                	mov    (%eax),%eax
   10715:	25 ff 03 00 00       	and    $0x3ff,%eax
   1071a:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int size;
	int read = 0;
   1071e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   10725:	00 
	register char * p;              							// 局部寄存器变量，被存放在寄存器中。

	// 在读一个块设备文件时，要求读的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10726:	8b 44 24 30          	mov    0x30(%esp),%eax
   1072a:	c1 e8 08             	shr    $0x8,%eax
   1072d:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10734:	85 c0                	test   %eax,%eax
   10736:	74 25                	je     1075d <block_read+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   10738:	8b 44 24 30          	mov    0x30(%esp),%eax
   1073c:	c1 e8 08             	shr    $0x8,%eax
   1073f:	8b 04 85 38 21 03 00 	mov    0x32138(,%eax,4),%eax
   10746:	8b 54 24 30          	mov    0x30(%esp),%edx
   1074a:	0f b6 d2             	movzbl %dl,%edx
   1074d:	c1 e2 02             	shl    $0x2,%edx
   10750:	01 d0                	add    %edx,%eax
   10752:	8b 00                	mov    (%eax),%eax
   10754:	89 44 24 10          	mov    %eax,0x10(%esp)
   10758:	e9 19 01 00 00       	jmp    10876 <block_read+0x178>
	else
		size = 0x7fffffff;
   1075d:	c7 44 24 10 ff ff ff 	movl   $0x7fffffff,0x10(%esp)
   10764:	7f 
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   10765:	e9 0c 01 00 00       	jmp    10876 <block_read+0x178>
		if (block >= size)
   1076a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1076e:	3b 44 24 10          	cmp    0x10(%esp),%eax
   10772:	7c 1a                	jl     1078e <block_read+0x90>
			return read ? read : -EIO;
   10774:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10779:	74 09                	je     10784 <block_read+0x86>
   1077b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1077f:	e9 01 01 00 00       	jmp    10885 <block_read+0x187>
   10784:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10789:	e9 f7 00 00 00       	jmp    10885 <block_read+0x187>
		chars = BLOCK_SIZE - offset;
   1078e:	b8 00 04 00 00       	mov    $0x400,%eax
   10793:	2b 44 24 18          	sub    0x18(%esp),%eax
   10797:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   1079b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1079f:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   107a3:	7e 08                	jle    107ad <block_read+0xaf>
			chars = count;
   107a5:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   107a9:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!(bh = breada(dev, block, block + 1, block + 2, -1)))
   107ad:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107b1:	8d 50 02             	lea    0x2(%eax),%edx
   107b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107b8:	83 c0 01             	add    $0x1,%eax
   107bb:	83 ec 0c             	sub    $0xc,%esp
   107be:	6a ff                	push   $0xffffffff
   107c0:	52                   	push   %edx
   107c1:	50                   	push   %eax
   107c2:	ff 74 24 34          	pushl  0x34(%esp)
   107c6:	ff 74 24 4c          	pushl  0x4c(%esp)
   107ca:	e8 94 f0 ff ff       	call   f863 <breada>
   107cf:	83 c4 20             	add    $0x20,%esp
   107d2:	89 44 24 08          	mov    %eax,0x8(%esp)
   107d6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   107db:	75 1a                	jne    107f7 <block_read+0xf9>
			return read ? read : -EIO;
   107dd:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   107e2:	74 09                	je     107ed <block_read+0xef>
   107e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   107e8:	e9 98 00 00 00       	jmp    10885 <block_read+0x187>
   107ed:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   107f2:	e9 8e 00 00 00       	jmp    10885 <block_read+0x187>
		block++;
   107f7:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		// 接着先把指针p指向读出盘块中开始读入数据的位置处。若最后一次循环读操作的数据不足一块，则需从块起始处读取所需字
		// 节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要读的字节数chars，并且累加这些要读的字节
		// 数到统计值read中。再把还需要读的计数值count减去此次要读的字节数chars。然后我们从高速缓冲块中p指向的开始读的
		// 位置处复制chars个字节到用户缓冲区中，同时把用户缓冲区指针前移。本次复制完后就释放该缓冲块。
		p = offset + bh->b_data;
   107fc:	8b 44 24 08          	mov    0x8(%esp),%eax
   10800:	8b 10                	mov    (%eax),%edx
   10802:	8b 44 24 18          	mov    0x18(%esp),%eax
   10806:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   10809:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   10810:	00 
		*pos += chars;
   10811:	8b 44 24 34          	mov    0x34(%esp),%eax
   10815:	8b 10                	mov    (%eax),%edx
   10817:	8b 44 24 14          	mov    0x14(%esp),%eax
   1081b:	01 c2                	add    %eax,%edx
   1081d:	8b 44 24 34          	mov    0x34(%esp),%eax
   10821:	89 10                	mov    %edx,(%eax)
		read += chars;                  						// 累计读入字节数。
   10823:	8b 44 24 14          	mov    0x14(%esp),%eax
   10827:	01 44 24 0c          	add    %eax,0xc(%esp)
		count -= chars;
   1082b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1082f:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   10833:	eb 23                	jmp    10858 <block_read+0x15a>
			put_fs_byte(*(p++), buf++);
   10835:	8b 44 24 38          	mov    0x38(%esp),%eax
   10839:	8d 50 01             	lea    0x1(%eax),%edx
   1083c:	89 54 24 38          	mov    %edx,0x38(%esp)
   10840:	89 da                	mov    %ebx,%edx
   10842:	8d 5a 01             	lea    0x1(%edx),%ebx
   10845:	0f b6 12             	movzbl (%edx),%edx
   10848:	0f be d2             	movsbl %dl,%edx
   1084b:	83 ec 08             	sub    $0x8,%esp
   1084e:	50                   	push   %eax
   1084f:	52                   	push   %edx
   10850:	e8 db fc ff ff       	call   10530 <put_fs_byte>
   10855:	83 c4 10             	add    $0x10,%esp
		while (chars-- > 0)
   10858:	8b 44 24 14          	mov    0x14(%esp),%eax
   1085c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1085f:	89 54 24 14          	mov    %edx,0x14(%esp)
   10863:	85 c0                	test   %eax,%eax
   10865:	7f ce                	jg     10835 <block_read+0x137>
		brelse(bh);
   10867:	83 ec 0c             	sub    $0xc,%esp
   1086a:	ff 74 24 14          	pushl  0x14(%esp)
   1086e:	e8 da ed ff ff       	call   f64d <brelse>
   10873:	83 c4 10             	add    $0x10,%esp
	while (count > 0) {
   10876:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   1087b:	0f 8f e9 fe ff ff    	jg     1076a <block_read+0x6c>
	}
	return read;                            					// 返回已读取的字节数，正常退出。
   10881:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   10885:	83 c4 28             	add    $0x28,%esp
   10888:	5b                   	pop    %ebx
   10889:	c3                   	ret    

0001088a <get_fs_byte>:
{
   1088a:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1088b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1088f:	64 8a 00             	mov    %fs:(%eax),%al
   10892:	89 c3                	mov    %eax,%ebx
	return _v;
   10894:	89 d8                	mov    %ebx,%eax
}
   10896:	5b                   	pop    %ebx
   10897:	c3                   	ret    

00010898 <put_fs_byte>:
{
   10898:	83 ec 04             	sub    $0x4,%esp
   1089b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1089f:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   108a2:	0f b6 04 24          	movzbl (%esp),%eax
   108a6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   108aa:	64 88 02             	mov    %al,%fs:(%edx)
}
   108ad:	90                   	nop
   108ae:	83 c4 04             	add    $0x4,%esp
   108b1:	c3                   	ret    

000108b2 <rw_ttyx>:

// 串口终端读写操作函数.
// 参数:rw - 读写命令;minor - 终端子设备号;buf - 缓冲区;count - 读写字节数;pos - 读写操作当前指针,对于终端操作,该指针无用.
// 返回:实际读写的字节数.若失败则返回出错码.
static int rw_ttyx(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   108b2:	83 ec 0c             	sub    $0xc,%esp
	return ((rw == READ) ? tty_read(minor, buf, count): tty_write(minor, buf, count));
   108b5:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   108ba:	75 19                	jne    108d5 <rw_ttyx+0x23>
   108bc:	83 ec 04             	sub    $0x4,%esp
   108bf:	ff 74 24 20          	pushl  0x20(%esp)
   108c3:	ff 74 24 20          	pushl  0x20(%esp)
   108c7:	ff 74 24 20          	pushl  0x20(%esp)
   108cb:	e8 16 8b 00 00       	call   193e6 <tty_read>
   108d0:	83 c4 10             	add    $0x10,%esp
   108d3:	eb 17                	jmp    108ec <rw_ttyx+0x3a>
   108d5:	83 ec 04             	sub    $0x4,%esp
   108d8:	ff 74 24 20          	pushl  0x20(%esp)
   108dc:	ff 74 24 20          	pushl  0x20(%esp)
   108e0:	ff 74 24 20          	pushl  0x20(%esp)
   108e4:	e8 38 8f 00 00       	call   19821 <tty_write>
   108e9:	83 c4 10             	add    $0x10,%esp
}
   108ec:	83 c4 0c             	add    $0xc,%esp
   108ef:	c3                   	ret    

000108f0 <rw_tty>:

// 终端读写操作函数。
// 同rw_ttyx()类似，只是增加了对进程是否有控制终端的检测。
static int rw_tty(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   108f0:	83 ec 0c             	sub    $0xc,%esp
	// 若进程没有对应的控制终端，则返回出错号。否则调用终端读写函数rw_ttyx()，并返回实际读写字节数。
	if (current->tty < 0)
   108f3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   108f8:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   108fe:	85 c0                	test   %eax,%eax
   10900:	79 07                	jns    10909 <rw_tty+0x19>
		return -EPERM;
   10902:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10907:	eb 27                	jmp    10930 <rw_tty+0x40>
	return rw_ttyx(rw, current->tty, buf, count, pos);
   10909:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1090e:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   10914:	83 ec 0c             	sub    $0xc,%esp
   10917:	ff 74 24 2c          	pushl  0x2c(%esp)
   1091b:	ff 74 24 2c          	pushl  0x2c(%esp)
   1091f:	ff 74 24 2c          	pushl  0x2c(%esp)
   10923:	50                   	push   %eax
   10924:	ff 74 24 2c          	pushl  0x2c(%esp)
   10928:	e8 85 ff ff ff       	call   108b2 <rw_ttyx>
   1092d:	83 c4 20             	add    $0x20,%esp
}
   10930:	83 c4 0c             	add    $0xc,%esp
   10933:	c3                   	ret    

00010934 <rw_ram>:

// 内在数据读写。未实现。
static int rw_ram(int rw,char * buf, int count, off_t *pos)
{
	return -EIO;
   10934:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10939:	c3                   	ret    

0001093a <rw_mem>:

// 物理内存数据读写操作函数。未实现。
static int rw_mem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   1093a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   1093f:	c3                   	ret    

00010940 <rw_kmem>:

// 内核虚拟内存数据读写函数。未实现。
static int rw_kmem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   10940:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10945:	c3                   	ret    

00010946 <rw_port>:

// 端口读写操作函数。
// 参数：rw - 读写命令；buf - 缓冲区；count - 读写字节数；post - 端口地址。
// 返回：实际读写的字节数。
static int rw_port(int rw,char * buf, int count, off_t * pos)
{
   10946:	83 ec 10             	sub    $0x10,%esp
	int i = *pos;
   10949:	8b 44 24 20          	mov    0x20(%esp),%eax
   1094d:	8b 00                	mov    (%eax),%eax
   1094f:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   10953:	eb 4f                	jmp    109a4 <rw_port+0x5e>
		if (rw == READ)
   10955:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   1095a:	75 2a                	jne    10986 <rw_port+0x40>
			put_fs_byte(inb(i), buf++);
   1095c:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   10960:	8d 41 01             	lea    0x1(%ecx),%eax
   10963:	89 44 24 18          	mov    %eax,0x18(%esp)
   10967:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1096b:	89 c2                	mov    %eax,%edx
   1096d:	ec                   	in     (%dx),%al
   1096e:	88 44 24 0b          	mov    %al,0xb(%esp)
   10972:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   10977:	0f be c0             	movsbl %al,%eax
   1097a:	51                   	push   %ecx
   1097b:	50                   	push   %eax
   1097c:	e8 17 ff ff ff       	call   10898 <put_fs_byte>
   10981:	83 c4 08             	add    $0x8,%esp
   10984:	eb 19                	jmp    1099f <rw_port+0x59>
		else
			outb(get_fs_byte(buf++), i);
   10986:	8b 44 24 18          	mov    0x18(%esp),%eax
   1098a:	8d 50 01             	lea    0x1(%eax),%edx
   1098d:	89 54 24 18          	mov    %edx,0x18(%esp)
   10991:	50                   	push   %eax
   10992:	e8 f3 fe ff ff       	call   1088a <get_fs_byte>
   10997:	83 c4 04             	add    $0x4,%esp
   1099a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1099e:	ee                   	out    %al,(%dx)
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
   1099f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (count-- > 0 && i < 65536) {
   109a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   109a8:	8d 50 ff             	lea    -0x1(%eax),%edx
   109ab:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   109af:	85 c0                	test   %eax,%eax
   109b1:	7e 0a                	jle    109bd <rw_port+0x77>
   109b3:	81 7c 24 0c ff ff 00 	cmpl   $0xffff,0xc(%esp)
   109ba:	00 
   109bb:	7e 98                	jle    10955 <rw_port+0xf>
	}
	// 然后计算读/写的字节数，调整相应读写指针，并返回读/写的字节数。
	i -= *pos;
   109bd:	8b 44 24 20          	mov    0x20(%esp),%eax
   109c1:	8b 00                	mov    (%eax),%eax
   109c3:	29 44 24 0c          	sub    %eax,0xc(%esp)
	*pos += i;
   109c7:	8b 44 24 20          	mov    0x20(%esp),%eax
   109cb:	8b 10                	mov    (%eax),%edx
   109cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   109d1:	01 c2                	add    %eax,%edx
   109d3:	8b 44 24 20          	mov    0x20(%esp),%eax
   109d7:	89 10                	mov    %edx,(%eax)
	return i;
   109d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   109dd:	83 c4 10             	add    $0x10,%esp
   109e0:	c3                   	ret    

000109e1 <rw_memory>:

// 内存读写操作函数。
static int rw_memory(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
	// 根据内存设备子设备号，分别调用不同的内存读写函数。
	switch(minor) {
   109e1:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   109e6:	0f 87 86 00 00 00    	ja     10a72 <rw_memory+0x91>
   109ec:	8b 44 24 08          	mov    0x8(%esp),%eax
   109f0:	c1 e0 02             	shl    $0x2,%eax
   109f3:	05 dc 3a 02 00       	add    $0x23adc,%eax
   109f8:	8b 00                	mov    (%eax),%eax
   109fa:	ff e0                	jmp    *%eax
		case 0:
			return rw_ram(rw, buf, count, pos);
   109fc:	ff 74 24 14          	pushl  0x14(%esp)
   10a00:	ff 74 24 14          	pushl  0x14(%esp)
   10a04:	ff 74 24 14          	pushl  0x14(%esp)
   10a08:	ff 74 24 10          	pushl  0x10(%esp)
   10a0c:	e8 23 ff ff ff       	call   10934 <rw_ram>
   10a11:	83 c4 10             	add    $0x10,%esp
   10a14:	c3                   	ret    
		case 1:
			return rw_mem(rw, buf, count, pos);
   10a15:	ff 74 24 14          	pushl  0x14(%esp)
   10a19:	ff 74 24 14          	pushl  0x14(%esp)
   10a1d:	ff 74 24 14          	pushl  0x14(%esp)
   10a21:	ff 74 24 10          	pushl  0x10(%esp)
   10a25:	e8 10 ff ff ff       	call   1093a <rw_mem>
   10a2a:	83 c4 10             	add    $0x10,%esp
   10a2d:	c3                   	ret    
		case 2:
			return rw_kmem(rw, buf, count, pos);
   10a2e:	ff 74 24 14          	pushl  0x14(%esp)
   10a32:	ff 74 24 14          	pushl  0x14(%esp)
   10a36:	ff 74 24 14          	pushl  0x14(%esp)
   10a3a:	ff 74 24 10          	pushl  0x10(%esp)
   10a3e:	e8 fd fe ff ff       	call   10940 <rw_kmem>
   10a43:	83 c4 10             	add    $0x10,%esp
   10a46:	c3                   	ret    
		case 3:
			return (rw == READ) ? 0 : count;					/* rw_null */
   10a47:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10a4c:	74 05                	je     10a53 <rw_memory+0x72>
   10a4e:	8b 44 24 10          	mov    0x10(%esp),%eax
   10a52:	c3                   	ret    
   10a53:	b8 00 00 00 00       	mov    $0x0,%eax
   10a58:	c3                   	ret    
		case 4:
			return rw_port(rw, buf, count, pos);
   10a59:	ff 74 24 14          	pushl  0x14(%esp)
   10a5d:	ff 74 24 14          	pushl  0x14(%esp)
   10a61:	ff 74 24 14          	pushl  0x14(%esp)
   10a65:	ff 74 24 10          	pushl  0x10(%esp)
   10a69:	e8 d8 fe ff ff       	call   10946 <rw_port>
   10a6e:	83 c4 10             	add    $0x10,%esp
   10a71:	c3                   	ret    
		default:
			return -EIO;
   10a72:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
}
   10a77:	c3                   	ret    

00010a78 <rw_char>:

// 字符设备读写操作函数
// 参数:rw - 读写命令;dev - 设备号;buf - 缓冲区;count - 读写字节数;pos - 读写指针.
// 返回:实际读/写字节数.
int rw_char(int rw, int dev, char * buf, int count, off_t * pos)
{
   10a78:	83 ec 1c             	sub    $0x1c,%esp
	crw_ptr call_addr;

	// 如果设备号超出系统设备数,则返回出错码.如果该设备没有对应的读/写函数,也返回出错码.否则调用对应设备的读写操作函数,并返回实际读/写的字节数.
	if (MAJOR(dev) >= NRDEVS)
   10a7b:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a7f:	c1 e8 08             	shr    $0x8,%eax
   10a82:	83 f8 07             	cmp    $0x7,%eax
   10a85:	76 07                	jbe    10a8e <rw_char+0x16>
		return -ENODEV;
   10a87:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10a8c:	eb 44                	jmp    10ad2 <rw_char+0x5a>
	if (!(call_addr = crw_table[MAJOR(dev)]))
   10a8e:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a92:	c1 e8 08             	shr    $0x8,%eax
   10a95:	8b 04 85 80 f3 02 00 	mov    0x2f380(,%eax,4),%eax
   10a9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10aa0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10aa5:	75 07                	jne    10aae <rw_char+0x36>
		return -ENODEV;
   10aa7:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10aac:	eb 24                	jmp    10ad2 <rw_char+0x5a>
	return call_addr(rw, MINOR(dev), buf, count, pos);
   10aae:	8b 44 24 24          	mov    0x24(%esp),%eax
   10ab2:	0f b6 c0             	movzbl %al,%eax
   10ab5:	83 ec 0c             	sub    $0xc,%esp
   10ab8:	ff 74 24 3c          	pushl  0x3c(%esp)
   10abc:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ac0:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ac4:	50                   	push   %eax
   10ac5:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ac9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10acd:	ff d0                	call   *%eax
   10acf:	83 c4 20             	add    $0x20,%esp
}
   10ad2:	83 c4 1c             	add    $0x1c,%esp
   10ad5:	c3                   	ret    

00010ad6 <get_fs_byte>:
{
   10ad6:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10ad7:	8b 44 24 08          	mov    0x8(%esp),%eax
   10adb:	64 8a 00             	mov    %fs:(%eax),%al
   10ade:	89 c3                	mov    %eax,%ebx
	return _v;
   10ae0:	89 d8                	mov    %ebx,%eax
}
   10ae2:	5b                   	pop    %ebx
   10ae3:	c3                   	ret    

00010ae4 <put_fs_byte>:
{
   10ae4:	83 ec 04             	sub    $0x4,%esp
   10ae7:	8b 44 24 08          	mov    0x8(%esp),%eax
   10aeb:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10aee:	0f b6 04 24          	movzbl (%esp),%eax
   10af2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10af6:	64 88 02             	mov    %al,%fs:(%edx)
}
   10af9:	90                   	nop
   10afa:	83 c4 04             	add    $0x4,%esp
   10afd:	c3                   	ret    

00010afe <file_read>:

// 文件读函数 - 根据i节点和文件结构，读取文件中数据
// 由i节点我们可以知道设备号，由filp结构可以知道文件中当前读写指针位置。buf指定用户空间中缓冲区的位置，count是需要读取的字节数。
// 返回值是实际读取的字节数，或出错号（小于0）。
int file_read(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10afe:	83 ec 2c             	sub    $0x2c,%esp

	// 首先判断参数的有效性。若需要读取的字节计数count小于等于零，则返回0.若还需要读取的字节数不等于0,就循环执行下面操作，直到数据全
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
   10b01:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10b05:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10b09:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10b0e:	0f 8f 41 01 00 00    	jg     10c55 <file_read+0x157>
		return 0;
   10b14:	b8 00 00 00 00       	mov    $0x0,%eax
   10b19:	e9 80 01 00 00       	jmp    10c9e <file_read+0x1a0>
	while (left) {
		// 根据文件的读写偏移位置得到当前写位置对应的逻辑块号
		if (nr = bmap(inode, (filp->f_pos) / BLOCK_SIZE)) {
   10b1e:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b22:	8b 40 0c             	mov    0xc(%eax),%eax
   10b25:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10b2b:	85 c0                	test   %eax,%eax
   10b2d:	0f 48 c2             	cmovs  %edx,%eax
   10b30:	c1 f8 0a             	sar    $0xa,%eax
   10b33:	83 ec 08             	sub    $0x8,%esp
   10b36:	50                   	push   %eax
   10b37:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b3b:	e8 44 db ff ff       	call   e684 <bmap>
   10b40:	83 c4 10             	add    $0x10,%esp
   10b43:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10b47:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10b4c:	74 2b                	je     10b79 <file_read+0x7b>
			// 得到该逻辑块号对应的高速缓冲区
			if (!(bh = bread(inode->i_dev, nr)))
   10b4e:	8b 44 24 30          	mov    0x30(%esp),%eax
   10b52:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10b56:	0f b7 c0             	movzwl %ax,%eax
   10b59:	83 ec 08             	sub    $0x8,%esp
   10b5c:	ff 74 24 14          	pushl  0x14(%esp)
   10b60:	50                   	push   %eax
   10b61:	e8 3d eb ff ff       	call   f6a3 <bread>
   10b66:	83 c4 10             	add    $0x10,%esp
   10b69:	89 44 24 14          	mov    %eax,0x14(%esp)
   10b6d:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10b72:	75 0d                	jne    10b81 <file_read+0x83>
				break;
   10b74:	e9 e7 00 00 00       	jmp    10c60 <file_read+0x162>
		} else
			bh = NULL;
   10b79:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   10b80:	00 
		// 接着我们计算文件读写指针在数据块中的偏移值nr，则在该数据块中我们希望读取的字节数为（BLOCK_SIZE - nr）。然后和现在还需读取的
		// 字节数left作比较，其中小值即为本次操作需读取的字节数chars。如果（BLOCK_SIZE - nr）> left，则说明该块是需要读取的最后一块
		// 数据，反之还需要读取下一块数据。之后调整读写文件指针。指针前移此次将读取的字节数chars。剩余字节数left相应减去chars。
		nr = filp->f_pos % BLOCK_SIZE;
   10b81:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b85:	8b 40 0c             	mov    0xc(%eax),%eax
   10b88:	99                   	cltd   
   10b89:	c1 ea 16             	shr    $0x16,%edx
   10b8c:	01 d0                	add    %edx,%eax
   10b8e:	25 ff 03 00 00       	and    $0x3ff,%eax
   10b93:	29 d0                	sub    %edx,%eax
   10b95:	89 44 24 0c          	mov    %eax,0xc(%esp)
		chars = MIN( BLOCK_SIZE - nr , left );
   10b99:	b8 00 04 00 00       	mov    $0x400,%eax
   10b9e:	2b 44 24 0c          	sub    0xc(%esp),%eax
   10ba2:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   10ba6:	0f 4e 44 24 1c       	cmovle 0x1c(%esp),%eax
   10bab:	89 44 24 18          	mov    %eax,0x18(%esp)
		filp->f_pos += chars;
   10baf:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bb3:	8b 50 0c             	mov    0xc(%eax),%edx
   10bb6:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bba:	01 c2                	add    %eax,%edx
   10bbc:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bc0:	89 50 0c             	mov    %edx,0xc(%eax)
		left -= chars;
   10bc3:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bc7:	29 44 24 1c          	sub    %eax,0x1c(%esp)
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
   10bcb:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10bd0:	74 74                	je     10c46 <file_read+0x148>
			char * p = nr + bh->b_data;
   10bd2:	8b 44 24 14          	mov    0x14(%esp),%eax
   10bd6:	8b 10                	mov    (%eax),%edx
   10bd8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10bdc:	01 d0                	add    %edx,%eax
   10bde:	89 44 24 10          	mov    %eax,0x10(%esp)
			while (chars-- > 0)
   10be2:	eb 29                	jmp    10c0d <file_read+0x10f>
				put_fs_byte(*(p++), buf++);
   10be4:	8b 44 24 38          	mov    0x38(%esp),%eax
   10be8:	8d 50 01             	lea    0x1(%eax),%edx
   10beb:	89 54 24 38          	mov    %edx,0x38(%esp)
   10bef:	8b 54 24 10          	mov    0x10(%esp),%edx
   10bf3:	8d 4a 01             	lea    0x1(%edx),%ecx
   10bf6:	89 4c 24 10          	mov    %ecx,0x10(%esp)
   10bfa:	0f b6 12             	movzbl (%edx),%edx
   10bfd:	0f be d2             	movsbl %dl,%edx
   10c00:	83 ec 08             	sub    $0x8,%esp
   10c03:	50                   	push   %eax
   10c04:	52                   	push   %edx
   10c05:	e8 da fe ff ff       	call   10ae4 <put_fs_byte>
   10c0a:	83 c4 10             	add    $0x10,%esp
			while (chars-- > 0)
   10c0d:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c11:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c14:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c18:	85 c0                	test   %eax,%eax
   10c1a:	7f c8                	jg     10be4 <file_read+0xe6>
			brelse(bh);
   10c1c:	83 ec 0c             	sub    $0xc,%esp
   10c1f:	ff 74 24 20          	pushl  0x20(%esp)
   10c23:	e8 25 ea ff ff       	call   f64d <brelse>
   10c28:	83 c4 10             	add    $0x10,%esp
   10c2b:	eb 28                	jmp    10c55 <file_read+0x157>
		} else {
			while (chars-- > 0)
				put_fs_byte(0, buf++);
   10c2d:	8b 44 24 38          	mov    0x38(%esp),%eax
   10c31:	8d 50 01             	lea    0x1(%eax),%edx
   10c34:	89 54 24 38          	mov    %edx,0x38(%esp)
   10c38:	83 ec 08             	sub    $0x8,%esp
   10c3b:	50                   	push   %eax
   10c3c:	6a 00                	push   $0x0
   10c3e:	e8 a1 fe ff ff       	call   10ae4 <put_fs_byte>
   10c43:	83 c4 10             	add    $0x10,%esp
			while (chars-- > 0)
   10c46:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c4a:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c4d:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c51:	85 c0                	test   %eax,%eax
   10c53:	7f d8                	jg     10c2d <file_read+0x12f>
	while (left) {
   10c55:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10c5a:	0f 85 be fe ff ff    	jne    10b1e <file_read+0x20>
		}
	}
	// 修改该i节点的访问时间为当前时间。返回读取的字节数，若读取字节数为0,则返回出错号。
	// CURRENT_TIME是定义在include/linux/sched.h上的宏，用于计算UNIX时间。即从1970年1月1日0时0秒开始，到当前时间。单位是秒。
	inode->i_atime = CURRENT_TIME;
   10c60:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10c65:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10c6b:	01 d0                	add    %edx,%eax
   10c6d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10c72:	f7 e2                	mul    %edx
   10c74:	c1 ea 05             	shr    $0x5,%edx
   10c77:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10c7c:	01 c2                	add    %eax,%edx
   10c7e:	8b 44 24 30          	mov    0x30(%esp),%eax
   10c82:	89 50 28             	mov    %edx,0x28(%eax)
	return (count - left) ? (count-left) : -ERROR;
   10c85:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c89:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
   10c8d:	74 0a                	je     10c99 <file_read+0x19b>
   10c8f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c93:	2b 44 24 1c          	sub    0x1c(%esp),%eax
   10c97:	eb 05                	jmp    10c9e <file_read+0x1a0>
   10c99:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
}
   10c9e:	83 c4 2c             	add    $0x2c,%esp
   10ca1:	c3                   	ret    

00010ca2 <file_write>:

// 文件写函数 - 根据i节点和文件结构信息，将用户数据写入文件中。
// 由i节点我们可以知道设备号，而由file结构可以知道文件中当前读写指针位置。buf指定用户态中缓冲区的位置，count为需要写入的字节数。
// 返回值是实际写入的字节数，或出错号（小于0).
int file_write(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10ca2:	83 ec 2c             	sub    $0x2c,%esp
	off_t pos;
	int block, c;
	struct buffer_head * bh;
	char * p;
	int i = 0;
   10ca5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10cac:	00 
	 */
	/*
	 * OK，当许多进程同时写时，append操作可能不行，但那又怎样。不管怎样那样做会导致混乱一团。
	 */
	// 首先确定数据写入文件的位置。如果是要向文件后添加数据，则将文件读写指针移到文件尾部。否则就将在文件当前读写指针处写入。
	if (filp->f_flags & O_APPEND)
   10cad:	8b 44 24 34          	mov    0x34(%esp),%eax
   10cb1:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10cb5:	0f b7 c0             	movzwl %ax,%eax
   10cb8:	25 00 04 00 00       	and    $0x400,%eax
   10cbd:	85 c0                	test   %eax,%eax
   10cbf:	74 10                	je     10cd1 <file_write+0x2f>
		pos = inode->i_size;
   10cc1:	8b 44 24 30          	mov    0x30(%esp),%eax
   10cc5:	8b 40 04             	mov    0x4(%eax),%eax
   10cc8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10ccc:	e9 39 01 00 00       	jmp    10e0a <file_write+0x168>
	else
		pos = filp->f_pos;
   10cd1:	8b 44 24 34          	mov    0x34(%esp),%eax
   10cd5:	8b 40 0c             	mov    0xc(%eax),%eax
   10cd8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10cdc:	e9 29 01 00 00       	jmp    10e0a <file_write+0x168>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
   10ce1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10ce5:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10ceb:	85 c0                	test   %eax,%eax
   10ced:	0f 48 c2             	cmovs  %edx,%eax
   10cf0:	c1 f8 0a             	sar    $0xa,%eax
   10cf3:	83 ec 08             	sub    $0x8,%esp
   10cf6:	50                   	push   %eax
   10cf7:	ff 74 24 3c          	pushl  0x3c(%esp)
   10cfb:	e8 a0 d9 ff ff       	call   e6a0 <create_block>
   10d00:	83 c4 10             	add    $0x10,%esp
   10d03:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10d07:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10d0c:	0f 84 08 01 00 00    	je     10e1a <file_write+0x178>
			break;
		if (!(bh = bread(inode->i_dev, block)))
   10d12:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d16:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10d1a:	0f b7 c0             	movzwl %ax,%eax
   10d1d:	83 ec 08             	sub    $0x8,%esp
   10d20:	ff 74 24 14          	pushl  0x14(%esp)
   10d24:	50                   	push   %eax
   10d25:	e8 79 e9 ff ff       	call   f6a3 <bread>
   10d2a:	83 c4 10             	add    $0x10,%esp
   10d2d:	89 44 24 08          	mov    %eax,0x8(%esp)
   10d31:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10d36:	0f 84 e1 00 00 00    	je     10e1d <file_write+0x17b>
			break;
		// 此时缓冲块指针bh正指向刚读入的文件数据块。现在再求出文件当前读写指针在该数据块中的偏移值c，并将指针p指向缓冲块中开始写入
		// 数据的位置，并置该缓冲块已修改标志。对于块中当前指针，从开始读写位置到块末共可写入c = (BLOCK_SIZE - c)个字节。若c大
		// 于剩余还需写入的字节数（count - i），则此次只需再定稿c = (count-i)个字节即可。
		c = pos % BLOCK_SIZE;
   10d3c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d40:	99                   	cltd   
   10d41:	c1 ea 16             	shr    $0x16,%edx
   10d44:	01 d0                	add    %edx,%eax
   10d46:	25 ff 03 00 00       	and    $0x3ff,%eax
   10d4b:	29 d0                	sub    %edx,%eax
   10d4d:	89 44 24 18          	mov    %eax,0x18(%esp)
		p = c + bh->b_data;
   10d51:	8b 44 24 08          	mov    0x8(%esp),%eax
   10d55:	8b 10                	mov    (%eax),%edx
   10d57:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d5b:	01 d0                	add    %edx,%eax
   10d5d:	89 44 24 14          	mov    %eax,0x14(%esp)
		bh->b_dirt = 1;
   10d61:	8b 44 24 08          	mov    0x8(%esp),%eax
   10d65:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		c = BLOCK_SIZE - c;
   10d69:	b8 00 04 00 00       	mov    $0x400,%eax
   10d6e:	2b 44 24 18          	sub    0x18(%esp),%eax
   10d72:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (c > count - i) c = count - i;
   10d76:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d7a:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d7e:	39 44 24 18          	cmp    %eax,0x18(%esp)
   10d82:	7e 0c                	jle    10d90 <file_write+0xee>
   10d84:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d88:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d8c:	89 44 24 18          	mov    %eax,0x18(%esp)
		// 在写入数据之前，我们先预先设置好下一次循环操作要读写文件中的位置。因此我们把pos指针前移此次需要写入的字节数。如果此时pos
		// 位置值超过了文件当前长度，则修改i节点文件长度字段，并置i节点已修改标志。然后把此次要写入的字节数c累加到已写入字节计数值i中，
		// 供循环判断。使用接着双用户缓冲区buf中复制c个字节到调整缓冲块中p指向的开始位置处。复制完后就释放该缓冲块。
		pos += c;
   10d90:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d94:	01 44 24 1c          	add    %eax,0x1c(%esp)
		if (pos > inode->i_size) {
   10d98:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d9c:	8b 50 04             	mov    0x4(%eax),%edx
   10d9f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10da3:	39 c2                	cmp    %eax,%edx
   10da5:	73 13                	jae    10dba <file_write+0x118>
			inode->i_size = pos;
   10da7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10dab:	8b 44 24 30          	mov    0x30(%esp),%eax
   10daf:	89 50 04             	mov    %edx,0x4(%eax)
			inode->i_dirt = 1;
   10db2:	8b 44 24 30          	mov    0x30(%esp),%eax
   10db6:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		}
		i += c;
   10dba:	8b 44 24 18          	mov    0x18(%esp),%eax
   10dbe:	01 44 24 10          	add    %eax,0x10(%esp)
		while (c-- > 0)
   10dc2:	eb 28                	jmp    10dec <file_write+0x14a>
			*(p++) = get_fs_byte(buf++);
   10dc4:	8b 44 24 38          	mov    0x38(%esp),%eax
   10dc8:	8d 50 01             	lea    0x1(%eax),%edx
   10dcb:	89 54 24 38          	mov    %edx,0x38(%esp)
   10dcf:	83 ec 0c             	sub    $0xc,%esp
   10dd2:	50                   	push   %eax
   10dd3:	e8 fe fc ff ff       	call   10ad6 <get_fs_byte>
   10dd8:	83 c4 10             	add    $0x10,%esp
   10ddb:	89 c1                	mov    %eax,%ecx
   10ddd:	8b 44 24 14          	mov    0x14(%esp),%eax
   10de1:	8d 50 01             	lea    0x1(%eax),%edx
   10de4:	89 54 24 14          	mov    %edx,0x14(%esp)
   10de8:	89 ca                	mov    %ecx,%edx
   10dea:	88 10                	mov    %dl,(%eax)
		while (c-- > 0)
   10dec:	8b 44 24 18          	mov    0x18(%esp),%eax
   10df0:	8d 50 ff             	lea    -0x1(%eax),%edx
   10df3:	89 54 24 18          	mov    %edx,0x18(%esp)
   10df7:	85 c0                	test   %eax,%eax
   10df9:	7f c9                	jg     10dc4 <file_write+0x122>
		brelse(bh);
   10dfb:	83 ec 0c             	sub    $0xc,%esp
   10dfe:	ff 74 24 14          	pushl  0x14(%esp)
   10e02:	e8 46 e8 ff ff       	call   f64d <brelse>
   10e07:	83 c4 10             	add    $0x10,%esp
	while (i < count) {
   10e0a:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e0e:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10e12:	0f 8c c9 fe ff ff    	jl     10ce1 <file_write+0x3f>
   10e18:	eb 04                	jmp    10e1e <file_write+0x17c>
			break;
   10e1a:	90                   	nop
   10e1b:	eb 01                	jmp    10e1e <file_write+0x17c>
			break;
   10e1d:	90                   	nop
    }
	// 当数据已经全部写入文件或者在写操作过程中发生问题时就会退出循环。此时我们更改文件修改时间为当前时间，并调整文件读写指针。如果
	// 此次操作不是在文件尾添加数据，则把文件读写指针调整到当前读写位置pos处，并更改文件i节点的修改时间为当前时间。最后返回写入的
	// 字节数，若写入字节数为0,则返回出错号-1。
	inode->i_mtime = CURRENT_TIME;
   10e1e:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10e23:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10e29:	01 d0                	add    %edx,%eax
   10e2b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e30:	f7 e2                	mul    %edx
   10e32:	c1 ea 05             	shr    $0x5,%edx
   10e35:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10e3a:	01 c2                	add    %eax,%edx
   10e3c:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e40:	89 50 08             	mov    %edx,0x8(%eax)
	if (!(filp->f_flags & O_APPEND)) {
   10e43:	8b 44 24 34          	mov    0x34(%esp),%eax
   10e47:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10e4b:	0f b7 c0             	movzwl %ax,%eax
   10e4e:	25 00 04 00 00       	and    $0x400,%eax
   10e53:	85 c0                	test   %eax,%eax
   10e55:	75 30                	jne    10e87 <file_write+0x1e5>
		filp->f_pos = pos;
   10e57:	8b 44 24 34          	mov    0x34(%esp),%eax
   10e5b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10e5f:	89 50 0c             	mov    %edx,0xc(%eax)
		inode->i_ctime = CURRENT_TIME;
   10e62:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   10e67:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   10e6d:	01 d0                	add    %edx,%eax
   10e6f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e74:	f7 e2                	mul    %edx
   10e76:	c1 ea 05             	shr    $0x5,%edx
   10e79:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   10e7e:	01 c2                	add    %eax,%edx
   10e80:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e84:	89 50 2c             	mov    %edx,0x2c(%eax)
	}
	return (i ? i : -1);
   10e87:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10e8c:	74 06                	je     10e94 <file_write+0x1f2>
   10e8e:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e92:	eb 05                	jmp    10e99 <file_write+0x1f7>
   10e94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e99:	83 c4 2c             	add    $0x2c,%esp
   10e9c:	c3                   	ret    

00010e9d <put_fs_byte>:
{
   10e9d:	83 ec 04             	sub    $0x4,%esp
   10ea0:	8b 44 24 08          	mov    0x8(%esp),%eax
   10ea4:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10ea7:	0f b6 04 24          	movzbl (%esp),%eax
   10eab:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10eaf:	64 88 02             	mov    %al,%fs:(%edx)
}
   10eb2:	90                   	nop
   10eb3:	83 c4 04             	add    $0x4,%esp
   10eb6:	c3                   	ret    

00010eb7 <cp_stat>:
#include <asm/segment.h>

// 复制文件状态信息
// 参数inode是文件i节点，statbuf是用户数据空间中stat文件状态结构指针，用于存放取得的状态信息。
static void cp_stat(struct m_inode * inode, struct stat * statbuf)
{
   10eb7:	83 ec 3c             	sub    $0x3c,%esp
	struct stat tmp;
	int i;

	// 首先验证（或分配）存放数据的内存空间。然后临时复制相应节点上的信息。
	verify_area(statbuf, sizeof (struct stat));
   10eba:	83 ec 08             	sub    $0x8,%esp
   10ebd:	6a 20                	push   $0x20
   10ebf:	ff 74 24 50          	pushl  0x50(%esp)
   10ec3:	e8 d7 74 ff ff       	call   839f <verify_area>
   10ec8:	83 c4 10             	add    $0x10,%esp
	tmp.st_dev = inode->i_dev;              						// 文件所在设备号。
   10ecb:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ecf:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10ed3:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp.st_ino = inode->i_num;              						// 文件i节点号。
   10ed8:	8b 44 24 40          	mov    0x40(%esp),%eax
   10edc:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10ee0:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp.st_mode = inode->i_mode;            						// 文件属性。
   10ee5:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ee9:	0f b7 00             	movzwl (%eax),%eax
   10eec:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp.st_nlink = inode->i_nlinks;         						// 文件连接数。
   10ef1:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ef5:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   10ef9:	88 44 24 12          	mov    %al,0x12(%esp)
	tmp.st_uid = inode->i_uid;              						// 文件的用户ID。
   10efd:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f01:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10f05:	66 89 44 24 14       	mov    %ax,0x14(%esp)
	tmp.st_gid = inode->i_gid;              						// 文件的组ID。
   10f0a:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f0e:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   10f12:	0f b6 c0             	movzbl %al,%eax
   10f15:	66 89 44 24 16       	mov    %ax,0x16(%esp)
	tmp.st_rdev = inode->i_zone[0];         						// 设备号（若是特殊字符文件或块设备文件)。
   10f1a:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f1e:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10f22:	66 89 44 24 18       	mov    %ax,0x18(%esp)
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
   10f27:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f2b:	8b 40 04             	mov    0x4(%eax),%eax
   10f2e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
   10f32:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f36:	8b 40 28             	mov    0x28(%eax),%eax
   10f39:	89 44 24 20          	mov    %eax,0x20(%esp)
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
   10f3d:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f41:	8b 40 08             	mov    0x8(%eax),%eax
   10f44:	89 44 24 24          	mov    %eax,0x24(%esp)
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
   10f48:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f4c:	8b 40 2c             	mov    0x2c(%eax),%eax
   10f4f:	89 44 24 28          	mov    %eax,0x28(%esp)
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f53:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   10f5a:	00 
   10f5b:	eb 2c                	jmp    10f89 <cp_stat+0xd2>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
   10f5d:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   10f61:	8b 44 24 44          	mov    0x44(%esp),%eax
   10f65:	01 c2                	add    %eax,%edx
   10f67:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f6b:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   10f6f:	01 c8                	add    %ecx,%eax
   10f71:	0f b6 00             	movzbl (%eax),%eax
   10f74:	0f be c0             	movsbl %al,%eax
   10f77:	83 ec 08             	sub    $0x8,%esp
   10f7a:	52                   	push   %edx
   10f7b:	50                   	push   %eax
   10f7c:	e8 1c ff ff ff       	call   10e9d <put_fs_byte>
   10f81:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f84:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   10f89:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f8d:	83 f8 1f             	cmp    $0x1f,%eax
   10f90:	76 cb                	jbe    10f5d <cp_stat+0xa6>
}
   10f92:	90                   	nop
   10f93:	83 c4 3c             	add    $0x3c,%esp
   10f96:	c3                   	ret    

00010f97 <sys_stat>:
// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。
// 参数filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_stat(char * filename, struct stat * statbuf)
{
   10f97:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回i节点。
	if (!(inode = namei(filename)))
   10f9a:	83 ec 0c             	sub    $0xc,%esp
   10f9d:	ff 74 24 2c          	pushl  0x2c(%esp)
   10fa1:	e8 49 25 00 00       	call   134ef <namei>
   10fa6:	83 c4 10             	add    $0x10,%esp
   10fa9:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10fad:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10fb2:	75 07                	jne    10fbb <sys_stat+0x24>
		return -ENOENT;
   10fb4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10fb9:	eb 27                	jmp    10fe2 <sys_stat+0x4b>
	cp_stat(inode, statbuf);
   10fbb:	83 ec 08             	sub    $0x8,%esp
   10fbe:	ff 74 24 2c          	pushl  0x2c(%esp)
   10fc2:	ff 74 24 18          	pushl  0x18(%esp)
   10fc6:	e8 ec fe ff ff       	call   10eb7 <cp_stat>
   10fcb:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   10fce:	83 ec 0c             	sub    $0xc,%esp
   10fd1:	ff 74 24 18          	pushl  0x18(%esp)
   10fd5:	e8 e2 d6 ff ff       	call   e6bc <iput>
   10fda:	83 c4 10             	add    $0x10,%esp
	return 0;
   10fdd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fe2:	83 c4 1c             	add    $0x1c,%esp
   10fe5:	c3                   	ret    

00010fe6 <sys_lstat>:

// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。文件路径名中有符号链接文件名，则取符号文件的状态。
// 参数：filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
int sys_lstat(char * filename, struct stat * statbuf)
{
   10fe6:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回该i节点。
	if (!(inode = lnamei(filename)))        					// 取指定路径名i节点，不跟随符号链接。
   10fe9:	83 ec 0c             	sub    $0xc,%esp
   10fec:	ff 74 24 2c          	pushl  0x2c(%esp)
   10ff0:	e8 e0 24 00 00       	call   134d5 <lnamei>
   10ff5:	83 c4 10             	add    $0x10,%esp
   10ff8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10ffc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   11001:	75 07                	jne    1100a <sys_lstat+0x24>
		return -ENOENT;
   11003:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11008:	eb 27                	jmp    11031 <sys_lstat+0x4b>
	cp_stat(inode, statbuf);
   1100a:	83 ec 08             	sub    $0x8,%esp
   1100d:	ff 74 24 2c          	pushl  0x2c(%esp)
   11011:	ff 74 24 18          	pushl  0x18(%esp)
   11015:	e8 9d fe ff ff       	call   10eb7 <cp_stat>
   1101a:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   1101d:	83 ec 0c             	sub    $0xc,%esp
   11020:	ff 74 24 18          	pushl  0x18(%esp)
   11024:	e8 93 d6 ff ff       	call   e6bc <iput>
   11029:	83 c4 10             	add    $0x10,%esp
	return 0;
   1102c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11031:	83 c4 1c             	add    $0x1c,%esp
   11034:	c3                   	ret    

00011035 <sys_fstat>:
// 文件状态系统调用。
// 根据给定的文件句柄获取相关文件状态信息。
// 参数fd是指定文件的句柄（描述符），statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_fstat(unsigned int fd, struct stat * statbuf)
{
   11035:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先取文件句柄对应的文件结构，然后从中得到文件的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中。如果
	// 文件句柄值大于一个程序最多打开文件数NR_OPEN，或者该句柄的文件结构指针为空，或者对应文件结构的i节点字段为空，
	// 则出错，返回出错码并退出。
	if (fd >= NR_OPEN || !(f = current->filp[fd]) || !(inode = f->f_inode))
   11038:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   1103d:	77 30                	ja     1106f <sys_fstat+0x3a>
   1103f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11044:	8b 54 24 20          	mov    0x20(%esp),%edx
   11048:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1104e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11052:	89 44 24 0c          	mov    %eax,0xc(%esp)
   11056:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1105b:	74 12                	je     1106f <sys_fstat+0x3a>
   1105d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11061:	8b 40 08             	mov    0x8(%eax),%eax
   11064:	89 44 24 08          	mov    %eax,0x8(%esp)
   11068:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1106d:	75 07                	jne    11076 <sys_fstat+0x41>
		return -EBADF;
   1106f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   11074:	eb 18                	jmp    1108e <sys_fstat+0x59>
	cp_stat(inode, statbuf);
   11076:	83 ec 08             	sub    $0x8,%esp
   11079:	ff 74 24 2c          	pushl  0x2c(%esp)
   1107d:	ff 74 24 14          	pushl  0x14(%esp)
   11081:	e8 31 fe ff ff       	call   10eb7 <cp_stat>
   11086:	83 c4 10             	add    $0x10,%esp
	return 0;
   11089:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1108e:	83 c4 1c             	add    $0x1c,%esp
   11091:	c3                   	ret    

00011092 <sys_readlink>:
// 该调用读取符号链接文件的内容（即该符号链接所指向文件的路径名字符串），并放到指定长度的用户缓冲区中。若缓冲区
// 太小，就会截断符号链接的内容。
// 参数：path -- 符号链接文件路径名；buf -- 用户缓冲区；bufsiz -- 缓冲区长度。
// 返回：成功则返回放入缓冲区中的字符数；若失败则返回出错码。
int sys_readlink(const char * path, char * buf, int bufsiz)
{
   11092:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	char c;

	// 首先检查和验证函数参数的有效性，并对其进行调整。用户缓冲区字节长度bufsiz必须在1--1023之间。然后取得符号链接
	// 文件名的i节点，并读取该文件的第1块数据内容。之后放回i节点。
	if (bufsiz <= 0)
   11095:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1109a:	7f 0a                	jg     110a6 <sys_readlink+0x14>
		return -EBADF;
   1109c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   110a1:	e9 07 01 00 00       	jmp    111ad <sys_readlink+0x11b>
	if (bufsiz > 1023)
   110a6:	81 7c 24 28 ff 03 00 	cmpl   $0x3ff,0x28(%esp)
   110ad:	00 
   110ae:	7e 08                	jle    110b8 <sys_readlink+0x26>
		bufsiz = 1023;
   110b0:	c7 44 24 28 ff 03 00 	movl   $0x3ff,0x28(%esp)
   110b7:	00 
	verify_area(buf, bufsiz);
   110b8:	83 ec 08             	sub    $0x8,%esp
   110bb:	ff 74 24 30          	pushl  0x30(%esp)
   110bf:	ff 74 24 30          	pushl  0x30(%esp)
   110c3:	e8 d7 72 ff ff       	call   839f <verify_area>
   110c8:	83 c4 10             	add    $0x10,%esp
	if (!(inode = lnamei(path)))
   110cb:	83 ec 0c             	sub    $0xc,%esp
   110ce:	ff 74 24 2c          	pushl  0x2c(%esp)
   110d2:	e8 fe 23 00 00       	call   134d5 <lnamei>
   110d7:	83 c4 10             	add    $0x10,%esp
   110da:	89 44 24 04          	mov    %eax,0x4(%esp)
   110de:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   110e3:	75 0a                	jne    110ef <sys_readlink+0x5d>
		return -ENOENT;
   110e5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   110ea:	e9 be 00 00 00       	jmp    111ad <sys_readlink+0x11b>
	if (inode->i_zone[0])
   110ef:	8b 44 24 04          	mov    0x4(%esp),%eax
   110f3:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   110f7:	66 85 c0             	test   %ax,%ax
   110fa:	74 29                	je     11125 <sys_readlink+0x93>
		bh = bread(inode->i_dev, inode->i_zone[0]);
   110fc:	8b 44 24 04          	mov    0x4(%esp),%eax
   11100:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11104:	0f b7 d0             	movzwl %ax,%edx
   11107:	8b 44 24 04          	mov    0x4(%esp),%eax
   1110b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1110f:	0f b7 c0             	movzwl %ax,%eax
   11112:	83 ec 08             	sub    $0x8,%esp
   11115:	52                   	push   %edx
   11116:	50                   	push   %eax
   11117:	e8 87 e5 ff ff       	call   f6a3 <bread>
   1111c:	83 c4 10             	add    $0x10,%esp
   1111f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   11123:	eb 08                	jmp    1112d <sys_readlink+0x9b>
	else
		bh = NULL;
   11125:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1112c:	00 
	iput(inode);
   1112d:	83 ec 0c             	sub    $0xc,%esp
   11130:	ff 74 24 10          	pushl  0x10(%esp)
   11134:	e8 83 d5 ff ff       	call   e6bc <iput>
   11139:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
   1113c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   11141:	75 07                	jne    1114a <sys_readlink+0xb8>
		return 0;
   11143:	b8 00 00 00 00       	mov    $0x0,%eax
   11148:	eb 63                	jmp    111ad <sys_readlink+0x11b>
	i = 0;
   1114a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   11151:	00 
	while (i < bufsiz && (c = bh->b_data[i])) {
   11152:	eb 22                	jmp    11176 <sys_readlink+0xe4>
		i++;
   11154:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
		put_fs_byte(c, buf++);
   11159:	8b 44 24 24          	mov    0x24(%esp),%eax
   1115d:	8d 50 01             	lea    0x1(%eax),%edx
   11160:	89 54 24 24          	mov    %edx,0x24(%esp)
   11164:	0f be 54 24 03       	movsbl 0x3(%esp),%edx
   11169:	83 ec 08             	sub    $0x8,%esp
   1116c:	50                   	push   %eax
   1116d:	52                   	push   %edx
   1116e:	e8 2a fd ff ff       	call   10e9d <put_fs_byte>
   11173:	83 c4 10             	add    $0x10,%esp
	while (i < bufsiz && (c = bh->b_data[i])) {
   11176:	8b 44 24 08          	mov    0x8(%esp),%eax
   1117a:	3b 44 24 28          	cmp    0x28(%esp),%eax
   1117e:	7d 1a                	jge    1119a <sys_readlink+0x108>
   11180:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11184:	8b 10                	mov    (%eax),%edx
   11186:	8b 44 24 08          	mov    0x8(%esp),%eax
   1118a:	01 d0                	add    %edx,%eax
   1118c:	0f b6 00             	movzbl (%eax),%eax
   1118f:	88 44 24 03          	mov    %al,0x3(%esp)
   11193:	80 7c 24 03 00       	cmpb   $0x0,0x3(%esp)
   11198:	75 ba                	jne    11154 <sys_readlink+0xc2>
	}
	brelse(bh);
   1119a:	83 ec 0c             	sub    $0xc,%esp
   1119d:	ff 74 24 18          	pushl  0x18(%esp)
   111a1:	e8 a7 e4 ff ff       	call   f64d <brelse>
   111a6:	83 c4 10             	add    $0x10,%esp
	return i;
   111a9:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   111ad:	83 c4 1c             	add    $0x1c,%esp
   111b0:	c3                   	ret    

000111b1 <strncpy>:
{
   111b1:	57                   	push   %edi
   111b2:	56                   	push   %esi
   111b3:	53                   	push   %ebx
__asm__(
   111b4:	8b 54 24 14          	mov    0x14(%esp),%edx
   111b8:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   111bc:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   111c0:	89 d6                	mov    %edx,%esi
   111c2:	89 df                	mov    %ebx,%edi
   111c4:	fc                   	cld    
   111c5:	49                   	dec    %ecx
   111c6:	78 08                	js     111d0 <strncpy+0x1f>
   111c8:	ac                   	lods   %ds:(%esi),%al
   111c9:	aa                   	stos   %al,%es:(%edi)
   111ca:	84 c0                	test   %al,%al
   111cc:	75 f7                	jne    111c5 <strncpy+0x14>
   111ce:	f3 aa                	rep stos %al,%es:(%edi)
return dest;												// 返回目的字符串指针.
   111d0:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   111d4:	5b                   	pop    %ebx
   111d5:	5e                   	pop    %esi
   111d6:	5f                   	pop    %edi
   111d7:	c3                   	ret    

000111d8 <strchr>:
{
   111d8:	56                   	push   %esi
   111d9:	83 ec 04             	sub    $0x4,%esp
   111dc:	8b 44 24 10          	mov    0x10(%esp),%eax
   111e0:	88 04 24             	mov    %al,(%esp)
__asm__(
   111e3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   111e7:	0f b6 04 24          	movzbl (%esp),%eax
   111eb:	89 d6                	mov    %edx,%esi
   111ed:	fc                   	cld    
   111ee:	88 c4                	mov    %al,%ah
   111f0:	ac                   	lods   %ds:(%esi),%al
   111f1:	38 e0                	cmp    %ah,%al
   111f3:	74 09                	je     111fe <strchr+0x26>
   111f5:	84 c0                	test   %al,%al
   111f7:	75 f7                	jne    111f0 <strchr+0x18>
   111f9:	be 01 00 00 00       	mov    $0x1,%esi
   111fe:	89 f0                	mov    %esi,%eax
   11200:	48                   	dec    %eax
}
   11201:	83 c4 04             	add    $0x4,%esp
   11204:	5e                   	pop    %esi
   11205:	c3                   	ret    

00011206 <get_fs_byte>:
{
   11206:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   11207:	8b 44 24 08          	mov    0x8(%esp),%eax
   1120b:	64 8a 00             	mov    %fs:(%eax),%al
   1120e:	89 c3                	mov    %eax,%ebx
	return _v;
   11210:	89 d8                	mov    %ebx,%eax
}
   11212:	5b                   	pop    %ebx
   11213:	c3                   	ret    

00011214 <get_fs_long>:
{
   11214:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   11217:	8b 44 24 14          	mov    0x14(%esp),%eax
   1121b:	64 8b 00             	mov    %fs:(%eax),%eax
   1121e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   11222:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   11226:	83 c4 10             	add    $0x10,%esp
   11229:	c3                   	ret    

0001122a <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1122a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1122e:	8b 54 24 08          	mov    0x8(%esp),%edx
   11232:	64 89 02             	mov    %eax,%fs:(%edx)
}
   11235:	90                   	nop
   11236:	c3                   	ret    

00011237 <get_fs>:
 */

//// 取fs段寄存器值(选择符).
// 返回:fs段寄存器值.
static inline unsigned long get_fs()
{
   11237:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%fs,%%ax":"=a" (_v):);
   1123a:	66 8c e0             	mov    %fs,%ax
   1123d:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   11242:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   11247:	83 c4 10             	add    $0x10,%esp
   1124a:	c3                   	ret    

0001124b <get_ds>:

//// 取ds面寄存器值.
// 返回:ds段寄存器值.
static inline unsigned long get_ds()
{
   1124b:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%ds,%%ax":"=a" (_v):);
   1124e:	66 8c d8             	mov    %ds,%ax
   11251:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   11256:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1125b:	83 c4 10             	add    $0x10,%esp
   1125e:	c3                   	ret    

0001125f <set_fs>:

//// 设置fs段寄存器.
// 参数:val - 段值(选择符).
static inline void set_fs(unsigned long val)
{
	__asm__("mov %0,%%fs"::"a" ((unsigned short) val));
   1125f:	8b 44 24 04          	mov    0x4(%esp),%eax
   11263:	8e e0                	mov    %eax,%fs
}
   11265:	90                   	nop
   11266:	c3                   	ret    

00011267 <sys_uselib>:
// 参数：library - 库文件名。
// 为进程选择一个库文件，并替换进程当前库文件i节点字段值为这里指定库文件名的i节点指针。如果library指针为空，则把进程
// 当前的库文件释放掉。
// 返回：成功返回0，否则返回出错码。
int sys_uselib(const char * library)
{
   11267:	53                   	push   %ebx
   11268:	83 ec 18             	sub    $0x18,%esp
	unsigned long base;

	// 首先判断当前进程是否普通进程。这是通过查看当前进程的空间长度来做到的。因为普通进程的空间长度被设置为TASK_SIZE（64
	// MB）。因此若进程逻辑地址空间长度不等于TASK_SIZE则返回出错码（无效参数）。否则取库文件i节点inode。若库文件名指针
	// 空，则设置inode等于NULL。
	if (get_limit(0x17) != TASK_SIZE)
   1126b:	b8 17 00 00 00       	mov    $0x17,%eax
   11270:	0f 03 c0             	lsl    %ax,%eax
   11273:	40                   	inc    %eax
   11274:	89 44 24 08          	mov    %eax,0x8(%esp)
   11278:	8b 44 24 08          	mov    0x8(%esp),%eax
   1127c:	3d 00 00 00 04       	cmp    $0x4000000,%eax
   11281:	74 0a                	je     1128d <sys_uselib+0x26>
		return -EINVAL;
   11283:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   11288:	e9 ca 00 00 00       	jmp    11357 <sys_uselib+0xf0>
	if (library) {
   1128d:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   11292:	74 24                	je     112b8 <sys_uselib+0x51>
		if (!(inode = namei(library)))							/* get library inode */
   11294:	83 ec 0c             	sub    $0xc,%esp
   11297:	ff 74 24 2c          	pushl  0x2c(%esp)
   1129b:	e8 4f 22 00 00       	call   134ef <namei>
   112a0:	83 c4 10             	add    $0x10,%esp
   112a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
   112a7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   112ac:	75 12                	jne    112c0 <sys_uselib+0x59>
			return -ENOENT;                 					/* 取库文件i节点 */
   112ae:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   112b3:	e9 9f 00 00 00       	jmp    11357 <sys_uselib+0xf0>
	} else
		inode = NULL;
   112b8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   112bf:	00 
	/* we should check filetypes (headers etc), but we don't */
	/* 我们应该检查一下文件类型（如头部信息等），但是我们还没有这样做。*/
	// 然后放回进程原库文件i节点，并预置进程库i节点字段为空。接着取得进程的库代码所在位置，并释放原库代码的页表所占用的内存
	// 页面。最后让进程库i节点字段指向新库i节点，并返回0（成功）。
	iput(current->library);
   112c0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   112c5:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
   112cb:	83 ec 0c             	sub    $0xc,%esp
   112ce:	50                   	push   %eax
   112cf:	e8 e8 d3 ff ff       	call   e6bc <iput>
   112d4:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
   112d7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   112dc:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
   112e3:	00 00 00 
	base = get_base(current->ldt[2]);
   112e6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   112eb:	05 a8 03 00 00       	add    $0x3a8,%eax
   112f0:	83 c0 02             	add    $0x2,%eax
   112f3:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   112f9:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   112ff:	8d 5a 04             	lea    0x4(%edx),%ebx
   11302:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   11308:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
   1130e:	83 c1 07             	add    $0x7,%ecx
   11311:	8a 31                	mov    (%ecx),%dh
   11313:	8a 13                	mov    (%ebx),%dl
   11315:	c1 e2 10             	shl    $0x10,%edx
   11318:	66 8b 10             	mov    (%eax),%dx
   1131b:	89 d0                	mov    %edx,%eax
   1131d:	89 44 24 04          	mov    %eax,0x4(%esp)
   11321:	8b 44 24 04          	mov    0x4(%esp),%eax
   11325:	89 04 24             	mov    %eax,(%esp)
	base += LIBRARY_OFFSET;
   11328:	81 04 24 00 00 c0 03 	addl   $0x3c00000,(%esp)
	free_page_tables(base, LIBRARY_SIZE);
   1132f:	83 ec 08             	sub    $0x8,%esp
   11332:	68 00 00 40 00       	push   $0x400000
   11337:	ff 74 24 0c          	pushl  0xc(%esp)
   1133b:	e8 0c aa ff ff       	call   bd4c <free_page_tables>
   11340:	83 c4 10             	add    $0x10,%esp
	current->library = inode;
   11343:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11348:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1134c:	89 90 40 03 00 00    	mov    %edx,0x340(%eax)
	return 0;
   11352:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11357:	83 c4 18             	add    $0x18,%esp
   1135a:	5b                   	pop    %ebx
   1135b:	c3                   	ret    

0001135c <create_tables>:
 */
// 在新任务中创建参数和环境变量指针表.
// 参数:p - 数据段中参数和环境信息偏移指针;argc - 参数个数;envc - 环境变量个数.
// 返回:栈指针值.
static unsigned long * create_tables(char * p, int argc, int envc)
{
   1135c:	83 ec 10             	sub    $0x10,%esp
	// 栈指针是以4字节(1节)为边界进行寻址的,因此这里需让sp为4的整数倍值.此时sp位于参数环境表的末端.然后我们先把sp向下
	// (低地址方向)移动,在栈中空出环境变量指针占用的空间,并让环境变量指针envp指向该处.多空出的一个位置用于在最后存放一
	// 个NULL值.下面指针加1,sp将递增指针宽度字节值(4字节).再把sp向下移动,空出命令行参数指针占用的空间,并让argv指针
	// 指向该处.同样,多空处的一个位置用于存放一个NULL值.此时sp指向参数指针块的起始处,我们将环境参数块指针envp和命令行
	// 参数块指针以及命令行参数个数值分别压入栈中.
	sp = (unsigned long *) (0xfffffffc & (unsigned long) p);
   1135f:	8b 44 24 14          	mov    0x14(%esp),%eax
   11363:	83 e0 fc             	and    $0xfffffffc,%eax
   11366:	89 44 24 04          	mov    %eax,0x4(%esp)
	sp -= envc + 1;
   1136a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1136e:	8d 50 01             	lea    0x1(%eax),%edx
   11371:	b8 00 00 00 00       	mov    $0x0,%eax
   11376:	29 d0                	sub    %edx,%eax
   11378:	c1 e0 02             	shl    $0x2,%eax
   1137b:	01 44 24 04          	add    %eax,0x4(%esp)
	envp = sp;
   1137f:	8b 44 24 04          	mov    0x4(%esp),%eax
   11383:	89 44 24 08          	mov    %eax,0x8(%esp)
	sp -= argc + 1;
   11387:	8b 44 24 18          	mov    0x18(%esp),%eax
   1138b:	8d 50 01             	lea    0x1(%eax),%edx
   1138e:	b8 00 00 00 00       	mov    $0x0,%eax
   11393:	29 d0                	sub    %edx,%eax
   11395:	c1 e0 02             	shl    $0x2,%eax
   11398:	01 44 24 04          	add    %eax,0x4(%esp)
	argv = sp;
   1139c:	8b 44 24 04          	mov    0x4(%esp),%eax
   113a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	put_fs_long((unsigned long)envp, --sp);
   113a4:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113a9:	8b 44 24 08          	mov    0x8(%esp),%eax
   113ad:	ff 74 24 04          	pushl  0x4(%esp)
   113b1:	50                   	push   %eax
   113b2:	e8 73 fe ff ff       	call   1122a <put_fs_long>
   113b7:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argv, --sp);
   113ba:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   113c3:	ff 74 24 04          	pushl  0x4(%esp)
   113c7:	50                   	push   %eax
   113c8:	e8 5d fe ff ff       	call   1122a <put_fs_long>
   113cd:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argc, --sp);
   113d0:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113d5:	8b 44 24 18          	mov    0x18(%esp),%eax
   113d9:	ff 74 24 04          	pushl  0x4(%esp)
   113dd:	50                   	push   %eax
   113de:	e8 47 fe ff ff       	call   1122a <put_fs_long>
   113e3:	83 c4 08             	add    $0x8,%esp
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   113e6:	eb 32                	jmp    1141a <create_tables+0xbe>
		put_fs_long((unsigned long) p, argv++);
   113e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   113ec:	8d 50 04             	lea    0x4(%eax),%edx
   113ef:	89 54 24 0c          	mov    %edx,0xc(%esp)
   113f3:	8b 54 24 14          	mov    0x14(%esp),%edx
   113f7:	50                   	push   %eax
   113f8:	52                   	push   %edx
   113f9:	e8 2c fe ff ff       	call   1122a <put_fs_long>
   113fe:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   11401:	90                   	nop
   11402:	8b 44 24 14          	mov    0x14(%esp),%eax
   11406:	8d 50 01             	lea    0x1(%eax),%edx
   11409:	89 54 24 14          	mov    %edx,0x14(%esp)
   1140d:	50                   	push   %eax
   1140e:	e8 f3 fd ff ff       	call   11206 <get_fs_byte>
   11413:	83 c4 04             	add    $0x4,%esp
   11416:	84 c0                	test   %al,%al
   11418:	75 e8                	jne    11402 <create_tables+0xa6>
	while (argc-- > 0) {
   1141a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1141e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11421:	89 54 24 18          	mov    %edx,0x18(%esp)
   11425:	85 c0                	test   %eax,%eax
   11427:	7f bf                	jg     113e8 <create_tables+0x8c>
	}
	put_fs_long(0, argv);
   11429:	ff 74 24 0c          	pushl  0xc(%esp)
   1142d:	6a 00                	push   $0x0
   1142f:	e8 f6 fd ff ff       	call   1122a <put_fs_long>
   11434:	83 c4 08             	add    $0x8,%esp
	while (envc-- > 0) {
   11437:	eb 32                	jmp    1146b <create_tables+0x10f>
		put_fs_long((unsigned long) p, envp++);
   11439:	8b 44 24 08          	mov    0x8(%esp),%eax
   1143d:	8d 50 04             	lea    0x4(%eax),%edx
   11440:	89 54 24 08          	mov    %edx,0x8(%esp)
   11444:	8b 54 24 14          	mov    0x14(%esp),%edx
   11448:	50                   	push   %eax
   11449:	52                   	push   %edx
   1144a:	e8 db fd ff ff       	call   1122a <put_fs_long>
   1144f:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   11452:	90                   	nop
   11453:	8b 44 24 14          	mov    0x14(%esp),%eax
   11457:	8d 50 01             	lea    0x1(%eax),%edx
   1145a:	89 54 24 14          	mov    %edx,0x14(%esp)
   1145e:	50                   	push   %eax
   1145f:	e8 a2 fd ff ff       	call   11206 <get_fs_byte>
   11464:	83 c4 04             	add    $0x4,%esp
   11467:	84 c0                	test   %al,%al
   11469:	75 e8                	jne    11453 <create_tables+0xf7>
	while (envc-- > 0) {
   1146b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1146f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11472:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   11476:	85 c0                	test   %eax,%eax
   11478:	7f bf                	jg     11439 <create_tables+0xdd>
	}
	put_fs_long(0, envp);
   1147a:	ff 74 24 08          	pushl  0x8(%esp)
   1147e:	6a 00                	push   $0x0
   11480:	e8 a5 fd ff ff       	call   1122a <put_fs_long>
   11485:	83 c4 08             	add    $0x8,%esp
	return sp;										// 返回构造的当前新栈指针.
   11488:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   1148c:	83 c4 10             	add    $0x10,%esp
   1148f:	c3                   	ret    

00011490 <count>:
// 计算参数个数.
// 参数:argv - 参数指针数组,最后一个指针项是NULL.
// 统计参数指针数组中指针的个数.
// 返回:参数个数.
static int count(char ** argv)
{
   11490:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
   11493:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1149a:	00 
	char ** tmp;

	if (tmp = argv)
   1149b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1149f:	89 44 24 08          	mov    %eax,0x8(%esp)
   114a3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   114a8:	74 1f                	je     114c9 <count+0x39>
		while (get_fs_long((unsigned long *) (tmp++)))
   114aa:	eb 05                	jmp    114b1 <count+0x21>
			i++;
   114ac:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		while (get_fs_long((unsigned long *) (tmp++)))
   114b1:	8b 44 24 08          	mov    0x8(%esp),%eax
   114b5:	8d 50 04             	lea    0x4(%eax),%edx
   114b8:	89 54 24 08          	mov    %edx,0x8(%esp)
   114bc:	50                   	push   %eax
   114bd:	e8 52 fd ff ff       	call   11214 <get_fs_long>
   114c2:	83 c4 04             	add    $0x4,%esp
   114c5:	85 c0                	test   %eax,%eax
   114c7:	75 e3                	jne    114ac <count+0x1c>

	return i;
   114c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   114cd:	83 c4 10             	add    $0x10,%esp
   114d0:	c3                   	ret    

000114d1 <copy_strings>:
// 并始终指向参数字符串的头部.字符串来源标志from_kmem应该是TYT为了给execve()增添执行脚本文件的功能而新加的参数.当没有运行
// 脚本文件的功能时,所有参数字符串都在用户数据空间中。
// 返回:参数和环境空间当前头部指针.若出错则返回0.
static unsigned long copy_strings(int argc, char ** argv, unsigned long *page,
		unsigned long p, int from_kmem)
{
   114d1:	53                   	push   %ebx
   114d2:	83 ec 28             	sub    $0x28,%esp
	char *tmp, *pag;
	int len, offset = 0;
   114d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   114dc:	00 
	unsigned long old_fs, new_fs;

	if (!p)
   114dd:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   114e2:	75 0a                	jne    114ee <copy_strings+0x1d>
		return 0;												/* bullet-proofing */	/* 偏移指针验证 */
   114e4:	b8 00 00 00 00       	mov    $0x0,%eax
   114e9:	e9 b9 01 00 00       	jmp    116a7 <copy_strings+0x1d6>
	// 首先取当前段寄存器ds(指向内核数据段)和fs值,分别保存到变量new_fs和old_fs中.如果字符串和字符串数组(指针)来自内核空间,则设置fs段寄存器指向内核数据段.
	new_fs = get_ds();
   114ee:	e8 58 fd ff ff       	call   1124b <get_ds>
   114f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	old_fs = get_fs();
   114f7:	e8 3b fd ff ff       	call   11237 <get_fs>
   114fc:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
   11500:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11505:	0f 85 6f 01 00 00    	jne    1167a <copy_strings+0x1a9>
		set_fs(new_fs);
   1150b:	ff 74 24 0c          	pushl  0xc(%esp)
   1150f:	e8 4b fd ff ff       	call   1125f <set_fs>
   11514:	83 c4 04             	add    $0x4,%esp
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   11517:	e9 5e 01 00 00       	jmp    1167a <copy_strings+0x1a9>
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指向内核空间.
   1151c:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   11521:	75 0c                	jne    1152f <copy_strings+0x5e>
			set_fs(new_fs);
   11523:	ff 74 24 0c          	pushl  0xc(%esp)
   11527:	e8 33 fd ff ff       	call   1125f <set_fs>
   1152c:	83 c4 04             	add    $0x4,%esp
		if (!(tmp = (char *)get_fs_long(((unsigned long *)argv) + argc)))
   1152f:	8b 44 24 30          	mov    0x30(%esp),%eax
   11533:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1153a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1153e:	01 d0                	add    %edx,%eax
   11540:	50                   	push   %eax
   11541:	e8 ce fc ff ff       	call   11214 <get_fs_long>
   11546:	83 c4 04             	add    $0x4,%esp
   11549:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1154d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   11552:	75 10                	jne    11564 <copy_strings+0x93>
			panic("argc is wrong");
   11554:	83 ec 0c             	sub    $0xc,%esp
   11557:	68 f0 3a 02 00       	push   $0x23af0
   1155c:	e8 a6 76 ff ff       	call   8c07 <panic>
   11561:	83 c4 10             	add    $0x10,%esp
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指回用户空间.
   11564:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   11569:	75 0f                	jne    1157a <copy_strings+0xa9>
			set_fs(old_fs);
   1156b:	83 ec 0c             	sub    $0xc,%esp
   1156e:	ff 74 24 14          	pushl  0x14(%esp)
   11572:	e8 e8 fc ff ff       	call   1125f <set_fs>
   11577:	83 c4 10             	add    $0x10,%esp
		// 然后从用户空间取该字符串,并计算参数字符串长度len.此后tmp指向该字符串末端.如果该字符串长度超过此时参数和环境空间中还剩余
		// 的空闲长度,则空间不够了.于是恢复fs段寄存器值(如果被改变的话)并返回0.不过因为参数和环境空间留128KB,所以通常不可能发生这
		// 种情况.
		len = 0;												/* remember zero-padding */
   1157a:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   11581:	00 
		do {													/* 我们知道串是以NULL字节结尾的 */
			len++;
   11582:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
		} while (get_fs_byte(tmp++));
   11587:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1158b:	8d 50 01             	lea    0x1(%eax),%edx
   1158e:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   11592:	83 ec 0c             	sub    $0xc,%esp
   11595:	50                   	push   %eax
   11596:	e8 6b fc ff ff       	call   11206 <get_fs_byte>
   1159b:	83 c4 10             	add    $0x10,%esp
   1159e:	84 c0                	test   %al,%al
   115a0:	75 e0                	jne    11582 <copy_strings+0xb1>
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   115a2:	e9 c8 00 00 00       	jmp    1166f <copy_strings+0x19e>
			--p; --tmp; --len;
   115a7:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
   115ac:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
   115b1:	83 6c 24 14 01       	subl   $0x1,0x14(%esp)
			if (--offset < 0) {
   115b6:	83 6c 24 10 01       	subl   $0x1,0x10(%esp)
   115bb:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   115c0:	0f 89 8a 00 00 00    	jns    11650 <copy_strings+0x17f>
				offset = p % PAGE_SIZE;
   115c6:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   115ca:	25 ff 0f 00 00       	and    $0xfff,%eax
   115cf:	89 44 24 10          	mov    %eax,0x10(%esp)
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
   115d3:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   115d8:	75 0f                	jne    115e9 <copy_strings+0x118>
					set_fs(old_fs);
   115da:	83 ec 0c             	sub    $0xc,%esp
   115dd:	ff 74 24 14          	pushl  0x14(%esp)
   115e1:	e8 79 fc ff ff       	call   1125f <set_fs>
   115e6:	83 c4 10             	add    $0x10,%esp
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   115e9:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   115ed:	c1 e8 0c             	shr    $0xc,%eax
   115f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   115f7:	8b 44 24 38          	mov    0x38(%esp),%eax
   115fb:	01 d0                	add    %edx,%eax
   115fd:	8b 00                	mov    (%eax),%eax
   115ff:	89 44 24 18          	mov    %eax,0x18(%esp)
   11603:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   11608:	75 30                	jne    1163a <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   1160a:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   1160e:	c1 e8 0c             	shr    $0xc,%eax
   11611:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11618:	8b 44 24 38          	mov    0x38(%esp),%eax
   1161c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				      get_free_page())))
   1161f:	e8 3d ba ff ff       	call   d061 <get_free_page>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   11624:	89 03                	mov    %eax,(%ebx)
   11626:	8b 03                	mov    (%ebx),%eax
   11628:	89 44 24 18          	mov    %eax,0x18(%esp)
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   1162c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   11631:	75 07                	jne    1163a <copy_strings+0x169>
					return 0;
   11633:	b8 00 00 00 00       	mov    $0x0,%eax
   11638:	eb 6d                	jmp    116a7 <copy_strings+0x1d6>
				if (from_kmem == 2)								// 若串在内核空间则fs指向内核空间.
   1163a:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   1163f:	75 0f                	jne    11650 <copy_strings+0x17f>
					set_fs(new_fs);
   11641:	83 ec 0c             	sub    $0xc,%esp
   11644:	ff 74 24 18          	pushl  0x18(%esp)
   11648:	e8 12 fc ff ff       	call   1125f <set_fs>
   1164d:	83 c4 10             	add    $0x10,%esp

			}
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
   11650:	83 ec 0c             	sub    $0xc,%esp
   11653:	ff 74 24 28          	pushl  0x28(%esp)
   11657:	e8 aa fb ff ff       	call   11206 <get_fs_byte>
   1165c:	83 c4 10             	add    $0x10,%esp
   1165f:	89 c1                	mov    %eax,%ecx
   11661:	8b 54 24 10          	mov    0x10(%esp),%edx
   11665:	8b 44 24 18          	mov    0x18(%esp),%eax
   11669:	01 d0                	add    %edx,%eax
   1166b:	89 ca                	mov    %ecx,%edx
   1166d:	88 10                	mov    %dl,(%eax)
		while (len) {
   1166f:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   11674:	0f 85 2d ff ff ff    	jne    115a7 <copy_strings+0xd6>
	while (argc-- > 0) {
   1167a:	8b 44 24 30          	mov    0x30(%esp),%eax
   1167e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11681:	89 54 24 30          	mov    %edx,0x30(%esp)
   11685:	85 c0                	test   %eax,%eax
   11687:	0f 8f 8f fe ff ff    	jg     1151c <copy_strings+0x4b>
		}
	}
	// 如果字符串和字符串数组在内核空间,则恢复fs段寄存器原值.最后,返回参数和环境空间中已复制参数的头部偏移值.
	if (from_kmem == 2)
   1168d:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11692:	75 0f                	jne    116a3 <copy_strings+0x1d2>
		set_fs(old_fs);
   11694:	83 ec 0c             	sub    $0xc,%esp
   11697:	ff 74 24 14          	pushl  0x14(%esp)
   1169b:	e8 bf fb ff ff       	call   1125f <set_fs>
   116a0:	83 c4 10             	add    $0x10,%esp
	return p;
   116a3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
}
   116a7:	83 c4 28             	add    $0x28,%esp
   116aa:	5b                   	pop    %ebx
   116ab:	c3                   	ret    

000116ac <change_ldt>:
// 修改任务的局部描述符表内容.
// 修改局部描述符表LDT中描述符的段基址和段限长,并将参数和环境空间页面放置在数据段末端.
// 参数:text_size - 执行文件头部中a_text字段给出的代码段长度值;page - 参数和环境空间页面指针数组.
// 返回:数据段限长值(64MB)
static unsigned long change_ldt(unsigned long text_size, unsigned long * page)
{
   116ac:	56                   	push   %esi
   116ad:	53                   	push   %ebx
   116ae:	83 ec 24             	sub    $0x24,%esp
	int i;

	// 首先把代码和数据段长度均设置为64MB.然后取当前进程局部描述符表代码段描述符中代码段基址.代码段基址与数据段基址相同.
	// 再使用这些新值重新设置局部表中代码段和数据段描述符中的基址和段限长.这里请注意,由于被加载的新程序的代码和数据段基址
	// 与原程序的相同,因此没有必要再重复设置它们,即186和188行上的两条设置段基址的语句多余,可省略.
	code_limit = TASK_SIZE;
   116b1:	c7 44 24 14 00 00 00 	movl   $0x4000000,0x14(%esp)
   116b8:	04 
	data_limit = TASK_SIZE;
   116b9:	c7 44 24 10 00 00 00 	movl   $0x4000000,0x10(%esp)
   116c0:	04 
	code_base = get_base(current->ldt[1]);
   116c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   116c6:	05 a0 03 00 00       	add    $0x3a0,%eax
   116cb:	83 c0 02             	add    $0x2,%eax
   116ce:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   116d4:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   116da:	8d 5a 04             	lea    0x4(%edx),%ebx
   116dd:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   116e3:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
   116e9:	83 c1 07             	add    $0x7,%ecx
   116ec:	8a 31                	mov    (%ecx),%dh
   116ee:	8a 13                	mov    (%ebx),%dl
   116f0:	c1 e2 10             	shl    $0x10,%edx
   116f3:	66 8b 10             	mov    (%eax),%dx
   116f6:	89 d0                	mov    %edx,%eax
   116f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   116fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11700:	89 44 24 08          	mov    %eax,0x8(%esp)
	data_base = code_base;
   11704:	8b 44 24 08          	mov    0x8(%esp),%eax
   11708:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	set_base(current->ldt[1], code_base);
   1170c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11711:	05 a0 03 00 00       	add    $0x3a0,%eax
   11716:	8d 48 02             	lea    0x2(%eax),%ecx
   11719:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1171e:	05 a0 03 00 00       	add    $0x3a0,%eax
   11723:	8d 58 04             	lea    0x4(%eax),%ebx
   11726:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1172b:	05 a0 03 00 00       	add    $0x3a0,%eax
   11730:	8d 70 07             	lea    0x7(%eax),%esi
   11733:	8b 44 24 08          	mov    0x8(%esp),%eax
   11737:	89 c2                	mov    %eax,%edx
   11739:	66 89 11             	mov    %dx,(%ecx)
   1173c:	c1 ca 10             	ror    $0x10,%edx
   1173f:	88 13                	mov    %dl,(%ebx)
   11741:	88 36                	mov    %dh,(%esi)
   11743:	89 d0                	mov    %edx,%eax
   11745:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_limit(current->ldt[1], code_limit);
   11749:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1174e:	05 a0 03 00 00       	add    $0x3a0,%eax
   11753:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   11759:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   1175f:	8d 4a 06             	lea    0x6(%edx),%ecx
   11762:	8b 54 24 14          	mov    0x14(%esp),%edx
   11766:	83 ea 01             	sub    $0x1,%edx
   11769:	c1 ea 0c             	shr    $0xc,%edx
   1176c:	66 89 10             	mov    %dx,(%eax)
   1176f:	c1 ca 10             	ror    $0x10,%edx
   11772:	8a 31                	mov    (%ecx),%dh
   11774:	80 e6 f0             	and    $0xf0,%dh
   11777:	08 f2                	or     %dh,%dl
   11779:	88 11                	mov    %dl,(%ecx)
	set_base(current->ldt[2], data_base);
   1177b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11780:	05 a8 03 00 00       	add    $0x3a8,%eax
   11785:	8d 48 02             	lea    0x2(%eax),%ecx
   11788:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1178d:	05 a8 03 00 00       	add    $0x3a8,%eax
   11792:	8d 58 04             	lea    0x4(%eax),%ebx
   11795:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1179a:	05 a8 03 00 00       	add    $0x3a8,%eax
   1179f:	8d 70 07             	lea    0x7(%eax),%esi
   117a2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   117a6:	89 c2                	mov    %eax,%edx
   117a8:	66 89 11             	mov    %dx,(%ecx)
   117ab:	c1 ca 10             	ror    $0x10,%edx
   117ae:	88 13                	mov    %dl,(%ebx)
   117b0:	88 36                	mov    %dh,(%esi)
   117b2:	89 d0                	mov    %edx,%eax
   117b4:	89 04 24             	mov    %eax,(%esp)
	set_limit(current->ldt[2], data_limit);
   117b7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   117bc:	05 a8 03 00 00       	add    $0x3a8,%eax
   117c1:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   117c7:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   117cd:	8d 4a 06             	lea    0x6(%edx),%ecx
   117d0:	8b 54 24 10          	mov    0x10(%esp),%edx
   117d4:	83 ea 01             	sub    $0x1,%edx
   117d7:	c1 ea 0c             	shr    $0xc,%edx
   117da:	66 89 10             	mov    %dx,(%eax)
   117dd:	c1 ca 10             	ror    $0x10,%edx
   117e0:	8a 31                	mov    (%ecx),%dh
   117e2:	80 e6 f0             	and    $0xf0,%dh
   117e5:	08 f2                	or     %dh,%dl
   117e7:	88 11                	mov    %dl,(%ecx)
	/* make sure fs points to the NEW data segment */
	/* 要确信fs段寄存器已指向新的数据段 */
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
   117e9:	6a 17                	push   $0x17
   117eb:	0f a1                	pop    %fs
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
   117ed:	8b 54 24 10          	mov    0x10(%esp),%edx
   117f1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   117f5:	01 d0                	add    %edx,%eax
   117f7:	2d 00 00 40 00       	sub    $0x400000,%eax
   117fc:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   11800:	c7 44 24 18 1f 00 00 	movl   $0x1f,0x18(%esp)
   11807:	00 
   11808:	eb 47                	jmp    11851 <change_ldt+0x1a5>
		data_base -= PAGE_SIZE;
   1180a:	81 6c 24 1c 00 10 00 	subl   $0x1000,0x1c(%esp)
   11811:	00 
		if (page[i])									// 若该页面存在,就放置该页面.
   11812:	8b 44 24 18          	mov    0x18(%esp),%eax
   11816:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1181d:	8b 44 24 34          	mov    0x34(%esp),%eax
   11821:	01 d0                	add    %edx,%eax
   11823:	8b 00                	mov    (%eax),%eax
   11825:	85 c0                	test   %eax,%eax
   11827:	74 23                	je     1184c <change_ldt+0x1a0>
			put_dirty_page(page[i], data_base);
   11829:	8b 44 24 18          	mov    0x18(%esp),%eax
   1182d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11834:	8b 44 24 34          	mov    0x34(%esp),%eax
   11838:	01 d0                	add    %edx,%eax
   1183a:	8b 00                	mov    (%eax),%eax
   1183c:	83 ec 08             	sub    $0x8,%esp
   1183f:	ff 74 24 24          	pushl  0x24(%esp)
   11843:	50                   	push   %eax
   11844:	e8 0f a9 ff ff       	call   c158 <put_dirty_page>
   11849:	83 c4 10             	add    $0x10,%esp
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   1184c:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
   11851:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   11856:	79 b2                	jns    1180a <change_ldt+0x15e>
	}
	return data_limit;									// 最后返回数据段限长(64MB).
   11858:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1185c:	83 c4 24             	add    $0x24,%esp
   1185f:	5b                   	pop    %ebx
   11860:	5e                   	pop    %esi
   11861:	c3                   	ret    

00011862 <do_execve>:
// argv - 命令行参数指针数组的指针;
// envp - 环境变更指针数组的指针.
// 返回:如果调用成功,则不返回;否则设置出错号,并返回-1.
int do_execve(unsigned long * eip, long tmp, char * filename,
	char ** argv, char ** envp)
{
   11862:	56                   	push   %esi
   11863:	53                   	push   %ebx
   11864:	81 ec 04 02 00 00    	sub    $0x204,%esp
	struct exec ex;
	unsigned long page[MAX_ARG_PAGES];							// 参数和环境串空间页面指针数组.
	int i, argc, envc;
	int e_uid, e_gid;											// 有效用户ID和有效组ID.
	int retval;
	int sh_bang = 0;											// 控制是否需要执行脚本程序.
   1186a:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   11871:	00 00 00 00 
	unsigned long p = PAGE_SIZE * MAX_ARG_PAGES - 4;			// p指向参数和环境空间的最后部.
   11875:	c7 84 24 e8 01 00 00 	movl   $0x1fffc,0x1e8(%esp)
   1187c:	fc ff 01 00 

	// 在内核中打印要执行的文件的文件名字
	char s, filename1[128];
	int index = 0;
   11880:	c7 84 24 e4 01 00 00 	movl   $0x0,0x1e4(%esp)
   11887:	00 00 00 00 
	while (1) {
		s = get_fs_byte(filename + index);
   1188b:	8b 94 24 18 02 00 00 	mov    0x218(%esp),%edx
   11892:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   11899:	01 d0                	add    %edx,%eax
   1189b:	50                   	push   %eax
   1189c:	e8 65 f9 ff ff       	call   11206 <get_fs_byte>
   118a1:	83 c4 04             	add    $0x4,%esp
   118a4:	88 84 24 df 01 00 00 	mov    %al,0x1df(%esp)
		if (s) {
   118ab:	80 bc 24 df 01 00 00 	cmpb   $0x0,0x1df(%esp)
   118b2:	00 
   118b3:	74 24                	je     118d9 <do_execve+0x77>
			*(filename1 + index) = s;
   118b5:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   118bc:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   118c3:	01 c2                	add    %eax,%edx
   118c5:	0f b6 84 24 df 01 00 	movzbl 0x1df(%esp),%eax
   118cc:	00 
   118cd:	88 02                	mov    %al,(%edx)
			index++;
   118cf:	83 84 24 e4 01 00 00 	addl   $0x1,0x1e4(%esp)
   118d6:	01 
		s = get_fs_byte(filename + index);
   118d7:	eb b2                	jmp    1188b <do_execve+0x29>
		} else {
			break;
   118d9:	90                   	nop
		}
	}
	*(filename1 + index + 1) = '\0';
   118da:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   118e1:	8d 50 01             	lea    0x1(%eax),%edx
   118e4:	8d 84 24 94 00 00 00 	lea    0x94(%esp),%eax
   118eb:	01 d0                	add    %edx,%eax
   118ed:	c6 00 00             	movb   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< process pid = %d do_execve : %s >>>>>\n", current->pid, filename1);
   118f0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   118f5:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
   118fb:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   11902:	52                   	push   %edx
   11903:	50                   	push   %eax
   11904:	68 00 3b 02 00       	push   $0x23b00
   11909:	6a 00                	push   $0x0
   1190b:	e8 34 10 01 00       	call   22944 <Log>
   11910:	83 c4 10             	add    $0x10,%esp
	// 上行把p初始设置成位于128KB空间的最后1个长字处.在初始参数和环境空间的操作过程中,p将用来指明在128KB空间中的当前位置.
	// 另外,参数eip[1]是调用本次系统调用的原用户程序代码段寄存器CS值,其中的段选择符当然必须是当前任务的代码段选择符(0x000f).
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
   11913:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   1191a:	83 c0 04             	add    $0x4,%eax
   1191d:	8b 00                	mov    (%eax),%eax
   1191f:	0f b7 c0             	movzwl %ax,%eax
   11922:	83 f8 0f             	cmp    $0xf,%eax
   11925:	74 10                	je     11937 <do_execve+0xd5>
		panic("execve called from supervisor mode");
   11927:	83 ec 0c             	sub    $0xc,%esp
   1192a:	68 30 3b 02 00       	push   $0x23b30
   1192f:	e8 d3 72 ff ff       	call   8c07 <panic>
   11934:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   11937:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   1193e:	00 00 00 00 
   11942:	eb 1a                	jmp    1195e <do_execve+0xfc>
		page[i] = 0;
   11944:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   1194b:	c7 84 84 14 01 00 00 	movl   $0x0,0x114(%esp,%eax,4)
   11952:	00 00 00 00 
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   11956:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   1195d:	01 
   1195e:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   11965:	1f 
   11966:	7e dc                	jle    11944 <do_execve+0xe2>
	if (!(inode = namei(filename)))								/* get executables inode */
   11968:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   1196f:	83 ec 0c             	sub    $0xc,%esp
   11972:	50                   	push   %eax
   11973:	e8 77 1b 00 00       	call   134ef <namei>
   11978:	83 c4 10             	add    $0x10,%esp
   1197b:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   11982:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   11989:	00 
   1198a:	75 0a                	jne    11996 <do_execve+0x134>
		return -ENOENT;
   1198c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11991:	e9 92 0a 00 00       	jmp    12428 <do_execve+0xbc6>
	argc = count(argv);											// 命令行参数个数.
   11996:	83 ec 0c             	sub    $0xc,%esp
   11999:	ff b4 24 28 02 00 00 	pushl  0x228(%esp)
   119a0:	e8 eb fa ff ff       	call   11490 <count>
   119a5:	83 c4 10             	add    $0x10,%esp
   119a8:	89 84 24 f4 01 00 00 	mov    %eax,0x1f4(%esp)
	envc = count(envp);											// 环境字符串变量个数.
   119af:	83 ec 0c             	sub    $0xc,%esp
   119b2:	ff b4 24 2c 02 00 00 	pushl  0x22c(%esp)
   119b9:	e8 d2 fa ff ff       	call   11490 <count>
   119be:	83 c4 10             	add    $0x10,%esp
   119c1:	89 84 24 d8 01 00 00 	mov    %eax,0x1d8(%esp)

restart_interp:
	if (!S_ISREG(inode->i_mode)) {								/* must be regular file */
   119c8:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   119cf:	0f b7 00             	movzwl (%eax),%eax
   119d2:	0f b7 c0             	movzwl %ax,%eax
   119d5:	25 00 f0 00 00       	and    $0xf000,%eax
   119da:	3d 00 80 00 00       	cmp    $0x8000,%eax
   119df:	74 10                	je     119f1 <do_execve+0x18f>
		retval = -EACCES;
   119e1:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   119e8:	f3 ff ff ff 
		goto exec_error2;										// 若不是常规文件则置出错码,跳转到376行.
   119ec:	e9 e5 09 00 00       	jmp    123d6 <do_execve+0xb74>
	// 字段值取到i中后,我们首先查看属性中是否设置了"设置-用户-ID"(set-user-ID)标志和"设置-组-ID)(set-group-id)标志.这两
	// 个标志主要是让一般用户能够执行特权用户(如超级用户root)的程序,例如改变密码的程序passwd等.如果set-user-ID标志置位,则
	// 后面执行进程的有效用户ID(euid)就设置成执行文件的用户ID,否则设置成当前进程的euid.如果执行文件set-group-id被置位的话,
	// 则执行进程的有效组ID(egid)就设置为执行执行文件的组ID.否则设置成当前进程的egid.这里暂把这两个判断出来的值保存在变量
	// e_uid和e_gid中.
	i = inode->i_mode;
   119f1:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   119f8:	0f b7 00             	movzwl (%eax),%eax
   119fb:	0f b7 c0             	movzwl %ax,%eax
   119fe:	89 84 24 f8 01 00 00 	mov    %eax,0x1f8(%esp)
	e_uid = (i & S_ISUID) ? inode->i_uid : current->euid;
   11a05:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11a0c:	25 00 08 00 00       	and    $0x800,%eax
   11a11:	85 c0                	test   %eax,%eax
   11a13:	74 10                	je     11a25 <do_execve+0x1c3>
   11a15:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a1c:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11a20:	0f b7 c0             	movzwl %ax,%eax
   11a23:	eb 0f                	jmp    11a34 <do_execve+0x1d2>
   11a25:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a2a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11a31:	0f b7 c0             	movzwl %ax,%eax
   11a34:	89 84 24 d4 01 00 00 	mov    %eax,0x1d4(%esp)
	e_gid = (i & S_ISGID) ? inode->i_gid : current->egid;
   11a3b:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11a42:	25 00 04 00 00       	and    $0x400,%eax
   11a47:	85 c0                	test   %eax,%eax
   11a49:	74 10                	je     11a5b <do_execve+0x1f9>
   11a4b:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a52:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11a56:	0f b6 c0             	movzbl %al,%eax
   11a59:	eb 0f                	jmp    11a6a <do_execve+0x208>
   11a5b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a60:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   11a67:	0f b7 c0             	movzwl %ax,%eax
   11a6a:	89 84 24 d0 01 00 00 	mov    %eax,0x1d0(%esp)
	// 现在根据进程的euid和egid和执行文件的访问属性进行比较.如果执行文件属于运行进程的用户,则把文件属性值i右移6位,此时其最低3
	// 位是文件宿主的访问权限标志.否则的话如果执行文件与当前进程的用户属于同组,则使属性最低3位是执行文件组用户的访问权限标志.否则
	// 此时属性字最低3位就是其他用户访问该执行文件的权限.然后我们根据属性字i的最低3位值来判断当前进程是否有权限运行这个执行文件.
	// 如果选出的相应用户没有运行该文件的权力(位0是执行权限),并且其他用户也没有任何权限或者当前进程用户不是超级用户,则表明当前进
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
   11a71:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11a76:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   11a7d:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a84:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11a88:	66 39 c2             	cmp    %ax,%dx
   11a8b:	75 0a                	jne    11a97 <do_execve+0x235>
		i >>= 6;
   11a8d:	c1 bc 24 f8 01 00 00 	sarl   $0x6,0x1f8(%esp)
   11a94:	06 
   11a95:	eb 26                	jmp    11abd <do_execve+0x25b>
	else if (in_group_p(inode->i_gid))
   11a97:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a9e:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11aa2:	0f b6 c0             	movzbl %al,%eax
   11aa5:	83 ec 0c             	sub    $0xc,%esp
   11aa8:	50                   	push   %eax
   11aa9:	e8 70 81 ff ff       	call   9c1e <in_group_p>
   11aae:	83 c4 10             	add    $0x10,%esp
   11ab1:	85 c0                	test   %eax,%eax
   11ab3:	74 08                	je     11abd <do_execve+0x25b>
		i >>= 3;
   11ab5:	c1 bc 24 f8 01 00 00 	sarl   $0x3,0x1f8(%esp)
   11abc:	03 
	if (!(i & 1) &&
   11abd:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11ac4:	83 e0 01             	and    $0x1,%eax
   11ac7:	85 c0                	test   %eax,%eax
   11ac9:	75 35                	jne    11b00 <do_execve+0x29e>
	    !((inode->i_mode & 0111) && suser())) {
   11acb:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11ad2:	0f b7 00             	movzwl (%eax),%eax
   11ad5:	0f b7 c0             	movzwl %ax,%eax
   11ad8:	83 e0 49             	and    $0x49,%eax
	if (!(i & 1) &&
   11adb:	85 c0                	test   %eax,%eax
   11add:	74 11                	je     11af0 <do_execve+0x28e>
	    !((inode->i_mode & 0111) && suser())) {
   11adf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   11ae4:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11aeb:	66 85 c0             	test   %ax,%ax
   11aee:	74 10                	je     11b00 <do_execve+0x29e>
		retval = -ENOEXEC;
   11af0:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11af7:	f8 ff ff ff 
		goto exec_error2;
   11afb:	e9 d6 08 00 00       	jmp    123d6 <do_execve+0xb74>
	// 的解释程序名及后面的参数(若有的话),然后将这些参数和脚本文件名放进执行文件(此时是解释程序)的命令行参数空间中.在这之前我们当然
	// 需要先把函数指定的原有命令行参数和环境字符串放到128KB空间中,而这里建立起来的命令行参数则放到它们前面位置处(因为是逆向放置).
	// 最后让内核执行脚本文件的解释程序.下面就是在设置好解释程序的脚本文件名等参数后,取出解释程序的i节点并跳转到229行支执行解释程序.
	// 由于我们需要跳转到执行过的代码229行支.因此在下面确认并处理了脚本文件之后需要设置一个禁止再次执行下面的脚本处理代码标志sh_bang.
	// 在后面的代码中该标志也用来表示我们已经设置好执行文件的命令行参数,不要重复设置.
	if (!(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   11b00:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11b07:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11b0b:	0f b7 d0             	movzwl %ax,%edx
   11b0e:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11b15:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11b19:	0f b7 c0             	movzwl %ax,%eax
   11b1c:	83 ec 08             	sub    $0x8,%esp
   11b1f:	52                   	push   %edx
   11b20:	50                   	push   %eax
   11b21:	e8 7d db ff ff       	call   f6a3 <bread>
   11b26:	83 c4 10             	add    $0x10,%esp
   11b29:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%esp)
   11b30:	83 bc 24 cc 01 00 00 	cmpl   $0x0,0x1cc(%esp)
   11b37:	00 
   11b38:	75 10                	jne    11b4a <do_execve+0x2e8>
		retval = -EACCES;
   11b3a:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   11b41:	f3 ff ff ff 
		goto exec_error2;
   11b45:	e9 8c 08 00 00       	jmp    123d6 <do_execve+0xb74>
	}
	ex = *((struct exec *) bh->b_data);								/* read exec-header */
   11b4a:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11b51:	8b 00                	mov    (%eax),%eax
   11b53:	8b 10                	mov    (%eax),%edx
   11b55:	89 94 24 94 01 00 00 	mov    %edx,0x194(%esp)
   11b5c:	8b 50 04             	mov    0x4(%eax),%edx
   11b5f:	89 94 24 98 01 00 00 	mov    %edx,0x198(%esp)
   11b66:	8b 50 08             	mov    0x8(%eax),%edx
   11b69:	89 94 24 9c 01 00 00 	mov    %edx,0x19c(%esp)
   11b70:	8b 50 0c             	mov    0xc(%eax),%edx
   11b73:	89 94 24 a0 01 00 00 	mov    %edx,0x1a0(%esp)
   11b7a:	8b 50 10             	mov    0x10(%eax),%edx
   11b7d:	89 94 24 a4 01 00 00 	mov    %edx,0x1a4(%esp)
   11b84:	8b 50 14             	mov    0x14(%eax),%edx
   11b87:	89 94 24 a8 01 00 00 	mov    %edx,0x1a8(%esp)
   11b8e:	8b 50 18             	mov    0x18(%eax),%edx
   11b91:	89 94 24 ac 01 00 00 	mov    %edx,0x1ac(%esp)
   11b98:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b9b:	89 84 24 b0 01 00 00 	mov    %eax,0x1b0(%esp)
	if ((bh->b_data[0] == '#') && (bh->b_data[1] == '!') && (!sh_bang)) {
   11ba2:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11ba9:	8b 00                	mov    (%eax),%eax
   11bab:	0f b6 00             	movzbl (%eax),%eax
   11bae:	3c 23                	cmp    $0x23,%al
   11bb0:	0f 85 61 03 00 00    	jne    11f17 <do_execve+0x6b5>
   11bb6:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11bbd:	8b 00                	mov    (%eax),%eax
   11bbf:	83 c0 01             	add    $0x1,%eax
   11bc2:	0f b6 00             	movzbl (%eax),%eax
   11bc5:	3c 21                	cmp    $0x21,%al
   11bc7:	0f 85 4a 03 00 00    	jne    11f17 <do_execve+0x6b5>
   11bcd:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   11bd4:	00 
   11bd5:	0f 85 3c 03 00 00    	jne    11f17 <do_execve+0x6b5>
		unsigned long old_fs;

		// 从这里开始，我们从脚本文件中提取解释程序名及其参数，并把解释程序名、解释程序的参数和脚本文件名组合放入环境参数块中。首先复制脚本
		// 文件头1行字符‘#!’后面的字符串到buf中，其中含有脚本解释程序名（例如/bin/sh），也可能还包含解释程序的几个参数。然后对buf中的内容
		// 进行处理。删除开始的空格、制表符。
		strncpy(buf, bh->b_data + 2, 127);
   11bdb:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11be2:	8b 00                	mov    (%eax),%eax
   11be4:	83 c0 02             	add    $0x2,%eax
   11be7:	83 ec 04             	sub    $0x4,%esp
   11bea:	6a 7f                	push   $0x7f
   11bec:	50                   	push   %eax
   11bed:	8d 44 24 18          	lea    0x18(%esp),%eax
   11bf1:	50                   	push   %eax
   11bf2:	e8 ba f5 ff ff       	call   111b1 <strncpy>
   11bf7:	83 c4 10             	add    $0x10,%esp
		brelse(bh);             									// 释放缓冲块并放回脚本文件i节点。
   11bfa:	83 ec 0c             	sub    $0xc,%esp
   11bfd:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11c04:	e8 44 da ff ff       	call   f64d <brelse>
   11c09:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   11c0c:	83 ec 0c             	sub    $0xc,%esp
   11c0f:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   11c16:	e8 a1 ca ff ff       	call   e6bc <iput>
   11c1b:	83 c4 10             	add    $0x10,%esp
		buf[127] = '\0';
   11c1e:	c6 84 24 8b 00 00 00 	movb   $0x0,0x8b(%esp)
   11c25:	00 
		if (cp = strchr(buf, '\n')) {
   11c26:	83 ec 08             	sub    $0x8,%esp
   11c29:	6a 0a                	push   $0xa
   11c2b:	8d 44 24 18          	lea    0x18(%esp),%eax
   11c2f:	50                   	push   %eax
   11c30:	e8 a3 f5 ff ff       	call   111d8 <strchr>
   11c35:	83 c4 10             	add    $0x10,%esp
   11c38:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11c3f:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11c46:	00 
   11c47:	74 3b                	je     11c84 <do_execve+0x422>
			*cp = '\0';     										// 第1个换行符换成NULL并去掉行头空格制表符。
   11c49:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c50:	c6 00 00             	movb   $0x0,(%eax)
			for (cp = buf; (*cp == ' ') || (*cp == '\t'); cp++);
   11c53:	8d 44 24 0c          	lea    0xc(%esp),%eax
   11c57:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11c5e:	eb 08                	jmp    11c68 <do_execve+0x406>
   11c60:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11c67:	01 
   11c68:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c6f:	0f b6 00             	movzbl (%eax),%eax
   11c72:	3c 20                	cmp    $0x20,%al
   11c74:	74 ea                	je     11c60 <do_execve+0x3fe>
   11c76:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c7d:	0f b6 00             	movzbl (%eax),%eax
   11c80:	3c 09                	cmp    $0x9,%al
   11c82:	74 dc                	je     11c60 <do_execve+0x3fe>
		}
		if (!cp || *cp == '\0') {       							// 若该行没有其他内容，则出错。
   11c84:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11c8b:	00 
   11c8c:	74 0e                	je     11c9c <do_execve+0x43a>
   11c8e:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c95:	0f b6 00             	movzbl (%eax),%eax
   11c98:	84 c0                	test   %al,%al
   11c9a:	75 10                	jne    11cac <do_execve+0x44a>
			retval = -ENOEXEC; 										/* No interpreter name found */
   11c9c:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11ca3:	f8 ff ff ff 
			goto exec_error1;       								/* 没有找到脚本解释程序名 */
   11ca7:	e9 3c 07 00 00       	jmp    123e8 <do_execve+0xb86>
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
   11cac:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cb3:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
   11cba:	8b 84 24 90 00 00 00 	mov    0x90(%esp),%eax
   11cc1:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%esp)
		i_arg = 0;
   11cc8:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
   11ccf:	00 00 00 00 
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11cd3:	eb 27                	jmp    11cfc <do_execve+0x49a>
 			if (*cp == '/')
   11cd5:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cdc:	0f b6 00             	movzbl (%eax),%eax
   11cdf:	3c 2f                	cmp    $0x2f,%al
   11ce1:	75 11                	jne    11cf4 <do_execve+0x492>
				i_name = cp+1;
   11ce3:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cea:	83 c0 01             	add    $0x1,%eax
   11ced:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11cf4:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11cfb:	01 
   11cfc:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d03:	0f b6 00             	movzbl (%eax),%eax
   11d06:	84 c0                	test   %al,%al
   11d08:	74 1c                	je     11d26 <do_execve+0x4c4>
   11d0a:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d11:	0f b6 00             	movzbl (%eax),%eax
   11d14:	3c 20                	cmp    $0x20,%al
   11d16:	74 0e                	je     11d26 <do_execve+0x4c4>
   11d18:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d1f:	0f b6 00             	movzbl (%eax),%eax
   11d22:	3c 09                	cmp    $0x9,%al
   11d24:	75 af                	jne    11cd5 <do_execve+0x473>
		}
		if (*cp) {
   11d26:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d2d:	0f b6 00             	movzbl (%eax),%eax
   11d30:	84 c0                	test   %al,%al
   11d32:	74 22                	je     11d56 <do_execve+0x4f4>
			*cp++ = '\0';           								// 解释程序名尾添加NULL字符。
   11d34:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d3b:	8d 50 01             	lea    0x1(%eax),%edx
   11d3e:	89 94 24 e0 01 00 00 	mov    %edx,0x1e0(%esp)
   11d45:	c6 00 00             	movb   $0x0,(%eax)
			i_arg = cp;             								// i_arg指向解释程序参数。
   11d48:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d4f:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%esp)
		// 这里我们把sh_bang标志置上，然后把函数参数提供的原有参数和环境字符串放入到空间中。环境字符串和参数个数分别是envc和
		// argc-1个。少复制的一个原有参数是原来的执行文件名，即这里的脚本文件名。[[?? 可以看出，实际上我们不需要去另行处理脚本
		// 文件名，即这里完全可以复制argc个参数，包括原来执行文件名（即现在的脚本文件名）。因为它位于同一个位置上]]。注意！这里
		// 指针p随着复制信息增加而逐渐向小地址方向移动，因此这两个复制串函数执行完后，环境参数串信息块位于程序命令行参数串信息块
		// 的上方，并且p指向程序的第1个参数串。copy_strings()最后一个参数（0）指明参数字符串在用户空间。
		if (sh_bang++ == 0) {
   11d56:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
   11d5d:	8d 50 01             	lea    0x1(%eax),%edx
   11d60:	89 94 24 ec 01 00 00 	mov    %edx,0x1ec(%esp)
   11d67:	85 c0                	test   %eax,%eax
   11d69:	75 6e                	jne    11dd9 <do_execve+0x577>
			p = copy_strings(envc, envp, page, p, 0);
   11d6b:	83 ec 0c             	sub    $0xc,%esp
   11d6e:	6a 00                	push   $0x0
   11d70:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11d77:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11d7e:	50                   	push   %eax
   11d7f:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   11d86:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   11d8d:	e8 3f f7 ff ff       	call   114d1 <copy_strings>
   11d92:	83 c4 20             	add    $0x20,%esp
   11d95:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			p = copy_strings(--argc, argv + 1, page, p, 0);
   11d9c:	8b 84 24 1c 02 00 00 	mov    0x21c(%esp),%eax
   11da3:	8d 50 04             	lea    0x4(%eax),%edx
   11da6:	83 ac 24 f4 01 00 00 	subl   $0x1,0x1f4(%esp)
   11dad:	01 
   11dae:	83 ec 0c             	sub    $0xc,%esp
   11db1:	6a 00                	push   $0x0
   11db3:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11dba:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11dc1:	50                   	push   %eax
   11dc2:	52                   	push   %edx
   11dc3:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   11dca:	e8 02 f7 ff ff       	call   114d1 <copy_strings>
   11dcf:	83 c4 20             	add    $0x20,%esp
   11dd2:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
         */
		// 接着我们逆向复制脚本文件名、解释程序的参数和解释程序文件名到参数和环境空间中。若出错，则置出错吗，跳转到exec_error1。
		// 另外，由于本函数参数提供的脚本文件名filename在用户空间，但这里赋予copy_strings()的脚本文件名的指针在内核空间，因此
		// 这个复制字符串函数的最后一个参数（字符串来源标志）需要被设置成1。若字符串在内核空间，则copy_strings()的最后一个参数
		// 要设置成功，如下面。
		p = copy_strings(1, &filename, page, p, 1);
   11dd9:	83 ec 0c             	sub    $0xc,%esp
   11ddc:	6a 01                	push   $0x1
   11dde:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11de5:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11dec:	50                   	push   %eax
   11ded:	8d 84 24 30 02 00 00 	lea    0x230(%esp),%eax
   11df4:	50                   	push   %eax
   11df5:	6a 01                	push   $0x1
   11df7:	e8 d5 f6 ff ff       	call   114d1 <copy_strings>
   11dfc:	83 c4 20             	add    $0x20,%esp
   11dff:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11e06:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e0d:	01 
		if (i_arg) {            									// 复制解释程序的多个参数。
   11e0e:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
   11e15:	85 c0                	test   %eax,%eax
   11e17:	74 35                	je     11e4e <do_execve+0x5ec>
			p = copy_strings(1, &i_arg, page, p, 2);
   11e19:	83 ec 0c             	sub    $0xc,%esp
   11e1c:	6a 02                	push   $0x2
   11e1e:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11e25:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e2c:	50                   	push   %eax
   11e2d:	8d 84 24 a4 00 00 00 	lea    0xa4(%esp),%eax
   11e34:	50                   	push   %eax
   11e35:	6a 01                	push   $0x1
   11e37:	e8 95 f6 ff ff       	call   114d1 <copy_strings>
   11e3c:	83 c4 20             	add    $0x20,%esp
   11e3f:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			argc++;
   11e46:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e4d:	01 
		}
		p = copy_strings(1, &i_name, page, p, 2);
   11e4e:	83 ec 0c             	sub    $0xc,%esp
   11e51:	6a 02                	push   $0x2
   11e53:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11e5a:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e61:	50                   	push   %eax
   11e62:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
   11e69:	50                   	push   %eax
   11e6a:	6a 01                	push   $0x1
   11e6c:	e8 60 f6 ff ff       	call   114d1 <copy_strings>
   11e71:	83 c4 20             	add    $0x20,%esp
   11e74:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11e7b:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e82:	01 
		if (!p) {
   11e83:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   11e8a:	00 
   11e8b:	75 10                	jne    11e9d <do_execve+0x63b>
			retval = -ENOMEM;
   11e8d:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   11e94:	f4 ff ff ff 
			goto exec_error1;
   11e98:	e9 4b 05 00 00       	jmp    123e8 <do_execve+0xb86>
		// 最后我们取得解释程序的i节点指针，然后跳转到204行去执行解释程序。为了获得解释程序的i节点，我们需要使用namei()函数，但是该函数
		// 所使用的参数（文件名）是从用户数据空间得到的，即从段寄存器fs所指空间中取得。因此在调用namei()函数之前我们需要先临时让fs指向内
		// 核数据空间，以让函数能从内核空间得到解释程序名，并在namei()返回后恢复fs的默认设置。因此这里我们先临时保存原fs段寄存器（原指向
		// 用户数据段）的值，将其设置成指向内核数据段，然后取解释程序的i节点。之后再恢复fs的原值。并跳转到restart_interp（204行）处重新
		// 处理新的执行文件 -- 脚本文件的解释程序。
		old_fs = get_fs();
   11e9d:	e8 95 f3 ff ff       	call   11237 <get_fs>
   11ea2:	89 84 24 c4 01 00 00 	mov    %eax,0x1c4(%esp)
		set_fs(get_ds());
   11ea9:	e8 9d f3 ff ff       	call   1124b <get_ds>
   11eae:	83 ec 0c             	sub    $0xc,%esp
   11eb1:	50                   	push   %eax
   11eb2:	e8 a8 f3 ff ff       	call   1125f <set_fs>
   11eb7:	83 c4 10             	add    $0x10,%esp
		if (!(inode = namei(interp))) { 						/* get executables inode */
   11eba:	83 ec 0c             	sub    $0xc,%esp
   11ebd:	ff b4 24 d4 01 00 00 	pushl  0x1d4(%esp)
   11ec4:	e8 26 16 00 00       	call   134ef <namei>
   11ec9:	83 c4 10             	add    $0x10,%esp
   11ecc:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   11ed3:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   11eda:	00 
   11edb:	75 23                	jne    11f00 <do_execve+0x69e>
			set_fs(old_fs);       								/* 取得解释程序的i节点 */
   11edd:	83 ec 0c             	sub    $0xc,%esp
   11ee0:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11ee7:	e8 73 f3 ff ff       	call   1125f <set_fs>
   11eec:	83 c4 10             	add    $0x10,%esp
			retval = -ENOENT;
   11eef:	c7 84 24 f0 01 00 00 	movl   $0xfffffffe,0x1f0(%esp)
   11ef6:	fe ff ff ff 
			goto exec_error1;
   11efa:	90                   	nop
   11efb:	e9 e8 04 00 00       	jmp    123e8 <do_execve+0xb86>
		}
		set_fs(old_fs);
   11f00:	83 ec 0c             	sub    $0xc,%esp
   11f03:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11f0a:	e8 50 f3 ff ff       	call   1125f <set_fs>
   11f0f:	83 c4 10             	add    $0x10,%esp
   11f12:	e9 b1 fa ff ff       	jmp    119c8 <do_execve+0x166>
	// 此时缓冲块中的执行文件头结构已经复制到了ex中.于是先释放该缓冲块,并开始对ex中的执行头信息进行判断处理.对于Linux0.12内核来说,
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
   11f17:	83 ec 0c             	sub    $0xc,%esp
   11f1a:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11f21:	e8 27 d7 ff ff       	call   f64d <brelse>
   11f26:	83 c4 10             	add    $0x10,%esp
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11f29:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   11f30:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11f35:	75 7a                	jne    11fb1 <do_execve+0x74f>
   11f37:	8b 84 24 ac 01 00 00 	mov    0x1ac(%esp),%eax
   11f3e:	85 c0                	test   %eax,%eax
   11f40:	75 6f                	jne    11fb1 <do_execve+0x74f>
   11f42:	8b 84 24 b0 01 00 00 	mov    0x1b0(%esp),%eax
   11f49:	85 c0                	test   %eax,%eax
   11f4b:	75 64                	jne    11fb1 <do_execve+0x74f>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11f4d:	8b 94 24 98 01 00 00 	mov    0x198(%esp),%edx
   11f54:	8b 84 24 9c 01 00 00 	mov    0x19c(%esp),%eax
   11f5b:	01 c2                	add    %eax,%edx
   11f5d:	8b 84 24 a0 01 00 00 	mov    0x1a0(%esp),%eax
   11f64:	01 d0                	add    %edx,%eax
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11f66:	3d 00 00 00 03       	cmp    $0x3000000,%eax
   11f6b:	77 44                	ja     11fb1 <do_execve+0x74f>
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
   11f6d:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11f74:	8b 40 04             	mov    0x4(%eax),%eax
   11f77:	8b 8c 24 98 01 00 00 	mov    0x198(%esp),%ecx
   11f7e:	8b 94 24 9c 01 00 00 	mov    0x19c(%esp),%edx
   11f85:	01 d1                	add    %edx,%ecx
   11f87:	8b 94 24 a4 01 00 00 	mov    0x1a4(%esp),%edx
   11f8e:	01 d1                	add    %edx,%ecx
   11f90:	8b 94 24 94 01 00 00 	mov    0x194(%esp),%edx
   11f97:	81 fa 0b 01 00 00    	cmp    $0x10b,%edx
   11f9d:	75 07                	jne    11fa6 <do_execve+0x744>
   11f9f:	ba 00 04 00 00       	mov    $0x400,%edx
   11fa4:	eb 05                	jmp    11fab <do_execve+0x749>
   11fa6:	ba 20 00 00 00       	mov    $0x20,%edx
   11fab:	01 ca                	add    %ecx,%edx
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11fad:	39 d0                	cmp    %edx,%eax
   11faf:	73 10                	jae    11fc1 <do_execve+0x75f>
		retval = -ENOEXEC;
   11fb1:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11fb8:	f8 ff ff ff 
		goto exec_error2;
   11fbc:	e9 15 04 00 00       	jmp    123d6 <do_execve+0xb74>
	}
	// 另外,如果执行文件中代码开始处没有位于1个页面(1024字节)边界处,则也不能执行.因为需求页(Demand paging)技术要求加载执行文件内容
	// 时以页面为单位,因此要求执行文件映像中代码和数据都从页面边界处开始.
	if (N_TXTOFF(ex) != BLOCK_SIZE) {
   11fc1:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   11fc8:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11fcd:	74 28                	je     11ff7 <do_execve+0x795>
		printk("%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.", filename);
   11fcf:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   11fd6:	83 ec 08             	sub    $0x8,%esp
   11fd9:	50                   	push   %eax
   11fda:	68 54 3b 02 00       	push   $0x23b54
   11fdf:	e8 62 6c ff ff       	call   8c46 <printk>
   11fe4:	83 c4 10             	add    $0x10,%esp
		retval = -ENOEXEC;
   11fe7:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11fee:	f8 ff ff ff 
		goto exec_error2;
   11ff2:	e9 df 03 00 00       	jmp    123d6 <do_execve+0xb74>
	}
	// 如果sh_bang标志没有设置,则复制指定个数的命令行参数和环境字符串到参数和环境空间中.若sh_bang标志已经设置,则表明将运行脚本解释程序,
	// 此时一环境变量页面已经复制,无须再复制.同样,若sh_bang没有置位而需要复制的话,那么此时指针p随着复制信息增加而逐渐向小地址方向移动,
	// 因此这两个复制串函数执行完后,环境参数串信息块位于程序参数串信息块的上方,并且p指向程序的第1个参数串.事实上,p是128KB参数和环境空间
	// 中的偏移值.因此如果p=0,则表示环境变量与参数空间页面已经被占满,容纳不下了.
	if (!sh_bang) {
   11ff7:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   11ffe:	00 
   11fff:	75 7c                	jne    1207d <do_execve+0x81b>
		p = copy_strings(envc, envp, page, p, 0);
   12001:	83 ec 0c             	sub    $0xc,%esp
   12004:	6a 00                	push   $0x0
   12006:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   1200d:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   12014:	50                   	push   %eax
   12015:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   1201c:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   12023:	e8 a9 f4 ff ff       	call   114d1 <copy_strings>
   12028:	83 c4 20             	add    $0x20,%esp
   1202b:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		p = copy_strings(argc, argv, page, p, 0);
   12032:	83 ec 0c             	sub    $0xc,%esp
   12035:	6a 00                	push   $0x0
   12037:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   1203e:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   12045:	50                   	push   %eax
   12046:	ff b4 24 34 02 00 00 	pushl  0x234(%esp)
   1204d:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   12054:	e8 78 f4 ff ff       	call   114d1 <copy_strings>
   12059:	83 c4 20             	add    $0x20,%esp
   1205c:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		if (!p) {
   12063:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   1206a:	00 
   1206b:	75 10                	jne    1207d <do_execve+0x81b>
			retval = -ENOMEM;
   1206d:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   12074:	f4 ff ff ff 
			goto exec_error2;
   12078:	e9 59 03 00 00       	jmp    123d6 <do_execve+0xb74>
	// get_free_page()分配了物理内存页来保存数据,并在chang_ldt()函数中使用put_page()到了进程逻辑空间的末端处.另外,在create_tables()
	// 中也会由于在用户栈上存放参数和环境指针表而引起缺页异常,从而内存管理程序也会就此为用户栈空间映射物理内存页.
	//
	// 这里我们首先放回进程原执行程序的i节点,并且让进程executable字段指向新执行文件的i节点.然后复位原进程的所有信号处理句柄,但对于SIG_IGN
	// 句柄无须复位.
	if (current->executable)
   1207d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12082:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   12088:	85 c0                	test   %eax,%eax
   1208a:	74 17                	je     120a3 <do_execve+0x841>
		iput(current->executable);
   1208c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12091:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   12097:	83 ec 0c             	sub    $0xc,%esp
   1209a:	50                   	push   %eax
   1209b:	e8 1c c6 ff ff       	call   e6bc <iput>
   120a0:	83 c4 10             	add    $0x10,%esp
	current->executable = inode;
   120a3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120a8:	8b 94 24 fc 01 00 00 	mov    0x1fc(%esp),%edx
   120af:	89 90 3c 03 00 00    	mov    %edx,0x33c(%eax)
	current->signal = 0;
   120b5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120ba:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	for (i = 0 ; i < 32 ; i++) {
   120c1:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   120c8:	00 00 00 00 
   120cc:	eb 77                	jmp    12145 <do_execve+0x8e3>
		current->sigaction[i].sa_mask = 0;
   120ce:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120d3:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   120da:	83 c2 01             	add    $0x1,%edx
   120dd:	c1 e2 04             	shl    $0x4,%edx
   120e0:	01 d0                	add    %edx,%eax
   120e2:	83 c0 04             	add    $0x4,%eax
   120e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->sigaction[i].sa_flags = 0;
   120eb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   120f0:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   120f7:	83 c2 01             	add    $0x1,%edx
   120fa:	c1 e2 04             	shl    $0x4,%edx
   120fd:	01 d0                	add    %edx,%eax
   120ff:	83 c0 08             	add    $0x8,%eax
   12102:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (current->sigaction[i].sa_handler != SIG_IGN)
   12108:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1210d:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   12114:	83 c2 01             	add    $0x1,%edx
   12117:	c1 e2 04             	shl    $0x4,%edx
   1211a:	01 d0                	add    %edx,%eax
   1211c:	8b 00                	mov    (%eax),%eax
   1211e:	83 f8 01             	cmp    $0x1,%eax
   12121:	74 1a                	je     1213d <do_execve+0x8db>
			current->sigaction[i].sa_handler = NULL;
   12123:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12128:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   1212f:	83 c2 01             	add    $0x1,%edx
   12132:	c1 e2 04             	shl    $0x4,%edx
   12135:	01 d0                	add    %edx,%eax
   12137:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0 ; i < 32 ; i++) {
   1213d:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   12144:	01 
   12145:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   1214c:	1f 
   1214d:	0f 8e 7b ff ff ff    	jle    120ce <do_execve+0x86c>
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   12153:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   1215a:	00 00 00 00 
   1215e:	eb 39                	jmp    12199 <do_execve+0x937>
		if ((current->close_on_exec >> i) & 1)
   12160:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12165:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   1216b:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   12172:	89 c1                	mov    %eax,%ecx
   12174:	d3 ea                	shr    %cl,%edx
   12176:	89 d0                	mov    %edx,%eax
   12178:	83 e0 01             	and    $0x1,%eax
   1217b:	85 c0                	test   %eax,%eax
   1217d:	74 12                	je     12191 <do_execve+0x92f>
			sys_close(i);
   1217f:	83 ec 0c             	sub    $0xc,%esp
   12182:	ff b4 24 04 02 00 00 	pushl  0x204(%esp)
   12189:	e8 10 ba ff ff       	call   db9e <sys_close>
   1218e:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < NR_OPEN ; i++)
   12191:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   12198:	01 
   12199:	83 bc 24 f8 01 00 00 	cmpl   $0x13,0x1f8(%esp)
   121a0:	13 
   121a1:	7e bd                	jle    12160 <do_execve+0x8fe>
	current->close_on_exec = 0;
   121a3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   121a8:	c7 80 44 03 00 00 00 	movl   $0x0,0x344(%eax)
   121af:	00 00 00 
	// 然后根据当前进程指定的基地址和限长,释放原来程序的代码段和数据段所对应的内存页表指定的物理内存页面及页表本身.此时新执行文件并没有占用主
	// 内存区任何页面,因此在处理器真正运行新执行文件代码时就会引起缺页异常中断,此时内存管理程序即会执行缺页处理页为新执行文件申请内存页面和
	// 设置相关页表项,并且把相关执行文件页面读入内存中.如果"上次任务使用了协处理器"指向的是当前进程,则将其置空,并复位使用了协处理器的标志.
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
   121b2:	b8 0f 00 00 00       	mov    $0xf,%eax
   121b7:	0f 03 c0             	lsl    %ax,%eax
   121ba:	40                   	inc    %eax
   121bb:	89 84 24 c0 01 00 00 	mov    %eax,0x1c0(%esp)
   121c2:	8b 8c 24 c0 01 00 00 	mov    0x1c0(%esp),%ecx
   121c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   121ce:	05 a0 03 00 00       	add    $0x3a0,%eax
   121d3:	83 c0 02             	add    $0x2,%eax
   121d6:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   121dc:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   121e2:	8d 72 04             	lea    0x4(%edx),%esi
   121e5:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
   121eb:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
   121f1:	83 c3 07             	add    $0x7,%ebx
   121f4:	8a 33                	mov    (%ebx),%dh
   121f6:	8a 16                	mov    (%esi),%dl
   121f8:	c1 e2 10             	shl    $0x10,%edx
   121fb:	66 8b 10             	mov    (%eax),%dx
   121fe:	89 d0                	mov    %edx,%eax
   12200:	89 84 24 bc 01 00 00 	mov    %eax,0x1bc(%esp)
   12207:	8b 84 24 bc 01 00 00 	mov    0x1bc(%esp),%eax
   1220e:	83 ec 08             	sub    $0x8,%esp
   12211:	51                   	push   %ecx
   12212:	50                   	push   %eax
   12213:	e8 34 9b ff ff       	call   bd4c <free_page_tables>
   12218:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
   1221b:	b8 17 00 00 00       	mov    $0x17,%eax
   12220:	0f 03 c0             	lsl    %ax,%eax
   12223:	40                   	inc    %eax
   12224:	89 84 24 b8 01 00 00 	mov    %eax,0x1b8(%esp)
   1222b:	8b 8c 24 b8 01 00 00 	mov    0x1b8(%esp),%ecx
   12232:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12237:	05 a8 03 00 00       	add    $0x3a8,%eax
   1223c:	83 c0 02             	add    $0x2,%eax
   1223f:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   12245:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   1224b:	8d 72 04             	lea    0x4(%edx),%esi
   1224e:	8b 1d a0 f1 02 00    	mov    0x2f1a0,%ebx
   12254:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
   1225a:	83 c3 07             	add    $0x7,%ebx
   1225d:	8a 33                	mov    (%ebx),%dh
   1225f:	8a 16                	mov    (%esi),%dl
   12261:	c1 e2 10             	shl    $0x10,%edx
   12264:	66 8b 10             	mov    (%eax),%dx
   12267:	89 d0                	mov    %edx,%eax
   12269:	89 84 24 b4 01 00 00 	mov    %eax,0x1b4(%esp)
   12270:	8b 84 24 b4 01 00 00 	mov    0x1b4(%esp),%eax
   12277:	83 ec 08             	sub    $0x8,%esp
   1227a:	51                   	push   %ecx
   1227b:	50                   	push   %eax
   1227c:	e8 cb 9a ff ff       	call   bd4c <free_page_tables>
   12281:	83 c4 10             	add    $0x10,%esp
	if (last_task_used_math == current)
   12284:	8b 15 0c fb 02 00    	mov    0x2fb0c,%edx
   1228a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1228f:	39 c2                	cmp    %eax,%edx
   12291:	75 0a                	jne    1229d <do_execve+0xa3b>
		last_task_used_math = NULL;
   12293:	c7 05 0c fb 02 00 00 	movl   $0x0,0x2fb0c
   1229a:	00 00 00 
	current->used_math = 0;
   1229d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   122a2:	66 c7 80 28 03 00 00 	movw   $0x0,0x328(%eax)
   122a9:	00 00 
	// 然后我们根据新执行文件头结构中的代码长度字段a_text的值修改局部表中描述符基址和段限长,并将128KB的参数和环境空间页面放置在数据段末端.
	// 执行下面语句之后,p此时更改成以数据段起始处为原点的偏移值,但仍指向参数和环境空间数据开始处,即已转换成栈指针值.然后调用内部函数create_tables()
	// 在栈空间中创建环境和参数变量指针表,供程序的main()作为参数使用,并返回该栈指针.
	p += change_ldt(ex.a_text, page);
   122ab:	8b 84 24 98 01 00 00 	mov    0x198(%esp),%eax
   122b2:	83 ec 08             	sub    $0x8,%esp
   122b5:	8d 94 24 1c 01 00 00 	lea    0x11c(%esp),%edx
   122bc:	52                   	push   %edx
   122bd:	50                   	push   %eax
   122be:	e8 e9 f3 ff ff       	call   116ac <change_ldt>
   122c3:	83 c4 10             	add    $0x10,%esp
   122c6:	01 84 24 e8 01 00 00 	add    %eax,0x1e8(%esp)
	p -= LIBRARY_SIZE + MAX_ARG_PAGES * PAGE_SIZE;
   122cd:	81 ac 24 e8 01 00 00 	subl   $0x420000,0x1e8(%esp)
   122d4:	00 00 42 00 
	p = (unsigned long) create_tables((char *)p, argc, envc);
   122d8:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   122df:	83 ec 04             	sub    $0x4,%esp
   122e2:	ff b4 24 dc 01 00 00 	pushl  0x1dc(%esp)
   122e9:	ff b4 24 fc 01 00 00 	pushl  0x1fc(%esp)
   122f0:	50                   	push   %eax
   122f1:	e8 66 f0 ff ff       	call   1135c <create_tables>
   122f6:	83 c4 10             	add    $0x10,%esp
   122f9:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   12300:	8b 8c 24 a0 01 00 00 	mov    0x1a0(%esp),%ecx
		(current->end_data = ex.a_data +
   12307:	8b 9c 24 9c 01 00 00 	mov    0x19c(%esp),%ebx
		(current->end_code = ex.a_text));
   1230e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12313:	8b 94 24 98 01 00 00 	mov    0x198(%esp),%edx
   1231a:	89 90 1c 02 00 00    	mov    %edx,0x21c(%eax)
   12320:	8b 90 1c 02 00 00    	mov    0x21c(%eax),%edx
		(current->end_data = ex.a_data +
   12326:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1232b:	01 da                	add    %ebx,%edx
   1232d:	89 90 20 02 00 00    	mov    %edx,0x220(%eax)
   12333:	8b 90 20 02 00 00    	mov    0x220(%eax),%edx
	current->brk = ex.a_bss +
   12339:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1233e:	01 ca                	add    %ecx,%edx
   12340:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	current->start_stack = p & 0xfffff000;
   12346:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1234b:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   12352:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   12358:	89 90 28 02 00 00    	mov    %edx,0x228(%eax)
	current->suid = current->euid = e_uid;
   1235e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12363:	8b 94 24 d4 01 00 00 	mov    0x1d4(%esp),%edx
   1236a:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
   12371:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   12377:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   1237e:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
	current->sgid = current->egid = e_gid;
   12385:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1238a:	8b 94 24 d0 01 00 00 	mov    0x1d0(%esp),%edx
   12391:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
   12398:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1239e:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   123a5:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
	// 最后将原调用系统中断的程序在堆栈上的代码指针替换为指向新执行程序的入口点,并将栈指针替换为新执行文件的栈指针.此后返回指令将弹出这些栈数
	// 据并使得CPU去执行新执行文件,因此不会返回到原调用系统中断的程序中去了.
	eip[0] = ex.a_entry;												/* eip, magic happens :-) */	/* eip,魔法起作用了 */
   123ac:	8b 94 24 a8 01 00 00 	mov    0x1a8(%esp),%edx
   123b3:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   123ba:	89 10                	mov    %edx,(%eax)
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
   123bc:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   123c3:	8d 50 0c             	lea    0xc(%eax),%edx
   123c6:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   123cd:	89 02                	mov    %eax,(%edx)
	return 0;
   123cf:	b8 00 00 00 00       	mov    $0x0,%eax
   123d4:	eb 52                	jmp    12428 <do_execve+0xbc6>
exec_error2:
	iput(inode);														// 放回i节点.
   123d6:	83 ec 0c             	sub    $0xc,%esp
   123d9:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   123e0:	e8 d7 c2 ff ff       	call   e6bc <iput>
   123e5:	83 c4 10             	add    $0x10,%esp
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   123e8:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   123ef:	00 00 00 00 
   123f3:	eb 22                	jmp    12417 <do_execve+0xbb5>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
   123f5:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   123fc:	8b 84 84 14 01 00 00 	mov    0x114(%esp,%eax,4),%eax
   12403:	83 ec 0c             	sub    $0xc,%esp
   12406:	50                   	push   %eax
   12407:	e8 c6 98 ff ff       	call   bcd2 <free_page>
   1240c:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   1240f:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   12416:	01 
   12417:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   1241e:	1f 
   1241f:	7e d4                	jle    123f5 <do_execve+0xb93>
	return(retval);														// 返回出错码.
   12421:	8b 84 24 f0 01 00 00 	mov    0x1f0(%esp),%eax
}
   12428:	81 c4 04 02 00 00    	add    $0x204,%esp
   1242e:	5b                   	pop    %ebx
   1242f:	5e                   	pop    %esi
   12430:	c3                   	ret    

00012431 <get_fs_byte>:
{
   12431:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   12432:	8b 44 24 08          	mov    0x8(%esp),%eax
   12436:	64 8a 00             	mov    %fs:(%eax),%al
   12439:	89 c3                	mov    %eax,%ebx
	return _v;
   1243b:	89 d8                	mov    %ebx,%eax
}
   1243d:	5b                   	pop    %ebx
   1243e:	c3                   	ret    

0001243f <put_fs_byte>:
{
   1243f:	83 ec 04             	sub    $0x4,%esp
   12442:	8b 44 24 08          	mov    0x8(%esp),%eax
   12446:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   12449:	0f b6 04 24          	movzbl (%esp),%eax
   1244d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12451:	64 88 02             	mov    %al,%fs:(%edx)
}
   12454:	90                   	nop
   12455:	83 c4 04             	add    $0x4,%esp
   12458:	c3                   	ret    

00012459 <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   12459:	8b 44 24 04          	mov    0x4(%esp),%eax
   1245d:	8b 54 24 08          	mov    0x8(%esp),%edx
   12461:	64 89 02             	mov    %eax,%fs:(%edx)
}
   12464:	90                   	nop
   12465:	c3                   	ret    

00012466 <read_pipe>:
#include <linux/kernel.h>

// 读管道操作函数
// 参数inode是管道对应的i节点，buf是用户数据缓冲区指针，count是读取的字节数。
int read_pipe(struct m_inode * inode, char * buf, int count)
{
   12466:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, read = 0;
   12469:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   12470:	00 
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   12471:	e9 69 01 00 00       	jmp    125df <read_pipe+0x179>
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
			// 唤醒等待向该管道写数据的进程
			wake_up(& PIPE_WRITE_WAIT(*inode));
   12476:	8b 44 24 20          	mov    0x20(%esp),%eax
   1247a:	83 c0 24             	add    $0x24,%eax
   1247d:	83 ec 0c             	sub    $0xc,%esp
   12480:	50                   	push   %eax
   12481:	e8 c7 4c ff ff       	call   714d <wake_up>
   12486:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) 									/* are there any writers? */
   12489:	8b 44 24 20          	mov    0x20(%esp),%eax
   1248d:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12491:	66 83 f8 02          	cmp    $0x2,%ax
   12495:	74 09                	je     124a0 <read_pipe+0x3a>
				return read;
   12497:	8b 44 24 04          	mov    0x4(%esp),%eax
   1249b:	e9 61 01 00 00       	jmp    12601 <read_pipe+0x19b>
			if (current->signal & ~current->blocked)
   124a0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   124a5:	8b 50 0c             	mov    0xc(%eax),%edx
   124a8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   124ad:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   124b3:	f7 d0                	not    %eax
   124b5:	21 d0                	and    %edx,%eax
   124b7:	85 c0                	test   %eax,%eax
   124b9:	74 1a                	je     124d5 <read_pipe+0x6f>
				return read ? read : -ERESTARTSYS;
   124bb:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   124c0:	74 09                	je     124cb <read_pipe+0x65>
   124c2:	8b 44 24 04          	mov    0x4(%esp),%eax
   124c6:	e9 36 01 00 00       	jmp    12601 <read_pipe+0x19b>
   124cb:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   124d0:	e9 2c 01 00 00       	jmp    12601 <read_pipe+0x19b>
			// 当前进程没有数据可读则进入睡眠等待
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
   124d5:	8b 44 24 20          	mov    0x20(%esp),%eax
   124d9:	83 c0 20             	add    $0x20,%eax
   124dc:	83 ec 0c             	sub    $0xc,%esp
   124df:	50                   	push   %eax
   124e0:	e8 36 4c ff ff       	call   711b <interruptible_sleep_on>
   124e5:	83 c4 10             	add    $0x10,%esp
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
   124e8:	8b 44 24 20          	mov    0x20(%esp),%eax
   124ec:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   124f0:	8b 44 24 20          	mov    0x20(%esp),%eax
   124f4:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   124f8:	29 c2                	sub    %eax,%edx
   124fa:	89 d0                	mov    %edx,%eax
   124fc:	0f b7 c0             	movzwl %ax,%eax
   124ff:	25 ff 0f 00 00       	and    $0xfff,%eax
   12504:	89 44 24 08          	mov    %eax,0x8(%esp)
   12508:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1250d:	0f 84 63 ff ff ff    	je     12476 <read_pipe+0x10>
		}
		// 此时说明管道（缓冲区）中有数据。于是我们取管道尾指针到缓冲区末端的字节数chars。如果其大于还需要读取的字节数
		// count，则令其等于count。如果chars大于当前管道中含有数据的长度size，则令其等于size。然后把需读字节数count
		// 减去可读的字节数chars，并累加已读字节数read。
		chars = PAGE_SIZE - PIPE_TAIL(*inode);
   12513:	8b 44 24 20          	mov    0x20(%esp),%eax
   12517:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   1251b:	0f b7 c0             	movzwl %ax,%eax
   1251e:	ba 00 10 00 00       	mov    $0x1000,%edx
   12523:	29 c2                	sub    %eax,%edx
   12525:	89 d0                	mov    %edx,%eax
   12527:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   1252b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1252f:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12533:	7e 08                	jle    1253d <read_pipe+0xd7>
			chars = count;
   12535:	8b 44 24 28          	mov    0x28(%esp),%eax
   12539:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   1253d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12541:	3b 44 24 08          	cmp    0x8(%esp),%eax
   12545:	7e 08                	jle    1254f <read_pipe+0xe9>
			chars = size;
   12547:	8b 44 24 08          	mov    0x8(%esp),%eax
   1254b:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   1254f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12553:	29 44 24 28          	sub    %eax,0x28(%esp)
		read += chars;
   12557:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1255b:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
   1255f:	8b 44 24 20          	mov    0x20(%esp),%eax
   12563:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12567:	0f b7 c0             	movzwl %ax,%eax
   1256a:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_TAIL(*inode) += chars;
   1256e:	8b 44 24 20          	mov    0x20(%esp),%eax
   12572:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12576:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1257a:	01 c2                	add    %eax,%edx
   1257c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12580:	66 89 50 10          	mov    %dx,0x10(%eax)
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
   12584:	8b 44 24 20          	mov    0x20(%esp),%eax
   12588:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   1258c:	66 25 ff 0f          	and    $0xfff,%ax
   12590:	89 c2                	mov    %eax,%edx
   12592:	8b 44 24 20          	mov    0x20(%esp),%eax
   12596:	66 89 50 10          	mov    %dx,0x10(%eax)
		while (chars-- > 0)
   1259a:	eb 34                	jmp    125d0 <read_pipe+0x16a>
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
   1259c:	8b 44 24 24          	mov    0x24(%esp),%eax
   125a0:	8d 50 01             	lea    0x1(%eax),%edx
   125a3:	89 54 24 24          	mov    %edx,0x24(%esp)
   125a7:	8b 54 24 08          	mov    0x8(%esp),%edx
   125ab:	8d 4a 01             	lea    0x1(%edx),%ecx
   125ae:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   125b2:	89 d1                	mov    %edx,%ecx
   125b4:	8b 54 24 20          	mov    0x20(%esp),%edx
   125b8:	8b 52 04             	mov    0x4(%edx),%edx
   125bb:	01 ca                	add    %ecx,%edx
   125bd:	0f b6 12             	movzbl (%edx),%edx
   125c0:	0f be d2             	movsbl %dl,%edx
   125c3:	83 ec 08             	sub    $0x8,%esp
   125c6:	50                   	push   %eax
   125c7:	52                   	push   %edx
   125c8:	e8 72 fe ff ff       	call   1243f <put_fs_byte>
   125cd:	83 c4 10             	add    $0x10,%esp
		while (chars-- > 0)
   125d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   125d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   125d7:	89 54 24 0c          	mov    %edx,0xc(%esp)
   125db:	85 c0                	test   %eax,%eax
   125dd:	7f bd                	jg     1259c <read_pipe+0x136>
	while (count > 0) {
   125df:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   125e4:	0f 8f fe fe ff ff    	jg     124e8 <read_pipe+0x82>
	}
	// 当此次读管道操作结束，则唤醒等待该管道的进程，并返回读取的字节数。
	wake_up(& PIPE_WRITE_WAIT(*inode));
   125ea:	8b 44 24 20          	mov    0x20(%esp),%eax
   125ee:	83 c0 24             	add    $0x24,%eax
   125f1:	83 ec 0c             	sub    $0xc,%esp
   125f4:	50                   	push   %eax
   125f5:	e8 53 4b ff ff       	call   714d <wake_up>
   125fa:	83 c4 10             	add    $0x10,%esp
	return read;
   125fd:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   12601:	83 c4 1c             	add    $0x1c,%esp
   12604:	c3                   	ret    

00012605 <write_pipe>:

// 管道写操作函数。
// 参数inode是管道对应的i节点，buf是数据缓冲区指针，count是将写入管道的字节数。
int write_pipe(struct m_inode * inode, char * buf, int count)
{
   12605:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, written = 0;
   12608:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   1260f:	00 

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   12610:	e9 59 01 00 00       	jmp    1276e <write_pipe+0x169>
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
			wake_up(& PIPE_READ_WAIT(*inode));
   12615:	8b 44 24 20          	mov    0x20(%esp),%eax
   12619:	83 c0 20             	add    $0x20,%eax
   1261c:	83 ec 0c             	sub    $0xc,%esp
   1261f:	50                   	push   %eax
   12620:	e8 28 4b ff ff       	call   714d <wake_up>
   12625:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) { 								/* no readers */
   12628:	8b 44 24 20          	mov    0x20(%esp),%eax
   1262c:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12630:	66 83 f8 02          	cmp    $0x2,%ax
   12634:	74 2d                	je     12663 <write_pipe+0x5e>
				current->signal |= (1 << (SIGPIPE - 1));
   12636:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1263b:	8b 50 0c             	mov    0xc(%eax),%edx
   1263e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12643:	80 ce 10             	or     $0x10,%dh
   12646:	89 50 0c             	mov    %edx,0xc(%eax)
				return written ? written : -1;
   12649:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1264e:	74 09                	je     12659 <write_pipe+0x54>
   12650:	8b 44 24 04          	mov    0x4(%esp),%eax
   12654:	e9 37 01 00 00       	jmp    12790 <write_pipe+0x18b>
   12659:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1265e:	e9 2d 01 00 00       	jmp    12790 <write_pipe+0x18b>
			}
			sleep_on(& PIPE_WRITE_WAIT(*inode));
   12663:	8b 44 24 20          	mov    0x20(%esp),%eax
   12667:	83 c0 24             	add    $0x24,%eax
   1266a:	83 ec 0c             	sub    $0xc,%esp
   1266d:	50                   	push   %eax
   1266e:	e8 c1 4a ff ff       	call   7134 <sleep_on>
   12673:	83 c4 10             	add    $0x10,%esp
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
   12676:	8b 44 24 20          	mov    0x20(%esp),%eax
   1267a:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   1267e:	8b 44 24 20          	mov    0x20(%esp),%eax
   12682:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12686:	29 c2                	sub    %eax,%edx
   12688:	89 d0                	mov    %edx,%eax
   1268a:	0f b7 c0             	movzwl %ax,%eax
   1268d:	f7 d0                	not    %eax
   1268f:	25 ff 0f 00 00       	and    $0xfff,%eax
   12694:	89 44 24 08          	mov    %eax,0x8(%esp)
   12698:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1269d:	0f 84 72 ff ff ff    	je     12615 <write_pipe+0x10>
		}
		// 程序执行到这里表示管道缓冲区中有可写空间size。于是我们取管道头指针到缓冲区末端空间字节数chars。写管道操作是从管道
		// 头指针处开始写的。如果chars大于还需要写入的字节数count，则令其等于count。如果chars大于当前管道中空闲空间长度size
		// 则令其等于size。然后把需要写入字节数count减去此次可写入的字节数chars，并把写入字节数累加到written中。
		chars = PAGE_SIZE - PIPE_HEAD(*inode);
   126a3:	8b 44 24 20          	mov    0x20(%esp),%eax
   126a7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126ab:	0f b7 c0             	movzwl %ax,%eax
   126ae:	ba 00 10 00 00       	mov    $0x1000,%edx
   126b3:	29 c2                	sub    %eax,%edx
   126b5:	89 d0                	mov    %edx,%eax
   126b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   126bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   126bf:	3b 44 24 28          	cmp    0x28(%esp),%eax
   126c3:	7e 08                	jle    126cd <write_pipe+0xc8>
			chars = count;
   126c5:	8b 44 24 28          	mov    0x28(%esp),%eax
   126c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   126cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   126d1:	3b 44 24 08          	cmp    0x8(%esp),%eax
   126d5:	7e 08                	jle    126df <write_pipe+0xda>
			chars = size;
   126d7:	8b 44 24 08          	mov    0x8(%esp),%eax
   126db:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   126df:	8b 44 24 0c          	mov    0xc(%esp),%eax
   126e3:	29 44 24 28          	sub    %eax,0x28(%esp)
		written += chars;
   126e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   126eb:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
   126ef:	8b 44 24 20          	mov    0x20(%esp),%eax
   126f3:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126f7:	0f b7 c0             	movzwl %ax,%eax
   126fa:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_HEAD(*inode) += chars;
   126fe:	8b 44 24 20          	mov    0x20(%esp),%eax
   12702:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12706:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1270a:	01 c2                	add    %eax,%edx
   1270c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12710:	66 89 50 0e          	mov    %dx,0xe(%eax)
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
   12714:	8b 44 24 20          	mov    0x20(%esp),%eax
   12718:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1271c:	66 25 ff 0f          	and    $0xfff,%ax
   12720:	89 c2                	mov    %eax,%edx
   12722:	8b 44 24 20          	mov    0x20(%esp),%eax
   12726:	66 89 50 0e          	mov    %dx,0xe(%eax)
		while (chars-- > 0)
   1272a:	eb 33                	jmp    1275f <write_pipe+0x15a>
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
   1272c:	8b 44 24 24          	mov    0x24(%esp),%eax
   12730:	8d 50 01             	lea    0x1(%eax),%edx
   12733:	89 54 24 24          	mov    %edx,0x24(%esp)
   12737:	83 ec 0c             	sub    $0xc,%esp
   1273a:	50                   	push   %eax
   1273b:	e8 f1 fc ff ff       	call   12431 <get_fs_byte>
   12740:	83 c4 10             	add    $0x10,%esp
   12743:	89 c1                	mov    %eax,%ecx
   12745:	8b 44 24 08          	mov    0x8(%esp),%eax
   12749:	8d 50 01             	lea    0x1(%eax),%edx
   1274c:	89 54 24 08          	mov    %edx,0x8(%esp)
   12750:	89 c2                	mov    %eax,%edx
   12752:	8b 44 24 20          	mov    0x20(%esp),%eax
   12756:	8b 40 04             	mov    0x4(%eax),%eax
   12759:	01 d0                	add    %edx,%eax
   1275b:	89 ca                	mov    %ecx,%edx
   1275d:	88 10                	mov    %dl,(%eax)
		while (chars-- > 0)
   1275f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12763:	8d 50 ff             	lea    -0x1(%eax),%edx
   12766:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1276a:	85 c0                	test   %eax,%eax
   1276c:	7f be                	jg     1272c <write_pipe+0x127>
	while (count > 0) {
   1276e:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12773:	0f 8f fd fe ff ff    	jg     12676 <write_pipe+0x71>
	}
	// 当此次写管道操作结束，则唤醒等待管道的进程，返回已写入的字节数，退出。
	wake_up(& PIPE_READ_WAIT(*inode));
   12779:	8b 44 24 20          	mov    0x20(%esp),%eax
   1277d:	83 c0 20             	add    $0x20,%eax
   12780:	83 ec 0c             	sub    $0xc,%esp
   12783:	50                   	push   %eax
   12784:	e8 c4 49 ff ff       	call   714d <wake_up>
   12789:	83 c4 10             	add    $0x10,%esp
	return written;
   1278c:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   12790:	83 c4 1c             	add    $0x1c,%esp
   12793:	c3                   	ret    

00012794 <sys_pipe>:
// 创建管道系统调用。
// 在fildes所指的数组中创建一对句柄（描述符）。这对文件句柄指向一管道i节点。
// 参数：fildes - 文件句柄数组。fildes[0]用于读管道数据，fildes[1]向管道写入数据。
// 成功时返回0,出错时返回-1.
int sys_pipe(unsigned long * fildes)
{
   12794:	53                   	push   %ebx
   12795:	83 ec 28             	sub    $0x28,%esp
	int fd[2];                      						// 文件句柄数组。
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
   12798:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   1279f:	00 
	for(i = 0; j < 2 && i < NR_FILE; i++)
   127a0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   127a7:	00 
   127a8:	eb 46                	jmp    127f0 <sys_pipe+0x5c>
		if (!file_table[i].f_count)
   127aa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   127ae:	c1 e0 04             	shl    $0x4,%eax
   127b1:	05 84 1f 04 00       	add    $0x41f84,%eax
   127b6:	0f b7 00             	movzwl (%eax),%eax
   127b9:	66 85 c0             	test   %ax,%ax
   127bc:	75 2d                	jne    127eb <sys_pipe+0x57>
			(f[j++] = i + file_table)->f_count++;
   127be:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   127c2:	c1 e0 04             	shl    $0x4,%eax
   127c5:	89 c1                	mov    %eax,%ecx
   127c7:	8b 44 24 18          	mov    0x18(%esp),%eax
   127cb:	8d 50 01             	lea    0x1(%eax),%edx
   127ce:	89 54 24 18          	mov    %edx,0x18(%esp)
   127d2:	8d 91 80 1f 04 00    	lea    0x41f80(%ecx),%edx
   127d8:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
   127dc:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
   127e0:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   127e4:	83 c2 01             	add    $0x1,%edx
   127e7:	66 89 50 04          	mov    %dx,0x4(%eax)
	for(i = 0; j < 2 && i < NR_FILE; i++)
   127eb:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   127f0:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   127f5:	7f 07                	jg     127fe <sys_pipe+0x6a>
   127f7:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   127fc:	7e ac                	jle    127aa <sys_pipe+0x16>
	if (j == 1)
   127fe:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12803:	75 0a                	jne    1280f <sys_pipe+0x7b>
		f[0]->f_count = 0;
   12805:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12809:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
	if (j < 2)
   1280f:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12814:	7f 0a                	jg     12820 <sys_pipe+0x8c>
		return -1;
   12816:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1281b:	e9 80 01 00 00       	jmp    129a0 <sys_pipe+0x20c>
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
   12820:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12827:	00 
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   12828:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1282f:	00 
   12830:	eb 4c                	jmp    1287e <sys_pipe+0xea>
		if (!current->filp[i]) {
   12832:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12837:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1283b:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12841:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12845:	85 c0                	test   %eax,%eax
   12847:	75 30                	jne    12879 <sys_pipe+0xe5>
			current->filp[ fd[j] = i ] = f[j];
   12849:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1284e:	8b 54 24 18          	mov    0x18(%esp),%edx
   12852:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   12856:	89 4c 94 04          	mov    %ecx,0x4(%esp,%edx,4)
   1285a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1285e:	8b 4c 94 04          	mov    0x4(%esp,%edx,4),%ecx
   12862:	8b 54 24 18          	mov    0x18(%esp),%edx
   12866:	8b 54 94 0c          	mov    0xc(%esp,%edx,4),%edx
   1286a:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   12870:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
			j++;
   12874:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   12879:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1287e:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12883:	7f 07                	jg     1288c <sys_pipe+0xf8>
   12885:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   1288a:	7e a6                	jle    12832 <sys_pipe+0x9e>
		}
	if (j == 1)
   1288c:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12891:	75 17                	jne    128aa <sys_pipe+0x116>
		current->filp[fd[0]] = NULL;
   12893:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12898:	8b 54 24 04          	mov    0x4(%esp),%edx
   1289c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   128a2:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   128a9:	00 
	if (j < 2) {
   128aa:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   128af:	7f 20                	jg     128d1 <sys_pipe+0x13d>
		f[0]->f_count = f[1]->f_count = 0;
   128b1:	8b 44 24 10          	mov    0x10(%esp),%eax
   128b5:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   128bb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128bf:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   128c3:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   128c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128cc:	e9 cf 00 00 00       	jmp    129a0 <sys_pipe+0x20c>
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
   128d1:	e8 f1 c0 ff ff       	call   e9c7 <get_pipe_inode>
   128d6:	89 44 24 14          	mov    %eax,0x14(%esp)
   128da:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   128df:	75 52                	jne    12933 <sys_pipe+0x19f>
		current->filp[fd[0]] =
			current->filp[fd[1]] = NULL;
   128e1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   128e6:	8b 54 24 08          	mov    0x8(%esp),%edx
   128ea:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
   128f0:	c7 44 88 08 00 00 00 	movl   $0x0,0x8(%eax,%ecx,4)
   128f7:	00 
		current->filp[fd[0]] =
   128f8:	8b 0d a0 f1 02 00    	mov    0x2f1a0,%ecx
   128fe:	8b 5c 24 04          	mov    0x4(%esp),%ebx
			current->filp[fd[1]] = NULL;
   12902:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12908:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
		current->filp[fd[0]] =
   1290c:	8d 93 d0 00 00 00    	lea    0xd0(%ebx),%edx
   12912:	89 44 91 08          	mov    %eax,0x8(%ecx,%edx,4)
		f[0]->f_count = f[1]->f_count = 0;
   12916:	8b 44 24 10          	mov    0x10(%esp),%eax
   1291a:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   12920:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12924:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   12928:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   1292c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12931:	eb 6d                	jmp    129a0 <sys_pipe+0x20c>
	}
	// 如果管道i节点申请成功，则对两个文件结构进行初始化操作，让它们都指向同一个管道i节点，并把读写指针都置零。
	// 第1个文件结构的文件模式为读，第2个文件结构的文件模式置为写。最后将文件句柄数组复制到对应的用户空间数组中，
	// 成功返回0,退出。
	f[0]->f_inode = f[1]->f_inode = inode;
   12933:	8b 44 24 10          	mov    0x10(%esp),%eax
   12937:	8b 54 24 14          	mov    0x14(%esp),%edx
   1293b:	89 50 08             	mov    %edx,0x8(%eax)
   1293e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12942:	8b 40 08             	mov    0x8(%eax),%eax
   12945:	89 42 08             	mov    %eax,0x8(%edx)
	f[0]->f_pos = f[1]->f_pos = 0;
   12948:	8b 44 24 10          	mov    0x10(%esp),%eax
   1294c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   12953:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12957:	8b 40 0c             	mov    0xc(%eax),%eax
   1295a:	89 42 0c             	mov    %eax,0xc(%edx)
	f[0]->f_mode = 1;										/* read */
   1295d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12961:	66 c7 00 01 00       	movw   $0x1,(%eax)
	f[1]->f_mode = 2;										/* write */
   12966:	8b 44 24 10          	mov    0x10(%esp),%eax
   1296a:	66 c7 00 02 00       	movw   $0x2,(%eax)
	put_fs_long(fd[0], 0 + fildes);
   1296f:	8b 44 24 04          	mov    0x4(%esp),%eax
   12973:	83 ec 08             	sub    $0x8,%esp
   12976:	ff 74 24 38          	pushl  0x38(%esp)
   1297a:	50                   	push   %eax
   1297b:	e8 d9 fa ff ff       	call   12459 <put_fs_long>
   12980:	83 c4 10             	add    $0x10,%esp
	put_fs_long(fd[1], 1 + fildes);
   12983:	8b 44 24 30          	mov    0x30(%esp),%eax
   12987:	83 c0 04             	add    $0x4,%eax
   1298a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1298e:	83 ec 08             	sub    $0x8,%esp
   12991:	50                   	push   %eax
   12992:	52                   	push   %edx
   12993:	e8 c1 fa ff ff       	call   12459 <put_fs_long>
   12998:	83 c4 10             	add    $0x10,%esp
	return 0;
   1299b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   129a0:	83 c4 28             	add    $0x28,%esp
   129a3:	5b                   	pop    %ebx
   129a4:	c3                   	ret    

000129a5 <pipe_ioctl>:

// 管道io控制函数。
// 参数：pino - 管道i节点指针；cmd - 控制命令；arg - 参数。
// 函数返回0表示执行成功，否则返回出错码。
int pipe_ioctl(struct m_inode *pino, int cmd, int arg)
{
   129a5:	83 ec 0c             	sub    $0xc,%esp
	// 如果命令是取管道中当前可读数据长度，则把管道数据长度值添入用户参数指定的位置处，并返回0。否则返回无效命令
	// 错误码。
	switch (cmd) {
   129a8:	8b 44 24 14          	mov    0x14(%esp),%eax
   129ac:	3d 1b 54 00 00       	cmp    $0x541b,%eax
   129b1:	75 47                	jne    129fa <pipe_ioctl+0x55>
		case FIONREAD:
			verify_area((void *) arg, 4);
   129b3:	8b 44 24 18          	mov    0x18(%esp),%eax
   129b7:	83 ec 08             	sub    $0x8,%esp
   129ba:	6a 04                	push   $0x4
   129bc:	50                   	push   %eax
   129bd:	e8 dd 59 ff ff       	call   839f <verify_area>
   129c2:	83 c4 10             	add    $0x10,%esp
			put_fs_long(PIPE_SIZE(*pino), (unsigned long *) arg);
   129c5:	8b 44 24 18          	mov    0x18(%esp),%eax
   129c9:	8b 54 24 10          	mov    0x10(%esp),%edx
   129cd:	0f b7 4a 0e          	movzwl 0xe(%edx),%ecx
   129d1:	8b 54 24 10          	mov    0x10(%esp),%edx
   129d5:	0f b7 52 10          	movzwl 0x10(%edx),%edx
   129d9:	29 d1                	sub    %edx,%ecx
   129db:	89 ca                	mov    %ecx,%edx
   129dd:	0f b7 d2             	movzwl %dx,%edx
   129e0:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   129e6:	83 ec 08             	sub    $0x8,%esp
   129e9:	50                   	push   %eax
   129ea:	52                   	push   %edx
   129eb:	e8 69 fa ff ff       	call   12459 <put_fs_long>
   129f0:	83 c4 10             	add    $0x10,%esp
			return 0;
   129f3:	b8 00 00 00 00       	mov    $0x0,%eax
   129f8:	eb 05                	jmp    129ff <pipe_ioctl+0x5a>
		default:
			return -EINVAL;
   129fa:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}
}
   129ff:	83 c4 0c             	add    $0xc,%esp
   12a02:	c3                   	ret    

00012a03 <get_fs_byte>:
{
   12a03:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   12a04:	8b 44 24 08          	mov    0x8(%esp),%eax
   12a08:	64 8a 00             	mov    %fs:(%eax),%al
   12a0b:	89 c3                	mov    %eax,%ebx
	return _v;
   12a0d:	89 d8                	mov    %ebx,%eax
}
   12a0f:	5b                   	pop    %ebx
   12a10:	c3                   	ret    

00012a11 <strcpy>:
{
   12a11:	57                   	push   %edi
   12a12:	56                   	push   %esi
__asm__(
   12a13:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a17:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   12a1b:	89 d6                	mov    %edx,%esi
   12a1d:	89 cf                	mov    %ecx,%edi
   12a1f:	fc                   	cld    
   12a20:	ac                   	lods   %ds:(%esi),%al
   12a21:	aa                   	stos   %al,%es:(%edi)
   12a22:	84 c0                	test   %al,%al
   12a24:	75 fa                	jne    12a20 <strcpy+0xf>
return dest;												// 返回目的字符串指针.
   12a26:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   12a2a:	5e                   	pop    %esi
   12a2b:	5f                   	pop    %edi
   12a2c:	c3                   	ret    

00012a2d <strcmp>:
{
   12a2d:	57                   	push   %edi
   12a2e:	56                   	push   %esi
__asm__(
   12a2f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12a33:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a37:	89 c7                	mov    %eax,%edi
   12a39:	89 d6                	mov    %edx,%esi
   12a3b:	fc                   	cld    
   12a3c:	ac                   	lods   %ds:(%esi),%al
   12a3d:	ae                   	scas   %es:(%edi),%al
   12a3e:	75 08                	jne    12a48 <strcmp+0x1b>
   12a40:	84 c0                	test   %al,%al
   12a42:	75 f8                	jne    12a3c <strcmp+0xf>
   12a44:	31 c0                	xor    %eax,%eax
   12a46:	eb 09                	jmp    12a51 <strcmp+0x24>
   12a48:	b8 01 00 00 00       	mov    $0x1,%eax
   12a4d:	7c 02                	jl     12a51 <strcmp+0x24>
   12a4f:	f7 d8                	neg    %eax
}
   12a51:	5e                   	pop    %esi
   12a52:	5f                   	pop    %edi
   12a53:	c3                   	ret    

00012a54 <permission>:
 */
// 检测文件访问许可权限.
// 参数:inode - 文件的i节点指针;mask - 访问属性屏蔽码.
// 返回:访问许可返回1,否则返回0.
static int permission(struct m_inode * inode, int mask)
{
   12a54:	83 ec 1c             	sub    $0x1c,%esp
	int mode = inode->i_mode;								// 文件访问属性.
   12a57:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a5b:	0f b7 00             	movzwl (%eax),%eax
   12a5e:	0f b7 c0             	movzwl %ax,%eax
   12a61:	89 44 24 0c          	mov    %eax,0xc(%esp)

	/* special case: not even root can read/write a deleted file */
	/* 特殊情况:即使是超级用户(root)也不能读/写一个已被删除的文件. */
	// 如果i节点有对应的设备,但该i节点的链接计数值等于0,表示该文件已被删除,则返回.
	if (inode->i_dev && !inode->i_nlinks)
   12a65:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a69:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12a6d:	66 85 c0             	test   %ax,%ax
   12a70:	74 13                	je     12a85 <permission+0x31>
   12a72:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a76:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   12a7a:	84 c0                	test   %al,%al
   12a7c:	75 07                	jne    12a85 <permission+0x31>
		return 0;
   12a7e:	b8 00 00 00 00       	mov    $0x0,%eax
   12a83:	eb 6e                	jmp    12af3 <permission+0x9f>
	// 如果进程的有效用户id(euid)与i节点的用户id相同,则取文件宿主的访问权限
	else if (current->euid == inode->i_uid)
   12a85:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12a8a:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   12a91:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a95:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   12a99:	66 39 c2             	cmp    %ax,%dx
   12a9c:	75 07                	jne    12aa5 <permission+0x51>
		mode >>= 6;
   12a9e:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
   12aa3:	eb 20                	jmp    12ac5 <permission+0x71>
	// 如果进程有效组id(egid)与i节点的组id相同,则取组用户的访问权限
	else if (in_group_p(inode->i_gid))
   12aa5:	8b 44 24 20          	mov    0x20(%esp),%eax
   12aa9:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   12aad:	0f b6 c0             	movzbl %al,%eax
   12ab0:	83 ec 0c             	sub    $0xc,%esp
   12ab3:	50                   	push   %eax
   12ab4:	e8 65 71 ff ff       	call   9c1e <in_group_p>
   12ab9:	83 c4 10             	add    $0x10,%esp
   12abc:	85 c0                	test   %eax,%eax
   12abe:	74 05                	je     12ac5 <permission+0x71>
		mode >>= 3;
   12ac0:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 最后判断如果所取的的访问权限与屏蔽码相同,或者是超级用户,则返回1,否则返回0.
	if (((mode & mask & 0007) == mask) || suser())
   12ac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12ac9:	23 44 24 24          	and    0x24(%esp),%eax
   12acd:	83 e0 07             	and    $0x7,%eax
   12ad0:	39 44 24 24          	cmp    %eax,0x24(%esp)
   12ad4:	74 11                	je     12ae7 <permission+0x93>
   12ad6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12adb:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   12ae2:	66 85 c0             	test   %ax,%ax
   12ae5:	75 07                	jne    12aee <permission+0x9a>
		return 1;
   12ae7:	b8 01 00 00 00       	mov    $0x1,%eax
   12aec:	eb 05                	jmp    12af3 <permission+0x9f>
	return 0;
   12aee:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12af3:	83 c4 1c             	add    $0x1c,%esp
   12af6:	c3                   	ret    

00012af7 <match>:
 */
// 指定长度字符串比较函数.
// 参数:len - 比较的字符串长度;name - 文件名指针;de - 目录项结构.
// 返回:相同返回1,不同返回0.
static int match(int len, const char * name, struct dir_entry * de)
{
   12af7:	57                   	push   %edi
   12af8:	56                   	push   %esi
   12af9:	53                   	push   %ebx
	register int same __asm__("ax");

	// 首先判断函数参数的有效性.如果目录项指针空,或者目录项i节点等于0,或者要比较的字符串长度超过文件名长度,则返回0(不匹配).
	if (!de || !de->inode || len > NAME_LEN)
   12afa:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12aff:	74 13                	je     12b14 <match+0x1d>
   12b01:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b05:	0f b7 00             	movzwl (%eax),%eax
   12b08:	66 85 c0             	test   %ax,%ax
   12b0b:	74 07                	je     12b14 <match+0x1d>
   12b0d:	83 7c 24 10 0e       	cmpl   $0xe,0x10(%esp)
   12b12:	7e 07                	jle    12b1b <match+0x24>
		return 0;
   12b14:	b8 00 00 00 00       	mov    $0x0,%eax
   12b19:	eb 69                	jmp    12b84 <match+0x8d>
	/* "" means "." ---> so paths like "/usr/lib//libc.a" work */
    /* ""当作"."来看待 ---> 这样就能处理象"/usr/lib//libc.a"那样的路径名 */
    // 如果比较的长度len等于0并且目录项中文件名的第1个字符是'.',并且只有这么一个字符,那么我们就认为是相同的,因此返回1(匹配)
	if (!len && (de->name[0] == '.') && (de->name[1] == '\0'))
   12b1b:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   12b20:	75 1f                	jne    12b41 <match+0x4a>
   12b22:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b26:	0f b6 40 02          	movzbl 0x2(%eax),%eax
   12b2a:	3c 2e                	cmp    $0x2e,%al
   12b2c:	75 13                	jne    12b41 <match+0x4a>
   12b2e:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b32:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   12b36:	84 c0                	test   %al,%al
   12b38:	75 07                	jne    12b41 <match+0x4a>
		return 1;
   12b3a:	b8 01 00 00 00       	mov    $0x1,%eax
   12b3f:	eb 43                	jmp    12b84 <match+0x8d>
	// 如果要比较的长度len小于NAME_LEN,但是目录项中文件名长度超过len,则也返回0(不匹配)
	// 第75行上对目录项中文件名长度是否超过len的判断方法是检测name[len]是否为NULL.若长度超过len,则name[len]处就是一个不是NULL的普通字符.而对于长度
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
   12b41:	83 7c 24 10 0d       	cmpl   $0xd,0x10(%esp)
   12b46:	7f 1b                	jg     12b63 <match+0x6c>
   12b48:	8b 54 24 18          	mov    0x18(%esp),%edx
   12b4c:	8b 44 24 10          	mov    0x10(%esp),%eax
   12b50:	01 d0                	add    %edx,%eax
   12b52:	83 c0 02             	add    $0x2,%eax
   12b55:	0f b6 00             	movzbl (%eax),%eax
   12b58:	84 c0                	test   %al,%al
   12b5a:	74 07                	je     12b63 <match+0x6c>
		return 0;
   12b5c:	b8 00 00 00 00       	mov    $0x0,%eax
   12b61:	eb 21                	jmp    12b84 <match+0x8d>
	__asm__(\
		"cld\n\t"							// 清方向标志位.
		"fs ; repe ; cmpsb\n\t"				// 用户空间执行循环比较[esi++]和[edi++]操作.
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
   12b63:	8b 54 24 14          	mov    0x14(%esp),%edx
   12b67:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b6b:	83 c0 02             	add    $0x2,%eax
   12b6e:	89 c3                	mov    %eax,%ebx
	__asm__(\
   12b70:	b8 00 00 00 00       	mov    $0x0,%eax
   12b75:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   12b79:	89 d6                	mov    %edx,%esi
   12b7b:	89 df                	mov    %ebx,%edi
   12b7d:	fc                   	cld    
   12b7e:	64 f3 a6             	repz cmpsb %es:(%edi),%fs:(%esi)
   12b81:	0f 94 c0             	sete   %al
		:);
	return same;							// 返回比较结果.
}
   12b84:	5b                   	pop    %ebx
   12b85:	5e                   	pop    %esi
   12b86:	5f                   	pop    %edi
   12b87:	c3                   	ret    

00012b88 <find_entry>:
// 参数:*dir - 指定目录i节点的指针;name - 文件名;namelen - 文件名长度;该函数在指定目录的数据(文件)中搜索指定文件名的目录项.并对指定
// 文件名是'..'的情况根据当前进行的相关设置进行特殊处理.
// 返回:成功则返回高速缓冲区指针,并在*res_dir处返回的目录项结构指针.失败则返回空指针NULL.
static struct buffer_head * find_entry(struct m_inode ** dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12b88:	83 ec 2c             	sub    $0x2c,%esp
	// 则不予处理.如果没有定义过NO_TRUNCATE,那么在文件名长度超过最大长度NAME_LEN时截短之.
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12b8b:	83 7c 24 38 0e       	cmpl   $0xe,0x38(%esp)
   12b90:	7e 08                	jle    12b9a <find_entry+0x12>
		namelen = NAME_LEN;
   12b92:	c7 44 24 38 0e 00 00 	movl   $0xe,0x38(%esp)
   12b99:	00 
#endif
	// 首先计算本目录中目录项项数entries.目录i节点i_size字段中含有本目录包含的数据长度,因此其除以一个目录项的长度(16字节)即可得到该目录中目录项数.然后
	// 置空返回目录项结构指针.
	entries = (*dir)->i_size / (sizeof (struct dir_entry));
   12b9a:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b9e:	8b 00                	mov    (%eax),%eax
   12ba0:	8b 40 04             	mov    0x4(%eax),%eax
   12ba3:	c1 e8 04             	shr    $0x4,%eax
   12ba6:	89 44 24 10          	mov    %eax,0x10(%esp)
	*res_dir = NULL;
   12baa:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12bae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 只能访问该目录中的项而不能退到其父目录中去.也即对于该进程本目录就如同是文件系统的根目录.因此我们需要将文件名修改为'.'.
	// 否则,如果该目录的i节点号等于ROOT_INO(1号)的话,说明确实是文件系统的根i节点.则取文件系统的超级块.如果被安装到的i节点存在,则先放回原i节点,然后对被
	// 安装到的i节点进行处理.于是我们让*dir指向该被安装到的i节点;并且该i节点的引用数加1.即针对这种情况,我们悄悄进行了"偷梁换柱"工程:)
	/* check for '..', as we might have to do some "magic" for it */
	/* 检查目录项'..',因为我们可能需要对其进行特殊处理 */
	if (namelen == 2 && get_fs_byte(name) == '.' && get_fs_byte(name + 1) == '.') {
   12bb4:	83 7c 24 38 02       	cmpl   $0x2,0x38(%esp)
   12bb9:	0f 85 b3 00 00 00    	jne    12c72 <find_entry+0xea>
   12bbf:	ff 74 24 34          	pushl  0x34(%esp)
   12bc3:	e8 3b fe ff ff       	call   12a03 <get_fs_byte>
   12bc8:	83 c4 04             	add    $0x4,%esp
   12bcb:	3c 2e                	cmp    $0x2e,%al
   12bcd:	0f 85 9f 00 00 00    	jne    12c72 <find_entry+0xea>
   12bd3:	8b 44 24 34          	mov    0x34(%esp),%eax
   12bd7:	83 c0 01             	add    $0x1,%eax
   12bda:	50                   	push   %eax
   12bdb:	e8 23 fe ff ff       	call   12a03 <get_fs_byte>
   12be0:	83 c4 04             	add    $0x4,%esp
   12be3:	3c 2e                	cmp    $0x2e,%al
   12be5:	0f 85 87 00 00 00    	jne    12c72 <find_entry+0xea>
		/* '..' in a pseudo-root results in a faked '.' (just change namelen) */
		/* 伪根中的'..'如同一个假'.'(只需改变名字长度) */
		if ((*dir) == current->root)
   12beb:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bef:	8b 10                	mov    (%eax),%edx
   12bf1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   12bf6:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12bfc:	39 c2                	cmp    %eax,%edx
   12bfe:	75 0a                	jne    12c0a <find_entry+0x82>
			namelen = 1;
   12c00:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%esp)
   12c07:	00 
   12c08:	eb 68                	jmp    12c72 <find_entry+0xea>
		else if ((*dir)->i_num == ROOT_INO) {
   12c0a:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c0e:	8b 00                	mov    (%eax),%eax
   12c10:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   12c14:	66 83 f8 01          	cmp    $0x1,%ax
   12c18:	75 58                	jne    12c72 <find_entry+0xea>
			/* '..' over a mount-point results in 'dir' being exchanged for the mounted
			   directory-inode. NOTE! We set mounted, so that we can iput the new dir */
			/* 在一个安装点上的'..'将导致目录交换到被安装文件系统的目录i节点上.注意! 由于我们设置了mounted标志,因而我们能够放回该新目录 */
			sb = get_super((*dir)->i_dev);
   12c1a:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c1e:	8b 00                	mov    (%eax),%eax
   12c20:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12c24:	0f b7 c0             	movzwl %ax,%eax
   12c27:	83 ec 0c             	sub    $0xc,%esp
   12c2a:	50                   	push   %eax
   12c2b:	e8 e4 ce ff ff       	call   fb14 <get_super>
   12c30:	83 c4 10             	add    $0x10,%esp
   12c33:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (sb->s_imount) {
   12c37:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12c3b:	8b 40 5c             	mov    0x5c(%eax),%eax
   12c3e:	85 c0                	test   %eax,%eax
   12c40:	74 30                	je     12c72 <find_entry+0xea>
				iput(*dir);
   12c42:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c46:	8b 00                	mov    (%eax),%eax
   12c48:	83 ec 0c             	sub    $0xc,%esp
   12c4b:	50                   	push   %eax
   12c4c:	e8 6b ba ff ff       	call   e6bc <iput>
   12c51:	83 c4 10             	add    $0x10,%esp
				(*dir)=sb->s_imount;
   12c54:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12c58:	8b 50 5c             	mov    0x5c(%eax),%edx
   12c5b:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c5f:	89 10                	mov    %edx,(%eax)
				(*dir)->i_count++;
   12c61:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c65:	8b 00                	mov    (%eax),%eax
   12c67:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   12c6b:	83 c2 01             	add    $0x1,%edx
   12c6e:	66 89 50 34          	mov    %dx,0x34(%eax)
		}
	}
	// 现在我们开始正常操作，查找指定文件名的目录项在什么地方。因此我们需要读取目录的数据，即取出目录i节点对应块设备数据区中的数据块（逻辑块）信息。这些逻辑块的
	// 块号保存在i节点结构的i_zone[9]数组中.我们先取其中第1个块号.如果目录i节点指向的第一个直接盘块号为0,则说明该目录竟然不含数据,这不正常.于是返回NULL退出.
	// 否则我们就从节点所在设备读取指定的目录项数据块.当然,如果不成功,则也返回NULL退出.
	if (!(block = (*dir)->i_zone[0]))
   12c72:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c76:	8b 00                	mov    (%eax),%eax
   12c78:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12c7c:	0f b7 c0             	movzwl %ax,%eax
   12c7f:	89 44 24 08          	mov    %eax,0x8(%esp)
   12c83:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12c88:	75 0a                	jne    12c94 <find_entry+0x10c>
		return NULL;
   12c8a:	b8 00 00 00 00       	mov    $0x0,%eax
   12c8f:	e9 2e 01 00 00       	jmp    12dc2 <find_entry+0x23a>
	if (!(bh = bread((*dir)->i_dev, block)))
   12c94:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c98:	8b 00                	mov    (%eax),%eax
   12c9a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12c9e:	0f b7 c0             	movzwl %ax,%eax
   12ca1:	83 ec 08             	sub    $0x8,%esp
   12ca4:	ff 74 24 10          	pushl  0x10(%esp)
   12ca8:	50                   	push   %eax
   12ca9:	e8 f5 c9 ff ff       	call   f6a3 <bread>
   12cae:	83 c4 10             	add    $0x10,%esp
   12cb1:	89 44 24 18          	mov    %eax,0x18(%esp)
   12cb5:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12cba:	75 0a                	jne    12cc6 <find_entry+0x13e>
		return NULL;
   12cbc:	b8 00 00 00 00       	mov    $0x0,%eax
   12cc1:	e9 fc 00 00 00       	jmp    12dc2 <find_entry+0x23a>
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
   12cc6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12ccd:	00 
	de = (struct dir_entry *) bh->b_data;
   12cce:	8b 44 24 18          	mov    0x18(%esp),%eax
   12cd2:	8b 00                	mov    (%eax),%eax
   12cd4:	89 44 24 14          	mov    %eax,0x14(%esp)
	while (i < entries) {
   12cd8:	e9 c3 00 00 00       	jmp    12da0 <find_entry+0x218>
		// 如果当前目录项数据块已经搜索完,还没有找到匹配的目录项,则释放当前目录项数据块.再读入目录的下一个逻辑块.若这块为空,则只要还没有搜索完目录中的所有目录项,就
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12cdd:	8b 44 24 18          	mov    0x18(%esp),%eax
   12ce1:	8b 00                	mov    (%eax),%eax
   12ce3:	05 00 04 00 00       	add    $0x400,%eax
   12ce8:	39 44 24 14          	cmp    %eax,0x14(%esp)
   12cec:	72 7d                	jb     12d6b <find_entry+0x1e3>
			brelse(bh);
   12cee:	83 ec 0c             	sub    $0xc,%esp
   12cf1:	ff 74 24 24          	pushl  0x24(%esp)
   12cf5:	e8 53 c9 ff ff       	call   f64d <brelse>
   12cfa:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12cfd:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12d04:	00 
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12d05:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12d09:	c1 e8 06             	shr    $0x6,%eax
   12d0c:	89 c2                	mov    %eax,%edx
   12d0e:	8b 44 24 30          	mov    0x30(%esp),%eax
   12d12:	8b 00                	mov    (%eax),%eax
   12d14:	83 ec 08             	sub    $0x8,%esp
   12d17:	52                   	push   %edx
   12d18:	50                   	push   %eax
   12d19:	e8 66 b9 ff ff       	call   e684 <bmap>
   12d1e:	83 c4 10             	add    $0x10,%esp
   12d21:	89 44 24 08          	mov    %eax,0x8(%esp)
   12d25:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12d2a:	74 28                	je     12d54 <find_entry+0x1cc>
			    !(bh = bread((*dir)->i_dev, block))) {
   12d2c:	8b 44 24 30          	mov    0x30(%esp),%eax
   12d30:	8b 00                	mov    (%eax),%eax
   12d32:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12d36:	0f b7 c0             	movzwl %ax,%eax
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12d39:	83 ec 08             	sub    $0x8,%esp
   12d3c:	ff 74 24 10          	pushl  0x10(%esp)
   12d40:	50                   	push   %eax
   12d41:	e8 5d c9 ff ff       	call   f6a3 <bread>
   12d46:	83 c4 10             	add    $0x10,%esp
   12d49:	89 44 24 18          	mov    %eax,0x18(%esp)
   12d4d:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12d52:	75 0d                	jne    12d61 <find_entry+0x1d9>
				i += DIR_ENTRIES_PER_BLOCK;
   12d54:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12d58:	83 c0 40             	add    $0x40,%eax
   12d5b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   12d5f:	eb 3f                	jmp    12da0 <find_entry+0x218>
			}
			de = (struct dir_entry *) bh->b_data;
   12d61:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d65:	8b 00                	mov    (%eax),%eax
   12d67:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 如果找到匹配的目录项的话,则返回目录项结构指针de和该目录项i节点指针*dir以及该目录项数据块指针bh,并退出函数.否则继续在目录项数据块中比较下一个目录项.
		if (match(namelen, name, de)) {
   12d6b:	83 ec 04             	sub    $0x4,%esp
   12d6e:	ff 74 24 18          	pushl  0x18(%esp)
   12d72:	ff 74 24 3c          	pushl  0x3c(%esp)
   12d76:	ff 74 24 44          	pushl  0x44(%esp)
   12d7a:	e8 78 fd ff ff       	call   12af7 <match>
   12d7f:	83 c4 10             	add    $0x10,%esp
   12d82:	85 c0                	test   %eax,%eax
   12d84:	74 10                	je     12d96 <find_entry+0x20e>
			*res_dir = de;
   12d86:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12d8a:	8b 54 24 14          	mov    0x14(%esp),%edx
   12d8e:	89 10                	mov    %edx,(%eax)
			return bh;
   12d90:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d94:	eb 2c                	jmp    12dc2 <find_entry+0x23a>
		}
		de++;
   12d96:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		i++;
   12d9b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	while (i < entries) {
   12da0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12da4:	3b 44 24 10          	cmp    0x10(%esp),%eax
   12da8:	0f 8c 2f ff ff ff    	jl     12cdd <find_entry+0x155>
	}
	// 如果指定目录中的所有目录项都搜索赛后,还没有找到相应的目录项,则释放目录的数据块,最后返回NULL(失败).
	brelse(bh);
   12dae:	83 ec 0c             	sub    $0xc,%esp
   12db1:	ff 74 24 24          	pushl  0x24(%esp)
   12db5:	e8 93 c8 ff ff       	call   f64d <brelse>
   12dba:	83 c4 10             	add    $0x10,%esp
	return NULL;
   12dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12dc2:	83 c4 2c             	add    $0x2c,%esp
   12dc5:	c3                   	ret    

00012dc6 <add_entry>:
// 根据指定的目录和文件名添加目录项。
// 参数：dir - 指定目录的i节点；name - 文件名；namelen - 文件名长度；
// 返回：高速缓冲区指针；res_dir - 返回的目录项结构指针。
static struct buffer_head * add_entry(struct m_inode * dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12dc6:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 同样，本函数一开始也需要对函数参数的有效性进行判断和验证。如果我们在前面定义了符号常数NO_TRUNCATE，那么如果文件
	// 名长度超过最大长度NAME_LEN，则不予处理。如果没有定义过NO_TRUNCATE，那么在文件长度超过最大长度NAME_LEN时截短之。
	*res_dir = NULL;                							// 用于返回目录项结构指针。
   12dc9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12dcd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12dd3:	83 7c 24 28 0e       	cmpl   $0xe,0x28(%esp)
   12dd8:	7e 08                	jle    12de2 <add_entry+0x1c>
		namelen = NAME_LEN;
   12dda:	c7 44 24 28 0e 00 00 	movl   $0xe,0x28(%esp)
   12de1:	00 
#endif
	// 现在我们开始操作，向指定目录中添加一个指定文件名的目录项。因此我们需要先读取目录的数据，即取出目录i节点对应块设备
	// 数据区中的数据块（逻辑块）信息。这些逻辑块的块号保存在i节点结构的i_zone[9]数组中。我们先取其第1个块号。如果目录
	// i节点指向的第一个直接磁盘块号为0,则说明该目录竟然不含数据，这不正常。于是返回NULL退出。否则我们就从节点所在设备读取
	// 指定的目录项数据块。如果不成功，则也返回NULL退出。另外，如果参数提供的文件名长度等于0,则也返回NULL退出。
	if (!namelen)
   12de2:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12de7:	75 0a                	jne    12df3 <add_entry+0x2d>
		return NULL;
   12de9:	b8 00 00 00 00       	mov    $0x0,%eax
   12dee:	e9 fd 01 00 00       	jmp    12ff0 <add_entry+0x22a>
	if (!(block = dir->i_zone[0]))
   12df3:	8b 44 24 20          	mov    0x20(%esp),%eax
   12df7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12dfb:	0f b7 c0             	movzwl %ax,%eax
   12dfe:	89 04 24             	mov    %eax,(%esp)
   12e01:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12e05:	75 0a                	jne    12e11 <add_entry+0x4b>
		return NULL;
   12e07:	b8 00 00 00 00       	mov    $0x0,%eax
   12e0c:	e9 df 01 00 00       	jmp    12ff0 <add_entry+0x22a>
	if (!(bh = bread(dir->i_dev, block)))
   12e11:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e15:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12e19:	0f b7 c0             	movzwl %ax,%eax
   12e1c:	83 ec 08             	sub    $0x8,%esp
   12e1f:	ff 74 24 08          	pushl  0x8(%esp)
   12e23:	50                   	push   %eax
   12e24:	e8 7a c8 ff ff       	call   f6a3 <bread>
   12e29:	83 c4 10             	add    $0x10,%esp
   12e2c:	89 44 24 08          	mov    %eax,0x8(%esp)
   12e30:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12e35:	75 0a                	jne    12e41 <add_entry+0x7b>
		return NULL;
   12e37:	b8 00 00 00 00       	mov    $0x0,%eax
   12e3c:	e9 af 01 00 00       	jmp    12ff0 <add_entry+0x22a>
	// 此时我们就在这个目录i节点数据块中循环查找最后未使用的空目录项。首先让目录项结构指针de指向缓冲块中的数据块部分，即第
	// 一个目录项处。其中i是目录中的目录项索引号，在循环开始时初始化为0。
	i = 0;
   12e41:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12e48:	00 
	de = (struct dir_entry *) bh->b_data;
   12e49:	8b 44 24 08          	mov    0x8(%esp),%eax
   12e4d:	8b 00                	mov    (%eax),%eax
   12e4f:	89 44 24 04          	mov    %eax,0x4(%esp)
		// 对应的逻辑块不存在就创建一块。若读取或创建操作失败则返回空。如果此次读取的磁盘逻辑块数据返回的缓冲块指针为空，说明这
		// 块逻辑块可能是因为不存在而新创建的空块，则把目录项索引值加上一块逻辑块所能容纳的目录项数DIR_ENTRIES_PER_BLOCK，
		// 用以跳过该块并继续搜索。否则说明新读入的块上有目录项数据，于是让目录项结构指针de指向该块的缓冲块数据部分，然后在其中
		// 继续搜索。其中i/DIR_ENTRIES_PER_BLOCK可计算得到当前搜索的目录项i所在目录文件中的块号，而create_block()函数
		// （inode.c）则可读取或创建出在设备上对应的逻辑块。
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12e53:	8b 44 24 08          	mov    0x8(%esp),%eax
   12e57:	8b 00                	mov    (%eax),%eax
   12e59:	05 00 04 00 00       	add    $0x400,%eax
   12e5e:	39 44 24 04          	cmp    %eax,0x4(%esp)
   12e62:	0f 82 81 00 00 00    	jb     12ee9 <add_entry+0x123>
			brelse(bh);
   12e68:	83 ec 0c             	sub    $0xc,%esp
   12e6b:	ff 74 24 14          	pushl  0x14(%esp)
   12e6f:	e8 d9 c7 ff ff       	call   f64d <brelse>
   12e74:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12e77:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   12e7e:	00 
			block = create_block(dir, i / DIR_ENTRIES_PER_BLOCK);
   12e7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e83:	c1 e8 06             	shr    $0x6,%eax
   12e86:	83 ec 08             	sub    $0x8,%esp
   12e89:	50                   	push   %eax
   12e8a:	ff 74 24 2c          	pushl  0x2c(%esp)
   12e8e:	e8 0d b8 ff ff       	call   e6a0 <create_block>
   12e93:	83 c4 10             	add    $0x10,%esp
   12e96:	89 04 24             	mov    %eax,(%esp)
			if (!block)
   12e99:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12e9d:	75 0a                	jne    12ea9 <add_entry+0xe3>
				return NULL;
   12e9f:	b8 00 00 00 00       	mov    $0x0,%eax
   12ea4:	e9 47 01 00 00       	jmp    12ff0 <add_entry+0x22a>
			if (!(bh = bread(dir->i_dev, block))) {          			// 若空则跳过该块继续。
   12ea9:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ead:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12eb1:	0f b7 c0             	movzwl %ax,%eax
   12eb4:	83 ec 08             	sub    $0x8,%esp
   12eb7:	ff 74 24 08          	pushl  0x8(%esp)
   12ebb:	50                   	push   %eax
   12ebc:	e8 e2 c7 ff ff       	call   f6a3 <bread>
   12ec1:	83 c4 10             	add    $0x10,%esp
   12ec4:	89 44 24 08          	mov    %eax,0x8(%esp)
   12ec8:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12ecd:	75 10                	jne    12edf <add_entry+0x119>
				i += DIR_ENTRIES_PER_BLOCK;
   12ecf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12ed3:	83 c0 40             	add    $0x40,%eax
   12ed6:	89 44 24 0c          	mov    %eax,0xc(%esp)
				continue;
   12eda:	e9 0c 01 00 00       	jmp    12feb <add_entry+0x225>
			}
			de = (struct dir_entry *) bh->b_data;
   12edf:	8b 44 24 08          	mov    0x8(%esp),%eax
   12ee3:	8b 00                	mov    (%eax),%eax
   12ee5:	89 44 24 04          	mov    %eax,0x4(%esp)
		}
		// 如果当前所操作的目录项序号i乘上结构大小所得长度值已经超过目录i节点信息所指出的目录数据长度值i_size，则说明整个目录
		// 文件数据中没有由于删除文件留下的空目录项，因此我们只能把需要添加的新目录项附加到目录文件数据的末端处。于是对该处目录
		// 项进行设置（置该目录项的i节点指针为空），并更新该目录文件的长度值（加上一个目录项的长度），然后设置目录的i节点已修改
		// 标志，再更新该目录的改变时间为当前时间。
		if (i * sizeof(struct dir_entry) >= dir->i_size) {
   12ee9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12eed:	c1 e0 04             	shl    $0x4,%eax
   12ef0:	89 c2                	mov    %eax,%edx
   12ef2:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ef6:	8b 40 04             	mov    0x4(%eax),%eax
   12ef9:	39 c2                	cmp    %eax,%edx
   12efb:	72 49                	jb     12f46 <add_entry+0x180>
			de->inode = 0;
   12efd:	8b 44 24 04          	mov    0x4(%esp),%eax
   12f01:	66 c7 00 00 00       	movw   $0x0,(%eax)
			dir->i_size = (i + 1) * sizeof(struct dir_entry);
   12f06:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f0a:	83 c0 01             	add    $0x1,%eax
   12f0d:	c1 e0 04             	shl    $0x4,%eax
   12f10:	89 c2                	mov    %eax,%edx
   12f12:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f16:	89 50 04             	mov    %edx,0x4(%eax)
			dir->i_dirt = 1;
   12f19:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f1d:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			dir->i_ctime = CURRENT_TIME;
   12f21:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   12f26:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   12f2c:	01 d0                	add    %edx,%eax
   12f2e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12f33:	f7 e2                	mul    %edx
   12f35:	c1 ea 05             	shr    $0x5,%edx
   12f38:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   12f3d:	01 c2                	add    %eax,%edx
   12f3f:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f43:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
   12f46:	8b 44 24 04          	mov    0x4(%esp),%eax
   12f4a:	0f b7 00             	movzwl (%eax),%eax
   12f4d:	66 85 c0             	test   %ax,%ax
   12f50:	0f 85 8b 00 00 00    	jne    12fe1 <add_entry+0x21b>
			dir->i_mtime = CURRENT_TIME;
   12f56:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   12f5b:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   12f61:	01 d0                	add    %edx,%eax
   12f63:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12f68:	f7 e2                	mul    %edx
   12f6a:	c1 ea 05             	shr    $0x5,%edx
   12f6d:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   12f72:	01 c2                	add    %eax,%edx
   12f74:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f78:	89 50 08             	mov    %edx,0x8(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12f7b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12f82:	00 
   12f83:	eb 3d                	jmp    12fc2 <add_entry+0x1fc>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
   12f85:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f89:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12f8d:	7d 1a                	jge    12fa9 <add_entry+0x1e3>
   12f8f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12f93:	8b 44 24 24          	mov    0x24(%esp),%eax
   12f97:	01 d0                	add    %edx,%eax
   12f99:	83 ec 0c             	sub    $0xc,%esp
   12f9c:	50                   	push   %eax
   12f9d:	e8 61 fa ff ff       	call   12a03 <get_fs_byte>
   12fa2:	83 c4 10             	add    $0x10,%esp
   12fa5:	89 c1                	mov    %eax,%ecx
   12fa7:	eb 05                	jmp    12fae <add_entry+0x1e8>
   12fa9:	b9 00 00 00 00       	mov    $0x0,%ecx
   12fae:	8b 54 24 04          	mov    0x4(%esp),%edx
   12fb2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12fb6:	01 d0                	add    %edx,%eax
   12fb8:	83 c0 02             	add    $0x2,%eax
   12fbb:	88 08                	mov    %cl,(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12fbd:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   12fc2:	83 7c 24 0c 0d       	cmpl   $0xd,0xc(%esp)
   12fc7:	7e bc                	jle    12f85 <add_entry+0x1bf>
			bh->b_dirt = 1;
   12fc9:	8b 44 24 08          	mov    0x8(%esp),%eax
   12fcd:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			*res_dir = de;
   12fd1:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12fd5:	8b 54 24 04          	mov    0x4(%esp),%edx
   12fd9:	89 10                	mov    %edx,(%eax)
			return bh;
   12fdb:	8b 44 24 08          	mov    0x8(%esp),%eax
   12fdf:	eb 0f                	jmp    12ff0 <add_entry+0x22a>
		}
		de++;           												// 如果该目录项已经被使用，则继续检测下一个目录项。
   12fe1:	83 44 24 04 10       	addl   $0x10,0x4(%esp)
		i++;
   12fe6:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12feb:	e9 63 fe ff ff       	jmp    12e53 <add_entry+0x8d>
	}
	// 本函数执行不到这里。这也许是Linus在写这段代码时，先复制了上面find_entry()函数的代码，而后修改成本函数的。
	brelse(bh);
	return NULL;
}
   12ff0:	83 c4 1c             	add    $0x1c,%esp
   12ff3:	c3                   	ret    

00012ff4 <follow_link>:

// 查找符号链接的i节点.
// 参数:dir - 目录i节点;inode - 目录项i节点.
// 返回:返回符号链接到文件的i节点指针.出错返回NULL.
static struct m_inode * follow_link(struct m_inode * dir, struct m_inode * inode)
{
   12ff4:	83 ec 1c             	sub    $0x1c,%esp
	unsigned short fs;													// 用于临时保存fs段寄存器值.
	struct buffer_head * bh;

	// 首先判断函数参数的有效性.如果没有给出目录i节点,我们就使用进程任务结构中设置的根i节点,并把链接数增1.如果没有给出目录
	// 项i节点,则放回目录i节点后返回NULL.如果指定目录项不是一个符号链接,就直接返回目录项对应的i节点inode.
	if (!dir) {
   12ff7:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   12ffc:	75 22                	jne    13020 <follow_link+0x2c>
		dir = current->root;
   12ffe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13003:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   13009:	89 44 24 20          	mov    %eax,0x20(%esp)
		dir->i_count++;
   1300d:	8b 44 24 20          	mov    0x20(%esp),%eax
   13011:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   13015:	8d 50 01             	lea    0x1(%eax),%edx
   13018:	8b 44 24 20          	mov    0x20(%esp),%eax
   1301c:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	if (!inode) {
   13020:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   13025:	75 19                	jne    13040 <follow_link+0x4c>
		iput(dir);
   13027:	83 ec 0c             	sub    $0xc,%esp
   1302a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1302e:	e8 89 b6 ff ff       	call   e6bc <iput>
   13033:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13036:	b8 00 00 00 00       	mov    $0x0,%eax
   1303b:	e9 ea 00 00 00       	jmp    1312a <follow_link+0x136>
	}
	if (!S_ISLNK(inode->i_mode)) {
   13040:	8b 44 24 24          	mov    0x24(%esp),%eax
   13044:	0f b7 00             	movzwl (%eax),%eax
   13047:	0f b7 c0             	movzwl %ax,%eax
   1304a:	25 00 f0 00 00       	and    $0xf000,%eax
   1304f:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   13054:	74 18                	je     1306e <follow_link+0x7a>
		iput(dir);
   13056:	83 ec 0c             	sub    $0xc,%esp
   13059:	ff 74 24 2c          	pushl  0x2c(%esp)
   1305d:	e8 5a b6 ff ff       	call   e6bc <iput>
   13062:	83 c4 10             	add    $0x10,%esp
		return inode;
   13065:	8b 44 24 24          	mov    0x24(%esp),%eax
   13069:	e9 bc 00 00 00       	jmp    1312a <follow_link+0x136>
	}
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
   1306e:	66 8c e0             	mov    %fs,%ax
   13071:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	if (fs != 0x17 || !inode->i_zone[0] ||
   13076:	66 83 7c 24 0e 17    	cmpw   $0x17,0xe(%esp)
   1307c:	75 3b                	jne    130b9 <follow_link+0xc5>
   1307e:	8b 44 24 24          	mov    0x24(%esp),%eax
   13082:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13086:	66 85 c0             	test   %ax,%ax
   13089:	74 2e                	je     130b9 <follow_link+0xc5>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   1308b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1308f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13093:	0f b7 d0             	movzwl %ax,%edx
   13096:	8b 44 24 24          	mov    0x24(%esp),%eax
   1309a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1309e:	0f b7 c0             	movzwl %ax,%eax
	if (fs != 0x17 || !inode->i_zone[0] ||
   130a1:	83 ec 08             	sub    $0x8,%esp
   130a4:	52                   	push   %edx
   130a5:	50                   	push   %eax
   130a6:	e8 f8 c5 ff ff       	call   f6a3 <bread>
   130ab:	83 c4 10             	add    $0x10,%esp
   130ae:	89 44 24 08          	mov    %eax,0x8(%esp)
   130b2:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   130b7:	75 25                	jne    130de <follow_link+0xea>
		iput(dir);
   130b9:	83 ec 0c             	sub    $0xc,%esp
   130bc:	ff 74 24 2c          	pushl  0x2c(%esp)
   130c0:	e8 f7 b5 ff ff       	call   e6bc <iput>
   130c5:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   130c8:	83 ec 0c             	sub    $0xc,%esp
   130cb:	ff 74 24 30          	pushl  0x30(%esp)
   130cf:	e8 e8 b5 ff ff       	call   e6bc <iput>
   130d4:	83 c4 10             	add    $0x10,%esp
		return NULL;
   130d7:	b8 00 00 00 00       	mov    $0x0,%eax
   130dc:	eb 4c                	jmp    1312a <follow_link+0x136>
	}
	// 此时我们已经不需要符号链接目录项的i节点了,于是把它放回.现在遇到一个问题,那就是内核函数处理的用户数据都是存放在用户数据
	// 空间中的,并使用了fs段寄存器来从用户空间传递数据到内核空间中.而这里需要处理的数据却在内核空间中.因此为了正确地处理位于
	// 内核中的用户数据,我们需要让fs段寄存器临时指向内核空间,即让fs=0x10.并在调用函数处理完后再恢复原fs的值.最后释放相应缓冲
	// 块,并返回_namei()解析得到符号链接指向的文件i节点.
	iput(inode);
   130de:	83 ec 0c             	sub    $0xc,%esp
   130e1:	ff 74 24 30          	pushl  0x30(%esp)
   130e5:	e8 d2 b5 ff ff       	call   e6bc <iput>
   130ea:	83 c4 10             	add    $0x10,%esp
	__asm__("mov %0, %%fs"::"r" ((unsigned short) 0x10));
   130ed:	b8 10 00 00 00       	mov    $0x10,%eax
   130f2:	8e e0                	mov    %eax,%fs
	inode = _namei(bh->b_data,dir,0);
   130f4:	8b 44 24 08          	mov    0x8(%esp),%eax
   130f8:	8b 00                	mov    (%eax),%eax
   130fa:	83 ec 04             	sub    $0x4,%esp
   130fd:	6a 00                	push   $0x0
   130ff:	ff 74 24 28          	pushl  0x28(%esp)
   13103:	50                   	push   %eax
   13104:	e8 86 02 00 00       	call   1338f <_namei>
   13109:	83 c4 10             	add    $0x10,%esp
   1310c:	89 44 24 24          	mov    %eax,0x24(%esp)
	__asm__("mov %0, %%fs"::"r" (fs));
   13110:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   13115:	8e e0                	mov    %eax,%fs
	brelse(bh);
   13117:	83 ec 0c             	sub    $0xc,%esp
   1311a:	ff 74 24 14          	pushl  0x14(%esp)
   1311e:	e8 2a c5 ff ff       	call   f64d <brelse>
   13123:	83 c4 10             	add    $0x10,%esp
	return inode;
   13126:	8b 44 24 24          	mov    0x24(%esp),%eax
}
   1312a:	83 c4 1c             	add    $0x1c,%esp
   1312d:	c3                   	ret    

0001312e <get_dir>:
 */
// 从指定目录开始搜寻指定路径名的目录(或文件名)的i节点.
// 参数:pathname - 路径名;inode - 指定起始目录的i节点.
// 返回:目录或文件的i节点指针.失败时返回NULL.
static struct m_inode * get_dir(const char * pathname, struct m_inode * inode)
{
   1312e:	83 ec 2c             	sub    $0x2c,%esp
	int namelen, inr;
	struct dir_entry * de;
	struct m_inode * dir;

	// 首先判断参数有效性.如果给出的指定目录的i节点指针inode为空,则使用当前进程的工作目录i节点.
	if (!inode) {
   13131:	8b 44 24 34          	mov    0x34(%esp),%eax
   13135:	85 c0                	test   %eax,%eax
   13137:	75 1e                	jne    13157 <get_dir+0x29>
		inode = current->pwd;									// 进程的当前工作目录i节点.
   13139:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1313e:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
   13144:	89 44 24 34          	mov    %eax,0x34(%esp)
		inode->i_count++;
   13148:	8b 44 24 34          	mov    0x34(%esp),%eax
   1314c:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   13150:	83 c2 01             	add    $0x1,%edx
   13153:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 如果用户指定路径名的第1个字符是'/',则说明路径名是绝对路径名.则应该从当前进程任务结构中设置的根(或伪根)i节点开始操作.
	// 于是我们需要先放回参数指定的或者设定的目录i节点,并取得进程使用的根i节点.然后把该i节点的引用计数加1,
	// 并删除路径名的第1个字符'/'.这样就可以保证进程只能以其设定的根i节点作为搜索的起点.
	if ((c = get_fs_byte(pathname)) == '/') {
   13157:	ff 74 24 30          	pushl  0x30(%esp)
   1315b:	e8 a3 f8 ff ff       	call   12a03 <get_fs_byte>
   13160:	83 c4 04             	add    $0x4,%esp
   13163:	88 44 24 1b          	mov    %al,0x1b(%esp)
   13167:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   1316c:	75 33                	jne    131a1 <get_dir+0x73>
		iput(inode);											// 放回原i节点.
   1316e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13172:	83 ec 0c             	sub    $0xc,%esp
   13175:	50                   	push   %eax
   13176:	e8 41 b5 ff ff       	call   e6bc <iput>
   1317b:	83 c4 10             	add    $0x10,%esp
		inode = current->root;									// 为进程指定的根i节点.
   1317e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13183:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   13189:	89 44 24 34          	mov    %eax,0x34(%esp)
		pathname++;
   1318d:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
		inode->i_count++;
   13192:	8b 44 24 34          	mov    0x34(%esp),%eax
   13196:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   1319a:	83 c2 01             	add    $0x1,%edx
   1319d:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 然后针对路径名中的各个目录名部分和文件名进行循环处理。在循环处理过程中，我们先要对当前正在处理的目录名部分的i节点进行有效性判断，并且把
	// 变量thisname指向当前正在处理的目录名部分。如果该i节点表明当前处理的目录名部分不是目录类型，或者没有可进入该目录的访问许可，则放回该i节点
	// 并返回NULL退出。当然在刚进入循环时，当前目录的ｉ节点inode就是进程根i节点或者是当前工作目录的i节点，或者是参数指定的某个搜索起始目录的i节点。
	while (1) {
		thisname = pathname;
   131a1:	8b 44 24 30          	mov    0x30(%esp),%eax
   131a5:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!S_ISDIR(inode->i_mode) || !permission(inode, MAY_EXEC)) {
   131a9:	8b 44 24 34          	mov    0x34(%esp),%eax
   131ad:	0f b7 00             	movzwl (%eax),%eax
   131b0:	0f b7 c0             	movzwl %ax,%eax
   131b3:	25 00 f0 00 00       	and    $0xf000,%eax
   131b8:	3d 00 40 00 00       	cmp    $0x4000,%eax
   131bd:	75 16                	jne    131d5 <get_dir+0xa7>
   131bf:	8b 44 24 34          	mov    0x34(%esp),%eax
   131c3:	83 ec 08             	sub    $0x8,%esp
   131c6:	6a 01                	push   $0x1
   131c8:	50                   	push   %eax
   131c9:	e8 86 f8 ff ff       	call   12a54 <permission>
   131ce:	83 c4 10             	add    $0x10,%esp
   131d1:	85 c0                	test   %eax,%eax
   131d3:	75 1a                	jne    131ef <get_dir+0xc1>
			iput(inode);
   131d5:	8b 44 24 34          	mov    0x34(%esp),%eax
   131d9:	83 ec 0c             	sub    $0xc,%esp
   131dc:	50                   	push   %eax
   131dd:	e8 da b4 ff ff       	call   e6bc <iput>
   131e2:	83 c4 10             	add    $0x10,%esp
			return NULL;
   131e5:	b8 00 00 00 00       	mov    $0x0,%eax
   131ea:	e9 12 01 00 00       	jmp    13301 <get_dir+0x1d3>
		// 每次循环我们处理路径名中一个目录名(或文件名)部分.因此在每次循环中我们都要从路径名字符串中分离出一个目录名(或文件名).方法是从当前路径名指针
		// pathname开始处搜索检测字符,直到字符是一个结尾符(NULL)或者是一个'/'字符.此时变量namelen正好是当前处理目录名部分的长度,而变量thisname正指向
		// 该目录名部分的开始处.此时如果字符是结尾符NULL,则表明已经搜索到路径名末尾,并已到达最后指定目录名或文件名,则返回该i节点指针退出.
		// 注意!如果路径名中最后一个名称也是一个目录名,但其后面没有加上'/'字符,则函数不会返回该最后目录名的i节点!例如:对于路径/usr/src/linux,该函数将
		// 只返回src/目录名的i节点.
		for(namelen = 0; (c = get_fs_byte(pathname++)) && (c != '/'); namelen++)
   131ef:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   131f6:	00 
   131f7:	eb 05                	jmp    131fe <get_dir+0xd0>
   131f9:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   131fe:	8b 44 24 30          	mov    0x30(%esp),%eax
   13202:	8d 50 01             	lea    0x1(%eax),%edx
   13205:	89 54 24 30          	mov    %edx,0x30(%esp)
   13209:	83 ec 0c             	sub    $0xc,%esp
   1320c:	50                   	push   %eax
   1320d:	e8 f1 f7 ff ff       	call   12a03 <get_fs_byte>
   13212:	83 c4 10             	add    $0x10,%esp
   13215:	88 44 24 1b          	mov    %al,0x1b(%esp)
   13219:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   1321e:	74 07                	je     13227 <get_dir+0xf9>
   13220:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   13225:	75 d2                	jne    131f9 <get_dir+0xcb>
			/* nothing */ ;
		if (!c)
   13227:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   1322c:	75 09                	jne    13237 <get_dir+0x109>
			return inode;
   1322e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13232:	e9 ca 00 00 00       	jmp    13301 <get_dir+0x1d3>
		// 在得到当前目录名部分(或文件名)后,我们调用查找目录项函数find_entry()在当前处理的目录中寻找指定名称的目录项.如果没有找到,则放回该i节点,并返回
		// NULL退出.然后在找到的目录项中取出其i节点号inr和设备号idev,释放包含该目录项的高速缓冲块并放回该i节点.然后取节点号inr的i节点inode,并以该目录
		// 项为当前目录继续循环处理路径名中的下一目录名部分(或文件名).如果当前处理的目录项是一个符号链接名,则使用follow_link()就可以得到其指向的目录项名i节点.
		if (!(bh = find_entry(&inode, thisname, namelen, &de))) {
   13237:	8d 44 24 04          	lea    0x4(%esp),%eax
   1323b:	50                   	push   %eax
   1323c:	ff 74 24 20          	pushl  0x20(%esp)
   13240:	ff 74 24 1c          	pushl  0x1c(%esp)
   13244:	8d 44 24 40          	lea    0x40(%esp),%eax
   13248:	50                   	push   %eax
   13249:	e8 3a f9 ff ff       	call   12b88 <find_entry>
   1324e:	83 c4 10             	add    $0x10,%esp
   13251:	89 44 24 10          	mov    %eax,0x10(%esp)
   13255:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1325a:	75 1a                	jne    13276 <get_dir+0x148>
			iput(inode);
   1325c:	8b 44 24 34          	mov    0x34(%esp),%eax
   13260:	83 ec 0c             	sub    $0xc,%esp
   13263:	50                   	push   %eax
   13264:	e8 53 b4 ff ff       	call   e6bc <iput>
   13269:	83 c4 10             	add    $0x10,%esp
			return NULL;
   1326c:	b8 00 00 00 00       	mov    $0x0,%eax
   13271:	e9 8b 00 00 00       	jmp    13301 <get_dir+0x1d3>
		}
		inr = de->inode;										// 当前目录名部分的i节点号.
   13276:	8b 44 24 04          	mov    0x4(%esp),%eax
   1327a:	0f b7 00             	movzwl (%eax),%eax
   1327d:	0f b7 c0             	movzwl %ax,%eax
   13280:	89 44 24 0c          	mov    %eax,0xc(%esp)
		brelse(bh);
   13284:	83 ec 0c             	sub    $0xc,%esp
   13287:	ff 74 24 1c          	pushl  0x1c(%esp)
   1328b:	e8 bd c3 ff ff       	call   f64d <brelse>
   13290:	83 c4 10             	add    $0x10,%esp
		dir = inode;
   13293:	8b 44 24 34          	mov    0x34(%esp),%eax
   13297:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (!(inode = iget(dir->i_dev, inr))) {					// 取i节点内容.
   1329b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1329f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   132a3:	0f b7 c0             	movzwl %ax,%eax
   132a6:	83 ec 08             	sub    $0x8,%esp
   132a9:	ff 74 24 14          	pushl  0x14(%esp)
   132ad:	50                   	push   %eax
   132ae:	e8 8c b7 ff ff       	call   ea3f <iget>
   132b3:	83 c4 10             	add    $0x10,%esp
   132b6:	89 44 24 34          	mov    %eax,0x34(%esp)
   132ba:	8b 44 24 34          	mov    0x34(%esp),%eax
   132be:	85 c0                	test   %eax,%eax
   132c0:	75 16                	jne    132d8 <get_dir+0x1aa>
			iput(dir);
   132c2:	83 ec 0c             	sub    $0xc,%esp
   132c5:	ff 74 24 14          	pushl  0x14(%esp)
   132c9:	e8 ee b3 ff ff       	call   e6bc <iput>
   132ce:	83 c4 10             	add    $0x10,%esp
			return NULL;
   132d1:	b8 00 00 00 00       	mov    $0x0,%eax
   132d6:	eb 29                	jmp    13301 <get_dir+0x1d3>
		}
		if (!(inode = follow_link(dir, inode)))
   132d8:	8b 44 24 34          	mov    0x34(%esp),%eax
   132dc:	83 ec 08             	sub    $0x8,%esp
   132df:	50                   	push   %eax
   132e0:	ff 74 24 14          	pushl  0x14(%esp)
   132e4:	e8 0b fd ff ff       	call   12ff4 <follow_link>
   132e9:	83 c4 10             	add    $0x10,%esp
   132ec:	89 44 24 34          	mov    %eax,0x34(%esp)
   132f0:	8b 44 24 34          	mov    0x34(%esp),%eax
   132f4:	85 c0                	test   %eax,%eax
   132f6:	0f 85 a5 fe ff ff    	jne    131a1 <get_dir+0x73>
			return NULL;
   132fc:	b8 00 00 00 00       	mov    $0x0,%eax
        }
}
   13301:	83 c4 2c             	add    $0x2c,%esp
   13304:	c3                   	ret    

00013305 <dir_namei>:
// base - 搜索起始目录的i节点.
// 返回:指定目录名最顶层的i节点指针和最顶层目录名称及长度.出错时返回NULL.
// 注意!!这里"最顶层目录"是指路径名中最靠近末端的目录.
static struct m_inode * dir_namei(const char * pathname,
	int * namelen, const char ** name, struct m_inode * base)
{
   13305:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * dir;

	// 首先取得指定路径名最顶层目录的i节点.然后对路径名pathname进行搜索检测,查出最后一个'/'字符后面的名字字符串,计算其长度,并且
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
   13308:	83 ec 08             	sub    $0x8,%esp
   1330b:	ff 74 24 34          	pushl  0x34(%esp)
   1330f:	ff 74 24 2c          	pushl  0x2c(%esp)
   13313:	e8 16 fe ff ff       	call   1312e <get_dir>
   13318:	83 c4 10             	add    $0x10,%esp
   1331b:	89 44 24 08          	mov    %eax,0x8(%esp)
   1331f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   13324:	75 07                	jne    1332d <dir_namei+0x28>
		return NULL;
   13326:	b8 00 00 00 00       	mov    $0x0,%eax
   1332b:	eb 5e                	jmp    1338b <dir_namei+0x86>
	basename = pathname;
   1332d:	8b 44 24 20          	mov    0x20(%esp),%eax
   13331:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   13335:	eb 0f                	jmp    13346 <dir_namei+0x41>
		if (c == '/')
   13337:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   1333c:	75 08                	jne    13346 <dir_namei+0x41>
			basename = pathname;
   1333e:	8b 44 24 20          	mov    0x20(%esp),%eax
   13342:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   13346:	8b 44 24 20          	mov    0x20(%esp),%eax
   1334a:	8d 50 01             	lea    0x1(%eax),%edx
   1334d:	89 54 24 20          	mov    %edx,0x20(%esp)
   13351:	83 ec 0c             	sub    $0xc,%esp
   13354:	50                   	push   %eax
   13355:	e8 a9 f6 ff ff       	call   12a03 <get_fs_byte>
   1335a:	83 c4 10             	add    $0x10,%esp
   1335d:	88 44 24 07          	mov    %al,0x7(%esp)
   13361:	80 7c 24 07 00       	cmpb   $0x0,0x7(%esp)
   13366:	75 cf                	jne    13337 <dir_namei+0x32>
	*namelen = pathname - basename - 1;
   13368:	8b 54 24 20          	mov    0x20(%esp),%edx
   1336c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13370:	29 c2                	sub    %eax,%edx
   13372:	89 d0                	mov    %edx,%eax
   13374:	8d 50 ff             	lea    -0x1(%eax),%edx
   13377:	8b 44 24 24          	mov    0x24(%esp),%eax
   1337b:	89 10                	mov    %edx,(%eax)
	*name = basename;
   1337d:	8b 44 24 28          	mov    0x28(%esp),%eax
   13381:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13385:	89 10                	mov    %edx,(%eax)
	return dir;
   13387:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   1338b:	83 c4 1c             	add    $0x1c,%esp
   1338e:	c3                   	ret    

0001338f <_namei>:

// 取指定路径名的i节点内部函数.
// 参数:pathname - 路径名;base - 搜索起点目录i节点;follow_links - 是否跟随符号链接的标志,1 - 需要,0 不需要.
struct m_inode * _namei(const char * pathname, struct m_inode * base,
	int follow_links)
{
   1338f:	83 ec 2c             	sub    $0x2c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先查找指定路径名中最顶层目录的目录名并得到其i节点.若不存在,则返回NULL退出.如果返回的最顶层名字的长度是0,则表示该路径名以一个目录名为
	// 最后一项.因此说明我们已经找到对应目录的i节点,可以直接返回该i节点退出.
	if (!(base = dir_namei(pathname, &namelen, &basename, base)))
   13392:	8b 44 24 34          	mov    0x34(%esp),%eax
   13396:	50                   	push   %eax
   13397:	8d 44 24 14          	lea    0x14(%esp),%eax
   1339b:	50                   	push   %eax
   1339c:	8d 44 24 14          	lea    0x14(%esp),%eax
   133a0:	50                   	push   %eax
   133a1:	ff 74 24 3c          	pushl  0x3c(%esp)
   133a5:	e8 5b ff ff ff       	call   13305 <dir_namei>
   133aa:	83 c4 10             	add    $0x10,%esp
   133ad:	89 44 24 34          	mov    %eax,0x34(%esp)
   133b1:	8b 44 24 34          	mov    0x34(%esp),%eax
   133b5:	85 c0                	test   %eax,%eax
   133b7:	75 0a                	jne    133c3 <_namei+0x34>
		return NULL;
   133b9:	b8 00 00 00 00       	mov    $0x0,%eax
   133be:	e9 0e 01 00 00       	jmp    134d1 <_namei+0x142>
	if (!namelen)										/* special case: '/usr/' etc */
   133c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   133c7:	85 c0                	test   %eax,%eax
   133c9:	75 09                	jne    133d4 <_namei+0x45>
		return base;									/* 对应于'/usr/'等情况 */
   133cb:	8b 44 24 34          	mov    0x34(%esp),%eax
   133cf:	e9 fd 00 00 00       	jmp    134d1 <_namei+0x142>
	// 然后在返回的顶层目录中寻找指定文件名目录项的i节点.注意!因为如果最后也是一个目录名,但其后没有加'/',则不会返回该最后目录的i节点!例如:/usr/src/linux,
	// 将只返回src/目录名的i节点.因为函数dir_namei()将不以'/'结束的最后一个名字当作一个文件名来看待,因此这里需要单独对这种情况使用寻找目录项i节点函数
	// find_entry()进行处理.此时de中含有寻找到的目录项指针,而base是包含该目录项的目录的i节点指针.
	bh = find_entry(&base, basename, namelen, &de);
   133d4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   133d8:	8b 44 24 10          	mov    0x10(%esp),%eax
   133dc:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   133e0:	51                   	push   %ecx
   133e1:	52                   	push   %edx
   133e2:	50                   	push   %eax
   133e3:	8d 44 24 40          	lea    0x40(%esp),%eax
   133e7:	50                   	push   %eax
   133e8:	e8 9b f7 ff ff       	call   12b88 <find_entry>
   133ed:	83 c4 10             	add    $0x10,%esp
   133f0:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   133f4:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   133f9:	75 1a                	jne    13415 <_namei+0x86>
		iput(base);
   133fb:	8b 44 24 34          	mov    0x34(%esp),%eax
   133ff:	83 ec 0c             	sub    $0xc,%esp
   13402:	50                   	push   %eax
   13403:	e8 b4 b2 ff ff       	call   e6bc <iput>
   13408:	83 c4 10             	add    $0x10,%esp
		return NULL;
   1340b:	b8 00 00 00 00       	mov    $0x0,%eax
   13410:	e9 bc 00 00 00       	jmp    134d1 <_namei+0x142>
	}
	// 接着取该目录项的i节点号,并释放包含该目录项的高速缓冲块并放回目录i节点.然后取对应节点号的i节点,修改其被访问时间为当前时间,并置已修改标志.最后返回
	// 该i节点指针inode.如果当前处理的目录项是一个符号链接名,则使用follow_link()得到其指向的目录项名的i节点.
	inr = de->inode;
   13415:	8b 44 24 08          	mov    0x8(%esp),%eax
   13419:	0f b7 00             	movzwl (%eax),%eax
   1341c:	0f b7 c0             	movzwl %ax,%eax
   1341f:	89 44 24 14          	mov    %eax,0x14(%esp)
	brelse(bh);
   13423:	83 ec 0c             	sub    $0xc,%esp
   13426:	ff 74 24 24          	pushl  0x24(%esp)
   1342a:	e8 1e c2 ff ff       	call   f64d <brelse>
   1342f:	83 c4 10             	add    $0x10,%esp
	if (!(inode = iget(base->i_dev, inr))) {
   13432:	8b 44 24 34          	mov    0x34(%esp),%eax
   13436:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1343a:	0f b7 c0             	movzwl %ax,%eax
   1343d:	83 ec 08             	sub    $0x8,%esp
   13440:	ff 74 24 1c          	pushl  0x1c(%esp)
   13444:	50                   	push   %eax
   13445:	e8 f5 b5 ff ff       	call   ea3f <iget>
   1344a:	83 c4 10             	add    $0x10,%esp
   1344d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   13451:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13456:	75 17                	jne    1346f <_namei+0xe0>
		iput(base);
   13458:	8b 44 24 34          	mov    0x34(%esp),%eax
   1345c:	83 ec 0c             	sub    $0xc,%esp
   1345f:	50                   	push   %eax
   13460:	e8 57 b2 ff ff       	call   e6bc <iput>
   13465:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13468:	b8 00 00 00 00       	mov    $0x0,%eax
   1346d:	eb 62                	jmp    134d1 <_namei+0x142>
	}
	if (follow_links)
   1346f:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   13474:	74 1a                	je     13490 <_namei+0x101>
		inode = follow_link(base, inode);
   13476:	8b 44 24 34          	mov    0x34(%esp),%eax
   1347a:	83 ec 08             	sub    $0x8,%esp
   1347d:	ff 74 24 24          	pushl  0x24(%esp)
   13481:	50                   	push   %eax
   13482:	e8 6d fb ff ff       	call   12ff4 <follow_link>
   13487:	83 c4 10             	add    $0x10,%esp
   1348a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1348e:	eb 10                	jmp    134a0 <_namei+0x111>
	else
		iput(base);
   13490:	8b 44 24 34          	mov    0x34(%esp),%eax
   13494:	83 ec 0c             	sub    $0xc,%esp
   13497:	50                   	push   %eax
   13498:	e8 1f b2 ff ff       	call   e6bc <iput>
   1349d:	83 c4 10             	add    $0x10,%esp
	inode->i_atime = CURRENT_TIME;
   134a0:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   134a5:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   134ab:	01 d0                	add    %edx,%eax
   134ad:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   134b2:	f7 e2                	mul    %edx
   134b4:	c1 ea 05             	shr    $0x5,%edx
   134b7:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   134bc:	01 c2                	add    %eax,%edx
   134be:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   134c2:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_dirt = 1;
   134c5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   134c9:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return inode;
   134cd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
}
   134d1:	83 c4 2c             	add    $0x2c,%esp
   134d4:	c3                   	ret    

000134d5 <lnamei>:

// 取指定路径名的i节点，不跟随符号链接。
// 参数：pathname - 路径名。
// 返回：对应的i节点。
struct m_inode * lnamei(const char * pathname)
{
   134d5:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 0);
   134d8:	83 ec 04             	sub    $0x4,%esp
   134db:	6a 00                	push   $0x0
   134dd:	6a 00                	push   $0x0
   134df:	ff 74 24 1c          	pushl  0x1c(%esp)
   134e3:	e8 a7 fe ff ff       	call   1338f <_namei>
   134e8:	83 c4 10             	add    $0x10,%esp
}
   134eb:	83 c4 0c             	add    $0xc,%esp
   134ee:	c3                   	ret    

000134ef <namei>:
 */
// 取指定路径名的i节点,跟随符号链接.
// 参数:pathname - 路径名.
// 返回:对应的i节点.
struct m_inode * namei(const char * pathname)
{
   134ef:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 1);
   134f2:	83 ec 04             	sub    $0x4,%esp
   134f5:	6a 01                	push   $0x1
   134f7:	6a 00                	push   $0x0
   134f9:	ff 74 24 1c          	pushl  0x1c(%esp)
   134fd:	e8 8d fe ff ff       	call   1338f <_namei>
   13502:	83 c4 10             	add    $0x10,%esp
}
   13505:	83 c4 0c             	add    $0xc,%esp
   13508:	c3                   	ret    

00013509 <open_namei>:
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/stat.h,fcntl.h.
// 返回:成功返回0,否则返回出错码;res_inode - 返回对应文件路径名的i节点指针.
int open_namei(const char * pathname, int flag, int mode,
	struct m_inode ** res_inode)
{
   13509:	53                   	push   %ebx
   1350a:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先对函数参数进行合理的处理.如果文件访问模式标志是只读(O),但是文件截零标志O_TRUNC却置位了,则在文件打开标志中添加只写标志
	// O_WRONLY.这样做的原因是由于截零标志O_TRUNC必须在文件可写情况下有效.
	if ((flag & O_TRUNC) && !(flag & O_ACCMODE))
   1350d:	8b 44 24 34          	mov    0x34(%esp),%eax
   13511:	25 00 02 00 00       	and    $0x200,%eax
   13516:	85 c0                	test   %eax,%eax
   13518:	74 10                	je     1352a <open_namei+0x21>
   1351a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1351e:	83 e0 03             	and    $0x3,%eax
   13521:	85 c0                	test   %eax,%eax
   13523:	75 05                	jne    1352a <open_namei+0x21>
		flag |= O_WRONLY;
   13525:	83 4c 24 34 01       	orl    $0x1,0x34(%esp)
	// 使用当前进程的文件访问许可屏蔽码,屏蔽掉给定模式中的相应位,并添上普通文件标志I_REGULAR.
	// 该标志将用于打开的文件不存在而需要创建文件时,作为新文件的默认属性
	mode &= 0777 & ~current->umask;
   1352a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1352f:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   13536:	0f b7 c0             	movzwl %ax,%eax
   13539:	f7 d0                	not    %eax
   1353b:	25 ff 01 00 00       	and    $0x1ff,%eax
   13540:	21 44 24 38          	and    %eax,0x38(%esp)
	mode |= I_REGULAR;													// 常规文件标志.见参见include/const.h文件.
   13544:	81 4c 24 38 00 80 00 	orl    $0x8000,0x38(%esp)
   1354b:	00 
	// 然后根据指定的路径名寻找到对应的i节点,以及最顶端目录名及其长度.此时如果最顶端目录名长度为0(例如'/usr/'这种路径名的情况),那么
	// 若操作不是读写,创建和文件长度截0,则表示是在打开一个目录名文件操作.于是直接返回该目录的i节点并返回0退出.否则说明进程操作非法,于是
	// 放回该i节点,返回出错码.
	if (!(dir = dir_namei(pathname, &namelen, &basename, NULL)))
   1354c:	6a 00                	push   $0x0
   1354e:	8d 44 24 10          	lea    0x10(%esp),%eax
   13552:	50                   	push   %eax
   13553:	8d 44 24 10          	lea    0x10(%esp),%eax
   13557:	50                   	push   %eax
   13558:	ff 74 24 3c          	pushl  0x3c(%esp)
   1355c:	e8 a4 fd ff ff       	call   13305 <dir_namei>
   13561:	83 c4 10             	add    $0x10,%esp
   13564:	89 44 24 04          	mov    %eax,0x4(%esp)
   13568:	8b 44 24 04          	mov    0x4(%esp),%eax
   1356c:	85 c0                	test   %eax,%eax
   1356e:	75 0a                	jne    1357a <open_namei+0x71>
		return -ENOENT;
   13570:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13575:	e9 08 03 00 00       	jmp    13882 <open_namei+0x379>
	// 文件名字为空，则返回
	if (!namelen) {														/* special case: '/usr/' etc */
   1357a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1357e:	85 c0                	test   %eax,%eax
   13580:	75 3b                	jne    135bd <open_namei+0xb4>
		if (!(flag & (O_ACCMODE | O_CREAT | O_TRUNC))) {
   13582:	8b 44 24 34          	mov    0x34(%esp),%eax
   13586:	25 43 02 00 00       	and    $0x243,%eax
   1358b:	85 c0                	test   %eax,%eax
   1358d:	75 14                	jne    135a3 <open_namei+0x9a>
			*res_inode = dir;
   1358f:	8b 54 24 04          	mov    0x4(%esp),%edx
   13593:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13597:	89 10                	mov    %edx,(%eax)
			return 0;
   13599:	b8 00 00 00 00       	mov    $0x0,%eax
   1359e:	e9 df 02 00 00       	jmp    13882 <open_namei+0x379>
		}
		iput(dir);
   135a3:	8b 44 24 04          	mov    0x4(%esp),%eax
   135a7:	83 ec 0c             	sub    $0xc,%esp
   135aa:	50                   	push   %eax
   135ab:	e8 0c b1 ff ff       	call   e6bc <iput>
   135b0:	83 c4 10             	add    $0x10,%esp
		return -EISDIR;
   135b3:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
   135b8:	e9 c5 02 00 00       	jmp    13882 <open_namei+0x379>
	}
	// 接着根据上面得到的最顶层目录名的i节点dir,在其中查找取得路径名字符串中最后的文件名对应的目录项结构de,并同时得到该目录项所在的高速缓冲
	// 区指针.如果该高速缓冲指针为NULL,则表示没有找到对应文件名的目录项,因此只可能是创建文件操作.此时如果不是创建文件,则放回该目录的i节点,返回
	// 出错号退出.如果用户在该目录没有写的权力,则放回该目录的i节点,返回出错号退出.
	bh = find_entry(&dir, basename, namelen, &de);
   135bd:	8b 54 24 08          	mov    0x8(%esp),%edx
   135c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   135c5:	89 e1                	mov    %esp,%ecx
   135c7:	51                   	push   %ecx
   135c8:	52                   	push   %edx
   135c9:	50                   	push   %eax
   135ca:	8d 44 24 10          	lea    0x10(%esp),%eax
   135ce:	50                   	push   %eax
   135cf:	e8 b4 f5 ff ff       	call   12b88 <find_entry>
   135d4:	83 c4 10             	add    $0x10,%esp
   135d7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   135db:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   135e0:	0f 85 63 01 00 00    	jne    13749 <open_namei+0x240>
		if (!(flag & O_CREAT)) {                						// 不是创建文件，放回i节点
   135e6:	8b 44 24 34          	mov    0x34(%esp),%eax
   135ea:	83 e0 40             	and    $0x40,%eax
   135ed:	85 c0                	test   %eax,%eax
   135ef:	75 1a                	jne    1360b <open_namei+0x102>
			iput(dir);
   135f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   135f5:	83 ec 0c             	sub    $0xc,%esp
   135f8:	50                   	push   %eax
   135f9:	e8 be b0 ff ff       	call   e6bc <iput>
   135fe:	83 c4 10             	add    $0x10,%esp
			return -ENOENT;
   13601:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13606:	e9 77 02 00 00       	jmp    13882 <open_namei+0x379>
		}
		if (!permission(dir, MAY_WRITE)) {       						// 没有写权限，放回i节点
   1360b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1360f:	83 ec 08             	sub    $0x8,%esp
   13612:	6a 02                	push   $0x2
   13614:	50                   	push   %eax
   13615:	e8 3a f4 ff ff       	call   12a54 <permission>
   1361a:	83 c4 10             	add    $0x10,%esp
   1361d:	85 c0                	test   %eax,%eax
   1361f:	75 1a                	jne    1363b <open_namei+0x132>
			iput(dir);
   13621:	8b 44 24 04          	mov    0x4(%esp),%eax
   13625:	83 ec 0c             	sub    $0xc,%esp
   13628:	50                   	push   %eax
   13629:	e8 8e b0 ff ff       	call   e6bc <iput>
   1362e:	83 c4 10             	add    $0x10,%esp
			return -EACCES;
   13631:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   13636:	e9 47 02 00 00       	jmp    13882 <open_namei+0x379>
		}
		// 现在我们确定了是创建操作并且有写操作许可。因此我们就在目录i节点对应设备上申请一个新的i节点给路径名上指定的文件使用。
		// 若失败则放回目录的i节点，并返回没有空间出错码。否则使用该新i节点，对其进行初始设置：置节点的用户id；对应节点访问模式；
		// 置已修改标志。然后并在指定目录dir中添加一个新目录项。
		inode = new_inode(dir->i_dev);
   1363b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1363f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13643:	0f b7 c0             	movzwl %ax,%eax
   13646:	83 ec 0c             	sub    $0xc,%esp
   13649:	50                   	push   %eax
   1364a:	e8 1b 1b 00 00       	call   1516a <new_inode>
   1364f:	83 c4 10             	add    $0x10,%esp
   13652:	89 44 24 10          	mov    %eax,0x10(%esp)
		if (!inode) {
   13656:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1365b:	75 1a                	jne    13677 <open_namei+0x16e>
			iput(dir);
   1365d:	8b 44 24 04          	mov    0x4(%esp),%eax
   13661:	83 ec 0c             	sub    $0xc,%esp
   13664:	50                   	push   %eax
   13665:	e8 52 b0 ff ff       	call   e6bc <iput>
   1366a:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   1366d:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13672:	e9 0b 02 00 00       	jmp    13882 <open_namei+0x379>
		}
		inode->i_uid = current->euid;
   13677:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1367c:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   13683:	8b 44 24 10          	mov    0x10(%esp),%eax
   13687:	66 89 50 02          	mov    %dx,0x2(%eax)
		inode->i_mode = mode;
   1368b:	8b 44 24 38          	mov    0x38(%esp),%eax
   1368f:	89 c2                	mov    %eax,%edx
   13691:	8b 44 24 10          	mov    0x10(%esp),%eax
   13695:	66 89 10             	mov    %dx,(%eax)
		inode->i_dirt = 1;
   13698:	8b 44 24 10          	mov    0x10(%esp),%eax
   1369c:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		bh = add_entry(dir, basename, namelen, &de);
   136a0:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   136a4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   136a8:	8b 44 24 04          	mov    0x4(%esp),%eax
   136ac:	89 e3                	mov    %esp,%ebx
   136ae:	53                   	push   %ebx
   136af:	51                   	push   %ecx
   136b0:	52                   	push   %edx
   136b1:	50                   	push   %eax
   136b2:	e8 0f f7 ff ff       	call   12dc6 <add_entry>
   136b7:	83 c4 10             	add    $0x10,%esp
   136ba:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		// 如果返回的应该含有新目录项的调整缓冲区指针为NULL，则表示添加目录项操作失败。于是将该新i节点的引用连接计数减1,放回该
		// i节点与目录的i节点并返回出错码退出。否则说明添加目录项操作成功。于是我们来设置该新目录项的一些初始值：置i节点号为新申
		// 请到的i节点的号码；并置高速缓冲区修改标志。然后释放该高速缓冲区，放回目录的i节点。返回新目录项的i节点指针，并成功退出。
		if (!bh) {
   136be:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   136c3:	75 3b                	jne    13700 <open_namei+0x1f7>
			inode->i_nlinks--;
   136c5:	8b 44 24 10          	mov    0x10(%esp),%eax
   136c9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   136cd:	8d 50 ff             	lea    -0x1(%eax),%edx
   136d0:	8b 44 24 10          	mov    0x10(%esp),%eax
   136d4:	88 50 0d             	mov    %dl,0xd(%eax)
			iput(inode);
   136d7:	83 ec 0c             	sub    $0xc,%esp
   136da:	ff 74 24 1c          	pushl  0x1c(%esp)
   136de:	e8 d9 af ff ff       	call   e6bc <iput>
   136e3:	83 c4 10             	add    $0x10,%esp
			iput(dir);
   136e6:	8b 44 24 04          	mov    0x4(%esp),%eax
   136ea:	83 ec 0c             	sub    $0xc,%esp
   136ed:	50                   	push   %eax
   136ee:	e8 c9 af ff ff       	call   e6bc <iput>
   136f3:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   136f6:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   136fb:	e9 82 01 00 00       	jmp    13882 <open_namei+0x379>
		}
		de->inode = inode->i_num;
   13700:	8b 04 24             	mov    (%esp),%eax
   13703:	8b 54 24 10          	mov    0x10(%esp),%edx
   13707:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   1370b:	66 89 10             	mov    %dx,(%eax)
		bh->b_dirt = 1;
   1370e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13712:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   13716:	83 ec 0c             	sub    $0xc,%esp
   13719:	ff 74 24 28          	pushl  0x28(%esp)
   1371d:	e8 2b bf ff ff       	call   f64d <brelse>
   13722:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13725:	8b 44 24 04          	mov    0x4(%esp),%eax
   13729:	83 ec 0c             	sub    $0xc,%esp
   1372c:	50                   	push   %eax
   1372d:	e8 8a af ff ff       	call   e6bc <iput>
   13732:	83 c4 10             	add    $0x10,%esp
		*res_inode = inode;
   13735:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13739:	8b 54 24 10          	mov    0x10(%esp),%edx
   1373d:	89 10                	mov    %edx,(%eax)
		return 0;
   1373f:	b8 00 00 00 00       	mov    $0x0,%eax
   13744:	e9 39 01 00 00       	jmp    13882 <open_namei+0x379>
    }
	// 若上面(411行)在目录中取文件名对应目录项结构的操作成功(即bh不为NULL),则说明指定打开的文件已经存在.于是取出该目录项的i节点和其所在设备号,并释放
	// 该高速缓冲区以及放回目录的i节点.如果此时独占操作标志O_EXCL置位,但现在文件已经存在,则返回文件已存在出错码退出.
	inr = de->inode;
   13749:	8b 04 24             	mov    (%esp),%eax
   1374c:	0f b7 00             	movzwl (%eax),%eax
   1374f:	0f b7 c0             	movzwl %ax,%eax
   13752:	89 44 24 18          	mov    %eax,0x18(%esp)
	dev = dir->i_dev;
   13756:	8b 44 24 04          	mov    0x4(%esp),%eax
   1375a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1375e:	0f b7 c0             	movzwl %ax,%eax
   13761:	89 44 24 14          	mov    %eax,0x14(%esp)
	brelse(bh);
   13765:	83 ec 0c             	sub    $0xc,%esp
   13768:	ff 74 24 28          	pushl  0x28(%esp)
   1376c:	e8 dc be ff ff       	call   f64d <brelse>
   13771:	83 c4 10             	add    $0x10,%esp
	if (flag & O_EXCL) {
   13774:	8b 44 24 34          	mov    0x34(%esp),%eax
   13778:	25 80 00 00 00       	and    $0x80,%eax
   1377d:	85 c0                	test   %eax,%eax
   1377f:	74 1a                	je     1379b <open_namei+0x292>
		iput(dir);
   13781:	8b 44 24 04          	mov    0x4(%esp),%eax
   13785:	83 ec 0c             	sub    $0xc,%esp
   13788:	50                   	push   %eax
   13789:	e8 2e af ff ff       	call   e6bc <iput>
   1378e:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13791:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13796:	e9 e7 00 00 00       	jmp    13882 <open_namei+0x379>
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
   1379b:	83 ec 08             	sub    $0x8,%esp
   1379e:	ff 74 24 20          	pushl  0x20(%esp)
   137a2:	ff 74 24 20          	pushl  0x20(%esp)
   137a6:	e8 94 b2 ff ff       	call   ea3f <iget>
   137ab:	83 c4 10             	add    $0x10,%esp
   137ae:	89 c2                	mov    %eax,%edx
   137b0:	8b 44 24 04          	mov    0x4(%esp),%eax
   137b4:	83 ec 08             	sub    $0x8,%esp
   137b7:	52                   	push   %edx
   137b8:	50                   	push   %eax
   137b9:	e8 36 f8 ff ff       	call   12ff4 <follow_link>
   137be:	83 c4 10             	add    $0x10,%esp
   137c1:	89 44 24 10          	mov    %eax,0x10(%esp)
   137c5:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   137ca:	75 0a                	jne    137d6 <open_namei+0x2cd>
		return -EACCES;
   137cc:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   137d1:	e9 ac 00 00 00       	jmp    13882 <open_namei+0x379>
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   137d6:	8b 44 24 10          	mov    0x10(%esp),%eax
   137da:	0f b7 00             	movzwl (%eax),%eax
   137dd:	0f b7 c0             	movzwl %ax,%eax
   137e0:	25 00 f0 00 00       	and    $0xf000,%eax
   137e5:	3d 00 40 00 00       	cmp    $0x4000,%eax
   137ea:	75 0b                	jne    137f7 <open_namei+0x2ee>
   137ec:	8b 44 24 34          	mov    0x34(%esp),%eax
   137f0:	83 e0 03             	and    $0x3,%eax
   137f3:	85 c0                	test   %eax,%eax
   137f5:	75 25                	jne    1381c <open_namei+0x313>
	    !permission(inode, ACC_MODE(flag))) {
   137f7:	8b 44 24 34          	mov    0x34(%esp),%eax
   137fb:	83 e0 03             	and    $0x3,%eax
   137fe:	0f b6 80 80 3b 02 00 	movzbl 0x23b80(%eax),%eax
   13805:	0f be c0             	movsbl %al,%eax
   13808:	83 ec 08             	sub    $0x8,%esp
   1380b:	50                   	push   %eax
   1380c:	ff 74 24 1c          	pushl  0x1c(%esp)
   13810:	e8 3f f2 ff ff       	call   12a54 <permission>
   13815:	83 c4 10             	add    $0x10,%esp
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   13818:	85 c0                	test   %eax,%eax
   1381a:	75 16                	jne    13832 <open_namei+0x329>
		iput(inode);
   1381c:	83 ec 0c             	sub    $0xc,%esp
   1381f:	ff 74 24 1c          	pushl  0x1c(%esp)
   13823:	e8 94 ae ff ff       	call   e6bc <iput>
   13828:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1382b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13830:	eb 50                	jmp    13882 <open_namei+0x379>
	}
	// 接着我们更新该i节点的访问时间字段值为当前时间.如果设立了截0标志,则将该i节点的文件长度截为0.最后返回该目录项i节点的指针.并返回0(成功).
	inode->i_atime = CURRENT_TIME;
   13832:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   13837:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   1383d:	01 d0                	add    %edx,%eax
   1383f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13844:	f7 e2                	mul    %edx
   13846:	c1 ea 05             	shr    $0x5,%edx
   13849:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   1384e:	01 c2                	add    %eax,%edx
   13850:	8b 44 24 10          	mov    0x10(%esp),%eax
   13854:	89 50 28             	mov    %edx,0x28(%eax)
	if (flag & O_TRUNC)
   13857:	8b 44 24 34          	mov    0x34(%esp),%eax
   1385b:	25 00 02 00 00       	and    $0x200,%eax
   13860:	85 c0                	test   %eax,%eax
   13862:	74 0f                	je     13873 <open_namei+0x36a>
		truncate(inode);
   13864:	83 ec 0c             	sub    $0xc,%esp
   13867:	ff 74 24 1c          	pushl  0x1c(%esp)
   1386b:	e8 03 20 00 00       	call   15873 <truncate>
   13870:	83 c4 10             	add    $0x10,%esp
	*res_inode = inode;
   13873:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13877:	8b 54 24 10          	mov    0x10(%esp),%edx
   1387b:	89 10                	mov    %edx,(%eax)
	return 0;
   1387d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13882:	83 c4 28             	add    $0x28,%esp
   13885:	5b                   	pop    %ebx
   13886:	c3                   	ret    

00013887 <sys_mknod>:

// 创建一个设备特殊文件或普通文件节点（node）。
// 该函数创建名称为filename，由mode和dev指定的文件系统节点（普通文件、设备特殊文件或命名管道）。
// 参数：filename - 路径名；mode - 指定使用许可以及所创建节点的类型；dev - 设备号。
int sys_mknod(const char * filename, int mode, int dev)
{
   13887:	53                   	push   %ebx
   13888:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先检查操作许可和参数的有效性并取路径名中顶层目录的i节点。如果不是超级用户，则返回访问许可出错码。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!suser())
   1388b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13890:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   13897:	66 85 c0             	test   %ax,%ax
   1389a:	74 0a                	je     138a6 <sys_mknod+0x1f>
		return -EPERM;
   1389c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   138a1:	e9 21 02 00 00       	jmp    13ac7 <sys_mknod+0x240>
	// 如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(filename, &namelen, &basename, NULL)))
   138a6:	6a 00                	push   $0x0
   138a8:	8d 44 24 18          	lea    0x18(%esp),%eax
   138ac:	50                   	push   %eax
   138ad:	8d 44 24 18          	lea    0x18(%esp),%eax
   138b1:	50                   	push   %eax
   138b2:	ff 74 24 3c          	pushl  0x3c(%esp)
   138b6:	e8 4a fa ff ff       	call   13305 <dir_namei>
   138bb:	83 c4 10             	add    $0x10,%esp
   138be:	89 44 24 0c          	mov    %eax,0xc(%esp)
   138c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138c6:	85 c0                	test   %eax,%eax
   138c8:	75 0a                	jne    138d4 <sys_mknod+0x4d>
		return -ENOENT;
   138ca:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   138cf:	e9 f3 01 00 00       	jmp    13ac7 <sys_mknod+0x240>
	// 如果最顶端的文件名长度为0，则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   138d4:	8b 44 24 10          	mov    0x10(%esp),%eax
   138d8:	85 c0                	test   %eax,%eax
   138da:	75 1a                	jne    138f6 <sys_mknod+0x6f>
		iput(dir);
   138dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138e0:	83 ec 0c             	sub    $0xc,%esp
   138e3:	50                   	push   %eax
   138e4:	e8 d3 ad ff ff       	call   e6bc <iput>
   138e9:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   138ec:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   138f1:	e9 d1 01 00 00       	jmp    13ac7 <sys_mknod+0x240>
	}
	// 如果在该目录中没有写的权限，则放回该目录的i节点，返回访问许可出错码退出。
	if (!permission(dir, MAY_WRITE)) {
   138f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138fa:	83 ec 08             	sub    $0x8,%esp
   138fd:	6a 02                	push   $0x2
   138ff:	50                   	push   %eax
   13900:	e8 4f f1 ff ff       	call   12a54 <permission>
   13905:	83 c4 10             	add    $0x10,%esp
   13908:	85 c0                	test   %eax,%eax
   1390a:	75 1a                	jne    13926 <sys_mknod+0x9f>
		iput(dir);
   1390c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13910:	83 ec 0c             	sub    $0xc,%esp
   13913:	50                   	push   %eax
   13914:	e8 a3 ad ff ff       	call   e6bc <iput>
   13919:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1391c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13921:	e9 a1 01 00 00       	jmp    13ac7 <sys_mknod+0x240>
	}
	// 然后我们搜索一下路径名指定的文件是否已经存在。若已经存在则不能创建同名文件节点。如果对应路径名上最后的文件名的
	// 目录项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在的出错退出。
	bh = find_entry(&dir, basename, namelen, &de);
   13926:	8b 54 24 10          	mov    0x10(%esp),%edx
   1392a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1392e:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   13932:	51                   	push   %ecx
   13933:	52                   	push   %edx
   13934:	50                   	push   %eax
   13935:	8d 44 24 18          	lea    0x18(%esp),%eax
   13939:	50                   	push   %eax
   1393a:	e8 49 f2 ff ff       	call   12b88 <find_entry>
   1393f:	83 c4 10             	add    $0x10,%esp
   13942:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   13946:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1394b:	74 29                	je     13976 <sys_mknod+0xef>
		brelse(bh);
   1394d:	83 ec 0c             	sub    $0xc,%esp
   13950:	ff 74 24 28          	pushl  0x28(%esp)
   13954:	e8 f4 bc ff ff       	call   f64d <brelse>
   13959:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1395c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13960:	83 ec 0c             	sub    $0xc,%esp
   13963:	50                   	push   %eax
   13964:	e8 53 ad ff ff       	call   e6bc <iput>
   13969:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   1396c:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13971:	e9 51 01 00 00       	jmp    13ac7 <sys_mknod+0x240>
	}
	// 否则我们就申请一个新的i节点，并设置该i节点的属性模式。
	inode = new_inode(dir->i_dev);
   13976:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1397a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1397e:	0f b7 c0             	movzwl %ax,%eax
   13981:	83 ec 0c             	sub    $0xc,%esp
   13984:	50                   	push   %eax
   13985:	e8 e0 17 00 00       	call   1516a <new_inode>
   1398a:	83 c4 10             	add    $0x10,%esp
   1398d:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {
   13991:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13996:	75 1a                	jne    139b2 <sys_mknod+0x12b>
		iput(dir);
   13998:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1399c:	83 ec 0c             	sub    $0xc,%esp
   1399f:	50                   	push   %eax
   139a0:	e8 17 ad ff ff       	call   e6bc <iput>
   139a5:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   139a8:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   139ad:	e9 15 01 00 00       	jmp    13ac7 <sys_mknod+0x240>
	}
	inode->i_mode = mode;
   139b2:	8b 44 24 34          	mov    0x34(%esp),%eax
   139b6:	89 c2                	mov    %eax,%edx
   139b8:	8b 44 24 18          	mov    0x18(%esp),%eax
   139bc:	66 89 10             	mov    %dx,(%eax)
	// 如果要创建的是块设备文件或者是字符设备文件，则令i节点的直接逻辑块指针0等于设备号。即对于设备文件来说，
	// 其i节点的i_zone[0]中存放的是该设备文件所定义设备的设备号。
	if (S_ISBLK(mode) || S_ISCHR(mode))
   139bf:	8b 44 24 34          	mov    0x34(%esp),%eax
   139c3:	25 00 f0 00 00       	and    $0xf000,%eax
   139c8:	3d 00 60 00 00       	cmp    $0x6000,%eax
   139cd:	74 10                	je     139df <sys_mknod+0x158>
   139cf:	8b 44 24 34          	mov    0x34(%esp),%eax
   139d3:	25 00 f0 00 00       	and    $0xf000,%eax
   139d8:	3d 00 20 00 00       	cmp    $0x2000,%eax
   139dd:	75 0e                	jne    139ed <sys_mknod+0x166>
		inode->i_zone[0] = dev;
   139df:	8b 44 24 38          	mov    0x38(%esp),%eax
   139e3:	89 c2                	mov    %eax,%edx
   139e5:	8b 44 24 18          	mov    0x18(%esp),%eax
   139e9:	66 89 50 0e          	mov    %dx,0xe(%eax)
	// 设置该i节点的修改时间、访问时间为当前时间，并设置i节点已修改标志。
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   139ed:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   139f2:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   139f8:	01 d0                	add    %edx,%eax
   139fa:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   139ff:	f7 e2                	mul    %edx
   13a01:	c1 ea 05             	shr    $0x5,%edx
   13a04:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   13a09:	01 c2                	add    %eax,%edx
   13a0b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a0f:	89 50 28             	mov    %edx,0x28(%eax)
   13a12:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a16:	8b 50 28             	mov    0x28(%eax),%edx
   13a19:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a1d:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
   13a20:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a24:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 接着为这个新的i节点在目录中新添加一个目录项。如果失败（包含该目录项的高速缓冲块指针为NULL），则放回目录的i节点；
	// 把所申请的i节点引用连接计数复位，并放回该i节点，返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13a28:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   13a2c:	8b 54 24 14          	mov    0x14(%esp),%edx
   13a30:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a34:	8d 5c 24 08          	lea    0x8(%esp),%ebx
   13a38:	53                   	push   %ebx
   13a39:	51                   	push   %ecx
   13a3a:	52                   	push   %edx
   13a3b:	50                   	push   %eax
   13a3c:	e8 85 f3 ff ff       	call   12dc6 <add_entry>
   13a41:	83 c4 10             	add    $0x10,%esp
   13a44:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13a48:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13a4d:	75 2e                	jne    13a7d <sys_mknod+0x1f6>
		iput(dir);
   13a4f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a53:	83 ec 0c             	sub    $0xc,%esp
   13a56:	50                   	push   %eax
   13a57:	e8 60 ac ff ff       	call   e6bc <iput>
   13a5c:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13a5f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a63:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13a67:	83 ec 0c             	sub    $0xc,%esp
   13a6a:	ff 74 24 24          	pushl  0x24(%esp)
   13a6e:	e8 49 ac ff ff       	call   e6bc <iput>
   13a73:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13a76:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13a7b:	eb 4a                	jmp    13ac7 <sys_mknod+0x240>
	}
	// 现在添加目录项操作也成功了，于是我们来设置这个目录项内容。令该目录项的i节点字段等于新i节点号，并置高速缓冲区已修
	// 改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13a7d:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a81:	8b 54 24 18          	mov    0x18(%esp),%edx
   13a85:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13a89:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13a8c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13a90:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	iput(dir);
   13a94:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a98:	83 ec 0c             	sub    $0xc,%esp
   13a9b:	50                   	push   %eax
   13a9c:	e8 1b ac ff ff       	call   e6bc <iput>
   13aa1:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13aa4:	83 ec 0c             	sub    $0xc,%esp
   13aa7:	ff 74 24 24          	pushl  0x24(%esp)
   13aab:	e8 0c ac ff ff       	call   e6bc <iput>
   13ab0:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13ab3:	83 ec 0c             	sub    $0xc,%esp
   13ab6:	ff 74 24 28          	pushl  0x28(%esp)
   13aba:	e8 8e bb ff ff       	call   f64d <brelse>
   13abf:	83 c4 10             	add    $0x10,%esp
	return 0;
   13ac2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ac7:	83 c4 28             	add    $0x28,%esp
   13aca:	5b                   	pop    %ebx
   13acb:	c3                   	ret    

00013acc <sys_mkdir>:

// 创建一个目录。
// 参数：pathname - 路径名；mode - 目录使用的权限属性。
// 返回：成功则返回0,否则返回出错码。
int sys_mkdir(const char * pathname, int mode)
{
   13acc:	53                   	push   %ebx
   13acd:	83 ec 28             	sub    $0x28,%esp
	struct m_inode * dir, * inode;
	struct buffer_head * bh, *dir_block;
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(pathname,&namelen,&basename, NULL)))
   13ad0:	6a 00                	push   $0x0
   13ad2:	8d 44 24 14          	lea    0x14(%esp),%eax
   13ad6:	50                   	push   %eax
   13ad7:	8d 44 24 14          	lea    0x14(%esp),%eax
   13adb:	50                   	push   %eax
   13adc:	ff 74 24 3c          	pushl  0x3c(%esp)
   13ae0:	e8 20 f8 ff ff       	call   13305 <dir_namei>
   13ae5:	83 c4 10             	add    $0x10,%esp
   13ae8:	89 44 24 08          	mov    %eax,0x8(%esp)
   13aec:	8b 44 24 08          	mov    0x8(%esp),%eax
   13af0:	85 c0                	test   %eax,%eax
   13af2:	75 0a                	jne    13afe <sys_mkdir+0x32>
		return -ENOENT;
   13af4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13af9:	e9 63 03 00 00       	jmp    13e61 <sys_mkdir+0x395>
	// 如果最顶端文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13afe:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13b02:	85 c0                	test   %eax,%eax
   13b04:	75 1a                	jne    13b20 <sys_mkdir+0x54>
		iput(dir);
   13b06:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b0a:	83 ec 0c             	sub    $0xc,%esp
   13b0d:	50                   	push   %eax
   13b0e:	e8 a9 ab ff ff       	call   e6bc <iput>
   13b13:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   13b16:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13b1b:	e9 41 03 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	// 如果在该目录中没有写的权限，则放回该目录i节点，返回访问许可出错码退出。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!permission(dir, MAY_WRITE)) {
   13b20:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b24:	83 ec 08             	sub    $0x8,%esp
   13b27:	6a 02                	push   $0x2
   13b29:	50                   	push   %eax
   13b2a:	e8 25 ef ff ff       	call   12a54 <permission>
   13b2f:	83 c4 10             	add    $0x10,%esp
   13b32:	85 c0                	test   %eax,%eax
   13b34:	75 1a                	jne    13b50 <sys_mkdir+0x84>
		iput(dir);
   13b36:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b3a:	83 ec 0c             	sub    $0xc,%esp
   13b3d:	50                   	push   %eax
   13b3e:	e8 79 ab ff ff       	call   e6bc <iput>
   13b43:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13b46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13b4b:	e9 11 03 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	// 然后我们搜索一下路径名指定的目录名是否已经存在。若已经存在则不能创建同名目录节点。如果对应路径名上最后的目录名的目录
	// 项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在 的出错码退出。否则我们就申请一个新的i节
	// 点，并设置该i节点的属性模式：置该新i节点对应的文件长度为32字节（2个目录项的大小）、置节点已修改标志，以及节点的修改
	// 时间和访问时间。2个目录项分别用于'.'和'..'目录。
	bh = find_entry(&dir, basename, namelen, &de);
   13b50:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13b54:	8b 44 24 10          	mov    0x10(%esp),%eax
   13b58:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   13b5c:	51                   	push   %ecx
   13b5d:	52                   	push   %edx
   13b5e:	50                   	push   %eax
   13b5f:	8d 44 24 14          	lea    0x14(%esp),%eax
   13b63:	50                   	push   %eax
   13b64:	e8 1f f0 ff ff       	call   12b88 <find_entry>
   13b69:	83 c4 10             	add    $0x10,%esp
   13b6c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   13b70:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13b75:	74 29                	je     13ba0 <sys_mkdir+0xd4>
		brelse(bh);
   13b77:	83 ec 0c             	sub    $0xc,%esp
   13b7a:	ff 74 24 28          	pushl  0x28(%esp)
   13b7e:	e8 ca ba ff ff       	call   f64d <brelse>
   13b83:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13b86:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b8a:	83 ec 0c             	sub    $0xc,%esp
   13b8d:	50                   	push   %eax
   13b8e:	e8 29 ab ff ff       	call   e6bc <iput>
   13b93:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13b96:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13b9b:	e9 c1 02 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	inode = new_inode(dir->i_dev);
   13ba0:	8b 44 24 08          	mov    0x8(%esp),%eax
   13ba4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13ba8:	0f b7 c0             	movzwl %ax,%eax
   13bab:	83 ec 0c             	sub    $0xc,%esp
   13bae:	50                   	push   %eax
   13baf:	e8 b6 15 00 00       	call   1516a <new_inode>
   13bb4:	83 c4 10             	add    $0x10,%esp
   13bb7:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {           						// 若不成功则放回目录的i节点，返回无空间出错码。
   13bbb:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13bc0:	75 1a                	jne    13bdc <sys_mkdir+0x110>
		iput(dir);
   13bc2:	8b 44 24 08          	mov    0x8(%esp),%eax
   13bc6:	83 ec 0c             	sub    $0xc,%esp
   13bc9:	50                   	push   %eax
   13bca:	e8 ed aa ff ff       	call   e6bc <iput>
   13bcf:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13bd2:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13bd7:	e9 85 02 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	inode->i_size = 32;
   13bdc:	8b 44 24 18          	mov    0x18(%esp),%eax
   13be0:	c7 40 04 20 00 00 00 	movl   $0x20,0x4(%eax)
	inode->i_dirt = 1;
   13be7:	8b 44 24 18          	mov    0x18(%esp),%eax
   13beb:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   13bef:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   13bf4:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   13bfa:	01 d0                	add    %edx,%eax
   13bfc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13c01:	f7 e2                	mul    %edx
   13c03:	c1 ea 05             	shr    $0x5,%edx
   13c06:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   13c0b:	01 c2                	add    %eax,%edx
   13c0d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c11:	89 50 28             	mov    %edx,0x28(%eax)
   13c14:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c18:	8b 50 28             	mov    0x28(%eax),%edx
   13c1b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c1f:	89 50 08             	mov    %edx,0x8(%eax)
	// 接着为该新i节点申请一用于保存目录项数据的磁盘块，并令i节点的第一个直接块指针等于该块号。如果申请失败则放回对应目录
	// 的i节点；复位新申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。否则置该新的i节点已修改标志。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   13c22:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c26:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13c2a:	0f b7 c0             	movzwl %ax,%eax
   13c2d:	83 ec 0c             	sub    $0xc,%esp
   13c30:	50                   	push   %eax
   13c31:	e8 ff 11 00 00       	call   14e35 <new_block>
   13c36:	83 c4 10             	add    $0x10,%esp
   13c39:	89 c2                	mov    %eax,%edx
   13c3b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c3f:	66 89 50 0e          	mov    %dx,0xe(%eax)
   13c43:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c47:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13c4b:	66 85 c0             	test   %ax,%ax
   13c4e:	75 3b                	jne    13c8b <sys_mkdir+0x1bf>
		iput(dir);
   13c50:	8b 44 24 08          	mov    0x8(%esp),%eax
   13c54:	83 ec 0c             	sub    $0xc,%esp
   13c57:	50                   	push   %eax
   13c58:	e8 5f aa ff ff       	call   e6bc <iput>
   13c5d:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13c60:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c64:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13c68:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c6b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c6f:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13c72:	83 ec 0c             	sub    $0xc,%esp
   13c75:	ff 74 24 24          	pushl  0x24(%esp)
   13c79:	e8 3e aa ff ff       	call   e6bc <iput>
   13c7e:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13c81:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13c86:	e9 d6 01 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	inode->i_dirt = 1;
   13c8b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c8f:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；释放申请的磁盘块；复位新
	// 申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。
	if (!(dir_block = bread(inode->i_dev, inode->i_zone[0]))) {
   13c93:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c97:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13c9b:	0f b7 d0             	movzwl %ax,%edx
   13c9e:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ca2:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13ca6:	0f b7 c0             	movzwl %ax,%eax
   13ca9:	83 ec 08             	sub    $0x8,%esp
   13cac:	52                   	push   %edx
   13cad:	50                   	push   %eax
   13cae:	e8 f0 b9 ff ff       	call   f6a3 <bread>
   13cb3:	83 c4 10             	add    $0x10,%esp
   13cb6:	89 44 24 14          	mov    %eax,0x14(%esp)
   13cba:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   13cbf:	75 3b                	jne    13cfc <sys_mkdir+0x230>
		iput(dir);
   13cc1:	8b 44 24 08          	mov    0x8(%esp),%eax
   13cc5:	83 ec 0c             	sub    $0xc,%esp
   13cc8:	50                   	push   %eax
   13cc9:	e8 ee a9 ff ff       	call   e6bc <iput>
   13cce:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13cd1:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cd5:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13cd9:	8d 50 ff             	lea    -0x1(%eax),%edx
   13cdc:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ce0:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13ce3:	83 ec 0c             	sub    $0xc,%esp
   13ce6:	ff 74 24 24          	pushl  0x24(%esp)
   13cea:	e8 cd a9 ff ff       	call   e6bc <iput>
   13cef:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   13cf2:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   13cf7:	e9 65 01 00 00       	jmp    13e61 <sys_mkdir+0x395>
	}
	// 然后我们在缓冲块中建立起所创建目录文件中的2个默认的新目录项（'.'和'..'）结构数据。首先令de指向存放目录项的数据块，然
	// 后置该目录项的i节点号字段等于新申请的i节点号，名字字段等于“.”。然后de指向下一个目录项结构，并在该结构中存放上级目录的
	// i节点号和名字“..”。然后设置该高速缓冲块已修改标志，并释放该缓冲区块。再初始化设置新i节点的模式字段，并置该i节点已修改
	// 标志。
	de = (struct dir_entry *) dir_block->b_data;
   13cfc:	8b 44 24 14          	mov    0x14(%esp),%eax
   13d00:	8b 00                	mov    (%eax),%eax
   13d02:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = inode->i_num;         				// 设置'.'目录项。
   13d06:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d0a:	8b 54 24 18          	mov    0x18(%esp),%edx
   13d0e:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13d12:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, ".");
   13d15:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d19:	83 c0 02             	add    $0x2,%eax
   13d1c:	83 ec 08             	sub    $0x8,%esp
   13d1f:	68 85 3b 02 00       	push   $0x23b85
   13d24:	50                   	push   %eax
   13d25:	e8 e7 ec ff ff       	call   12a11 <strcpy>
   13d2a:	83 c4 10             	add    $0x10,%esp
	de++;
   13d2d:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d31:	83 c0 10             	add    $0x10,%eax
   13d34:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = dir->i_num;         				// 设置'..'目录项。
   13d38:	8b 54 24 08          	mov    0x8(%esp),%edx
   13d3c:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d40:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13d44:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, "..");
   13d47:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d4b:	83 c0 02             	add    $0x2,%eax
   13d4e:	83 ec 08             	sub    $0x8,%esp
   13d51:	68 87 3b 02 00       	push   $0x23b87
   13d56:	50                   	push   %eax
   13d57:	e8 b5 ec ff ff       	call   12a11 <strcpy>
   13d5c:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 2;
   13d5f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d63:	c6 40 0d 02          	movb   $0x2,0xd(%eax)
	dir_block->b_dirt = 1;
   13d67:	8b 44 24 14          	mov    0x14(%esp),%eax
   13d6b:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(dir_block);
   13d6f:	83 ec 0c             	sub    $0xc,%esp
   13d72:	ff 74 24 20          	pushl  0x20(%esp)
   13d76:	e8 d2 b8 ff ff       	call   f64d <brelse>
   13d7b:	83 c4 10             	add    $0x10,%esp
	inode->i_mode = I_DIRECTORY | (mode & 0777 & ~current->umask);
   13d7e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13d82:	66 25 ff 01          	and    $0x1ff,%ax
   13d86:	89 c2                	mov    %eax,%edx
   13d88:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   13d8d:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   13d94:	f7 d0                	not    %eax
   13d96:	21 d0                	and    %edx,%eax
   13d98:	80 cc 40             	or     $0x40,%ah
   13d9b:	89 c2                	mov    %eax,%edx
   13d9d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13da1:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   13da4:	8b 44 24 18          	mov    0x18(%esp),%eax
   13da8:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 现在我们在指定目录中新添加一个目录项，用于存放新建目录的i节点和目录名。如果失败（包含该目录项的高速缓冲区指针为NULL），
	// 则放回目录的i节点；所申请的i节点引用连接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13dac:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   13db0:	8b 54 24 10          	mov    0x10(%esp),%edx
   13db4:	8b 44 24 08          	mov    0x8(%esp),%eax
   13db8:	8d 5c 24 04          	lea    0x4(%esp),%ebx
   13dbc:	53                   	push   %ebx
   13dbd:	51                   	push   %ecx
   13dbe:	52                   	push   %edx
   13dbf:	50                   	push   %eax
   13dc0:	e8 01 f0 ff ff       	call   12dc6 <add_entry>
   13dc5:	83 c4 10             	add    $0x10,%esp
   13dc8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13dcc:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13dd1:	75 2e                	jne    13e01 <sys_mkdir+0x335>
		iput(dir);
   13dd3:	8b 44 24 08          	mov    0x8(%esp),%eax
   13dd7:	83 ec 0c             	sub    $0xc,%esp
   13dda:	50                   	push   %eax
   13ddb:	e8 dc a8 ff ff       	call   e6bc <iput>
   13de0:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13de3:	8b 44 24 18          	mov    0x18(%esp),%eax
   13de7:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13deb:	83 ec 0c             	sub    $0xc,%esp
   13dee:	ff 74 24 24          	pushl  0x24(%esp)
   13df2:	e8 c5 a8 ff ff       	call   e6bc <iput>
   13df7:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13dfa:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13dff:	eb 60                	jmp    13e61 <sys_mkdir+0x395>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13e01:	8b 44 24 04          	mov    0x4(%esp),%eax
   13e05:	8b 54 24 18          	mov    0x18(%esp),%edx
   13e09:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13e0d:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13e10:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13e14:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	dir->i_nlinks++;
   13e18:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e1c:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   13e20:	83 c2 01             	add    $0x1,%edx
   13e23:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_dirt = 1;
   13e26:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e2a:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   13e2e:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e32:	83 ec 0c             	sub    $0xc,%esp
   13e35:	50                   	push   %eax
   13e36:	e8 81 a8 ff ff       	call   e6bc <iput>
   13e3b:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13e3e:	83 ec 0c             	sub    $0xc,%esp
   13e41:	ff 74 24 24          	pushl  0x24(%esp)
   13e45:	e8 72 a8 ff ff       	call   e6bc <iput>
   13e4a:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13e4d:	83 ec 0c             	sub    $0xc,%esp
   13e50:	ff 74 24 28          	pushl  0x28(%esp)
   13e54:	e8 f4 b7 ff ff       	call   f64d <brelse>
   13e59:	83 c4 10             	add    $0x10,%esp
	return 0;
   13e5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13e61:	83 c4 28             	add    $0x28,%esp
   13e64:	5b                   	pop    %ebx
   13e65:	c3                   	ret    

00013e66 <empty_dir>:
 */
// 检查指定目录是否为空。
// 参数：inode - 指定目录的i节点指针。
// 返回：1 - 目录中是空的；0 - 不空。
static int empty_dir(struct m_inode * inode)
{
   13e66:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
   13e69:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e6d:	8b 40 04             	mov    0x4(%eax),%eax
   13e70:	c1 e8 04             	shr    $0x4,%eax
   13e73:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (len < 2 || !inode->i_zone[0] ||
   13e77:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   13e7c:	7e 3b                	jle    13eb9 <empty_dir+0x53>
   13e7e:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e82:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13e86:	66 85 c0             	test   %ax,%ax
   13e89:	74 2e                	je     13eb9 <empty_dir+0x53>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   13e8b:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e8f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13e93:	0f b7 d0             	movzwl %ax,%edx
   13e96:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e9a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13e9e:	0f b7 c0             	movzwl %ax,%eax
	if (len < 2 || !inode->i_zone[0] ||
   13ea1:	83 ec 08             	sub    $0x8,%esp
   13ea4:	52                   	push   %edx
   13ea5:	50                   	push   %eax
   13ea6:	e8 f8 b7 ff ff       	call   f6a3 <bread>
   13eab:	83 c4 10             	add    $0x10,%esp
   13eae:	89 44 24 18          	mov    %eax,0x18(%esp)
   13eb2:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13eb7:	75 26                	jne    13edf <empty_dir+0x79>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13eb9:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ebd:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13ec1:	0f b7 c0             	movzwl %ax,%eax
   13ec4:	83 ec 08             	sub    $0x8,%esp
   13ec7:	50                   	push   %eax
   13ec8:	68 8c 3b 02 00       	push   $0x23b8c
   13ecd:	e8 74 4d ff ff       	call   8c46 <printk>
   13ed2:	83 c4 10             	add    $0x10,%esp
		return 0;
   13ed5:	b8 00 00 00 00       	mov    $0x0,%eax
   13eda:	e9 74 01 00 00       	jmp    14053 <empty_dir+0x1ed>
	}
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
   13edf:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ee3:	8b 00                	mov    (%eax),%eax
   13ee5:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13ee9:	8b 44 24 14          	mov    0x14(%esp),%eax
   13eed:	0f b7 10             	movzwl (%eax),%edx
   13ef0:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ef4:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   13ef8:	66 39 c2             	cmp    %ax,%dx
   13efb:	75 4a                	jne    13f47 <empty_dir+0xe1>
   13efd:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f01:	83 c0 10             	add    $0x10,%eax
   13f04:	0f b7 00             	movzwl (%eax),%eax
   13f07:	66 85 c0             	test   %ax,%ax
   13f0a:	74 3b                	je     13f47 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13f0c:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f10:	83 c0 02             	add    $0x2,%eax
   13f13:	83 ec 08             	sub    $0x8,%esp
   13f16:	50                   	push   %eax
   13f17:	68 85 3b 02 00       	push   $0x23b85
   13f1c:	e8 0c eb ff ff       	call   12a2d <strcmp>
   13f21:	83 c4 10             	add    $0x10,%esp
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13f24:	85 c0                	test   %eax,%eax
   13f26:	75 1f                	jne    13f47 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13f28:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f2c:	83 c0 10             	add    $0x10,%eax
   13f2f:	83 c0 02             	add    $0x2,%eax
   13f32:	83 ec 08             	sub    $0x8,%esp
   13f35:	50                   	push   %eax
   13f36:	68 87 3b 02 00       	push   $0x23b87
   13f3b:	e8 ed ea ff ff       	call   12a2d <strcmp>
   13f40:	83 c4 10             	add    $0x10,%esp
   13f43:	85 c0                	test   %eax,%eax
   13f45:	74 26                	je     13f6d <empty_dir+0x107>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13f47:	8b 44 24 30          	mov    0x30(%esp),%eax
   13f4b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13f4f:	0f b7 c0             	movzwl %ax,%eax
   13f52:	83 ec 08             	sub    $0x8,%esp
   13f55:	50                   	push   %eax
   13f56:	68 8c 3b 02 00       	push   $0x23b8c
   13f5b:	e8 e6 4c ff ff       	call   8c46 <printk>
   13f60:	83 c4 10             	add    $0x10,%esp
		return 0;
   13f63:	b8 00 00 00 00       	mov    $0x0,%eax
   13f68:	e9 e6 00 00 00       	jmp    14053 <empty_dir+0x1ed>
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
   13f6d:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%esp)
   13f74:	00 
	de += 2;
   13f75:	83 44 24 14 20       	addl   $0x20,0x14(%esp)
	while (nr < len) {
   13f7a:	e9 b2 00 00 00       	jmp    14031 <empty_dir+0x1cb>
		// 如果该块磁盘块中的目录项已经全部检测完毕，则释放该磁盘块的缓冲块，并读取目录数据文件中下一块含有目录项的磁盘块。读取的方
		// 法是根据当前检测的目录项序号nr计算出对应目录项在目录数据文件中的数据块号（nr/DIR_ENTRIES_PER_BLOCK），然后使用bmap()
		// 函数取得对应的盘块号block，再使用读设备块函数bread()把相应盘块读入缓冲块中，并返回该缓冲块的指针。若所读取的相应盘块没有
		// 使用（或已经不用，如文件已经删除等），则继续读下一块，若读不出，则出错返回0.否则让de指向读出块的第1个目录项。
		if ((void *) de >= (void *) (bh->b_data + BLOCK_SIZE)) {
   13f7f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13f83:	8b 00                	mov    (%eax),%eax
   13f85:	05 00 04 00 00       	add    $0x400,%eax
   13f8a:	39 44 24 14          	cmp    %eax,0x14(%esp)
   13f8e:	72 75                	jb     14005 <empty_dir+0x19f>
			brelse(bh);
   13f90:	83 ec 0c             	sub    $0xc,%esp
   13f93:	ff 74 24 24          	pushl  0x24(%esp)
   13f97:	e8 b1 b6 ff ff       	call   f64d <brelse>
   13f9c:	83 c4 10             	add    $0x10,%esp
			block = bmap(inode, nr / DIR_ENTRIES_PER_BLOCK);
   13f9f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13fa3:	c1 e8 06             	shr    $0x6,%eax
   13fa6:	83 ec 08             	sub    $0x8,%esp
   13fa9:	50                   	push   %eax
   13faa:	ff 74 24 3c          	pushl  0x3c(%esp)
   13fae:	e8 d1 a6 ff ff       	call   e684 <bmap>
   13fb3:	83 c4 10             	add    $0x10,%esp
   13fb6:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (!block) {
   13fba:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   13fbf:	75 0d                	jne    13fce <empty_dir+0x168>
				nr += DIR_ENTRIES_PER_BLOCK;
   13fc1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13fc5:	83 c0 40             	add    $0x40,%eax
   13fc8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   13fcc:	eb 63                	jmp    14031 <empty_dir+0x1cb>
			}
			if (!(bh = bread(inode->i_dev, block)))
   13fce:	8b 44 24 30          	mov    0x30(%esp),%eax
   13fd2:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13fd6:	0f b7 c0             	movzwl %ax,%eax
   13fd9:	83 ec 08             	sub    $0x8,%esp
   13fdc:	ff 74 24 14          	pushl  0x14(%esp)
   13fe0:	50                   	push   %eax
   13fe1:	e8 bd b6 ff ff       	call   f6a3 <bread>
   13fe6:	83 c4 10             	add    $0x10,%esp
   13fe9:	89 44 24 18          	mov    %eax,0x18(%esp)
   13fed:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13ff2:	75 07                	jne    13ffb <empty_dir+0x195>
				return 0;
   13ff4:	b8 00 00 00 00       	mov    $0x0,%eax
   13ff9:	eb 58                	jmp    14053 <empty_dir+0x1ed>
			de = (struct dir_entry *) bh->b_data;
   13ffb:	8b 44 24 18          	mov    0x18(%esp),%eax
   13fff:	8b 00                	mov    (%eax),%eax
   14001:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 对于de指向的当前目录项，如果该目录项的i节点号字段不等于0,则表示该目录项目前正被使用，则释放该高速缓冲区，返回0退出。否则，
		// 若还没有查询完该目录中的所有目录项，则把目录项序号nr增1、de指向下一个目录项，继续检测。
		if (de->inode) {
   14005:	8b 44 24 14          	mov    0x14(%esp),%eax
   14009:	0f b7 00             	movzwl (%eax),%eax
   1400c:	66 85 c0             	test   %ax,%ax
   1400f:	74 16                	je     14027 <empty_dir+0x1c1>
			brelse(bh);
   14011:	83 ec 0c             	sub    $0xc,%esp
   14014:	ff 74 24 24          	pushl  0x24(%esp)
   14018:	e8 30 b6 ff ff       	call   f64d <brelse>
   1401d:	83 c4 10             	add    $0x10,%esp
			return 0;
   14020:	b8 00 00 00 00       	mov    $0x0,%eax
   14025:	eb 2c                	jmp    14053 <empty_dir+0x1ed>
		}
		de++;
   14027:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		nr++;
   1402c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	while (nr < len) {
   14031:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14035:	3b 44 24 10          	cmp    0x10(%esp),%eax
   14039:	0f 8c 40 ff ff ff    	jl     13f7f <empty_dir+0x119>
	}
	// 执行到这里说明该目录中没有找到已用的目录项（当然除了头两个以外），则释放缓冲块返回1。
	brelse(bh);
   1403f:	83 ec 0c             	sub    $0xc,%esp
   14042:	ff 74 24 24          	pushl  0x24(%esp)
   14046:	e8 02 b6 ff ff       	call   f64d <brelse>
   1404b:	83 c4 10             	add    $0x10,%esp
	return 1;
   1404e:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14053:	83 c4 2c             	add    $0x2c,%esp
   14056:	c3                   	ret    

00014057 <sys_rmdir>:

// 删除目录。
// 参数：name - 目录名（路径名）。
// 返回：返回0表示成功，否则返回出错号。
int sys_rmdir(const char * name)
{
   14057:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   1405a:	6a 00                	push   $0x0
   1405c:	8d 44 24 18          	lea    0x18(%esp),%eax
   14060:	50                   	push   %eax
   14061:	8d 44 24 18          	lea    0x18(%esp),%eax
   14065:	50                   	push   %eax
   14066:	ff 74 24 3c          	pushl  0x3c(%esp)
   1406a:	e8 96 f2 ff ff       	call   13305 <dir_namei>
   1406f:	83 c4 10             	add    $0x10,%esp
   14072:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14076:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1407a:	85 c0                	test   %eax,%eax
   1407c:	75 0a                	jne    14088 <sys_rmdir+0x31>
		return -ENOENT;
   1407e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14083:	e9 58 03 00 00       	jmp    143e0 <sys_rmdir+0x389>
	if (!namelen) {
   14088:	8b 44 24 10          	mov    0x10(%esp),%eax
   1408c:	85 c0                	test   %eax,%eax
   1408e:	75 1a                	jne    140aa <sys_rmdir+0x53>
		iput(dir);
   14090:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14094:	83 ec 0c             	sub    $0xc,%esp
   14097:	50                   	push   %eax
   14098:	e8 1f a6 ff ff       	call   e6bc <iput>
   1409d:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   140a0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   140a5:	e9 36 03 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	if (!permission(dir,MAY_WRITE)) {
   140aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140ae:	83 ec 08             	sub    $0x8,%esp
   140b1:	6a 02                	push   $0x2
   140b3:	50                   	push   %eax
   140b4:	e8 9b e9 ff ff       	call   12a54 <permission>
   140b9:	83 c4 10             	add    $0x10,%esp
   140bc:	85 c0                	test   %eax,%eax
   140be:	75 1a                	jne    140da <sys_rmdir+0x83>
		iput(dir);
   140c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140c4:	83 ec 0c             	sub    $0xc,%esp
   140c7:	50                   	push   %eax
   140c8:	e8 ef a5 ff ff       	call   e6bc <iput>
   140cd:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   140d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   140d5:	e9 06 03 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   140da:	8b 54 24 10          	mov    0x10(%esp),%edx
   140de:	8b 44 24 14          	mov    0x14(%esp),%eax
   140e2:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   140e6:	51                   	push   %ecx
   140e7:	52                   	push   %edx
   140e8:	50                   	push   %eax
   140e9:	8d 44 24 18          	lea    0x18(%esp),%eax
   140ed:	50                   	push   %eax
   140ee:	e8 95 ea ff ff       	call   12b88 <find_entry>
   140f3:	83 c4 10             	add    $0x10,%esp
   140f6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   140fa:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   140ff:	75 1a                	jne    1411b <sys_rmdir+0xc4>
		iput(dir);
   14101:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14105:	83 ec 0c             	sub    $0xc,%esp
   14108:	50                   	push   %eax
   14109:	e8 ae a5 ff ff       	call   e6bc <iput>
   1410e:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14111:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14116:	e9 c5 02 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   1411b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1411f:	0f b7 00             	movzwl (%eax),%eax
   14122:	0f b7 d0             	movzwl %ax,%edx
   14125:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14129:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1412d:	0f b7 c0             	movzwl %ax,%eax
   14130:	83 ec 08             	sub    $0x8,%esp
   14133:	52                   	push   %edx
   14134:	50                   	push   %eax
   14135:	e8 05 a9 ff ff       	call   ea3f <iget>
   1413a:	83 c4 10             	add    $0x10,%esp
   1413d:	89 44 24 18          	mov    %eax,0x18(%esp)
   14141:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14146:	75 29                	jne    14171 <sys_rmdir+0x11a>
		iput(dir);
   14148:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1414c:	83 ec 0c             	sub    $0xc,%esp
   1414f:	50                   	push   %eax
   14150:	e8 67 a5 ff ff       	call   e6bc <iput>
   14155:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14158:	83 ec 0c             	sub    $0xc,%esp
   1415b:	ff 74 24 28          	pushl  0x28(%esp)
   1415f:	e8 e9 b4 ff ff       	call   f64d <brelse>
   14164:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14167:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1416c:	e9 6f 02 00 00       	jmp    143e0 <sys_rmdir+0x389>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   14171:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14175:	0f b7 00             	movzwl (%eax),%eax
   14178:	0f b7 c0             	movzwl %ax,%eax
   1417b:	25 00 02 00 00       	and    $0x200,%eax
   14180:	85 c0                	test   %eax,%eax
   14182:	74 62                	je     141e6 <sys_rmdir+0x18f>
   14184:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14189:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   14190:	66 85 c0             	test   %ax,%ax
   14193:	74 51                	je     141e6 <sys_rmdir+0x18f>
	    inode->i_uid != current->euid) {
   14195:	8b 44 24 18          	mov    0x18(%esp),%eax
   14199:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1419d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   141a2:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   141a9:	66 39 c2             	cmp    %ax,%dx
   141ac:	74 38                	je     141e6 <sys_rmdir+0x18f>
		iput(dir);
   141ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141b2:	83 ec 0c             	sub    $0xc,%esp
   141b5:	50                   	push   %eax
   141b6:	e8 01 a5 ff ff       	call   e6bc <iput>
   141bb:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   141be:	83 ec 0c             	sub    $0xc,%esp
   141c1:	ff 74 24 24          	pushl  0x24(%esp)
   141c5:	e8 f2 a4 ff ff       	call   e6bc <iput>
   141ca:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   141cd:	83 ec 0c             	sub    $0xc,%esp
   141d0:	ff 74 24 28          	pushl  0x28(%esp)
   141d4:	e8 74 b4 ff ff       	call   f64d <brelse>
   141d9:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   141dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141e1:	e9 fa 01 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 如果要被删除的目录项i节点的设备号不等于包含该目录项的目录的设备号，或者该被删除目录的引用连接计数大于1（表示有符号连
	// 接等），则不能删除该目录。于是释放包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode->i_dev != dir->i_dev || inode->i_count > 1) {
   141e6:	8b 44 24 18          	mov    0x18(%esp),%eax
   141ea:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   141ee:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141f2:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   141f6:	66 39 c2             	cmp    %ax,%dx
   141f9:	75 0e                	jne    14209 <sys_rmdir+0x1b2>
   141fb:	8b 44 24 18          	mov    0x18(%esp),%eax
   141ff:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14203:	66 83 f8 01          	cmp    $0x1,%ax
   14207:	76 38                	jbe    14241 <sys_rmdir+0x1ea>
		iput(dir);
   14209:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1420d:	83 ec 0c             	sub    $0xc,%esp
   14210:	50                   	push   %eax
   14211:	e8 a6 a4 ff ff       	call   e6bc <iput>
   14216:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   14219:	83 ec 0c             	sub    $0xc,%esp
   1421c:	ff 74 24 24          	pushl  0x24(%esp)
   14220:	e8 97 a4 ff ff       	call   e6bc <iput>
   14225:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14228:	83 ec 0c             	sub    $0xc,%esp
   1422b:	ff 74 24 28          	pushl  0x28(%esp)
   1422f:	e8 19 b4 ff ff       	call   f64d <brelse>
   14234:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14237:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1423c:	e9 9f 01 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 如果要被删除目录的目录项i节点就等于包含该需删除目录的目录i节点，则表示试图删除“.”目录，这是不允许的。于是放回包含要删
	// 除目录名的目录i节点和要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode == dir) {						/* we may not delete ".", but "../dir" is ok */
   14241:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14245:	39 44 24 18          	cmp    %eax,0x18(%esp)
   14249:	75 38                	jne    14283 <sys_rmdir+0x22c>
		iput(inode);
   1424b:	83 ec 0c             	sub    $0xc,%esp
   1424e:	ff 74 24 24          	pushl  0x24(%esp)
   14252:	e8 65 a4 ff ff       	call   e6bc <iput>
   14257:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1425a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1425e:	83 ec 0c             	sub    $0xc,%esp
   14261:	50                   	push   %eax
   14262:	e8 55 a4 ff ff       	call   e6bc <iput>
   14267:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1426a:	83 ec 0c             	sub    $0xc,%esp
   1426d:	ff 74 24 28          	pushl  0x28(%esp)
   14271:	e8 d7 b3 ff ff       	call   f64d <brelse>
   14276:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14279:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1427e:	e9 5d 01 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 若要被删除目录i节点的属性表明这不是一个目录，则本删除操作的前提完全不存在。于是放回包含删除目录名的目录i节点和该要删除
	// 目录的i节点，释放高速缓冲块，返回出错码。
	if (!S_ISDIR(inode->i_mode)) {
   14283:	8b 44 24 18          	mov    0x18(%esp),%eax
   14287:	0f b7 00             	movzwl (%eax),%eax
   1428a:	0f b7 c0             	movzwl %ax,%eax
   1428d:	25 00 f0 00 00       	and    $0xf000,%eax
   14292:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14297:	74 38                	je     142d1 <sys_rmdir+0x27a>
		iput(inode);
   14299:	83 ec 0c             	sub    $0xc,%esp
   1429c:	ff 74 24 24          	pushl  0x24(%esp)
   142a0:	e8 17 a4 ff ff       	call   e6bc <iput>
   142a5:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   142a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   142ac:	83 ec 0c             	sub    $0xc,%esp
   142af:	50                   	push   %eax
   142b0:	e8 07 a4 ff ff       	call   e6bc <iput>
   142b5:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   142b8:	83 ec 0c             	sub    $0xc,%esp
   142bb:	ff 74 24 28          	pushl  0x28(%esp)
   142bf:	e8 89 b3 ff ff       	call   f64d <brelse>
   142c4:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
   142c7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
   142cc:	e9 0f 01 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 若该需要被删除的目录不空，则也不能删除。于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回
	// 出错码。
	if (!empty_dir(inode)) {
   142d1:	83 ec 0c             	sub    $0xc,%esp
   142d4:	ff 74 24 24          	pushl  0x24(%esp)
   142d8:	e8 89 fb ff ff       	call   13e66 <empty_dir>
   142dd:	83 c4 10             	add    $0x10,%esp
   142e0:	85 c0                	test   %eax,%eax
   142e2:	75 38                	jne    1431c <sys_rmdir+0x2c5>
		iput(inode);
   142e4:	83 ec 0c             	sub    $0xc,%esp
   142e7:	ff 74 24 24          	pushl  0x24(%esp)
   142eb:	e8 cc a3 ff ff       	call   e6bc <iput>
   142f0:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   142f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   142f7:	83 ec 0c             	sub    $0xc,%esp
   142fa:	50                   	push   %eax
   142fb:	e8 bc a3 ff ff       	call   e6bc <iput>
   14300:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14303:	83 ec 0c             	sub    $0xc,%esp
   14306:	ff 74 24 28          	pushl  0x28(%esp)
   1430a:	e8 3e b3 ff ff       	call   f64d <brelse>
   1430f:	83 c4 10             	add    $0x10,%esp
		return -ENOTEMPTY;
   14312:	b8 d9 ff ff ff       	mov    $0xffffffd9,%eax
   14317:	e9 c4 00 00 00       	jmp    143e0 <sys_rmdir+0x389>
	}
	// 对于一个空目录，其目录项链接数应该为2（链接到上层目录和本目录）。若该需被删除目录的i节点的连接数不等于2,则显示警告信息，
	// 但删除操作仍然执行。于是置该需删除目录的目录项的i节点号字段为0,表示该目录项不再使用，并置含有该目录项的调整缓冲块已修改
	// 标志，并释放该缓冲块。然后再置被删除目录i节点的链接数为0（表示空闲），并置i节点已修改标志。
	if (inode->i_nlinks != 2)
   1431c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14320:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14324:	3c 02                	cmp    $0x2,%al
   14326:	74 1c                	je     14344 <sys_rmdir+0x2ed>
		printk("empty directory has nlink!=2 (%d)", inode->i_nlinks);
   14328:	8b 44 24 18          	mov    0x18(%esp),%eax
   1432c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14330:	0f b6 c0             	movzbl %al,%eax
   14333:	83 ec 08             	sub    $0x8,%esp
   14336:	50                   	push   %eax
   14337:	68 b4 3b 02 00       	push   $0x23bb4
   1433c:	e8 05 49 ff ff       	call   8c46 <printk>
   14341:	83 c4 10             	add    $0x10,%esp
	de->inode = 0;
   14344:	8b 44 24 08          	mov    0x8(%esp),%eax
   14348:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   1434d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14351:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14355:	83 ec 0c             	sub    $0xc,%esp
   14358:	ff 74 24 28          	pushl  0x28(%esp)
   1435c:	e8 ec b2 ff ff       	call   f64d <brelse>
   14361:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 0;
   14364:	8b 44 24 18          	mov    0x18(%esp),%eax
   14368:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	inode->i_dirt = 1;
   1436c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14370:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 再将包含被删除目录名的目录的i节点链接计数减1,修改其改变时间和修改时间为当前时间，并置该节点已修改标志。最后放回包含要删除
	// 目录名的目录i节点和该要删除目录的i节点，返回0（删除操作成功）。
	dir->i_nlinks--;
   14374:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14378:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   1437c:	83 ea 01             	sub    $0x1,%edx
   1437f:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_ctime = dir->i_mtime = CURRENT_TIME;
   14382:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   14387:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   1438d:	01 d0                	add    %edx,%eax
   1438f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14394:	f7 e2                	mul    %edx
   14396:	89 d1                	mov    %edx,%ecx
   14398:	c1 e9 05             	shr    $0x5,%ecx
   1439b:	8b 15 04 fb 02 00    	mov    0x2fb04,%edx
   143a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143a5:	01 ca                	add    %ecx,%edx
   143a7:	89 50 08             	mov    %edx,0x8(%eax)
   143aa:	8b 54 24 0c          	mov    0xc(%esp),%edx
   143ae:	8b 40 08             	mov    0x8(%eax),%eax
   143b1:	89 42 2c             	mov    %eax,0x2c(%edx)
	dir->i_dirt = 1;
   143b4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143b8:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   143bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143c0:	83 ec 0c             	sub    $0xc,%esp
   143c3:	50                   	push   %eax
   143c4:	e8 f3 a2 ff ff       	call   e6bc <iput>
   143c9:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   143cc:	83 ec 0c             	sub    $0xc,%esp
   143cf:	ff 74 24 24          	pushl  0x24(%esp)
   143d3:	e8 e4 a2 ff ff       	call   e6bc <iput>
   143d8:	83 c4 10             	add    $0x10,%esp
	return 0;
   143db:	b8 00 00 00 00       	mov    $0x0,%eax
}
   143e0:	83 c4 2c             	add    $0x2c,%esp
   143e3:	c3                   	ret    

000143e4 <sys_unlink>:
// 删除（释放）文件名对应的目录项。
// 从文件系统删除一个名字。如果是文件的最后一个链接，并且没有进程正打开该文件，则该文件也将被删除，并释放所占用的设备空间。
// 参数：name - 文件名（路径名）。
// 返回：成功则返回0,否则返回出错号。
int sys_unlink(const char * name)
{
   143e4:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   143e7:	6a 00                	push   $0x0
   143e9:	8d 44 24 18          	lea    0x18(%esp),%eax
   143ed:	50                   	push   %eax
   143ee:	8d 44 24 18          	lea    0x18(%esp),%eax
   143f2:	50                   	push   %eax
   143f3:	ff 74 24 3c          	pushl  0x3c(%esp)
   143f7:	e8 09 ef ff ff       	call   13305 <dir_namei>
   143fc:	83 c4 10             	add    $0x10,%esp
   143ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14403:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14407:	85 c0                	test   %eax,%eax
   14409:	75 0a                	jne    14415 <sys_unlink+0x31>
		return -ENOENT;
   1440b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14410:	e9 8d 02 00 00       	jmp    146a2 <sys_unlink+0x2be>
	if (!namelen) {
   14415:	8b 44 24 10          	mov    0x10(%esp),%eax
   14419:	85 c0                	test   %eax,%eax
   1441b:	75 1a                	jne    14437 <sys_unlink+0x53>
		iput(dir);
   1441d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14421:	83 ec 0c             	sub    $0xc,%esp
   14424:	50                   	push   %eax
   14425:	e8 92 a2 ff ff       	call   e6bc <iput>
   1442a:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1442d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14432:	e9 6b 02 00 00       	jmp    146a2 <sys_unlink+0x2be>
	}
	if (!permission(dir, MAY_WRITE)) {
   14437:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1443b:	83 ec 08             	sub    $0x8,%esp
   1443e:	6a 02                	push   $0x2
   14440:	50                   	push   %eax
   14441:	e8 0e e6 ff ff       	call   12a54 <permission>
   14446:	83 c4 10             	add    $0x10,%esp
   14449:	85 c0                	test   %eax,%eax
   1444b:	75 1a                	jne    14467 <sys_unlink+0x83>
		iput(dir);
   1444d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14451:	83 ec 0c             	sub    $0xc,%esp
   14454:	50                   	push   %eax
   14455:	e8 62 a2 ff ff       	call   e6bc <iput>
   1445a:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1445d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14462:	e9 3b 02 00 00       	jmp    146a2 <sys_unlink+0x2be>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14467:	8b 54 24 10          	mov    0x10(%esp),%edx
   1446b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1446f:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   14473:	51                   	push   %ecx
   14474:	52                   	push   %edx
   14475:	50                   	push   %eax
   14476:	8d 44 24 18          	lea    0x18(%esp),%eax
   1447a:	50                   	push   %eax
   1447b:	e8 08 e7 ff ff       	call   12b88 <find_entry>
   14480:	83 c4 10             	add    $0x10,%esp
   14483:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14487:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1448c:	75 1a                	jne    144a8 <sys_unlink+0xc4>
		iput(dir);
   1448e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14492:	83 ec 0c             	sub    $0xc,%esp
   14495:	50                   	push   %eax
   14496:	e8 21 a2 ff ff       	call   e6bc <iput>
   1449b:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1449e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   144a3:	e9 fa 01 00 00       	jmp    146a2 <sys_unlink+0x2be>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   144a8:	8b 44 24 08          	mov    0x8(%esp),%eax
   144ac:	0f b7 00             	movzwl (%eax),%eax
   144af:	0f b7 d0             	movzwl %ax,%edx
   144b2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144b6:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   144ba:	0f b7 c0             	movzwl %ax,%eax
   144bd:	83 ec 08             	sub    $0x8,%esp
   144c0:	52                   	push   %edx
   144c1:	50                   	push   %eax
   144c2:	e8 78 a5 ff ff       	call   ea3f <iget>
   144c7:	83 c4 10             	add    $0x10,%esp
   144ca:	89 44 24 18          	mov    %eax,0x18(%esp)
   144ce:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   144d3:	75 29                	jne    144fe <sys_unlink+0x11a>
		iput(dir);
   144d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144d9:	83 ec 0c             	sub    $0xc,%esp
   144dc:	50                   	push   %eax
   144dd:	e8 da a1 ff ff       	call   e6bc <iput>
   144e2:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   144e5:	83 ec 0c             	sub    $0xc,%esp
   144e8:	ff 74 24 28          	pushl  0x28(%esp)
   144ec:	e8 5c b1 ff ff       	call   f64d <brelse>
   144f1:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   144f4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   144f9:	e9 a4 01 00 00       	jmp    146a2 <sys_unlink+0x2be>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   144fe:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14502:	0f b7 00             	movzwl (%eax),%eax
   14505:	0f b7 c0             	movzwl %ax,%eax
   14508:	25 00 02 00 00       	and    $0x200,%eax
   1450d:	85 c0                	test   %eax,%eax
   1450f:	74 7b                	je     1458c <sys_unlink+0x1a8>
   14511:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14516:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   1451d:	66 85 c0             	test   %ax,%ax
   14520:	74 6a                	je     1458c <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
   14522:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14527:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   1452e:	8b 44 24 18          	mov    0x18(%esp),%eax
   14532:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   14536:	66 39 c2             	cmp    %ax,%dx
   14539:	74 51                	je     1458c <sys_unlink+0x1a8>
	    current->euid != dir->i_uid) {
   1453b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   14540:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   14547:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1454b:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	    current->euid != inode->i_uid &&
   1454f:	66 39 c2             	cmp    %ax,%dx
   14552:	74 38                	je     1458c <sys_unlink+0x1a8>
		iput(dir);
   14554:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14558:	83 ec 0c             	sub    $0xc,%esp
   1455b:	50                   	push   %eax
   1455c:	e8 5b a1 ff ff       	call   e6bc <iput>
   14561:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   14564:	83 ec 0c             	sub    $0xc,%esp
   14567:	ff 74 24 24          	pushl  0x24(%esp)
   1456b:	e8 4c a1 ff ff       	call   e6bc <iput>
   14570:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14573:	83 ec 0c             	sub    $0xc,%esp
   14576:	ff 74 24 28          	pushl  0x28(%esp)
   1457a:	e8 ce b0 ff ff       	call   f64d <brelse>
   1457f:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14582:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14587:	e9 16 01 00 00       	jmp    146a2 <sys_unlink+0x2be>
	}
	// 如果该指定文件名是一个目录，则也不能删除。放回该目录i节点和该文件名目录项的i节点，释放包含该目录项的缓冲块，返回出错号。
	if (S_ISDIR(inode->i_mode)) {
   1458c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14590:	0f b7 00             	movzwl (%eax),%eax
   14593:	0f b7 c0             	movzwl %ax,%eax
   14596:	25 00 f0 00 00       	and    $0xf000,%eax
   1459b:	3d 00 40 00 00       	cmp    $0x4000,%eax
   145a0:	75 38                	jne    145da <sys_unlink+0x1f6>
		iput(inode);
   145a2:	83 ec 0c             	sub    $0xc,%esp
   145a5:	ff 74 24 24          	pushl  0x24(%esp)
   145a9:	e8 0e a1 ff ff       	call   e6bc <iput>
   145ae:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   145b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   145b5:	83 ec 0c             	sub    $0xc,%esp
   145b8:	50                   	push   %eax
   145b9:	e8 fe a0 ff ff       	call   e6bc <iput>
   145be:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   145c1:	83 ec 0c             	sub    $0xc,%esp
   145c4:	ff 74 24 28          	pushl  0x28(%esp)
   145c8:	e8 80 b0 ff ff       	call   f64d <brelse>
   145cd:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   145d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145d5:	e9 c8 00 00 00       	jmp    146a2 <sys_unlink+0x2be>
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
   145da:	8b 44 24 18          	mov    0x18(%esp),%eax
   145de:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   145e2:	84 c0                	test   %al,%al
   145e4:	75 39                	jne    1461f <sys_unlink+0x23b>
		printk("Deleting nonexistent file (%04x:%d), %d\n",
			inode->i_dev, inode->i_num, inode->i_nlinks);
   145e6:	8b 44 24 18          	mov    0x18(%esp),%eax
   145ea:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   145ee:	0f b6 c8             	movzbl %al,%ecx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   145f1:	8b 44 24 18          	mov    0x18(%esp),%eax
   145f5:	0f b7 40 32          	movzwl 0x32(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   145f9:	0f b7 d0             	movzwl %ax,%edx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   145fc:	8b 44 24 18          	mov    0x18(%esp),%eax
   14600:	0f b7 40 30          	movzwl 0x30(%eax),%eax
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14604:	0f b7 c0             	movzwl %ax,%eax
   14607:	51                   	push   %ecx
   14608:	52                   	push   %edx
   14609:	50                   	push   %eax
   1460a:	68 d8 3b 02 00       	push   $0x23bd8
   1460f:	e8 32 46 ff ff       	call   8c46 <printk>
   14614:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 1;
   14617:	8b 44 24 18          	mov    0x18(%esp),%eax
   1461b:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	}
	// 现在我们可以删除文件名对应的目录项了。于是将该文件名目录项中的i节点号字段置为0,表示释放该目录项，并设置包含该目录项的缓
	// 冲块已修改标志，释放该高速缓冲块。
	de->inode = 0;
   1461f:	8b 44 24 08          	mov    0x8(%esp),%eax
   14623:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   14628:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1462c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14630:	83 ec 0c             	sub    $0xc,%esp
   14633:	ff 74 24 28          	pushl  0x28(%esp)
   14637:	e8 11 b0 ff ff       	call   f64d <brelse>
   1463c:	83 c4 10             	add    $0x10,%esp
	// 然后把文件名对应i节点的链接数减1,置已修改标志，更新改变时间为当前时间。最后放回该i节点和目录的i节点，返回0（成功）。如果
	// 是文件的最后一个链接，即i节点链接数减1后等于0,并且此时没有进程正打开该文件，那么在调用iput()放回i节点时，该文件也将被删除
	// 并释放所占用的设备空间。参见fs/inode.c。
	inode->i_nlinks--;
   1463f:	8b 44 24 18          	mov    0x18(%esp),%eax
   14643:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14647:	8d 50 ff             	lea    -0x1(%eax),%edx
   1464a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1464e:	88 50 0d             	mov    %dl,0xd(%eax)
	inode->i_dirt = 1;
   14651:	8b 44 24 18          	mov    0x18(%esp),%eax
   14655:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_ctime = CURRENT_TIME;
   14659:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   1465e:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   14664:	01 d0                	add    %edx,%eax
   14666:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1466b:	f7 e2                	mul    %edx
   1466d:	c1 ea 05             	shr    $0x5,%edx
   14670:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   14675:	01 c2                	add    %eax,%edx
   14677:	8b 44 24 18          	mov    0x18(%esp),%eax
   1467b:	89 50 2c             	mov    %edx,0x2c(%eax)
	iput(inode);
   1467e:	83 ec 0c             	sub    $0xc,%esp
   14681:	ff 74 24 24          	pushl  0x24(%esp)
   14685:	e8 32 a0 ff ff       	call   e6bc <iput>
   1468a:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   1468d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14691:	83 ec 0c             	sub    $0xc,%esp
   14694:	50                   	push   %eax
   14695:	e8 22 a0 ff ff       	call   e6bc <iput>
   1469a:	83 c4 10             	add    $0x10,%esp
	return 0;
   1469d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   146a2:	83 c4 2c             	add    $0x2c,%esp
   146a5:	c3                   	ret    

000146a6 <sys_symlink>:
// 建立符号链接。
// 为一个已存在文件创建一个符号链接（也称为软连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0，否则返回出错号。
int sys_symlink(const char * oldname, const char * newname)
{
   146a6:	53                   	push   %ebx
   146a7:	83 ec 38             	sub    $0x38,%esp
	char c;

	// 首先查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则返回出错号。如果新路径名
	// 中不包括文件名，则放回新路径名目录的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回
	// 新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   146aa:	6a 00                	push   $0x0
   146ac:	8d 44 24 14          	lea    0x14(%esp),%eax
   146b0:	50                   	push   %eax
   146b1:	8d 44 24 14          	lea    0x14(%esp),%eax
   146b5:	50                   	push   %eax
   146b6:	ff 74 24 50          	pushl  0x50(%esp)
   146ba:	e8 46 ec ff ff       	call   13305 <dir_namei>
   146bf:	83 c4 10             	add    $0x10,%esp
   146c2:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (!dir)
   146c6:	8b 44 24 14          	mov    0x14(%esp),%eax
   146ca:	85 c0                	test   %eax,%eax
   146cc:	75 0a                	jne    146d8 <sys_symlink+0x32>
		return -EACCES;
   146ce:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   146d3:	e9 33 03 00 00       	jmp    14a0b <sys_symlink+0x365>
	if (!namelen) {
   146d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   146dc:	85 c0                	test   %eax,%eax
   146de:	75 1a                	jne    146fa <sys_symlink+0x54>
		iput(dir);
   146e0:	8b 44 24 14          	mov    0x14(%esp),%eax
   146e4:	83 ec 0c             	sub    $0xc,%esp
   146e7:	50                   	push   %eax
   146e8:	e8 cf 9f ff ff       	call   e6bc <iput>
   146ed:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   146f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   146f5:	e9 11 03 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	if (!permission(dir, MAY_WRITE)) {
   146fa:	8b 44 24 14          	mov    0x14(%esp),%eax
   146fe:	83 ec 08             	sub    $0x8,%esp
   14701:	6a 02                	push   $0x2
   14703:	50                   	push   %eax
   14704:	e8 4b e3 ff ff       	call   12a54 <permission>
   14709:	83 c4 10             	add    $0x10,%esp
   1470c:	85 c0                	test   %eax,%eax
   1470e:	75 1a                	jne    1472a <sys_symlink+0x84>
		iput(dir);
   14710:	8b 44 24 14          	mov    0x14(%esp),%eax
   14714:	83 ec 0c             	sub    $0xc,%esp
   14717:	50                   	push   %eax
   14718:	e8 9f 9f ff ff       	call   e6bc <iput>
   1471d:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14720:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14725:	e9 e1 02 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	// 现在我们在目录指定设备上申请一个新的i节点，并设置该i节点模式为符号链接类型以及进程规定的模式屏蔽码。并且设置该i节点已修
	// 改标志。
	if (!(inode = new_inode(dir->i_dev))) {
   1472a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1472e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14732:	0f b7 c0             	movzwl %ax,%eax
   14735:	83 ec 0c             	sub    $0xc,%esp
   14738:	50                   	push   %eax
   14739:	e8 2c 0a 00 00       	call   1516a <new_inode>
   1473e:	83 c4 10             	add    $0x10,%esp
   14741:	89 44 24 28          	mov    %eax,0x28(%esp)
   14745:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1474a:	75 1a                	jne    14766 <sys_symlink+0xc0>
		iput(dir);
   1474c:	8b 44 24 14          	mov    0x14(%esp),%eax
   14750:	83 ec 0c             	sub    $0xc,%esp
   14753:	50                   	push   %eax
   14754:	e8 63 9f ff ff       	call   e6bc <iput>
   14759:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   1475c:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14761:	e9 a5 02 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	inode->i_mode = S_IFLNK | (0777 & ~current->umask);
   14766:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1476b:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   14772:	f7 d0                	not    %eax
   14774:	66 25 ff 01          	and    $0x1ff,%ax
   14778:	66 0d 00 a0          	or     $0xa000,%ax
   1477c:	89 c2                	mov    %eax,%edx
   1477e:	8b 44 24 28          	mov    0x28(%esp),%eax
   14782:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   14785:	8b 44 24 28          	mov    0x28(%esp),%eax
   14789:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 为了保存符号链接路径名字符串信息，我们需要为该i节点申请一个磁盘块，并让i节点的第1个直接块号i_zone[0]等于得到的逻辑块号。
	// 然后置i节点已修改标志。如果申请失败则放回对应目录的i节点；复位新申请的i节点链接计数；放回该新的i节点，返回没有空间出错码
	// 退出。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   1478d:	8b 44 24 28          	mov    0x28(%esp),%eax
   14791:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14795:	0f b7 c0             	movzwl %ax,%eax
   14798:	83 ec 0c             	sub    $0xc,%esp
   1479b:	50                   	push   %eax
   1479c:	e8 94 06 00 00       	call   14e35 <new_block>
   147a1:	83 c4 10             	add    $0x10,%esp
   147a4:	89 c2                	mov    %eax,%edx
   147a6:	8b 44 24 28          	mov    0x28(%esp),%eax
   147aa:	66 89 50 0e          	mov    %dx,0xe(%eax)
   147ae:	8b 44 24 28          	mov    0x28(%esp),%eax
   147b2:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   147b6:	66 85 c0             	test   %ax,%ax
   147b9:	75 3b                	jne    147f6 <sys_symlink+0x150>
		iput(dir);
   147bb:	8b 44 24 14          	mov    0x14(%esp),%eax
   147bf:	83 ec 0c             	sub    $0xc,%esp
   147c2:	50                   	push   %eax
   147c3:	e8 f4 9e ff ff       	call   e6bc <iput>
   147c8:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   147cb:	8b 44 24 28          	mov    0x28(%esp),%eax
   147cf:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   147d3:	8d 50 ff             	lea    -0x1(%eax),%edx
   147d6:	8b 44 24 28          	mov    0x28(%esp),%eax
   147da:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   147dd:	83 ec 0c             	sub    $0xc,%esp
   147e0:	ff 74 24 34          	pushl  0x34(%esp)
   147e4:	e8 d3 9e ff ff       	call   e6bc <iput>
   147e9:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   147ec:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   147f1:	e9 15 02 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	inode->i_dirt = 1;
   147f6:	8b 44 24 28          	mov    0x28(%esp),%eax
   147fa:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；复位新申请的i节点链接计数；
	// 放回该新的i节点，返回没有空间出错码退出。
	if (!(name_block = bread(inode->i_dev, inode->i_zone[0]))) {
   147fe:	8b 44 24 28          	mov    0x28(%esp),%eax
   14802:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   14806:	0f b7 d0             	movzwl %ax,%edx
   14809:	8b 44 24 28          	mov    0x28(%esp),%eax
   1480d:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14811:	0f b7 c0             	movzwl %ax,%eax
   14814:	83 ec 08             	sub    $0x8,%esp
   14817:	52                   	push   %edx
   14818:	50                   	push   %eax
   14819:	e8 85 ae ff ff       	call   f6a3 <bread>
   1481e:	83 c4 10             	add    $0x10,%esp
   14821:	89 44 24 24          	mov    %eax,0x24(%esp)
   14825:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1482a:	75 3b                	jne    14867 <sys_symlink+0x1c1>
		iput(dir);
   1482c:	8b 44 24 14          	mov    0x14(%esp),%eax
   14830:	83 ec 0c             	sub    $0xc,%esp
   14833:	50                   	push   %eax
   14834:	e8 83 9e ff ff       	call   e6bc <iput>
   14839:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   1483c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14840:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14844:	8d 50 ff             	lea    -0x1(%eax),%edx
   14847:	8b 44 24 28          	mov    0x28(%esp),%eax
   1484b:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1484e:	83 ec 0c             	sub    $0xc,%esp
   14851:	ff 74 24 34          	pushl  0x34(%esp)
   14855:	e8 62 9e ff ff       	call   e6bc <iput>
   1485a:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   1485d:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   14862:	e9 a4 01 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
   14867:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   1486e:	00 
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   1486f:	eb 1b                	jmp    1488c <sys_symlink+0x1e6>
		name_block->b_data[i++] = c;
   14871:	8b 44 24 24          	mov    0x24(%esp),%eax
   14875:	8b 08                	mov    (%eax),%ecx
   14877:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   1487b:	8d 50 01             	lea    0x1(%eax),%edx
   1487e:	89 54 24 2c          	mov    %edx,0x2c(%esp)
   14882:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   14885:	0f b6 44 24 23       	movzbl 0x23(%esp),%eax
   1488a:	88 02                	mov    %al,(%edx)
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   1488c:	81 7c 24 2c fe 03 00 	cmpl   $0x3fe,0x2c(%esp)
   14893:	00 
   14894:	7f 22                	jg     148b8 <sys_symlink+0x212>
   14896:	8b 44 24 40          	mov    0x40(%esp),%eax
   1489a:	8d 50 01             	lea    0x1(%eax),%edx
   1489d:	89 54 24 40          	mov    %edx,0x40(%esp)
   148a1:	83 ec 0c             	sub    $0xc,%esp
   148a4:	50                   	push   %eax
   148a5:	e8 59 e1 ff ff       	call   12a03 <get_fs_byte>
   148aa:	83 c4 10             	add    $0x10,%esp
   148ad:	88 44 24 23          	mov    %al,0x23(%esp)
   148b1:	80 7c 24 23 00       	cmpb   $0x0,0x23(%esp)
   148b6:	75 b9                	jne    14871 <sys_symlink+0x1cb>
	name_block->b_data[i] = 0;
   148b8:	8b 44 24 24          	mov    0x24(%esp),%eax
   148bc:	8b 10                	mov    (%eax),%edx
   148be:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   148c2:	01 d0                	add    %edx,%eax
   148c4:	c6 00 00             	movb   $0x0,(%eax)
	name_block->b_dirt = 1;
   148c7:	8b 44 24 24          	mov    0x24(%esp),%eax
   148cb:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(name_block);
   148cf:	83 ec 0c             	sub    $0xc,%esp
   148d2:	ff 74 24 30          	pushl  0x30(%esp)
   148d6:	e8 72 ad ff ff       	call   f64d <brelse>
   148db:	83 c4 10             	add    $0x10,%esp
	inode->i_size = i;
   148de:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   148e2:	8b 44 24 28          	mov    0x28(%esp),%eax
   148e6:	89 50 04             	mov    %edx,0x4(%eax)
	inode->i_dirt = 1;
   148e9:	8b 44 24 28          	mov    0x28(%esp),%eax
   148ed:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后我们搜索一下路径名指定的符号链接名是否已经存在。若已经存在则不能创建同名目录项i节点。如果对应符号链接文件名已经存在，则
	// 释放包含该目录项的缓冲区块，复位新申请的i节点连接计数，并施加目录的i节点，返回文件已经存在的出错码退出。
	bh = find_entry(&dir, basename, namelen, &de);
   148f1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   148f5:	8b 44 24 10          	mov    0x10(%esp),%eax
   148f9:	8d 4c 24 18          	lea    0x18(%esp),%ecx
   148fd:	51                   	push   %ecx
   148fe:	52                   	push   %edx
   148ff:	50                   	push   %eax
   14900:	8d 44 24 20          	lea    0x20(%esp),%eax
   14904:	50                   	push   %eax
   14905:	e8 7e e2 ff ff       	call   12b88 <find_entry>
   1490a:	83 c4 10             	add    $0x10,%esp
   1490d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   14911:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14916:	74 4a                	je     14962 <sys_symlink+0x2bc>
		inode->i_nlinks--;
   14918:	8b 44 24 28          	mov    0x28(%esp),%eax
   1491c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14920:	8d 50 ff             	lea    -0x1(%eax),%edx
   14923:	8b 44 24 28          	mov    0x28(%esp),%eax
   14927:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1492a:	83 ec 0c             	sub    $0xc,%esp
   1492d:	ff 74 24 34          	pushl  0x34(%esp)
   14931:	e8 86 9d ff ff       	call   e6bc <iput>
   14936:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14939:	83 ec 0c             	sub    $0xc,%esp
   1493c:	ff 74 24 28          	pushl  0x28(%esp)
   14940:	e8 08 ad ff ff       	call   f64d <brelse>
   14945:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14948:	8b 44 24 14          	mov    0x14(%esp),%eax
   1494c:	83 ec 0c             	sub    $0xc,%esp
   1494f:	50                   	push   %eax
   14950:	e8 67 9d ff ff       	call   e6bc <iput>
   14955:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   14958:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   1495d:	e9 a9 00 00 00       	jmp    14a0b <sys_symlink+0x365>
	}
	// 现在我们在指定目录中新添加一个目录项，用于存放新建符号链接文件名的i节点号和目录名。如果失败（包含该目录项的高速缓冲区指针为
	// NULL），则放回目录的i节点；所申请的i节点引用链接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   14962:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   14966:	8b 54 24 10          	mov    0x10(%esp),%edx
   1496a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1496e:	8d 5c 24 18          	lea    0x18(%esp),%ebx
   14972:	53                   	push   %ebx
   14973:	51                   	push   %ecx
   14974:	52                   	push   %edx
   14975:	50                   	push   %eax
   14976:	e8 4b e4 ff ff       	call   12dc6 <add_entry>
   1497b:	83 c4 10             	add    $0x10,%esp
   1497e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14982:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14987:	75 38                	jne    149c1 <sys_symlink+0x31b>
		inode->i_nlinks--;
   14989:	8b 44 24 28          	mov    0x28(%esp),%eax
   1498d:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14991:	8d 50 ff             	lea    -0x1(%eax),%edx
   14994:	8b 44 24 28          	mov    0x28(%esp),%eax
   14998:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1499b:	83 ec 0c             	sub    $0xc,%esp
   1499e:	ff 74 24 34          	pushl  0x34(%esp)
   149a2:	e8 15 9d ff ff       	call   e6bc <iput>
   149a7:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   149aa:	8b 44 24 14          	mov    0x14(%esp),%eax
   149ae:	83 ec 0c             	sub    $0xc,%esp
   149b1:	50                   	push   %eax
   149b2:	e8 05 9d ff ff       	call   e6bc <iput>
   149b7:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   149ba:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   149bf:	eb 4a                	jmp    14a0b <sys_symlink+0x365>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，释放高速缓冲块，放回目录和新的i节点，最后返回0（成功）。
	de->inode = inode->i_num;
   149c1:	8b 44 24 18          	mov    0x18(%esp),%eax
   149c5:	8b 54 24 28          	mov    0x28(%esp),%edx
   149c9:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   149cd:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   149d0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   149d4:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   149d8:	83 ec 0c             	sub    $0xc,%esp
   149db:	ff 74 24 28          	pushl  0x28(%esp)
   149df:	e8 69 ac ff ff       	call   f64d <brelse>
   149e4:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   149e7:	8b 44 24 14          	mov    0x14(%esp),%eax
   149eb:	83 ec 0c             	sub    $0xc,%esp
   149ee:	50                   	push   %eax
   149ef:	e8 c8 9c ff ff       	call   e6bc <iput>
   149f4:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   149f7:	83 ec 0c             	sub    $0xc,%esp
   149fa:	ff 74 24 34          	pushl  0x34(%esp)
   149fe:	e8 b9 9c ff ff       	call   e6bc <iput>
   14a03:	83 c4 10             	add    $0x10,%esp
	return 0;
   14a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14a0b:	83 c4 38             	add    $0x38,%esp
   14a0e:	5b                   	pop    %ebx
   14a0f:	c3                   	ret    

00014a10 <sys_link>:
// 为文件建立一个文件名目录项。
// 为一个已存在的文件创建一个新链接（也称为硬连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0,否则返回出错号。
int sys_link(const char * oldname, const char * newname)
{
   14a10:	53                   	push   %ebx
   14a11:	83 ec 28             	sub    $0x28,%esp
	const char * basename;
	int namelen;

	// 首先对原文件名进行有效性验证，它应该存在并且不是一个目录名。所以我们先取原文件路径名对应的i节点oldinode。如果为0，则
	// 表示出错，返回出错号。如果原路径名对应的是一个目录名，则放回该i节点，也返回出错号。
	oldinode = namei(oldname);
   14a14:	83 ec 0c             	sub    $0xc,%esp
   14a17:	ff 74 24 3c          	pushl  0x3c(%esp)
   14a1b:	e8 cf ea ff ff       	call   134ef <namei>
   14a20:	83 c4 10             	add    $0x10,%esp
   14a23:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!oldinode)
   14a27:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14a2c:	75 0a                	jne    14a38 <sys_link+0x28>
		return -ENOENT;
   14a2e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14a33:	e9 52 02 00 00       	jmp    14c8a <sys_link+0x27a>
	if (S_ISDIR(oldinode->i_mode)) {
   14a38:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14a3c:	0f b7 00             	movzwl (%eax),%eax
   14a3f:	0f b7 c0             	movzwl %ax,%eax
   14a42:	25 00 f0 00 00       	and    $0xf000,%eax
   14a47:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14a4c:	75 19                	jne    14a67 <sys_link+0x57>
		iput(oldinode);
   14a4e:	83 ec 0c             	sub    $0xc,%esp
   14a51:	ff 74 24 28          	pushl  0x28(%esp)
   14a55:	e8 62 9c ff ff       	call   e6bc <iput>
   14a5a:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14a5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a62:	e9 23 02 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	// 然后查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则放回原路径名的i节点，返
	// 回出错号。如果新路径名中不包括文件名，则放回原路径名i节点和新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   14a67:	6a 00                	push   $0x0
   14a69:	8d 44 24 10          	lea    0x10(%esp),%eax
   14a6d:	50                   	push   %eax
   14a6e:	8d 44 24 10          	lea    0x10(%esp),%eax
   14a72:	50                   	push   %eax
   14a73:	ff 74 24 40          	pushl  0x40(%esp)
   14a77:	e8 89 e8 ff ff       	call   13305 <dir_namei>
   14a7c:	83 c4 10             	add    $0x10,%esp
   14a7f:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!dir) {
   14a83:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a87:	85 c0                	test   %eax,%eax
   14a89:	75 19                	jne    14aa4 <sys_link+0x94>
		iput(oldinode);
   14a8b:	83 ec 0c             	sub    $0xc,%esp
   14a8e:	ff 74 24 28          	pushl  0x28(%esp)
   14a92:	e8 25 9c ff ff       	call   e6bc <iput>
   14a97:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14a9a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14a9f:	e9 e6 01 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	if (!namelen) {
   14aa4:	8b 44 24 08          	mov    0x8(%esp),%eax
   14aa8:	85 c0                	test   %eax,%eax
   14aaa:	75 29                	jne    14ad5 <sys_link+0xc5>
		iput(oldinode);
   14aac:	83 ec 0c             	sub    $0xc,%esp
   14aaf:	ff 74 24 28          	pushl  0x28(%esp)
   14ab3:	e8 04 9c ff ff       	call   e6bc <iput>
   14ab8:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14abb:	8b 44 24 10          	mov    0x10(%esp),%eax
   14abf:	83 ec 0c             	sub    $0xc,%esp
   14ac2:	50                   	push   %eax
   14ac3:	e8 f4 9b ff ff       	call   e6bc <iput>
   14ac8:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14acb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ad0:	e9 b5 01 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	// 我们不能跨设备建立硬链接。因此如果新路径名顶层目录的设备号与原路径名的设备号不一样，则放回新路径名目录的i节点和原路径名
	// 的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回新路径名目录的i节点和原路径名的i节点
	// 返回出错号。
	if (dir->i_dev != oldinode->i_dev) {
   14ad5:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ad9:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   14add:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14ae1:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14ae5:	66 39 c2             	cmp    %ax,%dx
   14ae8:	74 29                	je     14b13 <sys_link+0x103>
		iput(dir);
   14aea:	8b 44 24 10          	mov    0x10(%esp),%eax
   14aee:	83 ec 0c             	sub    $0xc,%esp
   14af1:	50                   	push   %eax
   14af2:	e8 c5 9b ff ff       	call   e6bc <iput>
   14af7:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14afa:	83 ec 0c             	sub    $0xc,%esp
   14afd:	ff 74 24 28          	pushl  0x28(%esp)
   14b01:	e8 b6 9b ff ff       	call   e6bc <iput>
   14b06:	83 c4 10             	add    $0x10,%esp
		return -EXDEV;
   14b09:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
   14b0e:	e9 77 01 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	if (!permission(dir, MAY_WRITE)) {
   14b13:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b17:	83 ec 08             	sub    $0x8,%esp
   14b1a:	6a 02                	push   $0x2
   14b1c:	50                   	push   %eax
   14b1d:	e8 32 df ff ff       	call   12a54 <permission>
   14b22:	83 c4 10             	add    $0x10,%esp
   14b25:	85 c0                	test   %eax,%eax
   14b27:	75 29                	jne    14b52 <sys_link+0x142>
		iput(dir);
   14b29:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b2d:	83 ec 0c             	sub    $0xc,%esp
   14b30:	50                   	push   %eax
   14b31:	e8 86 9b ff ff       	call   e6bc <iput>
   14b36:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b39:	83 ec 0c             	sub    $0xc,%esp
   14b3c:	ff 74 24 28          	pushl  0x28(%esp)
   14b40:	e8 77 9b ff ff       	call   e6bc <iput>
   14b45:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14b48:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14b4d:	e9 38 01 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	// 现在查询该新路径名是否已经存在，如果存在则也不能建立链接。于是释放包含该已存在目录项的高速缓冲块，放回新路径名目录的i节点
	// 和原路径名的i节点，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14b52:	8b 54 24 08          	mov    0x8(%esp),%edx
   14b56:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14b5a:	8d 4c 24 14          	lea    0x14(%esp),%ecx
   14b5e:	51                   	push   %ecx
   14b5f:	52                   	push   %edx
   14b60:	50                   	push   %eax
   14b61:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   14b65:	50                   	push   %eax
   14b66:	e8 1d e0 ff ff       	call   12b88 <find_entry>
   14b6b:	83 c4 10             	add    $0x10,%esp
   14b6e:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (bh) {
   14b72:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14b77:	74 38                	je     14bb1 <sys_link+0x1a1>
		brelse(bh);
   14b79:	83 ec 0c             	sub    $0xc,%esp
   14b7c:	ff 74 24 24          	pushl  0x24(%esp)
   14b80:	e8 c8 aa ff ff       	call   f64d <brelse>
   14b85:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14b88:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b8c:	83 ec 0c             	sub    $0xc,%esp
   14b8f:	50                   	push   %eax
   14b90:	e8 27 9b ff ff       	call   e6bc <iput>
   14b95:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b98:	83 ec 0c             	sub    $0xc,%esp
   14b9b:	ff 74 24 28          	pushl  0x28(%esp)
   14b9f:	e8 18 9b ff ff       	call   e6bc <iput>
   14ba4:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   14ba7:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   14bac:	e9 d9 00 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	// 现在所有条件都满足了，于是我们在新目录中添加一个目录项。若失败则放回该目录的i节点和原路径名的i节点，返回出错号。否则初始
	// 设置该目录项的i节点号等于原路径名的i节点号，并置包含该新添目录的缓冲块已修改标志，释放该缓冲块，放回目录的i节点。
	bh = add_entry(dir, basename, namelen, &de);
   14bb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   14bb5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14bb9:	8b 44 24 10          	mov    0x10(%esp),%eax
   14bbd:	8d 5c 24 14          	lea    0x14(%esp),%ebx
   14bc1:	53                   	push   %ebx
   14bc2:	51                   	push   %ecx
   14bc3:	52                   	push   %edx
   14bc4:	50                   	push   %eax
   14bc5:	e8 fc e1 ff ff       	call   12dc6 <add_entry>
   14bca:	83 c4 10             	add    $0x10,%esp
   14bcd:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   14bd1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14bd6:	75 29                	jne    14c01 <sys_link+0x1f1>
		iput(dir);
   14bd8:	8b 44 24 10          	mov    0x10(%esp),%eax
   14bdc:	83 ec 0c             	sub    $0xc,%esp
   14bdf:	50                   	push   %eax
   14be0:	e8 d7 9a ff ff       	call   e6bc <iput>
   14be5:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14be8:	83 ec 0c             	sub    $0xc,%esp
   14beb:	ff 74 24 28          	pushl  0x28(%esp)
   14bef:	e8 c8 9a ff ff       	call   e6bc <iput>
   14bf4:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14bf7:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14bfc:	e9 89 00 00 00       	jmp    14c8a <sys_link+0x27a>
	}
	de->inode = oldinode->i_num;
   14c01:	8b 44 24 14          	mov    0x14(%esp),%eax
   14c05:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   14c09:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   14c0d:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   14c10:	8b 44 24 18          	mov    0x18(%esp),%eax
   14c14:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14c18:	83 ec 0c             	sub    $0xc,%esp
   14c1b:	ff 74 24 24          	pushl  0x24(%esp)
   14c1f:	e8 29 aa ff ff       	call   f64d <brelse>
   14c24:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14c27:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c2b:	83 ec 0c             	sub    $0xc,%esp
   14c2e:	50                   	push   %eax
   14c2f:	e8 88 9a ff ff       	call   e6bc <iput>
   14c34:	83 c4 10             	add    $0x10,%esp
	// 再将原节点的链接计数加1,修改其改变时间为当前时间，并设置i节点已修改标志。最后放回原路径名的i节点，并返回0（成功）。
	oldinode->i_nlinks++;
   14c37:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c3b:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14c3f:	8d 50 01             	lea    0x1(%eax),%edx
   14c42:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c46:	88 50 0d             	mov    %dl,0xd(%eax)
	oldinode->i_ctime = CURRENT_TIME;
   14c49:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   14c4e:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   14c54:	01 d0                	add    %edx,%eax
   14c56:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14c5b:	f7 e2                	mul    %edx
   14c5d:	c1 ea 05             	shr    $0x5,%edx
   14c60:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   14c65:	01 c2                	add    %eax,%edx
   14c67:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c6b:	89 50 2c             	mov    %edx,0x2c(%eax)
	oldinode->i_dirt = 1;
   14c6e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c72:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(oldinode);
   14c76:	83 ec 0c             	sub    $0xc,%esp
   14c79:	ff 74 24 28          	pushl  0x28(%esp)
   14c7d:	e8 3a 9a ff ff       	call   e6bc <iput>
   14c82:	83 c4 10             	add    $0x10,%esp
	return 0;
   14c85:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14c8a:	83 c4 28             	add    $0x28,%esp
   14c8d:	5b                   	pop    %ebx
   14c8e:	c3                   	ret    

00014c8f <memset>:
{
   14c8f:	57                   	push   %edi
   14c90:	83 ec 04             	sub    $0x4,%esp
   14c93:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c97:	88 04 24             	mov    %al,(%esp)
__asm__(
   14c9a:	0f b6 04 24          	movzbl (%esp),%eax
   14c9e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14ca2:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   14ca6:	89 d7                	mov    %edx,%edi
   14ca8:	fc                   	cld    
   14ca9:	57                   	push   %edi
   14caa:	f3 aa                	rep stos %al,%es:(%edi)
   14cac:	5f                   	pop    %edi
return s;
   14cad:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   14cb1:	83 c4 04             	add    $0x4,%esp
   14cb4:	5f                   	pop    %edi
   14cb5:	c3                   	ret    

00014cb6 <free_block>:

// 释放设备dev上数据区中的逻辑块block。
// 复位指定逻辑块block对应的逻辑块位图位。成功则返回1,否则返回0.
// 参数：dev是设备号，block是逻辑块号（盘块号）。
int free_block(int dev, int block)
{
   14cb6:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先取设备dev上文件系统的超级块信息，根据其中数据区开始逻辑块号和文件系统中逻辑块总数信息判断参数block的有效
	// 性。如果指定设备超级块不存在，则出错停机。若逻辑块号小于盘上数据区第1个逻辑块号或者大于设备上总逻辑块数，也出
	// 错停机。
	if (!(sb = get_super(dev)))             						// fs/super.c
   14cb9:	83 ec 0c             	sub    $0xc,%esp
   14cbc:	ff 74 24 2c          	pushl  0x2c(%esp)
   14cc0:	e8 4f ae ff ff       	call   fb14 <get_super>
   14cc5:	83 c4 10             	add    $0x10,%esp
   14cc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14ccc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   14cd1:	75 10                	jne    14ce3 <free_block+0x2d>
		panic("trying to free block on nonexistent device");
   14cd3:	83 ec 0c             	sub    $0xc,%esp
   14cd6:	68 04 3c 02 00       	push   $0x23c04
   14cdb:	e8 27 3f ff ff       	call   8c07 <panic>
   14ce0:	83 c4 10             	add    $0x10,%esp
	if (block < sb->s_firstdatazone || block >= sb->s_nzones)
   14ce3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14ce7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14ceb:	0f b7 c0             	movzwl %ax,%eax
   14cee:	39 44 24 24          	cmp    %eax,0x24(%esp)
   14cf2:	7c 11                	jl     14d05 <free_block+0x4f>
   14cf4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14cf8:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14cfc:	0f b7 c0             	movzwl %ax,%eax
   14cff:	39 44 24 24          	cmp    %eax,0x24(%esp)
   14d03:	7c 10                	jl     14d15 <free_block+0x5f>
		panic("trying to free block not in datazone");
   14d05:	83 ec 0c             	sub    $0xc,%esp
   14d08:	68 30 3c 02 00       	push   $0x23c30
   14d0d:	e8 f5 3e ff ff       	call   8c07 <panic>
   14d12:	83 c4 10             	add    $0x10,%esp
	bh = get_hash_table(dev, block);
   14d15:	83 ec 08             	sub    $0x8,%esp
   14d18:	ff 74 24 2c          	pushl  0x2c(%esp)
   14d1c:	ff 74 24 2c          	pushl  0x2c(%esp)
   14d20:	e8 eb a6 ff ff       	call   f410 <get_hash_table>
   14d25:	83 c4 10             	add    $0x10,%esp
   14d28:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 然后从hash表中寻找该块数据。若找到了则判断其有效性，并清已修改和更新标志，释放该数据块。该段代码的主要用途是如果
	// 该逻辑块目前存在于高速缓冲区中，就释放对应的缓冲块。
	if (bh) {
   14d2c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   14d31:	74 50                	je     14d83 <free_block+0xcd>
		if (bh->b_count > 1) {          							// 如果引用次数大于1,则调用brelse()。
   14d33:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d37:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14d3b:	3c 01                	cmp    $0x1,%al
   14d3d:	76 19                	jbe    14d58 <free_block+0xa2>
			brelse(bh);             								// b_count--后退出，该块还有人用。
   14d3f:	83 ec 0c             	sub    $0xc,%esp
   14d42:	ff 74 24 14          	pushl  0x14(%esp)
   14d46:	e8 02 a9 ff ff       	call   f64d <brelse>
   14d4b:	83 c4 10             	add    $0x10,%esp
			return 0;
   14d4e:	b8 00 00 00 00       	mov    $0x0,%eax
   14d53:	e9 d9 00 00 00       	jmp    14e31 <free_block+0x17b>
		}
		bh->b_dirt = 0;                   							// 否则复位已修改和已更新标志。
   14d58:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d5c:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		bh->b_uptodate = 0;
   14d60:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d64:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		if (bh->b_count)                							// 若此时b_count为1,则调用brelse()释放之。
   14d68:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d6c:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14d70:	84 c0                	test   %al,%al
   14d72:	74 0f                	je     14d83 <free_block+0xcd>
			brelse(bh);
   14d74:	83 ec 0c             	sub    $0xc,%esp
   14d77:	ff 74 24 14          	pushl  0x14(%esp)
   14d7b:	e8 cd a8 ff ff       	call   f64d <brelse>
   14d80:	83 c4 10             	add    $0x10,%esp
	}
	// 接着我们复位block在逻辑块位图中的位（置0）。先计算block在数据区开始算起的数据逻辑块号（从1开始计数）。然后对逻辑
	// 块（区块）位图进行操作，复位对应的位。如果对应位原来就是0,则出错停机。由于1个缓冲块有1024字节，即8192位，因此
	// block/8192即可计算出指定块block在逻辑位图中的哪个块上。而block&8191可以得到block在逻辑块位图当前块中的位偏移
	// 位置。
	block -= sb->s_firstdatazone - 1 ;
   14d83:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d87:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14d8b:	0f b7 c0             	movzwl %ax,%eax
   14d8e:	83 e8 01             	sub    $0x1,%eax
   14d91:	29 44 24 24          	sub    %eax,0x24(%esp)
	if (clear_bit(block & 8191, sb->s_zmap[block / 8192]->b_data)) {
   14d95:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d99:	25 ff 1f 00 00       	and    $0x1fff,%eax
   14d9e:	89 c1                	mov    %eax,%ecx
   14da0:	8b 44 24 24          	mov    0x24(%esp),%eax
   14da4:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14daa:	85 c0                	test   %eax,%eax
   14dac:	0f 48 c2             	cmovs  %edx,%eax
   14daf:	c1 f8 0d             	sar    $0xd,%eax
   14db2:	89 c2                	mov    %eax,%edx
   14db4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14db8:	83 c2 0c             	add    $0xc,%edx
   14dbb:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14dbf:	8b 10                	mov    (%eax),%edx
   14dc1:	b8 00 00 00 00       	mov    $0x0,%eax
   14dc6:	0f b3 0a             	btr    %ecx,(%edx)
   14dc9:	0f 93 c0             	setae  %al
   14dcc:	85 c0                	test   %eax,%eax
   14dce:	74 39                	je     14e09 <free_block+0x153>
		printk("block (%04x:%d) ", dev, block + sb->s_firstdatazone - 1);
   14dd0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14dd4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14dd8:	0f b7 d0             	movzwl %ax,%edx
   14ddb:	8b 44 24 24          	mov    0x24(%esp),%eax
   14ddf:	01 d0                	add    %edx,%eax
   14de1:	83 e8 01             	sub    $0x1,%eax
   14de4:	83 ec 04             	sub    $0x4,%esp
   14de7:	50                   	push   %eax
   14de8:	ff 74 24 28          	pushl  0x28(%esp)
   14dec:	68 55 3c 02 00       	push   $0x23c55
   14df1:	e8 50 3e ff ff       	call   8c46 <printk>
   14df6:	83 c4 10             	add    $0x10,%esp
		printk("free_block: bit already cleared\n");
   14df9:	83 ec 0c             	sub    $0xc,%esp
   14dfc:	68 68 3c 02 00       	push   $0x23c68
   14e01:	e8 40 3e ff ff       	call   8c46 <printk>
   14e06:	83 c4 10             	add    $0x10,%esp
	}
	// 最后置相应逻辑块位图所在缓冲区已修改标志。
	sb->s_zmap[block / 8192]->b_dirt = 1;
   14e09:	8b 44 24 24          	mov    0x24(%esp),%eax
   14e0d:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14e13:	85 c0                	test   %eax,%eax
   14e15:	0f 48 c2             	cmovs  %edx,%eax
   14e18:	c1 f8 0d             	sar    $0xd,%eax
   14e1b:	89 c2                	mov    %eax,%edx
   14e1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e21:	83 c2 0c             	add    $0xc,%edx
   14e24:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14e28:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	return 1;
   14e2c:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14e31:	83 c4 1c             	add    $0x1c,%esp
   14e34:	c3                   	ret    

00014e35 <new_block>:
// 向设备申请一个逻辑块(盘块,区块).
// 函数首先取得设备的超级块,并在超级块中的逻辑块位图中寻找第一个0值位(代表一个空闲逻辑块).然后置位对应逻辑块在逻辑位图
// 中的位.接着为该逻辑块在缓冲区中取得一块对应缓冲块.最后将该缓冲块清零,并设置其已更新标志和已修改标志.并返回逻辑块号.
// 函数执行成功则返回逻辑块号(盘块号),否则返回0.
int new_block(int dev)
{
   14e35:	57                   	push   %edi
   14e36:	56                   	push   %esi
   14e37:	53                   	push   %ebx
   14e38:	83 ec 20             	sub    $0x20,%esp
	int i,j;

	// 首先获取设备dev的超级块.如果指定设备的超级块不存在,则出错停机.然后扫描文件系统的8块逻辑块位图,寻找首个0值位,以寻找
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
   14e3b:	83 ec 0c             	sub    $0xc,%esp
   14e3e:	ff 74 24 3c          	pushl  0x3c(%esp)
   14e42:	e8 cd ac ff ff       	call   fb14 <get_super>
   14e47:	83 c4 10             	add    $0x10,%esp
   14e4a:	89 44 24 10          	mov    %eax,0x10(%esp)
   14e4e:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   14e53:	75 10                	jne    14e65 <new_block+0x30>
		panic("trying to get new block from nonexistant device");
   14e55:	83 ec 0c             	sub    $0xc,%esp
   14e58:	68 8c 3c 02 00       	push   $0x23c8c
   14e5d:	e8 a5 3d ff ff       	call   8c07 <panic>
   14e62:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   14e65:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   14e6c:	00 
	for (i = 0 ; i < 8 ; i++)
   14e6d:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   14e74:	00 
   14e75:	eb 5a                	jmp    14ed1 <new_block+0x9c>
		if (bh = sb->s_zmap[i])
   14e77:	8b 44 24 10          	mov    0x10(%esp),%eax
   14e7b:	8b 54 24 18          	mov    0x18(%esp),%edx
   14e7f:	83 c2 0c             	add    $0xc,%edx
   14e82:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14e86:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14e8a:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14e8f:	74 3b                	je     14ecc <new_block+0x97>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   14e91:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e95:	8b 18                	mov    (%eax),%ebx
   14e97:	b9 00 00 00 00       	mov    $0x0,%ecx
   14e9c:	89 de                	mov    %ebx,%esi
   14e9e:	fc                   	cld    
   14e9f:	ad                   	lods   %ds:(%esi),%eax
   14ea0:	f7 d0                	not    %eax
   14ea2:	0f bc d0             	bsf    %eax,%edx
   14ea5:	74 04                	je     14eab <new_block+0x76>
   14ea7:	01 d1                	add    %edx,%ecx
   14ea9:	eb 0b                	jmp    14eb6 <new_block+0x81>
   14eab:	83 c1 20             	add    $0x20,%ecx
   14eae:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   14eb4:	7c e9                	jl     14e9f <new_block+0x6a>
   14eb6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   14eba:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14ebe:	89 44 24 14          	mov    %eax,0x14(%esp)
   14ec2:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14ec9:	00 
   14eca:	7e 0e                	jle    14eda <new_block+0xa5>
	for (i = 0 ; i < 8 ; i++)
   14ecc:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   14ed1:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14ed6:	7e 9f                	jle    14e77 <new_block+0x42>
   14ed8:	eb 01                	jmp    14edb <new_block+0xa6>
				break;
   14eda:	90                   	nop
	if (i >= 8 || !bh || j >= 8192)
   14edb:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14ee0:	7f 11                	jg     14ef3 <new_block+0xbe>
   14ee2:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14ee7:	74 0a                	je     14ef3 <new_block+0xbe>
   14ee9:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14ef0:	00 
   14ef1:	7e 0a                	jle    14efd <new_block+0xc8>
		return 0;
   14ef3:	b8 00 00 00 00       	mov    $0x0,%eax
   14ef8:	e9 ef 00 00 00       	jmp    14fec <new_block+0x1b7>
	// 接着设置找到的新逻辑块j对应逻辑块位图中的位.若对应位已经置位,则出错停机.否则置存在位图的对应缓冲区块已修改标志.因为
	// 逻辑块位图仅表示盘上数据区中逻辑块的占用情况,即逻辑块位图中位偏移值表示从数据区开始处算起的块号,因此这里需要加上数据
	// 区第1个逻辑块的块号,把j转换成逻辑块号.此时如果新逻辑块大于该设备上的总逻辑块数,则说明指定逻辑块在对应设备上不存在.
	// 申请失败,返回0退出.
	if (set_bit(j, bh->b_data))
   14efd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f01:	8b 08                	mov    (%eax),%ecx
   14f03:	b8 00 00 00 00       	mov    $0x0,%eax
   14f08:	8b 54 24 14          	mov    0x14(%esp),%edx
   14f0c:	0f ab 11             	bts    %edx,(%ecx)
   14f0f:	0f 92 c0             	setb   %al
   14f12:	85 c0                	test   %eax,%eax
   14f14:	74 10                	je     14f26 <new_block+0xf1>
		panic("new_block: bit already set");
   14f16:	83 ec 0c             	sub    $0xc,%esp
   14f19:	68 bc 3c 02 00       	push   $0x23cbc
   14f1e:	e8 e4 3c ff ff       	call   8c07 <panic>
   14f23:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   14f26:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f2a:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	j += i * 8192 + sb->s_firstdatazone - 1;
   14f2e:	8b 44 24 18          	mov    0x18(%esp),%eax
   14f32:	c1 e0 0d             	shl    $0xd,%eax
   14f35:	89 c2                	mov    %eax,%edx
   14f37:	8b 44 24 10          	mov    0x10(%esp),%eax
   14f3b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14f3f:	0f b7 c0             	movzwl %ax,%eax
   14f42:	01 d0                	add    %edx,%eax
   14f44:	83 e8 01             	sub    $0x1,%eax
   14f47:	01 44 24 14          	add    %eax,0x14(%esp)
	if (j >= sb->s_nzones)
   14f4b:	8b 44 24 10          	mov    0x10(%esp),%eax
   14f4f:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14f53:	0f b7 c0             	movzwl %ax,%eax
   14f56:	39 44 24 14          	cmp    %eax,0x14(%esp)
   14f5a:	7c 0a                	jl     14f66 <new_block+0x131>
		return 0;
   14f5c:	b8 00 00 00 00       	mov    $0x0,%eax
   14f61:	e9 86 00 00 00       	jmp    14fec <new_block+0x1b7>
	// 然后在高速缓冲区中为该设备上指定的逻辑块号取得一个缓冲块,并返回缓冲块头指针.
	// 因为刚取得的逻辑块其引用次数一定为1(getblk()中会设置),因此若不为1则停机.最后将新逻辑块清零,并设置其已更新标志和已
	// 修改标志.然后释放对应缓冲块,返回逻辑块号.
	if (!(bh = getblk(dev, j)))
   14f66:	83 ec 08             	sub    $0x8,%esp
   14f69:	ff 74 24 1c          	pushl  0x1c(%esp)
   14f6d:	ff 74 24 3c          	pushl  0x3c(%esp)
   14f71:	e8 1e a5 ff ff       	call   f494 <getblk>
   14f76:	83 c4 10             	add    $0x10,%esp
   14f79:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14f7d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14f82:	75 10                	jne    14f94 <new_block+0x15f>
		panic("new_block: cannot get block");
   14f84:	83 ec 0c             	sub    $0xc,%esp
   14f87:	68 d7 3c 02 00       	push   $0x23cd7
   14f8c:	e8 76 3c ff ff       	call   8c07 <panic>
   14f91:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count != 1)
   14f94:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f98:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14f9c:	3c 01                	cmp    $0x1,%al
   14f9e:	74 10                	je     14fb0 <new_block+0x17b>
		panic("new block: count is != 1");
   14fa0:	83 ec 0c             	sub    $0xc,%esp
   14fa3:	68 f3 3c 02 00       	push   $0x23cf3
   14fa8:	e8 5a 3c ff ff       	call   8c07 <panic>
   14fad:	83 c4 10             	add    $0x10,%esp
	clear_block(bh->b_data);
   14fb0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14fb4:	8b 00                	mov    (%eax),%eax
   14fb6:	89 c3                	mov    %eax,%ebx
   14fb8:	b8 00 00 00 00       	mov    $0x0,%eax
   14fbd:	ba 00 01 00 00       	mov    $0x100,%edx
   14fc2:	89 d1                	mov    %edx,%ecx
   14fc4:	89 df                	mov    %ebx,%edi
   14fc6:	fc                   	cld    
   14fc7:	f3 ab                	rep stos %eax,%es:(%edi)
	bh->b_uptodate = 1;
   14fc9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14fcd:	c6 40 0a 01          	movb   $0x1,0xa(%eax)
	bh->b_dirt = 1;
   14fd1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14fd5:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14fd9:	83 ec 0c             	sub    $0xc,%esp
   14fdc:	ff 74 24 28          	pushl  0x28(%esp)
   14fe0:	e8 68 a6 ff ff       	call   f64d <brelse>
   14fe5:	83 c4 10             	add    $0x10,%esp
	return j;
   14fe8:	8b 44 24 14          	mov    0x14(%esp),%eax
}
   14fec:	83 c4 20             	add    $0x20,%esp
   14fef:	5b                   	pop    %ebx
   14ff0:	5e                   	pop    %esi
   14ff1:	5f                   	pop    %edi
   14ff2:	c3                   	ret    

00014ff3 <free_inode>:

// 释放指定的i节点。
// 该函数首先判断参数给出的i节点号的有效性和可释放性。若i节点仍然在使用中则不能被释放。然后利用超级块信息对i节点位图进行
// 操作，复位i节点号对应的i节点位图中位，并清空i节点结构。
void free_inode(struct m_inode * inode)
{
   14ff3:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
   14ff6:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   14ffb:	0f 84 64 01 00 00    	je     15165 <free_inode+0x172>
		return;
	if (!inode->i_dev) {
   15001:	8b 44 24 20          	mov    0x20(%esp),%eax
   15005:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15009:	66 85 c0             	test   %ax,%ax
   1500c:	75 15                	jne    15023 <free_inode+0x30>
		memset(inode, 0, sizeof(*inode));
   1500e:	6a 3c                	push   $0x3c
   15010:	6a 00                	push   $0x0
   15012:	ff 74 24 28          	pushl  0x28(%esp)
   15016:	e8 74 fc ff ff       	call   14c8f <memset>
   1501b:	83 c4 0c             	add    $0xc,%esp
		return;
   1501e:	e9 43 01 00 00       	jmp    15166 <free_inode+0x173>
	}
	// 如果此i节点还有其他程序引用，则不释放，说明内核有问题，停机。如果文件连接数不为0,则表示还有其他文件目录项在使用该节点，
	// 因此也不应释放，而应该放回等。
	if (inode->i_count > 1) {
   15023:	8b 44 24 20          	mov    0x20(%esp),%eax
   15027:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1502b:	66 83 f8 01          	cmp    $0x1,%ax
   1502f:	76 2c                	jbe    1505d <free_inode+0x6a>
		printk("trying to free inode with count=%d\n", inode->i_count);
   15031:	8b 44 24 20          	mov    0x20(%esp),%eax
   15035:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   15039:	0f b7 c0             	movzwl %ax,%eax
   1503c:	83 ec 08             	sub    $0x8,%esp
   1503f:	50                   	push   %eax
   15040:	68 0c 3d 02 00       	push   $0x23d0c
   15045:	e8 fc 3b ff ff       	call   8c46 <printk>
   1504a:	83 c4 10             	add    $0x10,%esp
		panic("free_inode");
   1504d:	83 ec 0c             	sub    $0xc,%esp
   15050:	68 30 3d 02 00       	push   $0x23d30
   15055:	e8 ad 3b ff ff       	call   8c07 <panic>
   1505a:	83 c4 10             	add    $0x10,%esp
	}
	if (inode->i_nlinks)
   1505d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15061:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   15065:	84 c0                	test   %al,%al
   15067:	74 10                	je     15079 <free_inode+0x86>
		panic("trying to free inode with links");
   15069:	83 ec 0c             	sub    $0xc,%esp
   1506c:	68 3c 3d 02 00       	push   $0x23d3c
   15071:	e8 91 3b ff ff       	call   8c07 <panic>
   15076:	83 c4 10             	add    $0x10,%esp
	// 在判断完i节点的合理性之后，我们开始利用其超级块信息对其i节点位图进行操作。首先取i节点所在设备的超级块，测试设备是否存在。
	// 然后判断i节点号的范围是否正确，如果i节点号等于0或大于该设备上i节点总数，则出错（0号i节点保留没有使用）。如果该i节点对应
	// 的节点位图不存在，则出错。因为一个缓冲块的i节点位图有8192比特位。因此i_num>>13（即i_num/8192）可以得到当前i节点号所
	// 在的s_imap[]项，即所在盘块。
	if (!(sb = get_super(inode->i_dev)))
   15079:	8b 44 24 20          	mov    0x20(%esp),%eax
   1507d:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15081:	0f b7 c0             	movzwl %ax,%eax
   15084:	83 ec 0c             	sub    $0xc,%esp
   15087:	50                   	push   %eax
   15088:	e8 87 aa ff ff       	call   fb14 <get_super>
   1508d:	83 c4 10             	add    $0x10,%esp
   15090:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15094:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15099:	75 10                	jne    150ab <free_inode+0xb8>
		panic("trying to free inode on nonexistent device");
   1509b:	83 ec 0c             	sub    $0xc,%esp
   1509e:	68 5c 3d 02 00       	push   $0x23d5c
   150a3:	e8 5f 3b ff ff       	call   8c07 <panic>
   150a8:	83 c4 10             	add    $0x10,%esp
	if (inode->i_num < 1 || inode->i_num > sb->s_ninodes)
   150ab:	8b 44 24 20          	mov    0x20(%esp),%eax
   150af:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   150b3:	66 85 c0             	test   %ax,%ax
   150b6:	74 14                	je     150cc <free_inode+0xd9>
   150b8:	8b 44 24 20          	mov    0x20(%esp),%eax
   150bc:	0f b7 50 32          	movzwl 0x32(%eax),%edx
   150c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   150c4:	0f b7 00             	movzwl (%eax),%eax
   150c7:	66 39 c2             	cmp    %ax,%dx
   150ca:	76 10                	jbe    150dc <free_inode+0xe9>
		panic("trying to free inode 0 or nonexistant inode");
   150cc:	83 ec 0c             	sub    $0xc,%esp
   150cf:	68 88 3d 02 00       	push   $0x23d88
   150d4:	e8 2e 3b ff ff       	call   8c07 <panic>
   150d9:	83 c4 10             	add    $0x10,%esp
	if (!(bh = sb->s_imap[inode->i_num >> 13]))
   150dc:	8b 44 24 20          	mov    0x20(%esp),%eax
   150e0:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   150e4:	66 c1 e8 0d          	shr    $0xd,%ax
   150e8:	0f b7 d0             	movzwl %ax,%edx
   150eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   150ef:	83 c2 04             	add    $0x4,%edx
   150f2:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   150f6:	89 44 24 08          	mov    %eax,0x8(%esp)
   150fa:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   150ff:	75 10                	jne    15111 <free_inode+0x11e>
		panic("nonexistent imap in superblock");
   15101:	83 ec 0c             	sub    $0xc,%esp
   15104:	68 b4 3d 02 00       	push   $0x23db4
   15109:	e8 f9 3a ff ff       	call   8c07 <panic>
   1510e:	83 c4 10             	add    $0x10,%esp
	// 现在我们复位i节点对应的节点位图中的位。如果该位已经等于0,则显示出错警告信息。最后置i节点位图所在缓冲区已修改标志，并清空
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
   15111:	8b 44 24 20          	mov    0x20(%esp),%eax
   15115:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15119:	0f b7 c0             	movzwl %ax,%eax
   1511c:	25 ff 1f 00 00       	and    $0x1fff,%eax
   15121:	89 c1                	mov    %eax,%ecx
   15123:	8b 44 24 08          	mov    0x8(%esp),%eax
   15127:	8b 10                	mov    (%eax),%edx
   15129:	b8 00 00 00 00       	mov    $0x0,%eax
   1512e:	0f b3 0a             	btr    %ecx,(%edx)
   15131:	0f 93 c0             	setae  %al
   15134:	85 c0                	test   %eax,%eax
   15136:	74 10                	je     15148 <free_inode+0x155>
		printk("free_inode: bit already cleared.\n\r");
   15138:	83 ec 0c             	sub    $0xc,%esp
   1513b:	68 d4 3d 02 00       	push   $0x23dd4
   15140:	e8 01 3b ff ff       	call   8c46 <printk>
   15145:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   15148:	8b 44 24 08          	mov    0x8(%esp),%eax
   1514c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	memset(inode, 0, sizeof(*inode));
   15150:	83 ec 04             	sub    $0x4,%esp
   15153:	6a 3c                	push   $0x3c
   15155:	6a 00                	push   $0x0
   15157:	ff 74 24 2c          	pushl  0x2c(%esp)
   1515b:	e8 2f fb ff ff       	call   14c8f <memset>
   15160:	83 c4 10             	add    $0x10,%esp
   15163:	eb 01                	jmp    15166 <free_inode+0x173>
		return;
   15165:	90                   	nop
}
   15166:	83 c4 1c             	add    $0x1c,%esp
   15169:	c3                   	ret    

0001516a <new_inode>:

// 为设备dev建立一个新i节点。初始化并返回该新i节点的指针。
// 在内存i节点表中获取一个空闲i节点表项，并从i节点位图中找一个空闲i节点。
struct m_inode * new_inode(int dev)
{
   1516a:	56                   	push   %esi
   1516b:	53                   	push   %ebx
   1516c:	83 ec 24             	sub    $0x24,%esp
	int i, j;

	// 首先从内在i节点表（inode_table）中获取一个空闲i节点项，并读取指定设备的超级块结构。然后扫描超级块中8块i节点位图，
	// 寻找第1个0位，寻找空闲节点，获取放置该i节点的节点号。如果全部扫描完还没找到，或者位图所在的缓冲块无效（bh = NULL）
	// 则放回先前申请的i节点表中的i节点，并返回空指针退出（没有空闲i节点）。
	if (!(inode = get_empty_inode()))
   1516f:	e8 07 97 ff ff       	call   e87b <get_empty_inode>
   15174:	89 44 24 10          	mov    %eax,0x10(%esp)
   15178:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1517d:	75 0a                	jne    15189 <new_inode+0x1f>
		return NULL;
   1517f:	b8 00 00 00 00       	mov    $0x0,%eax
   15184:	e9 c5 01 00 00       	jmp    1534e <new_inode+0x1e4>
	if (!(sb = get_super(dev)))
   15189:	83 ec 0c             	sub    $0xc,%esp
   1518c:	ff 74 24 3c          	pushl  0x3c(%esp)
   15190:	e8 7f a9 ff ff       	call   fb14 <get_super>
   15195:	83 c4 10             	add    $0x10,%esp
   15198:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1519c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   151a1:	75 10                	jne    151b3 <new_inode+0x49>
		panic("new_inode with unknown device");
   151a3:	83 ec 0c             	sub    $0xc,%esp
   151a6:	68 f7 3d 02 00       	push   $0x23df7
   151ab:	e8 57 3a ff ff       	call   8c07 <panic>
   151b0:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   151b3:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   151ba:	00 
	for (i = 0 ; i < 8 ; i++)
   151bb:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   151c2:	00 
   151c3:	eb 5a                	jmp    1521f <new_inode+0xb5>
		if (bh = sb->s_imap[i])
   151c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   151c9:	8b 54 24 18          	mov    0x18(%esp),%edx
   151cd:	83 c2 04             	add    $0x4,%edx
   151d0:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   151d4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   151d8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   151dd:	74 3b                	je     1521a <new_inode+0xb0>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   151df:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   151e3:	8b 18                	mov    (%eax),%ebx
   151e5:	b9 00 00 00 00       	mov    $0x0,%ecx
   151ea:	89 de                	mov    %ebx,%esi
   151ec:	fc                   	cld    
   151ed:	ad                   	lods   %ds:(%esi),%eax
   151ee:	f7 d0                	not    %eax
   151f0:	0f bc d0             	bsf    %eax,%edx
   151f3:	74 04                	je     151f9 <new_inode+0x8f>
   151f5:	01 d1                	add    %edx,%ecx
   151f7:	eb 0b                	jmp    15204 <new_inode+0x9a>
   151f9:	83 c1 20             	add    $0x20,%ecx
   151fc:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   15202:	7c e9                	jl     151ed <new_inode+0x83>
   15204:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   15208:	8b 44 24 08          	mov    0x8(%esp),%eax
   1520c:	89 44 24 14          	mov    %eax,0x14(%esp)
   15210:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   15217:	00 
   15218:	7e 0e                	jle    15228 <new_inode+0xbe>
	for (i = 0 ; i < 8 ; i++)
   1521a:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   1521f:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   15224:	7e 9f                	jle    151c5 <new_inode+0x5b>
   15226:	eb 01                	jmp    15229 <new_inode+0xbf>
				break;
   15228:	90                   	nop
	if (!bh || j >= 8192 || j + i * 8192 > sb->s_ninodes) {
   15229:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1522e:	74 27                	je     15257 <new_inode+0xed>
   15230:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   15237:	00 
   15238:	7f 1d                	jg     15257 <new_inode+0xed>
   1523a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1523e:	c1 e0 0d             	shl    $0xd,%eax
   15241:	89 c2                	mov    %eax,%edx
   15243:	8b 44 24 14          	mov    0x14(%esp),%eax
   15247:	01 c2                	add    %eax,%edx
   15249:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1524d:	0f b7 00             	movzwl (%eax),%eax
   15250:	0f b7 c0             	movzwl %ax,%eax
   15253:	39 c2                	cmp    %eax,%edx
   15255:	7e 19                	jle    15270 <new_inode+0x106>
		iput(inode);
   15257:	83 ec 0c             	sub    $0xc,%esp
   1525a:	ff 74 24 1c          	pushl  0x1c(%esp)
   1525e:	e8 59 94 ff ff       	call   e6bc <iput>
   15263:	83 c4 10             	add    $0x10,%esp
		return NULL;
   15266:	b8 00 00 00 00       	mov    $0x0,%eax
   1526b:	e9 de 00 00 00       	jmp    1534e <new_inode+0x1e4>
	}
	// 现在我们已经找到了还未使用的i节点号j。于是置位i节点j对应的i节点位图相应比特位（如果已经置位，则出错）。然后置i节点
	// 位图所在缓冲块已修改标志。最后初始化该i节点结构（i_ctime是i节点内容改变时间）。
	if (set_bit(j, bh->b_data))
   15270:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15274:	8b 08                	mov    (%eax),%ecx
   15276:	b8 00 00 00 00       	mov    $0x0,%eax
   1527b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1527f:	0f ab 11             	bts    %edx,(%ecx)
   15282:	0f 92 c0             	setb   %al
   15285:	85 c0                	test   %eax,%eax
   15287:	74 10                	je     15299 <new_inode+0x12f>
		panic("new_inode: bit already set");
   15289:	83 ec 0c             	sub    $0xc,%esp
   1528c:	68 15 3e 02 00       	push   $0x23e15
   15291:	e8 71 39 ff ff       	call   8c07 <panic>
   15296:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   15299:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1529d:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_count = 1;               										// 引用计数。
   152a1:	8b 44 24 10          	mov    0x10(%esp),%eax
   152a5:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	inode->i_nlinks = 1;              										// 文件目录项链接数。
   152ab:	8b 44 24 10          	mov    0x10(%esp),%eax
   152af:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	inode->i_dev = dev;               										// i节点所在的设备号。
   152b3:	8b 44 24 30          	mov    0x30(%esp),%eax
   152b7:	89 c2                	mov    %eax,%edx
   152b9:	8b 44 24 10          	mov    0x10(%esp),%eax
   152bd:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_uid = current->euid;     										// i节点所属用户id。
   152c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   152c6:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   152cd:	8b 44 24 10          	mov    0x10(%esp),%eax
   152d1:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = current->egid;     										// 组id。
   152d5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   152da:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   152e1:	89 c2                	mov    %eax,%edx
   152e3:	8b 44 24 10          	mov    0x10(%esp),%eax
   152e7:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;                										// 已修改标志置位。
   152ea:	8b 44 24 10          	mov    0x10(%esp),%eax
   152ee:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_num = j + i * 8192;      										// 对应设备中的i节点号。
   152f2:	8b 44 24 18          	mov    0x18(%esp),%eax
   152f6:	c1 e0 0d             	shl    $0xd,%eax
   152f9:	89 c2                	mov    %eax,%edx
   152fb:	8b 44 24 14          	mov    0x14(%esp),%eax
   152ff:	01 c2                	add    %eax,%edx
   15301:	8b 44 24 10          	mov    0x10(%esp),%eax
   15305:	66 89 50 32          	mov    %dx,0x32(%eax)
	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;        // 设置时间。
   15309:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   1530e:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   15314:	01 d0                	add    %edx,%eax
   15316:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1531b:	f7 e2                	mul    %edx
   1531d:	c1 ea 05             	shr    $0x5,%edx
   15320:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   15325:	01 c2                	add    %eax,%edx
   15327:	8b 44 24 10          	mov    0x10(%esp),%eax
   1532b:	89 50 2c             	mov    %edx,0x2c(%eax)
   1532e:	8b 44 24 10          	mov    0x10(%esp),%eax
   15332:	8b 50 2c             	mov    0x2c(%eax),%edx
   15335:	8b 44 24 10          	mov    0x10(%esp),%eax
   15339:	89 50 28             	mov    %edx,0x28(%eax)
   1533c:	8b 44 24 10          	mov    0x10(%esp),%eax
   15340:	8b 50 28             	mov    0x28(%eax),%edx
   15343:	8b 44 24 10          	mov    0x10(%esp),%eax
   15347:	89 50 08             	mov    %edx,0x8(%eax)
	return inode;                   										// 返回该i节点指针。
   1534a:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1534e:	83 c4 24             	add    $0x24,%esp
   15351:	5b                   	pop    %ebx
   15352:	5e                   	pop    %esi
   15353:	c3                   	ret    

00015354 <dupfd>:

// 复制文件句柄(文件描述符).
// 参数fd是欲复制的文件句柄,arg指定新文件句柄的最小数值
// 返回新文件句柄或出错码.
static int dupfd(unsigned int fd, unsigned int arg)
{
   15354:	53                   	push   %ebx
	// 首先检查函数参数的有效性.如果文件句柄值大于一个程序最多打开文件数NR_OPEN,或者该句柄的文件结构不存在,则返回出错码并退出.如果指定的新
	// 句柄值arg大于最多打开文件数,也返回出错码并退出.注意,实际上文件句柄就是进程文件结构指针数组项索引号.
	if (fd >= NR_OPEN || !current->filp[fd])
   15355:	83 7c 24 08 13       	cmpl   $0x13,0x8(%esp)
   1535a:	77 17                	ja     15373 <dupfd+0x1f>
   1535c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15361:	8b 54 24 08          	mov    0x8(%esp),%edx
   15365:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1536b:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1536f:	85 c0                	test   %eax,%eax
   15371:	75 0a                	jne    1537d <dupfd+0x29>
		return -EBADF;
   15373:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15378:	e9 b4 00 00 00       	jmp    15431 <dupfd+0xdd>
	if (arg >= NR_OPEN)
   1537d:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   15382:	76 26                	jbe    153aa <dupfd+0x56>
		return -EINVAL;
   15384:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   15389:	e9 a3 00 00 00       	jmp    15431 <dupfd+0xdd>
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
		if (current->filp[arg])
   1538e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15393:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15397:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1539d:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   153a1:	85 c0                	test   %eax,%eax
   153a3:	74 0e                	je     153b3 <dupfd+0x5f>
			arg++;
   153a5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (arg < NR_OPEN)
   153aa:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   153af:	76 dd                	jbe    1538e <dupfd+0x3a>
   153b1:	eb 01                	jmp    153b4 <dupfd+0x60>
		else
			break;
   153b3:	90                   	nop
	if (arg >= NR_OPEN)
   153b4:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   153b9:	76 07                	jbe    153c2 <dupfd+0x6e>
		return -EMFILE;
   153bb:	b8 e8 ff ff ff       	mov    $0xffffffe8,%eax
   153c0:	eb 6f                	jmp    15431 <dupfd+0xdd>
	// 否则针对找到的空闲项(句柄),在执行时关闭标志位图close_on_exec中复位该句柄位.即在运行exec()类函数时,不会关闭用dup()创建的的句柄.并令该
	// 文件结构指针等于原句柄fd的指针,并且将文件引用数增1.最后返回新的文件句柄arg.
	current->close_on_exec &= ~(1 << arg);
   153c2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   153c7:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   153cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   153d1:	bb 01 00 00 00       	mov    $0x1,%ebx
   153d6:	89 c1                	mov    %eax,%ecx
   153d8:	d3 e3                	shl    %cl,%ebx
   153da:	89 d8                	mov    %ebx,%eax
   153dc:	f7 d0                	not    %eax
   153de:	89 c1                	mov    %eax,%ecx
   153e0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   153e5:	21 ca                	and    %ecx,%edx
   153e7:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	(current->filp[arg] = current->filp[fd])->f_count++;
   153ed:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   153f3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   153f8:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   153fc:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   15402:	8b 54 8a 08          	mov    0x8(%edx,%ecx,4),%edx
   15406:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1540a:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   15410:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
   15414:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15418:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1541e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15422:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   15426:	83 c2 01             	add    $0x1,%edx
   15429:	66 89 50 04          	mov    %dx,0x4(%eax)
	return arg;
   1542d:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   15431:	5b                   	pop    %ebx
   15432:	c3                   	ret    

00015433 <sys_dup2>:
// 复制文件句柄系统调用。
// 复制指定文件句柄oldfd，新文件句柄值等于newfd。如果newfd已打开，则首先关闭之。
// 参数：oldfd -- 原文件句柄；newfd - 新文件句柄。
// 返回新文件句柄值。
int sys_dup2(unsigned int oldfd, unsigned int newfd)
{
   15433:	83 ec 0c             	sub    $0xc,%esp
	sys_close(newfd);               						// 若句柄newfd已经打开，则首先关闭之。
   15436:	8b 44 24 14          	mov    0x14(%esp),%eax
   1543a:	83 ec 0c             	sub    $0xc,%esp
   1543d:	50                   	push   %eax
   1543e:	e8 5b 87 ff ff       	call   db9e <sys_close>
   15443:	83 c4 10             	add    $0x10,%esp
	return dupfd(oldfd, newfd);      						// 复制并返回新句柄。
   15446:	83 ec 08             	sub    $0x8,%esp
   15449:	ff 74 24 1c          	pushl  0x1c(%esp)
   1544d:	ff 74 24 1c          	pushl  0x1c(%esp)
   15451:	e8 fe fe ff ff       	call   15354 <dupfd>
   15456:	83 c4 10             	add    $0x10,%esp
}
   15459:	83 c4 0c             	add    $0xc,%esp
   1545c:	c3                   	ret    

0001545d <sys_dup>:
// 复制指定文件句柄oldfd,新句柄的值是当前最小的未用句柄值.
// 参数:fildes -- 被复制的文件句柄.
// 返回新文件句柄值.
int sys_dup(unsigned int fildes)
{
	return dupfd(fildes, 0);
   1545d:	6a 00                	push   $0x0
   1545f:	ff 74 24 08          	pushl  0x8(%esp)
   15463:	e8 ec fe ff ff       	call   15354 <dupfd>
   15468:	83 c4 08             	add    $0x8,%esp
}
   1546b:	c3                   	ret    

0001546c <sys_fcntl>:
// arg是新文件句可取的最小值；对于设置文件操作和访问标志命令F_SETFL，arg是新的文件操作和访问模式。对于文件上锁命令
// F_GETLK、F_SETLK和F_SETLKW，arg是指向flock结构的指针。但本内核中没有实现文件上锁功能。
// 返回：若出错，则所有操作都返回-1.若成功，那么F_DUPFD返回新文件句柄；F_GETFD返回文件句柄的当前执行时关闭标志
// close_on_exec；F_GETFL返回文件操作和访问标志。
int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   1546c:	53                   	push   %ebx
   1546d:	83 ec 10             	sub    $0x10,%esp
	struct file * filp;

	// 首先检查给出的文件句柄有效性。然后根据不同命令cmd进行分别处理。如果文件句柄值大于一个进程最多打开文件数NR_OPEN，或者
	// 该句柄的文件结构指针为空，则返回出错码并退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   15470:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
   15475:	77 1e                	ja     15495 <sys_fcntl+0x29>
   15477:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1547c:	8b 54 24 18          	mov    0x18(%esp),%edx
   15480:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15486:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1548a:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1548e:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15493:	75 0a                	jne    1549f <sys_fcntl+0x33>
		return -EBADF;
   15495:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   1549a:	e9 05 01 00 00       	jmp    155a4 <sys_fcntl+0x138>
	switch (cmd) {
   1549f:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   154a4:	0f 87 f5 00 00 00    	ja     1559f <sys_fcntl+0x133>
   154aa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   154ae:	c1 e0 02             	shl    $0x2,%eax
   154b1:	05 30 3e 02 00       	add    $0x23e30,%eax
   154b6:	8b 00                	mov    (%eax),%eax
   154b8:	ff e0                	jmp    *%eax
		case F_DUPFD:   										// 复制文件句柄。
			return dupfd(fd,arg);
   154ba:	ff 74 24 20          	pushl  0x20(%esp)
   154be:	ff 74 24 1c          	pushl  0x1c(%esp)
   154c2:	e8 8d fe ff ff       	call   15354 <dupfd>
   154c7:	83 c4 08             	add    $0x8,%esp
   154ca:	e9 d5 00 00 00       	jmp    155a4 <sys_fcntl+0x138>
		case F_GETFD:   										// 取文件句柄的执行时关闭标志。
			return (current->close_on_exec >> fd) & 1;
   154cf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   154d4:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   154da:	8b 44 24 18          	mov    0x18(%esp),%eax
   154de:	89 c1                	mov    %eax,%ecx
   154e0:	d3 ea                	shr    %cl,%edx
   154e2:	89 d0                	mov    %edx,%eax
   154e4:	83 e0 01             	and    $0x1,%eax
   154e7:	e9 b8 00 00 00       	jmp    155a4 <sys_fcntl+0x138>
		case F_SETFD:   										// 设置执行时关闭标志。arg位0置位是设置，否则关闭。
			if (arg & 1)
   154ec:	8b 44 24 20          	mov    0x20(%esp),%eax
   154f0:	83 e0 01             	and    $0x1,%eax
   154f3:	85 c0                	test   %eax,%eax
   154f5:	74 2b                	je     15522 <sys_fcntl+0xb6>
				current->close_on_exec |= (1 << fd);
   154f7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   154fc:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   15502:	8b 44 24 18          	mov    0x18(%esp),%eax
   15506:	bb 01 00 00 00       	mov    $0x1,%ebx
   1550b:	89 c1                	mov    %eax,%ecx
   1550d:	d3 e3                	shl    %cl,%ebx
   1550f:	89 d8                	mov    %ebx,%eax
   15511:	89 c1                	mov    %eax,%ecx
   15513:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15518:	09 ca                	or     %ecx,%edx
   1551a:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
   15520:	eb 2b                	jmp    1554d <sys_fcntl+0xe1>
			else
				current->close_on_exec &= ~(1 << fd);
   15522:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15527:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   1552d:	8b 44 24 18          	mov    0x18(%esp),%eax
   15531:	bb 01 00 00 00       	mov    $0x1,%ebx
   15536:	89 c1                	mov    %eax,%ecx
   15538:	d3 e3                	shl    %cl,%ebx
   1553a:	89 d8                	mov    %ebx,%eax
   1553c:	f7 d0                	not    %eax
   1553e:	89 c1                	mov    %eax,%ecx
   15540:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15545:	21 ca                	and    %ecx,%edx
   15547:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
			return 0;
   1554d:	b8 00 00 00 00       	mov    $0x0,%eax
   15552:	eb 50                	jmp    155a4 <sys_fcntl+0x138>
		case F_GETFL:   										// 取文件状态标志和访问模式。
			return filp->f_flags;
   15554:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15558:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   1555c:	0f b7 c0             	movzwl %ax,%eax
   1555f:	eb 43                	jmp    155a4 <sys_fcntl+0x138>
		case F_SETFL:   										// 设置文件状态和访问模式（根据arg设置添加、非阻塞标志）。
			filp->f_flags &= ~(O_APPEND | O_NONBLOCK);
   15561:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15565:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   15569:	80 e4 f3             	and    $0xf3,%ah
   1556c:	89 c2                	mov    %eax,%edx
   1556e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15572:	66 89 50 02          	mov    %dx,0x2(%eax)
			filp->f_flags |= arg & (O_APPEND | O_NONBLOCK);
   15576:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1557a:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   1557e:	8b 54 24 20          	mov    0x20(%esp),%edx
   15582:	66 81 e2 00 0c       	and    $0xc00,%dx
   15587:	09 c2                	or     %eax,%edx
   15589:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1558d:	66 89 50 02          	mov    %dx,0x2(%eax)
			return 0;
   15591:	b8 00 00 00 00       	mov    $0x0,%eax
   15596:	eb 0c                	jmp    155a4 <sys_fcntl+0x138>
		case F_GETLK:	case F_SETLK:	case F_SETLKW:  		// 未实现。
			return -1;
   15598:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1559d:	eb 05                	jmp    155a4 <sys_fcntl+0x138>
		default:
			return -1;
   1559f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
   155a4:	83 c4 10             	add    $0x10,%esp
   155a7:	5b                   	pop    %ebx
   155a8:	c3                   	ret    

000155a9 <sys_ioctl>:
// 该函数首先判断参数给出的文件描述符是否有效。然后根据对应i节点中文件属性判断文件类型，并根据具体文件类型调用相关
// 的处理函数。
// 参数：fd - 文件描述符； cmd - 命令码； arg - 参数。
// 返回：成功则返回0,否则返回出错码。
int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   155a9:	83 ec 1c             	sub    $0x1c,%esp
	struct file * filp;
	int dev, mode;

	// 首先判断给出的文件描述符的有效性。如果文件描述符超出可打开的文件数，或者对应描述符的文件结构指针为空，则返回出错
	// 码退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   155ac:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   155b1:	77 1e                	ja     155d1 <sys_ioctl+0x28>
   155b3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   155b8:	8b 54 24 20          	mov    0x20(%esp),%edx
   155bc:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   155c2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   155c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
   155ca:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   155cf:	75 0a                	jne    155db <sys_ioctl+0x32>
		return -EBADF;
   155d1:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   155d6:	e9 e6 00 00 00       	jmp    156c1 <sys_ioctl+0x118>
	// 如果文件结构对应的是管道i节点，则根据进程是否有权操作该管道确定是否执行管道IO控制操作。若有权执行则调用pipe_ioctl()，
	// 否则返回无效文件错误码。
	if (filp->f_inode->i_pipe)
   155db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155df:	8b 40 08             	mov    0x8(%eax),%eax
   155e2:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   155e6:	84 c0                	test   %al,%al
   155e8:	74 3d                	je     15627 <sys_ioctl+0x7e>
		return (filp->f_mode & 1) ? pipe_ioctl(filp->f_inode, cmd, arg) : -EBADF;
   155ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155ee:	0f b7 00             	movzwl (%eax),%eax
   155f1:	0f b7 c0             	movzwl %ax,%eax
   155f4:	83 e0 01             	and    $0x1,%eax
   155f7:	85 c0                	test   %eax,%eax
   155f9:	74 22                	je     1561d <sys_ioctl+0x74>
   155fb:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   155ff:	8b 54 24 24          	mov    0x24(%esp),%edx
   15603:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15607:	8b 40 08             	mov    0x8(%eax),%eax
   1560a:	83 ec 04             	sub    $0x4,%esp
   1560d:	51                   	push   %ecx
   1560e:	52                   	push   %edx
   1560f:	50                   	push   %eax
   15610:	e8 90 d3 ff ff       	call   129a5 <pipe_ioctl>
   15615:	83 c4 10             	add    $0x10,%esp
   15618:	e9 a4 00 00 00       	jmp    156c1 <sys_ioctl+0x118>
   1561d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15622:	e9 9a 00 00 00       	jmp    156c1 <sys_ioctl+0x118>
	// 对于其他类型文件，取对应文件的属性，并据此判断文件的类型。如果该文件即不是字符设备文件，也不是块设备文件，则返回
	// 出错码退出。若是字符或块设备文件，则从文件的i节点中取设备号。如果设备号大于系统现有的设备数，则返回出错号。
	mode = filp->f_inode->i_mode;
   15627:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1562b:	8b 40 08             	mov    0x8(%eax),%eax
   1562e:	0f b7 00             	movzwl (%eax),%eax
   15631:	0f b7 c0             	movzwl %ax,%eax
   15634:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISCHR(mode) && !S_ISBLK(mode))
   15638:	8b 44 24 08          	mov    0x8(%esp),%eax
   1563c:	25 00 f0 00 00       	and    $0xf000,%eax
   15641:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15646:	74 17                	je     1565f <sys_ioctl+0xb6>
   15648:	8b 44 24 08          	mov    0x8(%esp),%eax
   1564c:	25 00 f0 00 00       	and    $0xf000,%eax
   15651:	3d 00 60 00 00       	cmp    $0x6000,%eax
   15656:	74 07                	je     1565f <sys_ioctl+0xb6>
		return -EINVAL;
   15658:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1565d:	eb 62                	jmp    156c1 <sys_ioctl+0x118>
	dev = filp->f_inode->i_zone[0];
   1565f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15663:	8b 40 08             	mov    0x8(%eax),%eax
   15666:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1566a:	0f b7 c0             	movzwl %ax,%eax
   1566d:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (MAJOR(dev) >= NRDEVS)
   15671:	8b 44 24 04          	mov    0x4(%esp),%eax
   15675:	c1 e8 08             	shr    $0x8,%eax
   15678:	83 f8 07             	cmp    $0x7,%eax
   1567b:	76 07                	jbe    15684 <sys_ioctl+0xdb>
		return -ENODEV;
   1567d:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   15682:	eb 3d                	jmp    156c1 <sys_ioctl+0x118>
	// 然后根据IO控制表ioctl_table查得对应设备的ioctl函数指针，并调用该函数。如果该设备在ioctl函数指针表中没有对应函数，
	// 则返回出错码。
	if (!ioctl_table[MAJOR(dev)])
   15684:	8b 44 24 04          	mov    0x4(%esp),%eax
   15688:	c1 e8 08             	shr    $0x8,%eax
   1568b:	8b 04 85 a0 f3 02 00 	mov    0x2f3a0(,%eax,4),%eax
   15692:	85 c0                	test   %eax,%eax
   15694:	75 07                	jne    1569d <sys_ioctl+0xf4>
		return -ENOTTY;
   15696:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1569b:	eb 24                	jmp    156c1 <sys_ioctl+0x118>
	return ioctl_table[MAJOR(dev)](dev, cmd, arg);
   1569d:	8b 44 24 04          	mov    0x4(%esp),%eax
   156a1:	c1 e8 08             	shr    $0x8,%eax
   156a4:	8b 04 85 a0 f3 02 00 	mov    0x2f3a0(,%eax,4),%eax
   156ab:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   156af:	8b 54 24 24          	mov    0x24(%esp),%edx
   156b3:	83 ec 04             	sub    $0x4,%esp
   156b6:	51                   	push   %ecx
   156b7:	52                   	push   %edx
   156b8:	ff 74 24 10          	pushl  0x10(%esp)
   156bc:	ff d0                	call   *%eax
   156be:	83 c4 10             	add    $0x10,%esp
}
   156c1:	83 c4 1c             	add    $0x1c,%esp
   156c4:	c3                   	ret    

000156c5 <free_ind>:
#include <sys/stat.h>           								// 文件状态头文件。含有文件或文件系统状态结构stat{}和常量。

// 释放所有一次间接块（内部函数）
// 参数dev是文件系统所有设备的设备号；block是逻辑块号。成功则返回1，否则返回0。
static int free_ind(int dev, int block)
{
   156c5:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取一次间接块，并释放其上表明使用的所有逻辑块，然后
	// 释放该一次间接块的缓冲块。函数free_block()用于释放设备上指定逻辑块号的磁盘块（fs/bitmap.c）。
	if (!block)
   156c8:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   156cd:	75 0a                	jne    156d9 <free_ind+0x14>
		return 1;
   156cf:	b8 01 00 00 00       	mov    $0x1,%eax
   156d4:	e9 bf 00 00 00       	jmp    15798 <free_ind+0xd3>
	block_busy = 0;
   156d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   156e0:	00 
	if (bh = bread(dev, block)) {
   156e1:	83 ec 08             	sub    $0x8,%esp
   156e4:	ff 74 24 2c          	pushl  0x2c(%esp)
   156e8:	ff 74 24 2c          	pushl  0x2c(%esp)
   156ec:	e8 b2 9f ff ff       	call   f6a3 <bread>
   156f1:	83 c4 10             	add    $0x10,%esp
   156f4:	89 04 24             	mov    %eax,(%esp)
   156f7:	83 3c 24 00          	cmpl   $0x0,(%esp)
   156fb:	74 7a                	je     15777 <free_ind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   156fd:	8b 04 24             	mov    (%esp),%eax
   15700:	8b 00                	mov    (%eax),%eax
   15702:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   15706:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   1570d:	00 
   1570e:	eb 4e                	jmp    1575e <free_ind+0x99>
			if (*p)
   15710:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15714:	0f b7 00             	movzwl (%eax),%eax
   15717:	66 85 c0             	test   %ax,%ax
   1571a:	74 38                	je     15754 <free_ind+0x8f>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
   1571c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15720:	0f b7 00             	movzwl (%eax),%eax
   15723:	0f b7 c0             	movzwl %ax,%eax
   15726:	83 ec 08             	sub    $0x8,%esp
   15729:	50                   	push   %eax
   1572a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1572e:	e8 83 f5 ff ff       	call   14cb6 <free_block>
   15733:	83 c4 10             	add    $0x10,%esp
   15736:	85 c0                	test   %eax,%eax
   15738:	74 12                	je     1574c <free_ind+0x87>
					*p = 0;                 					// 清零。
   1573a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1573e:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   15743:	8b 04 24             	mov    (%esp),%eax
   15746:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   1574a:	eb 08                	jmp    15754 <free_ind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   1574c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   15753:	00 
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   15754:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   15759:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   1575e:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   15765:	00 
   15766:	7e a8                	jle    15710 <free_ind+0x4b>
		brelse(bh);                                     		// 然后释放间接块占用的缓冲块。
   15768:	83 ec 0c             	sub    $0xc,%esp
   1576b:	ff 74 24 0c          	pushl  0xc(%esp)
   1576f:	e8 d9 9e ff ff       	call   f64d <brelse>
   15774:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的一次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   15777:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1577c:	74 07                	je     15785 <free_ind+0xc0>
		return 0;
   1577e:	b8 00 00 00 00       	mov    $0x0,%eax
   15783:	eb 13                	jmp    15798 <free_ind+0xd3>
	else
		return free_block(dev, block);                   		// 成功则返回1,否则返回0.
   15785:	83 ec 08             	sub    $0x8,%esp
   15788:	ff 74 24 2c          	pushl  0x2c(%esp)
   1578c:	ff 74 24 2c          	pushl  0x2c(%esp)
   15790:	e8 21 f5 ff ff       	call   14cb6 <free_block>
   15795:	83 c4 10             	add    $0x10,%esp
}
   15798:	83 c4 1c             	add    $0x1c,%esp
   1579b:	c3                   	ret    

0001579c <free_dind>:

// 释放所有二次间接块。
// 参数dev是文件系统所在设备的设备号；block是逻辑块号。
static int free_dind(int dev, int block)
{
   1579c:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                                         	// 在逻辑块没有被释放的标志。

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取二次间接块的一级块，并释放其上表明使用的所有逻辑块，
	// 然后释放该一级块的缓冲块。
	if (!block)
   1579f:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   157a4:	75 0a                	jne    157b0 <free_dind+0x14>
		return 1;
   157a6:	b8 01 00 00 00       	mov    $0x1,%eax
   157ab:	e9 bf 00 00 00       	jmp    1586f <free_dind+0xd3>
	block_busy = 0;
   157b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   157b7:	00 
	if (bh = bread(dev, block)) {
   157b8:	83 ec 08             	sub    $0x8,%esp
   157bb:	ff 74 24 2c          	pushl  0x2c(%esp)
   157bf:	ff 74 24 2c          	pushl  0x2c(%esp)
   157c3:	e8 db 9e ff ff       	call   f6a3 <bread>
   157c8:	83 c4 10             	add    $0x10,%esp
   157cb:	89 04 24             	mov    %eax,(%esp)
   157ce:	83 3c 24 00          	cmpl   $0x0,(%esp)
   157d2:	74 7a                	je     1584e <free_dind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   157d4:	8b 04 24             	mov    (%esp),%eax
   157d7:	8b 00                	mov    (%eax),%eax
   157d9:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   157dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   157e4:	00 
   157e5:	eb 4e                	jmp    15835 <free_dind+0x99>
			if (*p)
   157e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   157eb:	0f b7 00             	movzwl (%eax),%eax
   157ee:	66 85 c0             	test   %ax,%ax
   157f1:	74 38                	je     1582b <free_dind+0x8f>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
   157f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   157f7:	0f b7 00             	movzwl (%eax),%eax
   157fa:	0f b7 c0             	movzwl %ax,%eax
   157fd:	83 ec 08             	sub    $0x8,%esp
   15800:	50                   	push   %eax
   15801:	ff 74 24 2c          	pushl  0x2c(%esp)
   15805:	e8 bb fe ff ff       	call   156c5 <free_ind>
   1580a:	83 c4 10             	add    $0x10,%esp
   1580d:	85 c0                	test   %eax,%eax
   1580f:	74 12                	je     15823 <free_dind+0x87>
					*p = 0;                 					// 清零。
   15811:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15815:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   1581a:	8b 04 24             	mov    (%esp),%eax
   1581d:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   15821:	eb 08                	jmp    1582b <free_dind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   15823:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   1582a:	00 
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   1582b:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   15830:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   15835:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   1583c:	00 
   1583d:	7e a8                	jle    157e7 <free_dind+0x4b>
		brelse(bh);                                     		// 释放二次间接块占用的缓冲块。
   1583f:	83 ec 0c             	sub    $0xc,%esp
   15842:	ff 74 24 0c          	pushl  0xc(%esp)
   15846:	e8 02 9e ff ff       	call   f64d <brelse>
   1584b:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的二次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   1584e:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   15853:	74 07                	je     1585c <free_dind+0xc0>
		return 0;
   15855:	b8 00 00 00 00       	mov    $0x0,%eax
   1585a:	eb 13                	jmp    1586f <free_dind+0xd3>
	else
		return free_block(dev, block);							// 最后释放存放第一间接块的逻辑块
   1585c:	83 ec 08             	sub    $0x8,%esp
   1585f:	ff 74 24 2c          	pushl  0x2c(%esp)
   15863:	ff 74 24 2c          	pushl  0x2c(%esp)
   15867:	e8 4a f4 ff ff       	call   14cb6 <free_block>
   1586c:	83 c4 10             	add    $0x10,%esp
}
   1586f:	83 c4 1c             	add    $0x1c,%esp
   15872:	c3                   	ret    

00015873 <truncate>:

// 截断文件数据函数。
// 将节点对应的文件长度减0,并释放战胜的设备空间。
void truncate(struct m_inode * inode)
{
   15873:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   15876:	8b 44 24 20          	mov    0x20(%esp),%eax
   1587a:	0f b7 00             	movzwl (%eax),%eax
   1587d:	0f b7 c0             	movzwl %ax,%eax
   15880:	25 00 f0 00 00       	and    $0xf000,%eax
   15885:	3d 00 80 00 00       	cmp    $0x8000,%eax
   1588a:	74 30                	je     158bc <truncate+0x49>
   1588c:	8b 44 24 20          	mov    0x20(%esp),%eax
   15890:	0f b7 00             	movzwl (%eax),%eax
   15893:	0f b7 c0             	movzwl %ax,%eax
   15896:	25 00 f0 00 00       	and    $0xf000,%eax
   1589b:	3d 00 40 00 00       	cmp    $0x4000,%eax
   158a0:	74 1a                	je     158bc <truncate+0x49>
	     S_ISLNK(inode->i_mode)))
   158a2:	8b 44 24 20          	mov    0x20(%esp),%eax
   158a6:	0f b7 00             	movzwl (%eax),%eax
   158a9:	0f b7 c0             	movzwl %ax,%eax
   158ac:	25 00 f0 00 00       	and    $0xf000,%eax
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   158b1:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   158b6:	0f 85 51 01 00 00    	jne    15a0d <truncate+0x19a>
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
   158bc:	90                   	nop
	block_busy = 0;
   158bd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   158c4:	00 
	for (i = 0; i < 7; i++)
   158c5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   158cc:	00 
   158cd:	eb 5c                	jmp    1592b <truncate+0xb8>
		if (inode->i_zone[i]) {                 				// 如果块号不为0，则释放之。
   158cf:	8b 44 24 20          	mov    0x20(%esp),%eax
   158d3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   158d7:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   158dc:	66 85 c0             	test   %ax,%ax
   158df:	74 45                	je     15926 <truncate+0xb3>
			if (free_block(inode->i_dev, inode->i_zone[i]))
   158e1:	8b 44 24 20          	mov    0x20(%esp),%eax
   158e5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   158e9:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   158ee:	0f b7 d0             	movzwl %ax,%edx
   158f1:	8b 44 24 20          	mov    0x20(%esp),%eax
   158f5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   158f9:	0f b7 c0             	movzwl %ax,%eax
   158fc:	83 ec 08             	sub    $0x8,%esp
   158ff:	52                   	push   %edx
   15900:	50                   	push   %eax
   15901:	e8 b0 f3 ff ff       	call   14cb6 <free_block>
   15906:	83 c4 10             	add    $0x10,%esp
   15909:	85 c0                	test   %eax,%eax
   1590b:	74 11                	je     1591e <truncate+0xab>
				inode->i_zone[i] = 0;     						// 块指针置0。
   1590d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15911:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15915:	66 c7 44 50 0e 00 00 	movw   $0x0,0xe(%eax,%edx,2)
   1591c:	eb 08                	jmp    15926 <truncate+0xb3>
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
   1591e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   15925:	00 
	for (i = 0; i < 7; i++)
   15926:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1592b:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   15930:	7e 9d                	jle    158cf <truncate+0x5c>
		}
	if (free_ind(inode->i_dev, inode->i_zone[7]))    			// 释放所有一次间接块。
   15932:	8b 44 24 20          	mov    0x20(%esp),%eax
   15936:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
   1593a:	0f b7 d0             	movzwl %ax,%edx
   1593d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15941:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15945:	0f b7 c0             	movzwl %ax,%eax
   15948:	83 ec 08             	sub    $0x8,%esp
   1594b:	52                   	push   %edx
   1594c:	50                   	push   %eax
   1594d:	e8 73 fd ff ff       	call   156c5 <free_ind>
   15952:	83 c4 10             	add    $0x10,%esp
   15955:	85 c0                	test   %eax,%eax
   15957:	74 0c                	je     15965 <truncate+0xf2>
		inode->i_zone[7] = 0;                   				// 块指针置0。
   15959:	8b 44 24 20          	mov    0x20(%esp),%eax
   1595d:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%eax)
   15963:	eb 08                	jmp    1596d <truncate+0xfa>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   15965:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1596c:	00 
	if (free_dind(inode->i_dev, inode->i_zone[8]))   			// 释放所有二次间接块。
   1596d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15971:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
   15975:	0f b7 d0             	movzwl %ax,%edx
   15978:	8b 44 24 20          	mov    0x20(%esp),%eax
   1597c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15980:	0f b7 c0             	movzwl %ax,%eax
   15983:	83 ec 08             	sub    $0x8,%esp
   15986:	52                   	push   %edx
   15987:	50                   	push   %eax
   15988:	e8 0f fe ff ff       	call   1579c <free_dind>
   1598d:	83 c4 10             	add    $0x10,%esp
   15990:	85 c0                	test   %eax,%eax
   15992:	74 0c                	je     159a0 <truncate+0x12d>
		inode->i_zone[8] = 0;                   				// 块指针置0。
   15994:	8b 44 24 20          	mov    0x20(%esp),%eax
   15998:	66 c7 40 1e 00 00    	movw   $0x0,0x1e(%eax)
   1599e:	eb 08                	jmp    159a8 <truncate+0x135>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   159a0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   159a7:	00 
	// 此后设置i节点已修改标志，并且如果还有逻辑块由于 “忙”而没有被释放，则把当前进程运行时间片置0,以让当前进程先被
	// 切换去运行其他进程，稍等一会再重新执行释放操作。
	inode->i_dirt = 1;
   159a8:	8b 44 24 20          	mov    0x20(%esp),%eax
   159ac:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	if (block_busy) {
   159b0:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   159b5:	74 16                	je     159cd <truncate+0x15a>
		current->counter = 0;           						// 当前进程时间片置0。
   159b7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   159bc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		schedule();
   159c3:	e8 7b 14 ff ff       	call   6e43 <schedule>
		goto repeat;
   159c8:	e9 f0 fe ff ff       	jmp    158bd <truncate+0x4a>
	}
	inode->i_size = 0;                      					// 文件大小置零。
   159cd:	8b 44 24 20          	mov    0x20(%esp),%eax
   159d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
   159d8:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   159dd:	8b 15 08 fb 02 00    	mov    0x2fb08,%edx
   159e3:	01 d0                	add    %edx,%eax
   159e5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   159ea:	f7 e2                	mul    %edx
   159ec:	c1 ea 05             	shr    $0x5,%edx
   159ef:	a1 04 fb 02 00       	mov    0x2fb04,%eax
   159f4:	01 c2                	add    %eax,%edx
   159f6:	8b 44 24 20          	mov    0x20(%esp),%eax
   159fa:	89 50 2c             	mov    %edx,0x2c(%eax)
   159fd:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a01:	8b 50 2c             	mov    0x2c(%eax),%edx
   15a04:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a08:	89 50 08             	mov    %edx,0x8(%eax)
   15a0b:	eb 01                	jmp    15a0e <truncate+0x19b>
		return;
   15a0d:	90                   	nop
}
   15a0e:	83 c4 1c             	add    $0x1c,%esp
   15a11:	c3                   	ret    

00015a12 <get_fs_long>:
{
   15a12:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   15a15:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a19:	64 8b 00             	mov    %fs:(%eax),%eax
   15a1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   15a20:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   15a24:	83 c4 10             	add    $0x10,%esp
   15a27:	c3                   	ret    

00015a28 <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   15a28:	8b 44 24 04          	mov    0x4(%esp),%eax
   15a2c:	8b 54 24 08          	mov    0x8(%esp),%edx
   15a30:	64 89 02             	mov    %eax,%fs:(%edx)
}
   15a33:	90                   	nop
   15a34:	c3                   	ret    

00015a35 <add_wait>:
} select_table;

// 把未准备好描述符的等待队列指针加入等待表wait_table中。参数*wait_address是与描述符相关的等待队列头指针。例如tty读缓冲队
// 列secondary的等待队列头指针是proc_list。参数p是do_select()中定义的等待表结构指针。
static void add_wait(struct task_struct ** wait_address, select_table * p)
{
   15a35:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
   15a38:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   15a3d:	74 70                	je     15aaf <add_wait+0x7a>
		return;
	for (i = 0 ; i < p->nr ; i++)
   15a3f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15a46:	00 
   15a47:	eb 17                	jmp    15a60 <add_wait+0x2b>
		if (p->entry[i].wait_address == wait_address)
   15a49:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a4d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15a51:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15a55:	39 44 24 14          	cmp    %eax,0x14(%esp)
   15a59:	74 57                	je     15ab2 <add_wait+0x7d>
	for (i = 0 ; i < p->nr ; i++)
   15a5b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15a60:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a64:	8b 00                	mov    (%eax),%eax
   15a66:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   15a6a:	7c dd                	jl     15a49 <add_wait+0x14>
			return;
	// 然后我们把描述符对应等待队列的头指针保存在等待表wait_table中，同时让等待表项的old_task字段指向等待队列头指针指向的任务（若
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
   15a6c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a70:	8b 10                	mov    (%eax),%edx
   15a72:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a76:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   15a7a:	89 4c d0 08          	mov    %ecx,0x8(%eax,%edx,8)
	p->entry[p->nr].old_task = * wait_address;
   15a7e:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a82:	8b 10                	mov    (%eax),%edx
   15a84:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a88:	8b 08                	mov    (%eax),%ecx
   15a8a:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a8e:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
	*wait_address = current;
   15a92:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   15a98:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a9c:	89 10                	mov    %edx,(%eax)
	p->nr++;
   15a9e:	8b 44 24 18          	mov    0x18(%esp),%eax
   15aa2:	8b 00                	mov    (%eax),%eax
   15aa4:	8d 50 01             	lea    0x1(%eax),%edx
   15aa7:	8b 44 24 18          	mov    0x18(%esp),%eax
   15aab:	89 10                	mov    %edx,(%eax)
   15aad:	eb 04                	jmp    15ab3 <add_wait+0x7e>
		return;
   15aaf:	90                   	nop
   15ab0:	eb 01                	jmp    15ab3 <add_wait+0x7e>
			return;
   15ab2:	90                   	nop
}
   15ab3:	83 c4 10             	add    $0x10,%esp
   15ab6:	c3                   	ret    

00015ab7 <free_wait>:

// 清空等待表。参数是等待表结构指针。本函数在do_select()函数中睡眠后被唤醒返回时被调用，用于唤醒等待表中处于各个等待队列上的其他
// 任务，它与kernel/sched.c中sleep_on()函数的后半部分代码几乎完全相同，请参考对sleep_on()函数的说明。
static void free_wait(select_table * p)
{
   15ab7:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15aba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15ac1:	00 
   15ac2:	e9 8e 00 00 00       	jmp    15b55 <free_wait+0x9e>
		tpp = p->entry[i].wait_address;
   15ac7:	8b 44 24 20          	mov    0x20(%esp),%eax
   15acb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15acf:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15ad3:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (*tpp && *tpp != current) {
   15ad7:	eb 1c                	jmp    15af5 <free_wait+0x3e>
			(*tpp)->state = 0;
   15ad9:	8b 44 24 08          	mov    0x8(%esp),%eax
   15add:	8b 00                	mov    (%eax),%eax
   15adf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			current->state = TASK_UNINTERRUPTIBLE;
   15ae5:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15aea:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
			schedule();
   15af0:	e8 4e 13 ff ff       	call   6e43 <schedule>
		while (*tpp && *tpp != current) {
   15af5:	8b 44 24 08          	mov    0x8(%esp),%eax
   15af9:	8b 00                	mov    (%eax),%eax
   15afb:	85 c0                	test   %eax,%eax
   15afd:	74 0f                	je     15b0e <free_wait+0x57>
   15aff:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b03:	8b 10                	mov    (%eax),%edx
   15b05:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15b0a:	39 c2                	cmp    %eax,%edx
   15b0c:	75 cb                	jne    15ad9 <free_wait+0x22>
		}
		// 执行到这里，说明等待表当前处理项中的等待队列头指针字段wait_address指向当前任务，若它为空，则表明调度有问题，于是显示警告信息。
		// 然后我们让等待队列头指针指向在我们前面进入队列的任务（第76行）。若此时该头指针确实指向一个任务而不是NULL，则说明队列中还有任务（
		// *tpp不为空），于是将该任务设置成就绪状态，唤醒之。最后把等待表的有效表项计数字段nr清零。
		if (!*tpp)
   15b0e:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b12:	8b 00                	mov    (%eax),%eax
   15b14:	85 c0                	test   %eax,%eax
   15b16:	75 10                	jne    15b28 <free_wait+0x71>
			printk("free_wait: NULL");
   15b18:	83 ec 0c             	sub    $0xc,%esp
   15b1b:	68 50 3e 02 00       	push   $0x23e50
   15b20:	e8 21 31 ff ff       	call   8c46 <printk>
   15b25:	83 c4 10             	add    $0x10,%esp
		if (*tpp = p->entry[i].old_task)
   15b28:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b2c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15b30:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   15b34:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b38:	89 10                	mov    %edx,(%eax)
   15b3a:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b3e:	8b 00                	mov    (%eax),%eax
   15b40:	85 c0                	test   %eax,%eax
   15b42:	74 0c                	je     15b50 <free_wait+0x99>
			(**tpp).state = 0;
   15b44:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b48:	8b 00                	mov    (%eax),%eax
   15b4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0; i < p->nr ; i++) {
   15b50:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15b55:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b59:	8b 00                	mov    (%eax),%eax
   15b5b:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   15b5f:	0f 8c 62 ff ff ff    	jl     15ac7 <free_wait+0x10>
	}
	p->nr = 0;
   15b65:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   15b6f:	90                   	nop
   15b70:	83 c4 1c             	add    $0x1c,%esp
   15b73:	c3                   	ret    

00015b74 <get_tty>:

// 根据文件i节点判断文件是不是字符终端设备文件。若是则返回其tty结构指针，否则返回NULL。
static struct tty_struct * get_tty(struct m_inode * inode)
{
   15b74:	83 ec 10             	sub    $0x10,%esp
	int major, minor;

	// 如果不是字符设备文件则返回NULL。如果主设备号不是5（控制终端）或4，则返回NULL。
	if (!S_ISCHR(inode->i_mode))
   15b77:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b7b:	0f b7 00             	movzwl (%eax),%eax
   15b7e:	0f b7 c0             	movzwl %ax,%eax
   15b81:	25 00 f0 00 00       	and    $0xf000,%eax
   15b86:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15b8b:	74 0a                	je     15b97 <get_tty+0x23>
		return NULL;
   15b8d:	b8 00 00 00 00       	mov    $0x0,%eax
   15b92:	e9 9c 00 00 00       	jmp    15c33 <get_tty+0xbf>
	if ((major = MAJOR(inode->i_zone[0])) != 5 && major != 4)
   15b97:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b9b:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15b9f:	66 c1 e8 08          	shr    $0x8,%ax
   15ba3:	0f b7 c0             	movzwl %ax,%eax
   15ba6:	89 44 24 08          	mov    %eax,0x8(%esp)
   15baa:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15baf:	74 0e                	je     15bbf <get_tty+0x4b>
   15bb1:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   15bb6:	74 07                	je     15bbf <get_tty+0x4b>
		return NULL;
   15bb8:	b8 00 00 00 00       	mov    $0x0,%eax
   15bbd:	eb 74                	jmp    15c33 <get_tty+0xbf>
	// 如果主设备号是5，那么其终端设备号等于进程的tty字段值，否则就等于字符设备文件次设备号。如果终端设备号小于0,表示进程没有
	// 控制终端或没有使用终端，于是返回NULL。否则返回对应的tty结构指针。
	if (major == 5)
   15bbf:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15bc4:	75 11                	jne    15bd7 <get_tty+0x63>
		minor = current->tty;
   15bc6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15bcb:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   15bd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15bd5:	eb 14                	jmp    15beb <get_tty+0x77>
	else
		minor = MINOR(inode->i_zone[0]);
   15bd7:	8b 44 24 14          	mov    0x14(%esp),%eax
   15bdb:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15bdf:	0f b7 c0             	movzwl %ax,%eax
   15be2:	25 ff 00 00 00       	and    $0xff,%eax
   15be7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (minor < 0)
   15beb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15bf0:	79 07                	jns    15bf9 <get_tty+0x85>
		return NULL;
   15bf2:	b8 00 00 00 00       	mov    $0x0,%eax
   15bf7:	eb 3a                	jmp    15c33 <get_tty+0xbf>
	return TTY_TABLE(minor);
   15bf9:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15bfe:	74 26                	je     15c26 <get_tty+0xb2>
   15c00:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   15c05:	7f 11                	jg     15c18 <get_tty+0xa4>
   15c07:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c0b:	83 e8 01             	sub    $0x1,%eax
   15c0e:	c1 e0 06             	shl    $0x6,%eax
   15c11:	05 20 28 04 00       	add    $0x42820,%eax
   15c16:	eb 1b                	jmp    15c33 <get_tty+0xbf>
   15c18:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c1c:	c1 e0 06             	shl    $0x6,%eax
   15c1f:	05 20 28 04 00       	add    $0x42820,%eax
   15c24:	eb 0d                	jmp    15c33 <get_tty+0xbf>
   15c26:	a1 80 22 03 00       	mov    0x32280,%eax
   15c2b:	c1 e0 06             	shl    $0x6,%eax
   15c2e:	05 20 28 04 00       	add    $0x42820,%eax
}
   15c33:	83 c4 10             	add    $0x10,%esp
   15c36:	c3                   	ret    

00015c37 <check_in>:
 * check_XX函数用于检查一个文件。我们知道该文件要么是管道文件、要么是字符设备文件，或者要么是一个FIFO（FIFO）还未实现。
 */
// 检查读文件操作是否准备好，即终端读缓冲队列secondary是否有字符可读，或者管道文件是否不空。参数wait是等待表指针；inode
// 是文件i节点指针。若描述符可进行读操作则返回1,否则返回0。
static int check_in(select_table * wait, struct m_inode * inode)
{
   15c37:	83 ec 10             	sub    $0x10,%esp

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端读缓冲队列secondary中是否有
	// 字符可供读取，若有则返回1，若此时secondary为空则把当前任务添加到secondary的等待队列proc_list上并返回0。如果是管道文件
	// 则判断目前管道中是否有字符可读，若有则返回1，若没有（管道空）则把当前任务添加到管道i节点的等待队列上并返回0。注意，PIPE_-
	// EMPTY()宏使用管道当前头尾指针位置来判断管道是否为空。管道i节点的i_zone[0]和i_zone[1]字段分别存放着管道当前的头尾指针。
	if (tty = get_tty(inode))
   15c3a:	ff 74 24 18          	pushl  0x18(%esp)
   15c3e:	e8 31 ff ff ff       	call   15b74 <get_tty>
   15c43:	83 c4 04             	add    $0x4,%esp
   15c46:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15c4a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15c4f:	74 38                	je     15c89 <check_in+0x52>
		if (!EMPTY(tty->secondary))
   15c51:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c55:	8b 40 3c             	mov    0x3c(%eax),%eax
   15c58:	8b 50 04             	mov    0x4(%eax),%edx
   15c5b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c5f:	8b 40 3c             	mov    0x3c(%eax),%eax
   15c62:	8b 40 08             	mov    0x8(%eax),%eax
   15c65:	39 c2                	cmp    %eax,%edx
   15c67:	74 07                	je     15c70 <check_in+0x39>
			return 1;
   15c69:	b8 01 00 00 00       	mov    $0x1,%eax
   15c6e:	eb 5a                	jmp    15cca <check_in+0x93>
		else
			add_wait(&tty->secondary->proc_list, wait);
   15c70:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c74:	8b 40 3c             	mov    0x3c(%eax),%eax
   15c77:	83 c0 0c             	add    $0xc,%eax
   15c7a:	ff 74 24 14          	pushl  0x14(%esp)
   15c7e:	50                   	push   %eax
   15c7f:	e8 b1 fd ff ff       	call   15a35 <add_wait>
   15c84:	83 c4 08             	add    $0x8,%esp
   15c87:	eb 3c                	jmp    15cc5 <check_in+0x8e>
	else if (inode->i_pipe)
   15c89:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c8d:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15c91:	84 c0                	test   %al,%al
   15c93:	74 30                	je     15cc5 <check_in+0x8e>
		if (!PIPE_EMPTY(*inode))
   15c95:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c99:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15c9d:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ca1:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15ca5:	66 39 c2             	cmp    %ax,%dx
   15ca8:	74 07                	je     15cb1 <check_in+0x7a>
			return 1;
   15caa:	b8 01 00 00 00       	mov    $0x1,%eax
   15caf:	eb 19                	jmp    15cca <check_in+0x93>
		else
			add_wait(&inode->i_wait, wait);
   15cb1:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cb5:	83 c0 20             	add    $0x20,%eax
   15cb8:	ff 74 24 14          	pushl  0x14(%esp)
   15cbc:	50                   	push   %eax
   15cbd:	e8 73 fd ff ff       	call   15a35 <add_wait>
   15cc2:	83 c4 08             	add    $0x8,%esp
	return 0;
   15cc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15cca:	83 c4 10             	add    $0x10,%esp
   15ccd:	c3                   	ret    

00015cce <check_out>:

// 检查文件写操作是否准备好，即终端写缓冲队列write_q中是否还有空闲位置可写，或者此时管道文件是否不满。参数wait是等待表指针；
// inode是文件i节点指针。若描述符可进行写操作则返回1，否则返回0。
static int check_out(select_table * wait, struct m_inode * inode)
{
   15cce:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端写缓冲队列write_q中是否有空间
	// 可写入，若有则返回1,若没有空间则把当前任务添加到write_q等待队列proc_list上并返回0。如果是管道文件则判断目前管道中是否有
	// 空闲空间可写入字符，若有则返回1，若没有（管道满）则把当前任务添加到管道i节点的等待队列上并返回0。
	if (tty = get_tty(inode))
   15cd1:	ff 74 24 18          	pushl  0x18(%esp)
   15cd5:	e8 9a fe ff ff       	call   15b74 <get_tty>
   15cda:	83 c4 04             	add    $0x4,%esp
   15cdd:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15ce1:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15ce6:	74 44                	je     15d2c <check_out+0x5e>
		if (!FULL(tty->write_q))
   15ce8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15cec:	8b 40 38             	mov    0x38(%eax),%eax
   15cef:	8b 50 08             	mov    0x8(%eax),%edx
   15cf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15cf6:	8b 40 38             	mov    0x38(%eax),%eax
   15cf9:	8b 40 04             	mov    0x4(%eax),%eax
   15cfc:	29 c2                	sub    %eax,%edx
   15cfe:	89 d0                	mov    %edx,%eax
   15d00:	83 e8 01             	sub    $0x1,%eax
   15d03:	25 ff 03 00 00       	and    $0x3ff,%eax
   15d08:	85 c0                	test   %eax,%eax
   15d0a:	74 07                	je     15d13 <check_out+0x45>
			return 1;
   15d0c:	b8 01 00 00 00       	mov    $0x1,%eax
   15d11:	eb 68                	jmp    15d7b <check_out+0xad>
		else
			add_wait(&tty->write_q->proc_list, wait);
   15d13:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d17:	8b 40 38             	mov    0x38(%eax),%eax
   15d1a:	83 c0 0c             	add    $0xc,%eax
   15d1d:	ff 74 24 14          	pushl  0x14(%esp)
   15d21:	50                   	push   %eax
   15d22:	e8 0e fd ff ff       	call   15a35 <add_wait>
   15d27:	83 c4 08             	add    $0x8,%esp
   15d2a:	eb 4a                	jmp    15d76 <check_out+0xa8>
	else if (inode->i_pipe)
   15d2c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d30:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15d34:	84 c0                	test   %al,%al
   15d36:	74 3e                	je     15d76 <check_out+0xa8>
		if (!PIPE_FULL(*inode))
   15d38:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d3c:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15d40:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d44:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15d48:	29 c2                	sub    %eax,%edx
   15d4a:	89 d0                	mov    %edx,%eax
   15d4c:	0f b7 c0             	movzwl %ax,%eax
   15d4f:	25 ff 0f 00 00       	and    $0xfff,%eax
   15d54:	3d ff 0f 00 00       	cmp    $0xfff,%eax
   15d59:	74 07                	je     15d62 <check_out+0x94>
			return 1;
   15d5b:	b8 01 00 00 00       	mov    $0x1,%eax
   15d60:	eb 19                	jmp    15d7b <check_out+0xad>
		else
			add_wait(&inode->i_wait, wait);
   15d62:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d66:	83 c0 20             	add    $0x20,%eax
   15d69:	ff 74 24 14          	pushl  0x14(%esp)
   15d6d:	50                   	push   %eax
   15d6e:	e8 c2 fc ff ff       	call   15a35 <add_wait>
   15d73:	83 c4 08             	add    $0x8,%esp
	return 0;
   15d76:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15d7b:	83 c4 10             	add    $0x10,%esp
   15d7e:	c3                   	ret    

00015d7f <check_ex>:

// 检查文件是否处于异常状态。对于终端设备文件，目前内核总是返回0。对于管道文件，如果此时两个管道描述符中有一个或都已被关闭，则
// 返回1，否则就把当前任务添加到管道i节点的等待队列上并返回0。返回0。参数wait等待表指针；inode是文件i节点指针。若出现异常条件
// 则返回1，否则返回0。
static int check_ex(select_table * wait, struct m_inode * inode)
{
   15d7f:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	if (tty = get_tty(inode))
   15d82:	ff 74 24 18          	pushl  0x18(%esp)
   15d86:	e8 e9 fd ff ff       	call   15b74 <get_tty>
   15d8b:	83 c4 04             	add    $0x4,%esp
   15d8e:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15d92:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15d97:	74 32                	je     15dcb <check_ex+0x4c>
		if (!FULL(tty->write_q))
   15d99:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d9d:	8b 40 38             	mov    0x38(%eax),%eax
   15da0:	8b 50 08             	mov    0x8(%eax),%edx
   15da3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15da7:	8b 40 38             	mov    0x38(%eax),%eax
   15daa:	8b 40 04             	mov    0x4(%eax),%eax
   15dad:	29 c2                	sub    %eax,%edx
   15daf:	89 d0                	mov    %edx,%eax
   15db1:	83 e8 01             	sub    $0x1,%eax
   15db4:	25 ff 03 00 00       	and    $0x3ff,%eax
   15db9:	85 c0                	test   %eax,%eax
   15dbb:	74 07                	je     15dc4 <check_ex+0x45>
			return 0;
   15dbd:	b8 00 00 00 00       	mov    $0x0,%eax
   15dc2:	eb 41                	jmp    15e05 <check_ex+0x86>
		else
			return 0;
   15dc4:	b8 00 00 00 00       	mov    $0x0,%eax
   15dc9:	eb 3a                	jmp    15e05 <check_ex+0x86>
	else if (inode->i_pipe)
   15dcb:	8b 44 24 18          	mov    0x18(%esp),%eax
   15dcf:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15dd3:	84 c0                	test   %al,%al
   15dd5:	74 29                	je     15e00 <check_ex+0x81>
		if (inode->i_count < 2)
   15dd7:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ddb:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   15ddf:	66 83 f8 01          	cmp    $0x1,%ax
   15de3:	77 07                	ja     15dec <check_ex+0x6d>
			return 1;
   15de5:	b8 01 00 00 00       	mov    $0x1,%eax
   15dea:	eb 19                	jmp    15e05 <check_ex+0x86>
		else
			add_wait(&inode->i_wait, wait);
   15dec:	8b 44 24 18          	mov    0x18(%esp),%eax
   15df0:	83 c0 20             	add    $0x20,%eax
   15df3:	ff 74 24 14          	pushl  0x14(%esp)
   15df7:	50                   	push   %eax
   15df8:	e8 38 fc ff ff       	call   15a35 <add_wait>
   15dfd:	83 c4 08             	add    $0x8,%esp
	return 0;
   15e00:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15e05:	83 c4 10             	add    $0x10,%esp
   15e08:	c3                   	ret    

00015e09 <do_select>:
// 集描述符检查函数check_XX()对每个描述符进行检查，同时统计描述符集中当前已经准备好的描述符个数。若有任何一个描述符已经准备好，
// 本函数就会立刻返回，否则进程就会在本函数中进入睡眠状态，并在过了超时时间或者由于某个描述符所在等待队列上的进程被唤醒而使本
// 进程继续运行。
int do_select(fd_set in, fd_set out, fd_set ex,
	fd_set *inp, fd_set *outp, fd_set *exp)
{
   15e09:	81 ec fc 01 00 00    	sub    $0x1fc,%esp

	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
   15e0f:	8b 84 24 00 02 00 00 	mov    0x200(%esp),%eax
   15e16:	0b 84 24 04 02 00 00 	or     0x204(%esp),%eax
   15e1d:	0b 84 24 08 02 00 00 	or     0x208(%esp),%eax
   15e24:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15e2b:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15e32:	00 00 00 00 
   15e36:	e9 f7 00 00 00       	jmp    15f32 <do_select+0x129>
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
   15e3b:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15e42:	83 e0 01             	and    $0x1,%eax
   15e45:	85 c0                	test   %eax,%eax
   15e47:	0f 84 cc 00 00 00    	je     15f19 <do_select+0x110>
			continue;
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
   15e4d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e52:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e59:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e5f:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e63:	85 c0                	test   %eax,%eax
   15e65:	75 0a                	jne    15e71 <do_select+0x68>
			return -EBADF;
   15e67:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e6c:	e9 e2 02 00 00       	jmp    16153 <do_select+0x34a>
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
   15e71:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e76:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e7d:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e83:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e87:	8b 40 08             	mov    0x8(%eax),%eax
   15e8a:	85 c0                	test   %eax,%eax
   15e8c:	75 0a                	jne    15e98 <do_select+0x8f>
			return -EBADF;
   15e8e:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e93:	e9 bb 02 00 00       	jmp    16153 <do_select+0x34a>
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
   15e98:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15e9d:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15ea4:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15eaa:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15eae:	8b 40 08             	mov    0x8(%eax),%eax
   15eb1:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15eb5:	84 c0                	test   %al,%al
   15eb7:	75 63                	jne    15f1c <do_select+0x113>
			continue;
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
   15eb9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15ebe:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15ec5:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15ecb:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15ecf:	8b 40 08             	mov    0x8(%eax),%eax
   15ed2:	0f b7 00             	movzwl (%eax),%eax
   15ed5:	0f b7 c0             	movzwl %ax,%eax
   15ed8:	25 00 f0 00 00       	and    $0xf000,%eax
   15edd:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15ee2:	74 3b                	je     15f1f <do_select+0x116>
			continue;
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
   15ee4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15ee9:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15ef0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15ef6:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15efa:	8b 40 08             	mov    0x8(%eax),%eax
   15efd:	0f b7 00             	movzwl (%eax),%eax
   15f00:	0f b7 c0             	movzwl %ax,%eax
   15f03:	25 00 f0 00 00       	and    $0xf000,%eax
   15f08:	3d 00 10 00 00       	cmp    $0x1000,%eax
   15f0d:	74 13                	je     15f22 <do_select+0x119>
			continue;
		return -EBADF;                  						// 其余都作为无效描述符而返回。
   15f0f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15f14:	e9 3a 02 00 00       	jmp    16153 <do_select+0x34a>
			continue;
   15f19:	90                   	nop
   15f1a:	eb 07                	jmp    15f23 <do_select+0x11a>
			continue;
   15f1c:	90                   	nop
   15f1d:	eb 04                	jmp    15f23 <do_select+0x11a>
			continue;
   15f1f:	90                   	nop
   15f20:	eb 01                	jmp    15f23 <do_select+0x11a>
			continue;
   15f22:	90                   	nop
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15f23:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   15f2a:	01 
   15f2b:	d1 ac 24 e4 01 00 00 	shrl   0x1e4(%esp)
   15f32:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   15f39:	13 
   15f3a:	0f 8e fb fe ff ff    	jle    15e3b <do_select+0x32>
	}
	// 下面循环检查3个描述符集中的各个描述符是否准备好（可以操作）。此时mask用作当前正在处理描述符的屏蔽码。循环中的3个函数check_in()、
	// check_out()和check_ex()分别用来判断描述符是否已经准备好。若一个描述符已经准备好，则在相关描述符集中设置对应位，并且把已准备
	// 好描述符个数计数值count增1。第186行for循环语句中的mask+= mask行将于mask<<1。
repeat:
   15f40:	90                   	nop
	wait_table.nr = 0;
   15f41:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	*inp = *outp = *exp = 0;
   15f48:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15f4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15f55:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15f5c:	8b 10                	mov    (%eax),%edx
   15f5e:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15f65:	89 10                	mov    %edx,(%eax)
   15f67:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15f6e:	8b 10                	mov    (%eax),%edx
   15f70:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f77:	89 10                	mov    %edx,(%eax)
	count = 0;
   15f79:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   15f80:	00 00 00 00 
	mask = 1;
   15f84:	c7 84 24 e4 01 00 00 	movl   $0x1,0x1e4(%esp)
   15f8b:	01 00 00 00 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   15f8f:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15f96:	00 00 00 00 
   15f9a:	e9 2f 01 00 00       	jmp    160ce <do_select+0x2c5>
		// 如果此时判断的描述符在读操作描述符集中，并且该描述符已经准备好可以进行读操作，则把该描述符在描述符集in中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & in)
   15f9f:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15fa6:	23 84 24 00 02 00 00 	and    0x200(%esp),%eax
   15fad:	85 c0                	test   %eax,%eax
   15faf:	74 4e                	je     15fff <do_select+0x1f6>
			if (check_in(&wait_table, current->filp[i]->f_inode)) {
   15fb1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   15fb6:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15fbd:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15fc3:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15fc7:	8b 40 08             	mov    0x8(%eax),%eax
   15fca:	50                   	push   %eax
   15fcb:	8d 44 24 04          	lea    0x4(%esp),%eax
   15fcf:	50                   	push   %eax
   15fd0:	e8 62 fc ff ff       	call   15c37 <check_in>
   15fd5:	83 c4 08             	add    $0x8,%esp
   15fd8:	85 c0                	test   %eax,%eax
   15fda:	74 23                	je     15fff <do_select+0x1f6>
				*inp |= mask;   								// 描述符集中设置对应位。
   15fdc:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15fe3:	8b 00                	mov    (%eax),%eax
   15fe5:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   15fec:	89 c2                	mov    %eax,%edx
   15fee:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15ff5:	89 10                	mov    %edx,(%eax)
				count++;        								// 已准备好描述符个数计数。
   15ff7:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   15ffe:	01 
			}
		// 如果此时判断的描述符在写操作描述符集中，并且该描述符已经准备好可以进行写操作，则把该描述符在描述符集out中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & out)
   15fff:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   16006:	23 84 24 04 02 00 00 	and    0x204(%esp),%eax
   1600d:	85 c0                	test   %eax,%eax
   1600f:	74 4e                	je     1605f <do_select+0x256>
			if (check_out(&wait_table, current->filp[i]->f_inode)) {
   16011:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16016:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   1601d:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   16023:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   16027:	8b 40 08             	mov    0x8(%eax),%eax
   1602a:	50                   	push   %eax
   1602b:	8d 44 24 04          	lea    0x4(%esp),%eax
   1602f:	50                   	push   %eax
   16030:	e8 99 fc ff ff       	call   15cce <check_out>
   16035:	83 c4 08             	add    $0x8,%esp
   16038:	85 c0                	test   %eax,%eax
   1603a:	74 23                	je     1605f <do_select+0x256>
				*outp |= mask;
   1603c:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   16043:	8b 00                	mov    (%eax),%eax
   16045:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   1604c:	89 c2                	mov    %eax,%edx
   1604e:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   16055:	89 10                	mov    %edx,(%eax)
				count++;
   16057:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   1605e:	01 
			}
		// 如果此时判断的描述符在异常描述符集中，并且该描述符已经有异常出现，则把该描述符在描述符集ex中对应位置为1,同时把已准备好描述符个数计
		// 数值count增1。
		if (mask & ex)
   1605f:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   16066:	23 84 24 08 02 00 00 	and    0x208(%esp),%eax
   1606d:	85 c0                	test   %eax,%eax
   1606f:	74 4e                	je     160bf <do_select+0x2b6>
			if (check_ex(&wait_table, current->filp[i]->f_inode)) {
   16071:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16076:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   1607d:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   16083:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   16087:	8b 40 08             	mov    0x8(%eax),%eax
   1608a:	50                   	push   %eax
   1608b:	8d 44 24 04          	lea    0x4(%esp),%eax
   1608f:	50                   	push   %eax
   16090:	e8 ea fc ff ff       	call   15d7f <check_ex>
   16095:	83 c4 08             	add    $0x8,%esp
   16098:	85 c0                	test   %eax,%eax
   1609a:	74 23                	je     160bf <do_select+0x2b6>
				*exp |= mask;
   1609c:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   160a3:	8b 00                	mov    (%eax),%eax
   160a5:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   160ac:	89 c2                	mov    %eax,%edx
   160ae:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   160b5:	89 10                	mov    %edx,(%eax)
				count++;
   160b7:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   160be:	01 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   160bf:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   160c6:	01 
   160c7:	d1 a4 24 e4 01 00 00 	shll   0x1e4(%esp)
   160ce:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   160d5:	13 
   160d6:	0f 8e c3 fe ff ff    	jle    15f9f <do_select+0x196>
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   160dc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   160e1:	8b 50 0c             	mov    0xc(%eax),%edx
   160e4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   160e9:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   160ef:	f7 d0                	not    %eax
   160f1:	21 d0                	and    %edx,%eax
   160f3:	85 c0                	test   %eax,%eax
   160f5:	75 45                	jne    1613c <do_select+0x333>
	    (wait_table.nr || current->timeout) && !count) {
   160f7:	8b 04 24             	mov    (%esp),%eax
	if (!(current->signal & ~current->blocked) &&
   160fa:	85 c0                	test   %eax,%eax
   160fc:	75 0f                	jne    1610d <do_select+0x304>
	    (wait_table.nr || current->timeout) && !count) {
   160fe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16103:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   16109:	85 c0                	test   %eax,%eax
   1610b:	74 2f                	je     1613c <do_select+0x333>
   1610d:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   16114:	00 
   16115:	75 25                	jne    1613c <do_select+0x333>
		current->state = TASK_INTERRUPTIBLE;
   16117:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1611c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		schedule();
   16122:	e8 1c 0d ff ff       	call   6e43 <schedule>
		free_wait(&wait_table);         						// 本任务被唤醒返回后从这里开始执行。
   16127:	83 ec 0c             	sub    $0xc,%esp
   1612a:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1612e:	50                   	push   %eax
   1612f:	e8 83 f9 ff ff       	call   15ab7 <free_wait>
   16134:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16137:	e9 05 fe ff ff       	jmp    15f41 <do_select+0x138>
	}
	// 如果此时count不等于0，或者接收到了信号，或者等待时间到并且没有需要等待的描述符，那么我们就调用free_wait()唤醒等待队列上
	// 的任务，然后返回已准备好的描述符个数。
	free_wait(&wait_table);
   1613c:	83 ec 0c             	sub    $0xc,%esp
   1613f:	8d 44 24 0c          	lea    0xc(%esp),%eax
   16143:	50                   	push   %eax
   16144:	e8 6e f9 ff ff       	call   15ab7 <free_wait>
   16149:	83 c4 10             	add    $0x10,%esp
	return count;
   1614c:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
}
   16153:	81 c4 fc 01 00 00    	add    $0x1fc,%esp
   16159:	c3                   	ret    

0001615a <sys_select>:
// 函数来完成。sys_select()会首先根据参数传递来的缓冲区指针从用户数据空间把select()函数调用的参数分解复制到内核空间，然后
// 设置需要等待的超时时间值timeout，接着调用do_select()执行select功能，返回后就把处理结果再复制回用户空间中。
// 参数buffer指向用户数据区中select()函数的第1个参数处。如果返回值小于0表示执行时出现错误；如果返回值等于0,则表示在规定等
// 待时间内没有描述符准备好操作；如果返回值大于0,则表示已准备好的描述符数量。
int sys_select( unsigned long *buffer )
{
   1615a:	83 ec 4c             	sub    $0x4c,%esp
	/* Perform the select(nd, in, out, ex, tv) system call. */
	/* 执行select(nd, in, out, ex, tv)系统调用 */
	// 首先定义几个局部变量，用于把指针参数传递来的select()函数参数分解开来。
	int i;
	fd_set res_in, in = 0, *inp;            						// 读操作描述符集。
   1615d:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   16164:	00 
	fd_set res_out, out = 0, *outp;         						// 写操作描述符集。
   16165:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
   1616c:	00 
	fd_set res_ex, ex = 0, *exp;            						// 异常条件描述符集。
   1616d:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
   16174:	00 
	unsigned long timeout;

	// 然后从用户数据区把参数分别隔离复制到局部指针变量中，并根据描述符集指针是否有效分别取得3个描述符集in（读）、out（写）和ex
	// （异常）。其中mask也是一个描述符集变量，根据3个描述符集中最大描述符值+1（即第1个参数nd的值），它被设置成用户程序关心的所有
	// 描述符的屏蔽码。例如，若nd = 4,则mask = 0b00001111（共32位）。
	mask = ~((~0) << get_fs_long(buffer++));
   16175:	8b 44 24 50          	mov    0x50(%esp),%eax
   16179:	8d 50 04             	lea    0x4(%eax),%edx
   1617c:	89 54 24 50          	mov    %edx,0x50(%esp)
   16180:	50                   	push   %eax
   16181:	e8 8c f8 ff ff       	call   15a12 <get_fs_long>
   16186:	83 c4 04             	add    $0x4,%esp
   16189:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   1618e:	89 c1                	mov    %eax,%ecx
   16190:	d3 e2                	shl    %cl,%edx
   16192:	89 d0                	mov    %edx,%eax
   16194:	f7 d0                	not    %eax
   16196:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	inp = (fd_set *) get_fs_long(buffer++);
   1619a:	8b 44 24 50          	mov    0x50(%esp),%eax
   1619e:	8d 50 04             	lea    0x4(%eax),%edx
   161a1:	89 54 24 50          	mov    %edx,0x50(%esp)
   161a5:	50                   	push   %eax
   161a6:	e8 67 f8 ff ff       	call   15a12 <get_fs_long>
   161ab:	83 c4 04             	add    $0x4,%esp
   161ae:	89 44 24 28          	mov    %eax,0x28(%esp)
	outp = (fd_set *) get_fs_long(buffer++);
   161b2:	8b 44 24 50          	mov    0x50(%esp),%eax
   161b6:	8d 50 04             	lea    0x4(%eax),%edx
   161b9:	89 54 24 50          	mov    %edx,0x50(%esp)
   161bd:	50                   	push   %eax
   161be:	e8 4f f8 ff ff       	call   15a12 <get_fs_long>
   161c3:	83 c4 04             	add    $0x4,%esp
   161c6:	89 44 24 24          	mov    %eax,0x24(%esp)
	exp = (fd_set *) get_fs_long(buffer++);
   161ca:	8b 44 24 50          	mov    0x50(%esp),%eax
   161ce:	8d 50 04             	lea    0x4(%eax),%edx
   161d1:	89 54 24 50          	mov    %edx,0x50(%esp)
   161d5:	50                   	push   %eax
   161d6:	e8 37 f8 ff ff       	call   15a12 <get_fs_long>
   161db:	83 c4 04             	add    $0x4,%esp
   161de:	89 44 24 20          	mov    %eax,0x20(%esp)
	tvp = (struct timeval *) get_fs_long(buffer);
   161e2:	ff 74 24 50          	pushl  0x50(%esp)
   161e6:	e8 27 f8 ff ff       	call   15a12 <get_fs_long>
   161eb:	83 c4 04             	add    $0x4,%esp
   161ee:	89 44 24 1c          	mov    %eax,0x1c(%esp)

	if (inp)                                						// 若指针有效，则取读操作描述符集。
   161f2:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   161f7:	74 14                	je     1620d <sys_select+0xb3>
		in = mask & get_fs_long(inp);
   161f9:	ff 74 24 28          	pushl  0x28(%esp)
   161fd:	e8 10 f8 ff ff       	call   15a12 <get_fs_long>
   16202:	83 c4 04             	add    $0x4,%esp
   16205:	23 44 24 2c          	and    0x2c(%esp),%eax
   16209:	89 44 24 3c          	mov    %eax,0x3c(%esp)
	if (outp)                               						// 若指针有效，则取写操作描述符集。
   1620d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16212:	74 14                	je     16228 <sys_select+0xce>
		out = mask & get_fs_long(outp);
   16214:	ff 74 24 24          	pushl  0x24(%esp)
   16218:	e8 f5 f7 ff ff       	call   15a12 <get_fs_long>
   1621d:	83 c4 04             	add    $0x4,%esp
   16220:	23 44 24 2c          	and    0x2c(%esp),%eax
   16224:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (exp)                                						// 若指针有效，则取异常描述符集。
   16228:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1622d:	74 14                	je     16243 <sys_select+0xe9>
		ex = mask & get_fs_long(exp);
   1622f:	ff 74 24 20          	pushl  0x20(%esp)
   16233:	e8 da f7 ff ff       	call   15a12 <get_fs_long>
   16238:	83 c4 04             	add    $0x4,%esp
   1623b:	23 44 24 2c          	and    0x2c(%esp),%eax
   1623f:	89 44 24 34          	mov    %eax,0x34(%esp)
	// 接下来我们尝试从时间结构中取出等待（睡眠）时间值timeout。首先把timeout初始化成最大（无限）值，然后从用户数据空间取得该时间
	// 结构中设置的时间值，经转换和加上系统当前嘀嗒值jiffies，最后得到需要等待的时间嘀嗒数值timeout。我们用此值来设置当前进程应该
	// 等待的延时。另外，第241行上tv_usec字段是微秒值，把它除以1000000后可得到对应秒数，再乘以系统每秒嘀嗒数HZ，即把tv_usec转换
	// 成嘀嗒值。
	timeout = 0xffffffff;
   16243:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%esp)
   1624a:	ff 
	if (tvp) {
   1624b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   16250:	74 3d                	je     1628f <sys_select+0x135>
		timeout = get_fs_long((unsigned long *) & tvp->tv_usec) / (1000000 / HZ);
   16252:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16256:	83 c0 04             	add    $0x4,%eax
   16259:	50                   	push   %eax
   1625a:	e8 b3 f7 ff ff       	call   15a12 <get_fs_long>
   1625f:	83 c4 04             	add    $0x4,%esp
   16262:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
   16267:	f7 e2                	mul    %edx
   16269:	89 d0                	mov    %edx,%eax
   1626b:	c1 e8 0d             	shr    $0xd,%eax
   1626e:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout += get_fs_long((unsigned long *) & tvp->tv_sec) * HZ;
   16272:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16276:	50                   	push   %eax
   16277:	e8 96 f7 ff ff       	call   15a12 <get_fs_long>
   1627c:	83 c4 04             	add    $0x4,%esp
   1627f:	6b c0 64             	imul   $0x64,%eax,%eax
   16282:	01 44 24 30          	add    %eax,0x30(%esp)
		timeout += jiffies;
   16286:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   1628b:	01 44 24 30          	add    %eax,0x30(%esp)
	}
	current->timeout = timeout;             						// 设置当前进程应该延时的嘀嗒值。
   1628f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16294:	8b 54 24 30          	mov    0x30(%esp),%edx
   16298:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	// select()函数的主要工作在do_select()中完成。在调用该函数之后的代码用于把处理结果复制到用户数据区中，返回给用户。为了避免出现
	// 竞争条件，在调用do_select()前需要禁止中断，并在该函数返回后再开启中断。
	// 如果在do_select()返回之后进程的等待延时字段timeout还大于当前系统计时嘀嗒值jiffies，说明在超时之前已经有描述准备好，于是这里
	// 我们先记下到超时还剩余的时间值，随后我们会把这个值返回给用户。如果进程的等待延时字段timeout已经小于或等于当前系统jiffies，表示
	// do_select()可能是由于超时而返回，因此把剩余时间值设置为0。
	cli();                  										// 禁止响应中断。
   1629e:	fa                   	cli    
	i = do_select(in, out, ex, &res_in, &res_out, &res_ex);
   1629f:	83 ec 08             	sub    $0x8,%esp
   162a2:	8d 44 24 14          	lea    0x14(%esp),%eax
   162a6:	50                   	push   %eax
   162a7:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   162ab:	50                   	push   %eax
   162ac:	8d 44 24 24          	lea    0x24(%esp),%eax
   162b0:	50                   	push   %eax
   162b1:	ff 74 24 48          	pushl  0x48(%esp)
   162b5:	ff 74 24 50          	pushl  0x50(%esp)
   162b9:	ff 74 24 58          	pushl  0x58(%esp)
   162bd:	e8 47 fb ff ff       	call   15e09 <do_select>
   162c2:	83 c4 20             	add    $0x20,%esp
   162c5:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (current->timeout > jiffies)
   162c9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   162ce:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   162d4:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   162d9:	39 c2                	cmp    %eax,%edx
   162db:	76 1a                	jbe    162f7 <sys_select+0x19d>
		timeout = current->timeout - jiffies;
   162dd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   162e2:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   162e8:	a1 00 fb 02 00       	mov    0x2fb00,%eax
   162ed:	29 c2                	sub    %eax,%edx
   162ef:	89 d0                	mov    %edx,%eax
   162f1:	89 44 24 30          	mov    %eax,0x30(%esp)
   162f5:	eb 08                	jmp    162ff <sys_select+0x1a5>
	else
		timeout = 0;
   162f7:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
   162fe:	00 
	sti();                  										// 开启中断响应。
   162ff:	fb                   	sti    
	// 接下来我们把进程的超时字段清零。如果do_select()返回的已准备好描述符个数小于0，表示执行出错，于是返回这个错误号。然后我们把处理过
	// 的描述符集内容和延迟时间结构内容写回到用户数据缓冲空间。在时间结构内容时还需要先将嘀嗒时间单位表示的剩余延迟时间转换成秒和微秒值。
	current->timeout = 0;
   16300:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16305:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   1630c:	00 00 00 
	if (i < 0)
   1630f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   16314:	79 09                	jns    1631f <sys_select+0x1c5>
		return i;
   16316:	8b 44 24 18          	mov    0x18(%esp),%eax
   1631a:	e9 2c 01 00 00       	jmp    1644b <sys_select+0x2f1>
	if (inp) {
   1631f:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   16324:	74 25                	je     1634b <sys_select+0x1f1>
		verify_area(inp, 4);
   16326:	83 ec 08             	sub    $0x8,%esp
   16329:	6a 04                	push   $0x4
   1632b:	ff 74 24 34          	pushl  0x34(%esp)
   1632f:	e8 6b 20 ff ff       	call   839f <verify_area>
   16334:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_in, inp);        							// 可读描述符值。
   16337:	8b 44 24 14          	mov    0x14(%esp),%eax
   1633b:	83 ec 08             	sub    $0x8,%esp
   1633e:	ff 74 24 30          	pushl  0x30(%esp)
   16342:	50                   	push   %eax
   16343:	e8 e0 f6 ff ff       	call   15a28 <put_fs_long>
   16348:	83 c4 10             	add    $0x10,%esp
	}
	if (outp) {
   1634b:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16350:	74 25                	je     16377 <sys_select+0x21d>
		verify_area(outp, 4);
   16352:	83 ec 08             	sub    $0x8,%esp
   16355:	6a 04                	push   $0x4
   16357:	ff 74 24 30          	pushl  0x30(%esp)
   1635b:	e8 3f 20 ff ff       	call   839f <verify_area>
   16360:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_out, outp);      							// 可写描述符值。
   16363:	8b 44 24 10          	mov    0x10(%esp),%eax
   16367:	83 ec 08             	sub    $0x8,%esp
   1636a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1636e:	50                   	push   %eax
   1636f:	e8 b4 f6 ff ff       	call   15a28 <put_fs_long>
   16374:	83 c4 10             	add    $0x10,%esp
	}
	if (exp) {
   16377:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1637c:	74 25                	je     163a3 <sys_select+0x249>
		verify_area(exp, 4);
   1637e:	83 ec 08             	sub    $0x8,%esp
   16381:	6a 04                	push   $0x4
   16383:	ff 74 24 2c          	pushl  0x2c(%esp)
   16387:	e8 13 20 ff ff       	call   839f <verify_area>
   1638c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_ex, exp);        							// 出现异常条件描述符集。
   1638f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16393:	83 ec 08             	sub    $0x8,%esp
   16396:	ff 74 24 28          	pushl  0x28(%esp)
   1639a:	50                   	push   %eax
   1639b:	e8 88 f6 ff ff       	call   15a28 <put_fs_long>
   163a0:	83 c4 10             	add    $0x10,%esp
	}
	if (tvp) {
   163a3:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   163a8:	74 74                	je     1641e <sys_select+0x2c4>
		verify_area(tvp, sizeof(*tvp));
   163aa:	83 ec 08             	sub    $0x8,%esp
   163ad:	6a 08                	push   $0x8
   163af:	ff 74 24 28          	pushl  0x28(%esp)
   163b3:	e8 e7 1f ff ff       	call   839f <verify_area>
   163b8:	83 c4 10             	add    $0x10,%esp
		put_fs_long(timeout / HZ, (unsigned long *) &tvp->tv_sec);  // 秒。
   163bb:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   163bf:	8b 44 24 30          	mov    0x30(%esp),%eax
   163c3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   163c8:	f7 e2                	mul    %edx
   163ca:	89 d0                	mov    %edx,%eax
   163cc:	c1 e8 05             	shr    $0x5,%eax
   163cf:	83 ec 08             	sub    $0x8,%esp
   163d2:	51                   	push   %ecx
   163d3:	50                   	push   %eax
   163d4:	e8 4f f6 ff ff       	call   15a28 <put_fs_long>
   163d9:	83 c4 10             	add    $0x10,%esp
		timeout %= HZ;
   163dc:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   163e0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   163e5:	89 c8                	mov    %ecx,%eax
   163e7:	f7 e2                	mul    %edx
   163e9:	89 d0                	mov    %edx,%eax
   163eb:	c1 e8 05             	shr    $0x5,%eax
   163ee:	6b c0 64             	imul   $0x64,%eax,%eax
   163f1:	29 c1                	sub    %eax,%ecx
   163f3:	89 c8                	mov    %ecx,%eax
   163f5:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout *= (1000000 / HZ);
   163f9:	8b 44 24 30          	mov    0x30(%esp),%eax
   163fd:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
   16403:	89 44 24 30          	mov    %eax,0x30(%esp)
		put_fs_long(timeout, (unsigned long *) &tvp->tv_usec);      // 微秒。
   16407:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1640b:	83 c0 04             	add    $0x4,%eax
   1640e:	83 ec 08             	sub    $0x8,%esp
   16411:	50                   	push   %eax
   16412:	ff 74 24 3c          	pushl  0x3c(%esp)
   16416:	e8 0d f6 ff ff       	call   15a28 <put_fs_long>
   1641b:	83 c4 10             	add    $0x10,%esp
	}
	// 如果此时并没有已准备好的描述符，并且收到了某个非阻塞信号，则返回被中断错误号。否则返回已准备好的描述符个数值。
	if (!i && (current->signal & ~current->blocked))
   1641e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   16423:	75 22                	jne    16447 <sys_select+0x2ed>
   16425:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1642a:	8b 50 0c             	mov    0xc(%eax),%edx
   1642d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16432:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   16438:	f7 d0                	not    %eax
   1643a:	21 d0                	and    %edx,%eax
   1643c:	85 c0                	test   %eax,%eax
   1643e:	74 07                	je     16447 <sys_select+0x2ed>
		return -EINTR;
   16440:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   16445:	eb 04                	jmp    1644b <sys_select+0x2f1>
	return i;
   16447:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   1644b:	83 c4 4c             	add    $0x4c,%esp
   1644e:	c3                   	ret    

0001644f <lock_buffer>:
int * blk_size[NR_BLK_DEV] = { NULL, NULL, };

// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
   1644f:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 清中断许可.
   16452:	fa                   	cli    
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   16453:	eb 13                	jmp    16468 <lock_buffer+0x19>
		sleep_on(&bh->b_wait);
   16455:	8b 44 24 10          	mov    0x10(%esp),%eax
   16459:	83 c0 10             	add    $0x10,%eax
   1645c:	83 ec 0c             	sub    $0xc,%esp
   1645f:	50                   	push   %eax
   16460:	e8 cf 0c ff ff       	call   7134 <sleep_on>
   16465:	83 c4 10             	add    $0x10,%esp
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   16468:	8b 44 24 10          	mov    0x10(%esp),%eax
   1646c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16470:	84 c0                	test   %al,%al
   16472:	75 e1                	jne    16455 <lock_buffer+0x6>
	bh->b_lock = 1;					// 立刻锁定缓冲区.
   16474:	8b 44 24 10          	mov    0x10(%esp),%eax
   16478:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	sti();							// 开中断.
   1647c:	fb                   	sti    
}
   1647d:	90                   	nop
   1647e:	83 c4 0c             	add    $0xc,%esp
   16481:	c3                   	ret    

00016482 <unlock_buffer>:

// 释放(解锁)锁定的缓冲区.
// 该函数与hlk.h文件中的同名函数完全一样.
static inline void unlock_buffer(struct buffer_head * bh)
{
   16482:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)				// 如果该缓冲区没有被锁定,则打印出错信息.
   16485:	8b 44 24 10          	mov    0x10(%esp),%eax
   16489:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1648d:	84 c0                	test   %al,%al
   1648f:	75 10                	jne    164a1 <unlock_buffer+0x1f>
		printk("ll_rw_block.c: buffer not locked\n\r");
   16491:	83 ec 0c             	sub    $0xc,%esp
   16494:	68 60 3e 02 00       	push   $0x23e60
   16499:	e8 a8 27 ff ff       	call   8c46 <printk>
   1649e:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;					// 清锁定标志.
   164a1:	8b 44 24 10          	mov    0x10(%esp),%eax
   164a5:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);			// 唤醒等待该缓冲区的任务.
   164a9:	8b 44 24 10          	mov    0x10(%esp),%eax
   164ad:	83 c0 10             	add    $0x10,%eax
   164b0:	83 ec 0c             	sub    $0xc,%esp
   164b3:	50                   	push   %eax
   164b4:	e8 94 0c ff ff       	call   714d <wake_up>
   164b9:	83 c4 10             	add    $0x10,%esp
}
   164bc:	90                   	nop
   164bd:	83 c4 0c             	add    $0xc,%esp
   164c0:	c3                   	ret    

000164c1 <add_request>:
// 参数dev是指定块设备结构指针,该结构中有处理请求项函数指针和当前正在请求项指针;
// req是已设置好内容的请求项结构指针.
// 本函数把已经设置好的请求项req添加到指定设备的请求项链表中.如果该设备在当前请求项指针为空,则可以设置req为当前请求项并立刻调用设备请求
// 项处理函数.否则就把req请求项插入到该请求项链表中.
static void add_request(struct blk_dev_struct * dev, struct request * req)
{
   164c1:	83 ec 1c             	sub    $0x1c,%esp
	// 首先对参数提供的请求项的指针和标志作初始设置.置空请求项中的下一请求项指针,关中断并清除请求项相关缓冲区脏标志.
	struct request * tmp;

	req->next = NULL;
   164c4:	8b 44 24 24          	mov    0x24(%esp),%eax
   164c8:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	cli();								// 关中断
   164cf:	fa                   	cli    
	if (req->bh)
   164d0:	8b 44 24 24          	mov    0x24(%esp),%eax
   164d4:	8b 40 1c             	mov    0x1c(%eax),%eax
   164d7:	85 c0                	test   %eax,%eax
   164d9:	74 0b                	je     164e6 <add_request+0x25>
		req->bh->b_dirt = 0;			// 清缓冲区"脏"标志.
   164db:	8b 44 24 24          	mov    0x24(%esp),%eax
   164df:	8b 40 1c             	mov    0x1c(%eax),%eax
   164e2:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	// 然后查看指定设备是否有当前请求项,即查看设备是否正忙.如果指定设备dev当前请求项(current_equest)字段为空,则表示目前该设备没有请求项,本次是
	// 第1个请求项,也是唯一的一个.因此可将块设备当前请求指针直接指向该请求项,并立刻执行相应设备的请求函数.
	if (!(tmp = dev->current_request)) {
   164e6:	8b 44 24 20          	mov    0x20(%esp),%eax
   164ea:	8b 40 04             	mov    0x4(%eax),%eax
   164ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
   164f1:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   164f6:	0f 85 79 01 00 00    	jne    16675 <add_request+0x1b4>
		dev->current_request = req;
   164fc:	8b 44 24 20          	mov    0x20(%esp),%eax
   16500:	8b 54 24 24          	mov    0x24(%esp),%edx
   16504:	89 50 04             	mov    %edx,0x4(%eax)
		sti();							// 开中断.
   16507:	fb                   	sti    
		(dev->request_fn)();			// 执行请求函数,对于硬盘是do_hd_request().
   16508:	8b 44 24 20          	mov    0x20(%esp),%eax
   1650c:	8b 00                	mov    (%eax),%eax
   1650e:	ff d0                	call   *%eax
		return;
   16510:	e9 89 01 00 00       	jmp    1669e <add_request+0x1dd>
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
   16515:	8b 44 24 24          	mov    0x24(%esp),%eax
   16519:	8b 40 1c             	mov    0x1c(%eax),%eax
   1651c:	85 c0                	test   %eax,%eax
   1651e:	75 17                	jne    16537 <add_request+0x76>
			if (tmp->next->bh)
   16520:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16524:	8b 40 20             	mov    0x20(%eax),%eax
   16527:	8b 40 1c             	mov    0x1c(%eax),%eax
   1652a:	85 c0                	test   %eax,%eax
   1652c:	0f 84 37 01 00 00    	je     16669 <add_request+0x1a8>
				break;
   16532:	e9 4d 01 00 00       	jmp    16684 <add_request+0x1c3>
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   16537:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1653b:	8b 50 04             	mov    0x4(%eax),%edx
   1653e:	8b 44 24 24          	mov    0x24(%esp),%eax
   16542:	8b 40 04             	mov    0x4(%eax),%eax
   16545:	39 c2                	cmp    %eax,%edx
   16547:	0f 8c b5 00 00 00    	jl     16602 <add_request+0x141>
   1654d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16551:	8b 50 04             	mov    0x4(%eax),%edx
   16554:	8b 44 24 24          	mov    0x24(%esp),%eax
   16558:	8b 40 04             	mov    0x4(%eax),%eax
   1655b:	39 c2                	cmp    %eax,%edx
   1655d:	75 36                	jne    16595 <add_request+0xd4>
   1655f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16563:	8b 10                	mov    (%eax),%edx
   16565:	8b 44 24 24          	mov    0x24(%esp),%eax
   16569:	8b 00                	mov    (%eax),%eax
   1656b:	39 c2                	cmp    %eax,%edx
   1656d:	0f 8c 8f 00 00 00    	jl     16602 <add_request+0x141>
   16573:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16577:	8b 10                	mov    (%eax),%edx
   16579:	8b 44 24 24          	mov    0x24(%esp),%eax
   1657d:	8b 00                	mov    (%eax),%eax
   1657f:	39 c2                	cmp    %eax,%edx
   16581:	75 12                	jne    16595 <add_request+0xd4>
   16583:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16587:	8b 50 0c             	mov    0xc(%eax),%edx
   1658a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1658e:	8b 40 0c             	mov    0xc(%eax),%eax
   16591:	39 c2                	cmp    %eax,%edx
   16593:	72 6d                	jb     16602 <add_request+0x141>
		    !IN_ORDER(tmp, tmp->next)) &&
   16595:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16599:	8b 50 04             	mov    0x4(%eax),%edx
   1659c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165a0:	8b 40 20             	mov    0x20(%eax),%eax
   165a3:	8b 40 04             	mov    0x4(%eax),%eax
		if ((IN_ORDER(tmp, req) ||
   165a6:	39 c2                	cmp    %eax,%edx
   165a8:	0f 8c bc 00 00 00    	jl     1666a <add_request+0x1a9>
		    !IN_ORDER(tmp, tmp->next)) &&
   165ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165b2:	8b 50 04             	mov    0x4(%eax),%edx
   165b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165b9:	8b 40 20             	mov    0x20(%eax),%eax
   165bc:	8b 40 04             	mov    0x4(%eax),%eax
   165bf:	39 c2                	cmp    %eax,%edx
   165c1:	75 3f                	jne    16602 <add_request+0x141>
   165c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165c7:	8b 10                	mov    (%eax),%edx
   165c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165cd:	8b 40 20             	mov    0x20(%eax),%eax
   165d0:	8b 00                	mov    (%eax),%eax
   165d2:	39 c2                	cmp    %eax,%edx
   165d4:	0f 8c 90 00 00 00    	jl     1666a <add_request+0x1a9>
   165da:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165de:	8b 10                	mov    (%eax),%edx
   165e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165e4:	8b 40 20             	mov    0x20(%eax),%eax
   165e7:	8b 00                	mov    (%eax),%eax
   165e9:	39 c2                	cmp    %eax,%edx
   165eb:	75 15                	jne    16602 <add_request+0x141>
   165ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165f1:	8b 50 0c             	mov    0xc(%eax),%edx
   165f4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165f8:	8b 40 20             	mov    0x20(%eax),%eax
   165fb:	8b 40 0c             	mov    0xc(%eax),%eax
   165fe:	39 c2                	cmp    %eax,%edx
   16600:	72 68                	jb     1666a <add_request+0x1a9>
		    IN_ORDER(req, tmp->next))
   16602:	8b 44 24 24          	mov    0x24(%esp),%eax
   16606:	8b 50 04             	mov    0x4(%eax),%edx
   16609:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1660d:	8b 40 20             	mov    0x20(%eax),%eax
   16610:	8b 40 04             	mov    0x4(%eax),%eax
		    !IN_ORDER(tmp, tmp->next)) &&
   16613:	39 c2                	cmp    %eax,%edx
   16615:	7c 6d                	jl     16684 <add_request+0x1c3>
		    IN_ORDER(req, tmp->next))
   16617:	8b 44 24 24          	mov    0x24(%esp),%eax
   1661b:	8b 50 04             	mov    0x4(%eax),%edx
   1661e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16622:	8b 40 20             	mov    0x20(%eax),%eax
   16625:	8b 40 04             	mov    0x4(%eax),%eax
   16628:	39 c2                	cmp    %eax,%edx
   1662a:	75 3e                	jne    1666a <add_request+0x1a9>
   1662c:	8b 44 24 24          	mov    0x24(%esp),%eax
   16630:	8b 10                	mov    (%eax),%edx
   16632:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16636:	8b 40 20             	mov    0x20(%eax),%eax
   16639:	8b 00                	mov    (%eax),%eax
   1663b:	39 c2                	cmp    %eax,%edx
   1663d:	7c 45                	jl     16684 <add_request+0x1c3>
   1663f:	8b 44 24 24          	mov    0x24(%esp),%eax
   16643:	8b 10                	mov    (%eax),%edx
   16645:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16649:	8b 40 20             	mov    0x20(%eax),%eax
   1664c:	8b 00                	mov    (%eax),%eax
   1664e:	39 c2                	cmp    %eax,%edx
   16650:	75 18                	jne    1666a <add_request+0x1a9>
   16652:	8b 44 24 24          	mov    0x24(%esp),%eax
   16656:	8b 50 0c             	mov    0xc(%eax),%edx
   16659:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1665d:	8b 40 20             	mov    0x20(%eax),%eax
   16660:	8b 40 0c             	mov    0xc(%eax),%eax
   16663:	39 c2                	cmp    %eax,%edx
   16665:	72 1d                	jb     16684 <add_request+0x1c3>
   16667:	eb 01                	jmp    1666a <add_request+0x1a9>
				continue;
   16669:	90                   	nop
	for ( ; tmp->next ; tmp = tmp->next) {
   1666a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1666e:	8b 40 20             	mov    0x20(%eax),%eax
   16671:	89 44 24 0c          	mov    %eax,0xc(%esp)
   16675:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16679:	8b 40 20             	mov    0x20(%eax),%eax
   1667c:	85 c0                	test   %eax,%eax
   1667e:	0f 85 91 fe ff ff    	jne    16515 <add_request+0x54>
			break;
	}
	req->next = tmp->next;
   16684:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16688:	8b 50 20             	mov    0x20(%eax),%edx
   1668b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1668f:	89 50 20             	mov    %edx,0x20(%eax)
	tmp->next = req;
   16692:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16696:	8b 54 24 24          	mov    0x24(%esp),%edx
   1669a:	89 50 20             	mov    %edx,0x20(%eax)
	sti();
   1669d:	fb                   	sti    
}
   1669e:	83 c4 1c             	add    $0x1c,%esp
   166a1:	c3                   	ret    

000166a2 <make_request>:

// 创建请求项并插入请求队列中.
// 参数major是主设备号;rw是指定命令;bh是存放数据的缓冲区头指针.
static void make_request(int major, int rw, struct buffer_head * bh)
{
   166a2:	83 ec 1c             	sub    $0x1c,%esp
	/* WRITEA/READA是一种特殊情况 - 它们并非必要,所以如果缓冲区已经上锁,我们就不用管它,否则它只是一个一般的读操作. */
	// 这里'READ'和'WRITE'后面的'A'字符代表英文单词Ahead,表示预读/写数据块的意思.
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
   166a5:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   166aa:	74 07                	je     166b3 <make_request+0x11>
   166ac:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
   166b1:	75 07                	jne    166ba <make_request+0x18>
   166b3:	b8 01 00 00 00       	mov    $0x1,%eax
   166b8:	eb 05                	jmp    166bf <make_request+0x1d>
   166ba:	b8 00 00 00 00       	mov    $0x0,%eax
   166bf:	89 44 24 08          	mov    %eax,0x8(%esp)
   166c3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   166c8:	74 29                	je     166f3 <make_request+0x51>
		if (bh->b_lock)
   166ca:	8b 44 24 28          	mov    0x28(%esp),%eax
   166ce:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   166d2:	84 c0                	test   %al,%al
   166d4:	0f 85 7e 01 00 00    	jne    16858 <make_request+0x1b6>
			return;
		if (rw == READA)
   166da:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   166df:	75 0a                	jne    166eb <make_request+0x49>
			rw = READ;
   166e1:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
   166e8:	00 
   166e9:	eb 08                	jmp    166f3 <make_request+0x51>
		else
			rw = WRITE;
   166eb:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
   166f2:	00 
	}
	if (rw != READ && rw != WRITE)
   166f3:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   166f8:	74 17                	je     16711 <make_request+0x6f>
   166fa:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   166ff:	74 10                	je     16711 <make_request+0x6f>
		panic("Bad block dev command, must be R/W/RA/WA");
   16701:	83 ec 0c             	sub    $0xc,%esp
   16704:	68 84 3e 02 00       	push   $0x23e84
   16709:	e8 f9 24 ff ff       	call   8c07 <panic>
   1670e:	83 c4 10             	add    $0x10,%esp
	lock_buffer(bh);                				// 锁定缓冲块
   16711:	83 ec 0c             	sub    $0xc,%esp
   16714:	ff 74 24 34          	pushl  0x34(%esp)
   16718:	e8 32 fd ff ff       	call   1644f <lock_buffer>
   1671d:	83 c4 10             	add    $0x10,%esp
	// 如果是WRITE操作并且缓冲块未修改，或是READ操作并且缓冲块已更新，则直接返回缓冲区块。
	if ((rw == WRITE && !bh->b_dirt) || (rw == READ && bh->b_uptodate)) {
   16720:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   16725:	75 0c                	jne    16733 <make_request+0x91>
   16727:	8b 44 24 28          	mov    0x28(%esp),%eax
   1672b:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   1672f:	84 c0                	test   %al,%al
   16731:	74 13                	je     16746 <make_request+0xa4>
   16733:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16738:	75 20                	jne    1675a <make_request+0xb8>
   1673a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1673e:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
   16742:	84 c0                	test   %al,%al
   16744:	74 14                	je     1675a <make_request+0xb8>
		unlock_buffer(bh);
   16746:	83 ec 0c             	sub    $0xc,%esp
   16749:	ff 74 24 34          	pushl  0x34(%esp)
   1674d:	e8 30 fd ff ff       	call   16482 <unlock_buffer>
   16752:	83 c4 10             	add    $0x10,%esp
		return;
   16755:	e9 ff 00 00 00       	jmp    16859 <make_request+0x1b7>
	}
repeat:
   1675a:	90                   	nop
	 */
	// 好,现在我们必须为本函数生成并添加读/写请求项了.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端开始.
	// 根据上述要求,对于读命令请求,我们直接从队列末尾开始搜索,而对于写请求就只能从队列2/3处向队列头处搜索空项填入.于是我们开始从后向前搜索,
	// 当请求结构request的设备字段dev值=-1时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过头部),则查看此次请求
	// 是否是提前读/写(READA或WRITEA),如果是则放弃此次请求操作.否则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会儿再来搜索请求队列.
	if (rw == READ)
   1675b:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16760:	75 0a                	jne    1676c <make_request+0xca>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
   16762:	c7 44 24 0c 00 28 04 	movl   $0x42800,0xc(%esp)
   16769:	00 
   1676a:	eb 14                	jmp    16780 <make_request+0xde>
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
   1676c:	c7 44 24 0c 74 26 04 	movl   $0x42674,0xc(%esp)
   16773:	00 
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   16774:	eb 0a                	jmp    16780 <make_request+0xde>
		if (req->dev < 0)
   16776:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1677a:	8b 00                	mov    (%eax),%eax
   1677c:	85 c0                	test   %eax,%eax
   1677e:	78 11                	js     16791 <make_request+0xef>
	while (--req >= request)
   16780:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   16785:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   1678c:	00 
   1678d:	73 e7                	jae    16776 <make_request+0xd4>
   1678f:	eb 01                	jmp    16792 <make_request+0xf0>
			break;
   16791:	90                   	nop
	/* if none found, sleep on new requests: check for rw_ahead */
	/* 如果没有找到空闲项,则让该次请求操作睡眠:需检查是否提前读/写 */
	if (req < request) {								// 如果已搜索到头(队列无空项)
   16792:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   16799:	00 
   1679a:	73 2d                	jae    167c9 <make_request+0x127>
		if (rw_ahead) {									// 则若是提前读/写请求,则退出.
   1679c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   167a1:	74 14                	je     167b7 <make_request+0x115>
			unlock_buffer(bh);
   167a3:	83 ec 0c             	sub    $0xc,%esp
   167a6:	ff 74 24 34          	pushl  0x34(%esp)
   167aa:	e8 d3 fc ff ff       	call   16482 <unlock_buffer>
   167af:	83 c4 10             	add    $0x10,%esp
			return;
   167b2:	e9 a2 00 00 00       	jmp    16859 <make_request+0x1b7>
		}
		sleep_on(&wait_for_request);					// 否则就睡眠,过会再查看请求队列.
   167b7:	83 ec 0c             	sub    $0xc,%esp
   167ba:	68 e0 20 03 00       	push   $0x320e0
   167bf:	e8 70 09 ff ff       	call   7134 <sleep_on>
   167c4:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   167c7:	eb 92                	jmp    1675b <make_request+0xb9>
	}
	/* fill up the request-info, and add it to the queue */
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们在设置好的新请求项后就调用add_request()把它添加到请求队列中,立刻退出.请求结构请参见blk_drv/blk.h.
	// req->sector是读写操作的起始扇区号,req->buffer是请求项存放数据的缓冲区.
	req->dev = bh->b_dev;								// 设备号.
   167c9:	8b 44 24 28          	mov    0x28(%esp),%eax
   167cd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   167d1:	0f b7 d0             	movzwl %ax,%edx
   167d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167d8:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE).
   167da:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167de:	8b 54 24 24          	mov    0x24(%esp),%edx
   167e2:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 操作时产生的错误次数.
   167e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167e9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = bh->b_blocknr << 1;					// 起始扇区.块号转换成扇区号(1块=2扇区).
   167f0:	8b 44 24 28          	mov    0x28(%esp),%eax
   167f4:	8b 40 04             	mov    0x4(%eax),%eax
   167f7:	8d 14 00             	lea    (%eax,%eax,1),%edx
   167fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167fe:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 2;								// 本请求项需要读写的扇区数.
   16801:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16805:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%eax)
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
   1680c:	8b 44 24 28          	mov    0x28(%esp),%eax
   16810:	8b 10                	mov    (%eax),%edx
   16812:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16816:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
   16819:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1681d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	req->bh = bh;										// 缓冲块头指针.
   16824:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16828:	8b 54 24 28          	mov    0x28(%esp),%edx
   1682c:	89 50 1c             	mov    %edx,0x1c(%eax)
	req->next = NULL;									// 指向下一请求项.
   1682f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16833:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
   1683a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1683e:	c1 e0 03             	shl    $0x3,%eax
   16841:	05 00 21 03 00       	add    $0x32100,%eax
   16846:	83 ec 08             	sub    $0x8,%esp
   16849:	ff 74 24 14          	pushl  0x14(%esp)
   1684d:	50                   	push   %eax
   1684e:	e8 6e fc ff ff       	call   164c1 <add_request>
   16853:	83 c4 10             	add    $0x10,%esp
   16856:	eb 01                	jmp    16859 <make_request+0x1b7>
			return;
   16858:	90                   	nop
}
   16859:	83 c4 1c             	add    $0x1c,%esp
   1685c:	c3                   	ret    

0001685d <ll_rw_page>:

// 低级页面读写函数(Low Level Read Write Pagk).
// 以页面(4K)为单位访问设备数据,即每次读/写8个扇区.参见下面ll_rw_blk()函数.
void ll_rw_page(int rw, int dev, int page, char * buffer)
{
   1685d:	83 ec 1c             	sub    $0x1c,%esp
	struct request * req;
	unsigned int major = MAJOR(dev);
   16860:	8b 44 24 24          	mov    0x24(%esp),%eax
   16864:	c1 e8 08             	shr    $0x8,%eax
   16867:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先对函数参数的合法性进行检测.如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.如果参数给出的命令既不是
	// READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.
	if (major >= NR_BLK_DEV || !(blk_dev[major].request_fn)) {
   1686b:	83 7c 24 08 06       	cmpl   $0x6,0x8(%esp)
   16870:	77 0f                	ja     16881 <ll_rw_page+0x24>
   16872:	8b 44 24 08          	mov    0x8(%esp),%eax
   16876:	8b 04 c5 00 21 03 00 	mov    0x32100(,%eax,8),%eax
   1687d:	85 c0                	test   %eax,%eax
   1687f:	75 15                	jne    16896 <ll_rw_page+0x39>
		printk("Trying to read nonexistent block-device\n\r");
   16881:	83 ec 0c             	sub    $0xc,%esp
   16884:	68 b0 3e 02 00       	push   $0x23eb0
   16889:	e8 b8 23 ff ff       	call   8c46 <printk>
   1688e:	83 c4 10             	add    $0x10,%esp
		return;
   16891:	e9 f8 00 00 00       	jmp    1698e <ll_rw_page+0x131>
	}
	if (rw != READ && rw != WRITE)
   16896:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1689b:	74 19                	je     168b6 <ll_rw_page+0x59>
   1689d:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   168a2:	74 12                	je     168b6 <ll_rw_page+0x59>
		panic("Bad block dev command, must be R/W");
   168a4:	83 ec 0c             	sub    $0xc,%esp
   168a7:	68 dc 3e 02 00       	push   $0x23edc
   168ac:	e8 56 23 ff ff       	call   8c07 <panic>
   168b1:	83 c4 10             	add    $0x10,%esp
   168b4:	eb 01                	jmp    168b7 <ll_rw_page+0x5a>
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
   168b6:	90                   	nop
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
   168b7:	c7 44 24 0c 00 28 04 	movl   $0x42800,0xc(%esp)
   168be:	00 
	while (--req >= request)
   168bf:	eb 0a                	jmp    168cb <ll_rw_page+0x6e>
		if (req->dev < 0)
   168c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168c5:	8b 00                	mov    (%eax),%eax
   168c7:	85 c0                	test   %eax,%eax
   168c9:	78 11                	js     168dc <ll_rw_page+0x7f>
	while (--req >= request)
   168cb:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   168d0:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   168d7:	00 
   168d8:	73 e7                	jae    168c1 <ll_rw_page+0x64>
   168da:	eb 01                	jmp    168dd <ll_rw_page+0x80>
			break;
   168dc:	90                   	nop
	if (req < request) {
   168dd:	81 7c 24 0c 80 23 04 	cmpl   $0x42380,0xc(%esp)
   168e4:	00 
   168e5:	73 12                	jae    168f9 <ll_rw_page+0x9c>
		sleep_on(&wait_for_request);					// 睡眠,过会再查看请求队列.
   168e7:	83 ec 0c             	sub    $0xc,%esp
   168ea:	68 e0 20 03 00       	push   $0x320e0
   168ef:	e8 40 08 ff ff       	call   7134 <sleep_on>
   168f4:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   168f7:	eb be                	jmp    168b7 <ll_rw_page+0x5a>
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们设置好新请求项,把当前进程置为不可中断睡眠中断后,就去调用add_request()把它添加到请求队列中,
	// 然后直接调用调度函数让当前进程睡眠等待页面从交换设备中读入.这里不像make_request()函数那样直接退出函数而调用了schedule(),是因为make_request()
	// 函数仅读2个扇区数据.而这里需要对交换设备读/写8个扇区,需要花较长的时间.因此当前进程肯定需要等待而睡眠.因此这里直接就让进程去睡眠了,省得在程序其他地方
	// 还要进行这些判断操作.
	req->dev = dev;										// 设备号
   168f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168fd:	8b 54 24 24          	mov    0x24(%esp),%edx
   16901:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE)start_code
   16903:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16907:	8b 54 24 20          	mov    0x20(%esp),%edx
   1690b:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 读写操作错误计数
   1690e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16912:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = page << 3;							// 起始读写扇区
   16919:	8b 44 24 28          	mov    0x28(%esp),%eax
   1691d:	c1 e0 03             	shl    $0x3,%eax
   16920:	89 c2                	mov    %eax,%edx
   16922:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16926:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 8;								// 读写扇区数
   16929:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1692d:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%eax)
	req->buffer = buffer;								// 数据缓冲区
   16934:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16938:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   1693c:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = current;								// 当前进程进入该请求等待队列
   1693f:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   16945:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16949:	89 50 18             	mov    %edx,0x18(%eax)
	req->bh = NULL;										// 无缓冲块头指针(不用高速缓冲)
   1694c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16950:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	req->next = NULL;									// 下一个请求项指针
   16957:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1695b:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	current->state = TASK_UNINTERRUPTIBLE;				// 置为不可中断状态
   16962:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   16967:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中.
   1696d:	8b 44 24 08          	mov    0x8(%esp),%eax
   16971:	c1 e0 03             	shl    $0x3,%eax
   16974:	05 00 21 03 00       	add    $0x32100,%eax
   16979:	83 ec 08             	sub    $0x8,%esp
   1697c:	ff 74 24 14          	pushl  0x14(%esp)
   16980:	50                   	push   %eax
   16981:	e8 3b fb ff ff       	call   164c1 <add_request>
   16986:	83 c4 10             	add    $0x10,%esp
	// 当前进程需要读取8个扇区的数据因此需要睡眠，因此调用调度程序选择进程运行
	schedule();
   16989:	e8 b5 04 ff ff       	call   6e43 <schedule>
}
   1698e:	83 c4 1c             	add    $0x1c,%esp
   16991:	c3                   	ret    

00016992 <ll_rw_block>:
// 该函数是块设备驱动程序与系统其他部分的接口函数.通常在fs/buffer.c程序中被调用.
// 主要功能是创建块设备读写请求项并插入到指定块设备请求队列.实际的读写操作则是由设备的request_fn()函数完成.对于硬盘操作,该函数是do_hd_request();对于软盘操作
// 该函数是do_fd_request();对于虚拟盘则是do_rd_request().另外,在调用该函数之前,调用者需要首先把读/写块设备的信息保存在缓冲块头结构中,如设备号,块号.
// 参数:rw - READ,READA,WRITE或WRITEA是命令;bh - 数据缓冲块头指针.
void ll_rw_block(int rw, struct buffer_head * bh)
{
   16992:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   16995:	8b 44 24 24          	mov    0x24(%esp),%eax
   16999:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1699d:	66 c1 e8 08          	shr    $0x8,%ax
   169a1:	0f b7 c0             	movzwl %ax,%eax
   169a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
   169a8:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   169ad:	77 0f                	ja     169be <ll_rw_block+0x2c>
	!(blk_dev[major].request_fn)) {
   169af:	8b 44 24 0c          	mov    0xc(%esp),%eax
   169b3:	8b 04 c5 00 21 03 00 	mov    0x32100(,%eax,8),%eax
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   169ba:	85 c0                	test   %eax,%eax
   169bc:	75 12                	jne    169d0 <ll_rw_block+0x3e>
		printk("Trying to read nonexistent block-device\n\r");
   169be:	83 ec 0c             	sub    $0xc,%esp
   169c1:	68 b0 3e 02 00       	push   $0x23eb0
   169c6:	e8 7b 22 ff ff       	call   8c46 <printk>
   169cb:	83 c4 10             	add    $0x10,%esp
		return;
   169ce:	eb 18                	jmp    169e8 <ll_rw_block+0x56>
	}
	make_request(major, rw, bh);
   169d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   169d4:	83 ec 04             	sub    $0x4,%esp
   169d7:	ff 74 24 28          	pushl  0x28(%esp)
   169db:	ff 74 24 28          	pushl  0x28(%esp)
   169df:	50                   	push   %eax
   169e0:	e8 bd fc ff ff       	call   166a2 <make_request>
   169e5:	83 c4 10             	add    $0x10,%esp
}
   169e8:	83 c4 1c             	add    $0x1c,%esp
   169eb:	c3                   	ret    

000169ec <blk_dev_init>:

// 块设备初始化函数,由初始化程序main.c调用.
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
   169ec:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   169ef:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   169f6:	00 
   169f7:	eb 37                	jmp    16a30 <blk_dev_init+0x44>
		request[i].dev = -1;
   169f9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   169fd:	89 d0                	mov    %edx,%eax
   169ff:	c1 e0 03             	shl    $0x3,%eax
   16a02:	01 d0                	add    %edx,%eax
   16a04:	c1 e0 02             	shl    $0x2,%eax
   16a07:	05 80 23 04 00       	add    $0x42380,%eax
   16a0c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
		request[i].next = NULL;
   16a12:	8b 54 24 0c          	mov    0xc(%esp),%edx
   16a16:	89 d0                	mov    %edx,%eax
   16a18:	c1 e0 03             	shl    $0x3,%eax
   16a1b:	01 d0                	add    %edx,%eax
   16a1d:	c1 e0 02             	shl    $0x2,%eax
   16a20:	05 a0 23 04 00       	add    $0x423a0,%eax
   16a25:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0; i < NR_REQUEST; i++) {
   16a2b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   16a30:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   16a35:	7e c2                	jle    169f9 <blk_dev_init+0xd>
	}
}
   16a37:	90                   	nop
   16a38:	83 c4 10             	add    $0x10,%esp
   16a3b:	c3                   	ret    

00016a3c <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   16a3c:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   16a3f:	8b 44 24 10          	mov    0x10(%esp),%eax
   16a43:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16a47:	84 c0                	test   %al,%al
   16a49:	75 10                	jne    16a5b <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   16a4b:	83 ec 0c             	sub    $0xc,%esp
   16a4e:	68 00 3f 02 00       	push   $0x23f00
   16a53:	e8 ee 21 ff ff       	call   8c46 <printk>
   16a58:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   16a5b:	8b 44 24 10          	mov    0x10(%esp),%eax
   16a5f:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   16a63:	8b 44 24 10          	mov    0x10(%esp),%eax
   16a67:	83 c0 10             	add    $0x10,%eax
   16a6a:	83 ec 0c             	sub    $0xc,%esp
   16a6d:	50                   	push   %eax
   16a6e:	e8 da 06 ff ff       	call   714d <wake_up>
   16a73:	83 c4 10             	add    $0x10,%esp
}
   16a76:	90                   	nop
   16a77:	83 c4 0c             	add    $0xc,%esp
   16a7a:	c3                   	ret    

00016a7b <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   16a7b:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
   16a7e:	a1 14 21 03 00       	mov    0x32114,%eax
   16a83:	8b 00                	mov    (%eax),%eax
   16a85:	83 e0 03             	and    $0x3,%eax
   16a88:	83 ec 0c             	sub    $0xc,%esp
   16a8b:	50                   	push   %eax
   16a8c:	e8 2b 08 ff ff       	call   72bc <floppy_off>
   16a91:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   16a94:	a1 14 21 03 00       	mov    0x32114,%eax
   16a99:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a9c:	85 c0                	test   %eax,%eax
   16a9e:	74 23                	je     16ac3 <end_request+0x48>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   16aa0:	a1 14 21 03 00       	mov    0x32114,%eax
   16aa5:	8b 40 1c             	mov    0x1c(%eax),%eax
   16aa8:	8b 54 24 10          	mov    0x10(%esp),%edx
   16aac:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   16aaf:	a1 14 21 03 00       	mov    0x32114,%eax
   16ab4:	8b 40 1c             	mov    0x1c(%eax),%eax
   16ab7:	83 ec 0c             	sub    $0xc,%esp
   16aba:	50                   	push   %eax
   16abb:	e8 7c ff ff ff       	call   16a3c <unlock_buffer>
   16ac0:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   16ac3:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   16ac8:	75 34                	jne    16afe <end_request+0x83>
		printk(DEVICE_NAME " I/O error\n\r");
   16aca:	83 ec 0c             	sub    $0xc,%esp
   16acd:	68 24 3f 02 00       	push   $0x23f24
   16ad2:	e8 6f 21 ff ff       	call   8c46 <printk>
   16ad7:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   16ada:	a1 14 21 03 00       	mov    0x32114,%eax
   16adf:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   16ae2:	8b 50 04             	mov    0x4(%eax),%edx
   16ae5:	a1 14 21 03 00       	mov    0x32114,%eax
   16aea:	8b 00                	mov    (%eax),%eax
   16aec:	83 ec 04             	sub    $0x4,%esp
   16aef:	52                   	push   %edx
   16af0:	50                   	push   %eax
   16af1:	68 37 3f 02 00       	push   $0x23f37
   16af6:	e8 4b 21 ff ff       	call   8c46 <printk>
   16afb:	83 c4 10             	add    $0x10,%esp
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   16afe:	a1 14 21 03 00       	mov    0x32114,%eax
   16b03:	83 c0 18             	add    $0x18,%eax
   16b06:	83 ec 0c             	sub    $0xc,%esp
   16b09:	50                   	push   %eax
   16b0a:	e8 3e 06 ff ff       	call   714d <wake_up>
   16b0f:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   16b12:	83 ec 0c             	sub    $0xc,%esp
   16b15:	68 e0 20 03 00       	push   $0x320e0
   16b1a:	e8 2e 06 ff ff       	call   714d <wake_up>
   16b1f:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   16b22:	a1 14 21 03 00       	mov    0x32114,%eax
   16b27:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   16b2d:	a1 14 21 03 00       	mov    0x32114,%eax
   16b32:	8b 40 20             	mov    0x20(%eax),%eax
   16b35:	a3 14 21 03 00       	mov    %eax,0x32114
}
   16b3a:	90                   	nop
   16b3b:	83 c4 0c             	add    $0xc,%esp
   16b3e:	c3                   	ret    

00016b3f <floppy_deselect>:

// 取消选定软驱.
// 如果函数参数指定的软驱nr当前并没有被选定,则显示警告信息.然后复位软驱已选定标志selected,并唤醒等待选择该软驱的任务.数字输出
// 寄存器(DOR)的低2位用于指定选择的软驱(0-3对应A-D).
void floppy_deselect(unsigned int nr)
{
   16b3f:	83 ec 0c             	sub    $0xc,%esp
	if (nr != (current_DOR & 3))
   16b42:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16b49:	0f b6 c0             	movzbl %al,%eax
   16b4c:	83 e0 03             	and    $0x3,%eax
   16b4f:	39 44 24 10          	cmp    %eax,0x10(%esp)
   16b53:	74 10                	je     16b65 <floppy_deselect+0x26>
		printk("floppy_deselect: drive not selected\n\r");
   16b55:	83 ec 0c             	sub    $0xc,%esp
   16b58:	68 4c 3f 02 00       	push   $0x23f4c
   16b5d:	e8 e4 20 ff ff       	call   8c46 <printk>
   16b62:	83 c4 10             	add    $0x10,%esp
	selected = 0;											// 复位软驱已选定标志.
   16b65:	c6 05 58 21 03 00 00 	movb   $0x0,0x32158
	wake_up(&wait_on_floppy_select);						// 唤醒等待的任务.
   16b6c:	83 ec 0c             	sub    $0xc,%esp
   16b6f:	68 5c 21 03 00       	push   $0x3215c
   16b74:	e8 d4 05 ff ff       	call   714d <wake_up>
   16b79:	83 c4 10             	add    $0x10,%esp
}
   16b7c:	90                   	nop
   16b7d:	83 c4 0c             	add    $0xc,%esp
   16b80:	c3                   	ret    

00016b81 <floppy_change>:
// 检测指定软驱中软盘更换情况.
// 参数nr是软驱号.如果软盘更换了则返回1,否则返回0.
// 该函数首先选定参数指定的软驱nr,然后测试软盘控制器的数字输入寄存器DIR的值,以判断驱动器中的软盘是否被更换过.该函数由程序
// fs/buffer.c中的check_disk_change()函数调用.
int floppy_change(unsigned int nr)
{
   16b81:	83 ec 1c             	sub    $0x1c,%esp
	// 首先要让软驱中软盘旋转起来并达到正常工作转速.这需要花费一定时间.采用的方法是利用kernel/sched.c中软盘定时函数do_floppy_timer()
	// 进行一定的延时处理.floppy_on()函数则用于判断延时是否到(mon_timer[nr]==0?),若没有到则让当前进程继续睡眠等待.若延时到则
	// do_floppy_timer()会唤醒当前进程.
repeat:
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
   16b84:	83 ec 0c             	sub    $0xc,%esp
   16b87:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b8b:	e8 f5 06 ff ff       	call   7285 <floppy_on>
   16b90:	83 c4 10             	add    $0x10,%esp
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16b93:	eb 10                	jmp    16ba5 <floppy_change+0x24>
		sleep_on(&wait_on_floppy_select);
   16b95:	83 ec 0c             	sub    $0xc,%esp
   16b98:	68 5c 21 03 00       	push   $0x3215c
   16b9d:	e8 92 05 ff ff       	call   7134 <sleep_on>
   16ba2:	83 c4 10             	add    $0x10,%esp
	while ((current_DOR & 3) != nr && selected)
   16ba5:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16bac:	0f b6 c0             	movzbl %al,%eax
   16baf:	83 e0 03             	and    $0x3,%eax
   16bb2:	39 44 24 20          	cmp    %eax,0x20(%esp)
   16bb6:	74 0b                	je     16bc3 <floppy_change+0x42>
   16bb8:	0f b6 05 58 21 03 00 	movzbl 0x32158,%eax
   16bbf:	84 c0                	test   %al,%al
   16bc1:	75 d2                	jne    16b95 <floppy_change+0x14>
	if ((current_DOR & 3) != nr)
   16bc3:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   16bca:	0f b6 c0             	movzbl %al,%eax
   16bcd:	83 e0 03             	and    $0x3,%eax
   16bd0:	39 44 24 20          	cmp    %eax,0x20(%esp)
   16bd4:	74 02                	je     16bd8 <floppy_change+0x57>
		goto repeat;
   16bd6:	eb ac                	jmp    16b84 <floppy_change+0x3>
	// 现在软盘控制器已经选定我们指定的软驱nr.于是取数字输入寄存器DIR的值,如果其最高位(位7)置位,则表示软盘已更换,此时即可关闭马达并
	// 返回1退出.否则关闭马达返回0退出.表示磁盘没有被更换.
	if (inb(FD_DIR) & 0x80) {
   16bd8:	b8 f7 03 00 00       	mov    $0x3f7,%eax
   16bdd:	89 c2                	mov    %eax,%edx
   16bdf:	ec                   	in     (%dx),%al
   16be0:	88 44 24 0f          	mov    %al,0xf(%esp)
   16be4:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16be9:	84 c0                	test   %al,%al
   16beb:	79 16                	jns    16c03 <floppy_change+0x82>
		floppy_off(nr);
   16bed:	83 ec 0c             	sub    $0xc,%esp
   16bf0:	ff 74 24 2c          	pushl  0x2c(%esp)
   16bf4:	e8 c3 06 ff ff       	call   72bc <floppy_off>
   16bf9:	83 c4 10             	add    $0x10,%esp
		return 1;
   16bfc:	b8 01 00 00 00       	mov    $0x1,%eax
   16c01:	eb 14                	jmp    16c17 <floppy_change+0x96>
	}
	floppy_off(nr);
   16c03:	83 ec 0c             	sub    $0xc,%esp
   16c06:	ff 74 24 2c          	pushl  0x2c(%esp)
   16c0a:	e8 ad 06 ff ff       	call   72bc <floppy_off>
   16c0f:	83 c4 10             	add    $0x10,%esp
	return 0;
   16c12:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c17:	83 c4 1c             	add    $0x1c,%esp
   16c1a:	c3                   	ret    

00016c1b <setup_DMA>:
	:)

// 设置(初始化)软盘DMA通道.
// 软盘中数据读写操作是使用DMA进行的.因此在每次进行数据传输之前需要设置DMA芯片专门上用于软驱的通道2.
static void setup_DMA(void)
{
   16c1b:	57                   	push   %edi
   16c1c:	56                   	push   %esi
   16c1d:	53                   	push   %ebx
   16c1e:	83 ec 10             	sub    $0x10,%esp
	long addr = (long) CURRENT->buffer;				// 当前请求项缓冲区所处内存地址.
   16c21:	a1 14 21 03 00       	mov    0x32114,%eax
   16c26:	8b 40 14             	mov    0x14(%eax),%eax
   16c29:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 首先检测请求项的缓冲区所在位置.如果缓冲区处于内存1MB以上的某个地方,则需要将DMA缓冲区设在临时缓冲区域(tmp_floppy_area)处.因为
	// 8237A芯片只能在1MB地址范围内寻址.如果是写盘命令,则还需要把数据从请求项缓冲区复制到该临时区域.
	cli();
   16c2d:	fa                   	cli    
	if (addr >= 0x100000) {
   16c2e:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
   16c35:	00 
   16c36:	7e 30                	jle    16c68 <setup_DMA+0x4d>
		addr = (long) tmp_floppy_area;
   16c38:	c7 44 24 0c 00 50 00 	movl   $0x5000,0xc(%esp)
   16c3f:	00 
		if (command == FD_WRITE)
   16c40:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16c47:	3c c5                	cmp    $0xc5,%al
   16c49:	75 1d                	jne    16c68 <setup_DMA+0x4d>
			copy_buffer(CURRENT->buffer,tmp_floppy_area);
   16c4b:	a1 14 21 03 00       	mov    0x32114,%eax
   16c50:	8b 40 14             	mov    0x14(%eax),%eax
   16c53:	89 c2                	mov    %eax,%edx
   16c55:	bb 00 50 00 00       	mov    $0x5000,%ebx
   16c5a:	b8 00 01 00 00       	mov    $0x100,%eax
   16c5f:	89 c1                	mov    %eax,%ecx
   16c61:	89 d6                	mov    %edx,%esi
   16c63:	89 df                	mov    %ebx,%edi
   16c65:	fc                   	cld    
   16c66:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	}
	// 接下来我们开始设置DMA通道2.在开始设置之前需要先屏蔽该通道.单通道屏蔽寄存器端口为0x0A.位0-1指定DMA通道(0--3),位2:1表示屏蔽,0
	// 表示允许请求.然后向DMA控制器端口D12和11写入方式字(读盘是0x46,写盘是0x4A).再写入传输使用缓冲区地址addr和需要传输的字节数0x3ff
	// (0--1023).最后复位对DMA通道2的屏蔽,开放DMA2请求DREQ信号.
	/* mask DMA 2 */	/* 屏蔽DMA通道2 */
	immoutb_p(4 | 2,10);
   16c68:	b8 06 00 00 00       	mov    $0x6,%eax
   16c6d:	e6 0a                	out    %al,$0xa
   16c6f:	eb 00                	jmp    16c71 <setup_DMA+0x56>
   16c71:	eb 00                	jmp    16c73 <setup_DMA+0x58>
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
   16c73:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16c7a:	3c e6                	cmp    $0xe6,%al
   16c7c:	75 07                	jne    16c85 <setup_DMA+0x6a>
   16c7e:	b8 46 00 00 00       	mov    $0x46,%eax
   16c83:	eb 05                	jmp    16c8a <setup_DMA+0x6f>
   16c85:	b8 4a 00 00 00       	mov    $0x4a,%eax
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
   16c8a:	e6 0c                	out    %al,$0xc
   16c8c:	eb 00                	jmp    16c8e <setup_DMA+0x73>
   16c8e:	eb 00                	jmp    16c90 <setup_DMA+0x75>
   16c90:	e6 0b                	out    %al,$0xb
   16c92:	eb 00                	jmp    16c94 <setup_DMA+0x79>
   16c94:	eb 00                	jmp    16c96 <setup_DMA+0x7b>
	/* 8 low bits of addr */	/* 地址氏0-7位 */
	// 向DMA通道2写入基/当前地址寄存器(端口4).
	immoutb_p(addr, 4);
   16c96:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c9a:	e6 04                	out    %al,$0x4
   16c9c:	eb 00                	jmp    16c9e <setup_DMA+0x83>
   16c9e:	eb 00                	jmp    16ca0 <setup_DMA+0x85>
	addr >>= 8;
   16ca0:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 8-15 of addr */		/* 地址高8-15位 */
	immoutb_p(addr, 4);
   16ca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16ca9:	e6 04                	out    %al,$0x4
   16cab:	eb 00                	jmp    16cad <setup_DMA+0x92>
   16cad:	eb 00                	jmp    16caf <setup_DMA+0x94>
	addr >>= 8;
   16caf:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 16-19 of addr */	/* 地址16-19位 */
	// DMA只可以在1MB内存空间内寻址,基高16-19位地址需放入页面寄存器(端口0x81).
	immoutb_p(addr, 0x81);
   16cb4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16cb8:	e6 81                	out    %al,$0x81
   16cba:	eb 00                	jmp    16cbc <setup_DMA+0xa1>
   16cbc:	eb 00                	jmp    16cbe <setup_DMA+0xa3>
	/* low 8 bits of count-1 (1024-1=0x3ff) */	/* 计数器低8位(1024-1 = 0x3ff) */
	// 向DMA通道2写入基/当前字节计数值(端口5).
	immoutb_p(0xff, 5);
   16cbe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16cc3:	e6 05                	out    %al,$0x5
   16cc5:	eb 00                	jmp    16cc7 <setup_DMA+0xac>
   16cc7:	eb 00                	jmp    16cc9 <setup_DMA+0xae>
	/* high 8 bits of count-1 */	/* 计数器高8位 */
	// 一次共传输1024字节(两个扇区).
	immoutb_p(3, 5);
   16cc9:	b8 03 00 00 00       	mov    $0x3,%eax
   16cce:	e6 05                	out    %al,$0x5
   16cd0:	eb 00                	jmp    16cd2 <setup_DMA+0xb7>
   16cd2:	eb 00                	jmp    16cd4 <setup_DMA+0xb9>
	/* activate DMA 2 */	/* 开启DMA通道2的请求 */
	immoutb_p(0 | 2, 10);
   16cd4:	b8 02 00 00 00       	mov    $0x2,%eax
   16cd9:	e6 0a                	out    %al,$0xa
   16cdb:	eb 00                	jmp    16cdd <setup_DMA+0xc2>
   16cdd:	eb 00                	jmp    16cdf <setup_DMA+0xc4>
	sti();
   16cdf:	fb                   	sti    
}
   16ce0:	90                   	nop
   16ce1:	83 c4 10             	add    $0x10,%esp
   16ce4:	5b                   	pop    %ebx
   16ce5:	5e                   	pop    %esi
   16ce6:	5f                   	pop    %edi
   16ce7:	c3                   	ret    

00016ce8 <output_byte>:

// 向软驱控制器输出一个字节命令或参数.
// 在向控制器发送一个字节之前,控制器需要处于准备好状态,并且数据传输方向必须设置成从CPU到FDC,因此函数需要首先读取控制器状态信息.
// 这里使用了循环查询方式,以作适当延时.若出错,则会设置复位标志reset.
static void output_byte(char byte)
{
   16ce8:	83 ec 2c             	sub    $0x2c,%esp
   16ceb:	8b 44 24 30          	mov    0x30(%esp),%eax
   16cef:	88 44 24 0c          	mov    %al,0xc(%esp)
	int counter;
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
   16cf3:	a1 64 21 03 00       	mov    0x32164,%eax
   16cf8:	85 c0                	test   %eax,%eax
   16cfa:	75 65                	jne    16d61 <output_byte+0x79>
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16cfc:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16d03:	00 
   16d04:	eb 35                	jmp    16d3b <output_byte+0x53>
		status = inb_p(FD_STATUS) & (STATUS_READY | STATUS_DIR);
   16d06:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16d0b:	89 c2                	mov    %eax,%edx
   16d0d:	ec                   	in     (%dx),%al
   16d0e:	eb 00                	jmp    16d10 <output_byte+0x28>
   16d10:	eb 00                	jmp    16d12 <output_byte+0x2a>
   16d12:	88 44 24 1b          	mov    %al,0x1b(%esp)
   16d16:	0f b6 44 24 1b       	movzbl 0x1b(%esp),%eax
   16d1b:	83 e0 c0             	and    $0xffffffc0,%eax
   16d1e:	88 44 24 1a          	mov    %al,0x1a(%esp)
		if (status == STATUS_READY) {
   16d22:	80 7c 24 1a 80       	cmpb   $0x80,0x1a(%esp)
   16d27:	75 0d                	jne    16d36 <output_byte+0x4e>
			outb(byte,FD_DATA);
   16d29:	0f b6 44 24 0c       	movzbl 0xc(%esp),%eax
   16d2e:	ba f5 03 00 00       	mov    $0x3f5,%edx
   16d33:	ee                   	out    %al,(%dx)
			return;
   16d34:	eb 2c                	jmp    16d62 <output_byte+0x7a>
	for(counter = 0 ; counter < 10000 ; counter++) {
   16d36:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   16d3b:	81 7c 24 1c 0f 27 00 	cmpl   $0x270f,0x1c(%esp)
   16d42:	00 
   16d43:	7e c1                	jle    16d06 <output_byte+0x1e>
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16d45:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16d4c:	00 00 00 
	printk("Unable to send byte to FDC\n\r");
   16d4f:	83 ec 0c             	sub    $0xc,%esp
   16d52:	68 72 3f 02 00       	push   $0x23f72
   16d57:	e8 ea 1e ff ff       	call   8c46 <printk>
   16d5c:	83 c4 10             	add    $0x10,%esp
   16d5f:	eb 01                	jmp    16d62 <output_byte+0x7a>
		return;
   16d61:	90                   	nop
}
   16d62:	83 c4 2c             	add    $0x2c,%esp
   16d65:	c3                   	ret    

00016d66 <result>:

// 读取FDC执行的结果信息.
// 结果信息最多7个字节,存放在数组reply_buffer[]中.返回读入的结果字节数,若返回值=-1,则表示出错.程序处理方式与上面函数类似.
static int result(void)
{
   16d66:	83 ec 2c             	sub    $0x2c,%esp
	int i = 0, counter, status;
   16d69:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16d70:	00 

	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
   16d71:	a1 64 21 03 00       	mov    0x32164,%eax
   16d76:	85 c0                	test   %eax,%eax
   16d78:	74 0a                	je     16d84 <result+0x1e>
		return -1;
   16d7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d7f:	e9 a3 00 00 00       	jmp    16e27 <result+0xc1>
	for (counter = 0 ; counter < 10000 ; counter++) {
   16d84:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   16d8b:	00 
   16d8c:	eb 6d                	jmp    16dfb <result+0x95>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
   16d8e:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16d93:	89 c2                	mov    %eax,%edx
   16d95:	ec                   	in     (%dx),%al
   16d96:	eb 00                	jmp    16d98 <result+0x32>
   16d98:	eb 00                	jmp    16d9a <result+0x34>
   16d9a:	88 44 24 17          	mov    %al,0x17(%esp)
   16d9e:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   16da3:	0f b6 c0             	movzbl %al,%eax
   16da6:	25 d0 00 00 00       	and    $0xd0,%eax
   16dab:	89 44 24 10          	mov    %eax,0x10(%esp)
		if (status == STATUS_READY)
   16daf:	81 7c 24 10 80 00 00 	cmpl   $0x80,0x10(%esp)
   16db6:	00 
   16db7:	75 06                	jne    16dbf <result+0x59>
			return i;
   16db9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16dbd:	eb 68                	jmp    16e27 <result+0xc1>
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
   16dbf:	81 7c 24 10 d0 00 00 	cmpl   $0xd0,0x10(%esp)
   16dc6:	00 
   16dc7:	75 2d                	jne    16df6 <result+0x90>
			if (i >= MAX_REPLIES)
   16dc9:	83 7c 24 1c 06       	cmpl   $0x6,0x1c(%esp)
   16dce:	7f 37                	jg     16e07 <result+0xa1>
				break;
			reply_buffer[i++] = inb_p(FD_DATA);
   16dd0:	b8 f5 03 00 00       	mov    $0x3f5,%eax
   16dd5:	89 c2                	mov    %eax,%edx
   16dd7:	ec                   	in     (%dx),%al
   16dd8:	eb 00                	jmp    16dda <result+0x74>
   16dda:	eb 00                	jmp    16ddc <result+0x76>
   16ddc:	88 44 24 0f          	mov    %al,0xf(%esp)
   16de0:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
   16de5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16de9:	8d 48 01             	lea    0x1(%eax),%ecx
   16dec:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
   16df0:	88 90 6c 21 03 00    	mov    %dl,0x3216c(%eax)
	for (counter = 0 ; counter < 10000 ; counter++) {
   16df6:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   16dfb:	81 7c 24 18 0f 27 00 	cmpl   $0x270f,0x18(%esp)
   16e02:	00 
   16e03:	7e 89                	jle    16d8e <result+0x28>
   16e05:	eb 01                	jmp    16e08 <result+0xa2>
				break;
   16e07:	90                   	nop
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16e08:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16e0f:	00 00 00 
	printk("Getstatus times out\n\r");
   16e12:	83 ec 0c             	sub    $0xc,%esp
   16e15:	68 8f 3f 02 00       	push   $0x23f8f
   16e1a:	e8 27 1e ff ff       	call   8c46 <printk>
   16e1f:	83 c4 10             	add    $0x10,%esp
	return -1;
   16e22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16e27:	83 c4 2c             	add    $0x2c,%esp
   16e2a:	c3                   	ret    

00016e2b <bad_flp_intr>:
// 该函数根据软盘读写出错次数来确定需要采取的进一步行动.如果当前处理的请求项出错次数大于规定的最大出错次数MAX_ERRORS(8次),则
// 不再对当前请求项作进一步的操作尝试.如果读/写出错次数已经超过MAX_ERRORS/2,则需要对软驱作复位处理,于是设置复位标志reset.否则
// 若出错次数还不到最大值的一半,则只需重新校正一下磁头位置,于是设置重新校正标志recalibrate.真正的复位和重新校正处理会在后续的
// 程序中进行.
static void bad_flp_intr(void)
{
   16e2b:	83 ec 0c             	sub    $0xc,%esp
	// 首先把当前请求项出错次数增1.如果当前请求项出错次数大于最大允许出错次数,则取消选定当前软驱,并结束该请求项(缓冲区内容没有被更新).
	CURRENT->errors++;
   16e2e:	a1 14 21 03 00       	mov    0x32114,%eax
   16e33:	8b 50 08             	mov    0x8(%eax),%edx
   16e36:	83 c2 01             	add    $0x1,%edx
   16e39:	89 50 08             	mov    %edx,0x8(%eax)
	if (CURRENT->errors > MAX_ERRORS) {
   16e3c:	a1 14 21 03 00       	mov    0x32114,%eax
   16e41:	8b 40 08             	mov    0x8(%eax),%eax
   16e44:	83 f8 08             	cmp    $0x8,%eax
   16e47:	7e 23                	jle    16e6c <bad_flp_intr+0x41>
		floppy_deselect(current_drive);
   16e49:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16e50:	0f b6 c0             	movzbl %al,%eax
   16e53:	83 ec 0c             	sub    $0xc,%esp
   16e56:	50                   	push   %eax
   16e57:	e8 e3 fc ff ff       	call   16b3f <floppy_deselect>
   16e5c:	83 c4 10             	add    $0x10,%esp
		end_request(0);
   16e5f:	83 ec 0c             	sub    $0xc,%esp
   16e62:	6a 00                	push   $0x0
   16e64:	e8 12 fc ff ff       	call   16a7b <end_request>
   16e69:	83 c4 10             	add    $0x10,%esp
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
   16e6c:	a1 14 21 03 00       	mov    0x32114,%eax
   16e71:	8b 40 08             	mov    0x8(%eax),%eax
   16e74:	83 f8 04             	cmp    $0x4,%eax
   16e77:	7e 0c                	jle    16e85 <bad_flp_intr+0x5a>
		reset = 1;
   16e79:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   16e80:	00 00 00 
	else
		recalibrate = 1;
}
   16e83:	eb 0a                	jmp    16e8f <bad_flp_intr+0x64>
		recalibrate = 1;
   16e85:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   16e8c:	00 00 00 
}
   16e8f:	90                   	nop
   16e90:	83 c4 0c             	add    $0xc,%esp
   16e93:	c3                   	ret    

00016e94 <rw_interrupt>:
 */
// 软盘读写中断调用函数.
// 该函数在软驱控制器操作结束后引发的中断处理过程中被调用.函数首先读取操作结果状态信息,据此判断操作是否出现问题并作相应处理.如果
// 读/写操作成功,那么若请求项是读操作并且其缓冲区在内存1MB以上位置,则需要把数据从软盘临时缓冲区复制到请求项的缓冲区.
static void rw_interrupt(void)
{
   16e94:	57                   	push   %edi
   16e95:	56                   	push   %esi
   16e96:	53                   	push   %ebx
	// 读取FDC执行的结果信息.如果返回字节数不等于7,或者状态字节0,1或2中存在出错标志,那么若是写保护就显示出错信息,释放当前驱动器,并
	// 结束当前请求项.否则就执行出错计数处理.然后继续执行软盘请求项操作.以下状态的含义参见fdreg.h文件.
	if (result() != 7 || (ST0 & 0xd8) || (ST1 & 0xbf) || (ST2 & 0x73)) {    // 把0xf8修改0xd8
   16e97:	e8 ca fe ff ff       	call   16d66 <result>
   16e9c:	83 f8 07             	cmp    $0x7,%eax
   16e9f:	75 37                	jne    16ed8 <rw_interrupt+0x44>
   16ea1:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   16ea8:	0f b6 c0             	movzbl %al,%eax
   16eab:	25 d8 00 00 00       	and    $0xd8,%eax
   16eb0:	85 c0                	test   %eax,%eax
   16eb2:	75 24                	jne    16ed8 <rw_interrupt+0x44>
   16eb4:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   16ebb:	0f b6 c0             	movzbl %al,%eax
   16ebe:	25 bf 00 00 00       	and    $0xbf,%eax
   16ec3:	85 c0                	test   %eax,%eax
   16ec5:	75 11                	jne    16ed8 <rw_interrupt+0x44>
   16ec7:	0f b6 05 6e 21 03 00 	movzbl 0x3216e,%eax
   16ece:	0f b6 c0             	movzbl %al,%eax
   16ed1:	83 e0 73             	and    $0x73,%eax
   16ed4:	85 c0                	test   %eax,%eax
   16ed6:	74 5d                	je     16f35 <rw_interrupt+0xa1>
		if (ST1 & 0x02) {
   16ed8:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   16edf:	0f b6 c0             	movzbl %al,%eax
   16ee2:	83 e0 02             	and    $0x2,%eax
   16ee5:	85 c0                	test   %eax,%eax
   16ee7:	74 40                	je     16f29 <rw_interrupt+0x95>
			printk("Drive %d is write protected\n\r",current_drive);
   16ee9:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16ef0:	0f b6 c0             	movzbl %al,%eax
   16ef3:	83 ec 08             	sub    $0x8,%esp
   16ef6:	50                   	push   %eax
   16ef7:	68 a5 3f 02 00       	push   $0x23fa5
   16efc:	e8 45 1d ff ff       	call   8c46 <printk>
   16f01:	83 c4 10             	add    $0x10,%esp
			floppy_deselect(current_drive);
   16f04:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16f0b:	0f b6 c0             	movzbl %al,%eax
   16f0e:	83 ec 0c             	sub    $0xc,%esp
   16f11:	50                   	push   %eax
   16f12:	e8 28 fc ff ff       	call   16b3f <floppy_deselect>
   16f17:	83 c4 10             	add    $0x10,%esp
			end_request(0);
   16f1a:	83 ec 0c             	sub    $0xc,%esp
   16f1d:	6a 00                	push   $0x0
   16f1f:	e8 57 fb ff ff       	call   16a7b <end_request>
   16f24:	83 c4 10             	add    $0x10,%esp
   16f27:	eb 05                	jmp    16f2e <rw_interrupt+0x9a>
		} else
			bad_flp_intr();
   16f29:	e8 fd fe ff ff       	call   16e2b <bad_flp_intr>
		do_fd_request();
   16f2e:	e8 50 05 00 00       	call   17483 <do_fd_request>
		return;
   16f33:	eb 5f                	jmp    16f94 <rw_interrupt+0x100>
	}
	// 如果当前请求项的缓冲区位于1MB地址以上,则说明此次软盘读操作的内容还放在临时缓冲区内,需要复制到当前请求项的缓冲区中(因为DMA只能在
	// 1MB地址范围寻址).最后释放当前软驱(取消选定),执行当前请求项结束处理:唤醒等待该请求项的进程,唤醒等待空闲请求项的进程(若有的话),从软驱
	// 设备请求项链表中删除本请求项.再继续执行其他软盘请求项操作.
	if (command == FD_READ && (unsigned long)(CURRENT->buffer) >= 0x100000)
   16f35:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16f3c:	3c e6                	cmp    $0xe6,%al
   16f3e:	75 2c                	jne    16f6c <rw_interrupt+0xd8>
   16f40:	a1 14 21 03 00       	mov    0x32114,%eax
   16f45:	8b 40 14             	mov    0x14(%eax),%eax
   16f48:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
   16f4d:	76 1d                	jbe    16f6c <rw_interrupt+0xd8>
		copy_buffer(tmp_floppy_area,CURRENT->buffer);
   16f4f:	ba 00 50 00 00       	mov    $0x5000,%edx
   16f54:	a1 14 21 03 00       	mov    0x32114,%eax
   16f59:	8b 40 14             	mov    0x14(%eax),%eax
   16f5c:	89 c3                	mov    %eax,%ebx
   16f5e:	b8 00 01 00 00       	mov    $0x100,%eax
   16f63:	89 c1                	mov    %eax,%ecx
   16f65:	89 d6                	mov    %edx,%esi
   16f67:	89 df                	mov    %ebx,%edi
   16f69:	fc                   	cld    
   16f6a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	floppy_deselect(current_drive);
   16f6c:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16f73:	0f b6 c0             	movzbl %al,%eax
   16f76:	83 ec 0c             	sub    $0xc,%esp
   16f79:	50                   	push   %eax
   16f7a:	e8 c0 fb ff ff       	call   16b3f <floppy_deselect>
   16f7f:	83 c4 10             	add    $0x10,%esp
	end_request(1);
   16f82:	83 ec 0c             	sub    $0xc,%esp
   16f85:	6a 01                	push   $0x1
   16f87:	e8 ef fa ff ff       	call   16a7b <end_request>
   16f8c:	83 c4 10             	add    $0x10,%esp
	do_fd_request();
   16f8f:	e8 ef 04 00 00       	call   17483 <do_fd_request>
}
   16f94:	5b                   	pop    %ebx
   16f95:	5e                   	pop    %esi
   16f96:	5f                   	pop    %edi
   16f97:	c3                   	ret    

00016f98 <setup_rw_floppy>:

// 设置DMA通道2并向软盘控制器输出命令和参数(输出1字节命令+0~7字节参数).
// 若reset标志没有置位,那么在该函数退出并且软盘控制器执行完相应读/写操作后就会产生一个软盘中断请求,并开始执行软盘中断处理程序.
void setup_rw_floppy(void)
{
   16f98:	83 ec 0c             	sub    $0xc,%esp
	setup_DMA();										// 初始化软盘DMA通道.
   16f9b:	e8 7b fc ff ff       	call   16c1b <setup_DMA>
	do_floppy = rw_interrupt;							// 置软盘中断调用函数指针.
   16fa0:	c7 05 54 21 03 00 94 	movl   $0x16e94,0x32154
   16fa7:	6e 01 00 
	output_byte(command);								// 发送命令字节.
   16faa:	0f b6 05 78 21 03 00 	movzbl 0x32178,%eax
   16fb1:	0f be c0             	movsbl %al,%eax
   16fb4:	83 ec 0c             	sub    $0xc,%esp
   16fb7:	50                   	push   %eax
   16fb8:	e8 2b fd ff ff       	call   16ce8 <output_byte>
   16fbd:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);				// 参数:磁头号 + 驱动器号.
   16fc0:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   16fc7:	0f b6 c0             	movzbl %al,%eax
   16fca:	c1 e0 02             	shl    $0x2,%eax
   16fcd:	89 c2                	mov    %eax,%edx
   16fcf:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   16fd6:	09 d0                	or     %edx,%eax
   16fd8:	0f be c0             	movsbl %al,%eax
   16fdb:	83 ec 0c             	sub    $0xc,%esp
   16fde:	50                   	push   %eax
   16fdf:	e8 04 fd ff ff       	call   16ce8 <output_byte>
   16fe4:	83 c4 10             	add    $0x10,%esp
	output_byte(track);									// 参数:磁道号.
   16fe7:	0f b6 05 76 21 03 00 	movzbl 0x32176,%eax
   16fee:	0f be c0             	movsbl %al,%eax
   16ff1:	83 ec 0c             	sub    $0xc,%esp
   16ff4:	50                   	push   %eax
   16ff5:	e8 ee fc ff ff       	call   16ce8 <output_byte>
   16ffa:	83 c4 10             	add    $0x10,%esp
	output_byte(head);									// 参数:磁头号.
   16ffd:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   17004:	0f be c0             	movsbl %al,%eax
   17007:	83 ec 0c             	sub    $0xc,%esp
   1700a:	50                   	push   %eax
   1700b:	e8 d8 fc ff ff       	call   16ce8 <output_byte>
   17010:	83 c4 10             	add    $0x10,%esp
	output_byte(sector);								// 参数:起始扇区号.
   17013:	0f b6 05 74 21 03 00 	movzbl 0x32174,%eax
   1701a:	0f be c0             	movsbl %al,%eax
   1701d:	83 ec 0c             	sub    $0xc,%esp
   17020:	50                   	push   %eax
   17021:	e8 c2 fc ff ff       	call   16ce8 <output_byte>
   17026:	83 c4 10             	add    $0x10,%esp
	output_byte(2);										/* sector size = 512 */	// 参数:(N=2)512字节.
   17029:	83 ec 0c             	sub    $0xc,%esp
   1702c:	6a 02                	push   $0x2
   1702e:	e8 b5 fc ff ff       	call   16ce8 <output_byte>
   17033:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->sect);							// 参数:每磁道扇区数.
   17036:	a1 88 f4 02 00       	mov    0x2f488,%eax
   1703b:	8b 40 04             	mov    0x4(%eax),%eax
   1703e:	0f be c0             	movsbl %al,%eax
   17041:	83 ec 0c             	sub    $0xc,%esp
   17044:	50                   	push   %eax
   17045:	e8 9e fc ff ff       	call   16ce8 <output_byte>
   1704a:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->gap);							// 参数:扇区间隔长度.
   1704d:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17052:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   17056:	0f be c0             	movsbl %al,%eax
   17059:	83 ec 0c             	sub    $0xc,%esp
   1705c:	50                   	push   %eax
   1705d:	e8 86 fc ff ff       	call   16ce8 <output_byte>
   17062:	83 c4 10             	add    $0x10,%esp
	output_byte(0xFF);									/* sector size (0xff when n!=0 ?) */ // 参数:当N=0时,扇区定义的字节长度,这里无用.
   17065:	83 ec 0c             	sub    $0xc,%esp
   17068:	6a ff                	push   $0xffffffff
   1706a:	e8 79 fc ff ff       	call   16ce8 <output_byte>
   1706f:	83 c4 10             	add    $0x10,%esp
	// 若上述任何一个output_byte()操作出错,则会设置复位标志reset.此时即会立刻去执行do_fd_request()中的复位处理代码.
	if (reset)
   17072:	a1 64 21 03 00       	mov    0x32164,%eax
   17077:	85 c0                	test   %eax,%eax
   17079:	74 05                	je     17080 <setup_rw_floppy+0xe8>
		do_fd_request();
   1707b:	e8 03 04 00 00       	call   17483 <do_fd_request>
}
   17080:	90                   	nop
   17081:	83 c4 0c             	add    $0xc,%esp
   17084:	c3                   	ret    

00017085 <seek_interrupt>:
 */
// 寻道处理结束后中断过程中调用的C函数.
// 首先发送检测中断状态命令,获得状态信息ST0和磁头所在磁道信息.若出错则执行错误计数检测处理或取消本次软盘操作请求项.否则根据
// 状态信息设置当前磁道变量,然后调用函数setup_rw_floppy()设置DMA并输出软盘读写命令和参数.
static void seek_interrupt(void)
{
   17085:	83 ec 0c             	sub    $0xc,%esp
	// 首先发送检测中断状态命令,以获取寻道操作执行的结果.该命令不带参数.返回结果信息是两个字节:ST0和磁头当前磁道号.一读取FDC执行的
	// 结果信息.如果返回结果字节数不等于2,或者ST0不为寻道结束,或者磁头所在磁道(ST1)不等于设定磁道,则说明发生了错误.于是执行检测错误
	// 计数处理,然后继续执行软盘请求项或执行复位处理.
	/* sense drive status */	/* 检测驱动器状态 */
	output_byte(FD_SENSEI);
   17088:	83 ec 0c             	sub    $0xc,%esp
   1708b:	6a 08                	push   $0x8
   1708d:	e8 56 fc ff ff       	call   16ce8 <output_byte>
   17092:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xF8) != 0x20 || ST1 != seek_track) {
   17095:	e8 cc fc ff ff       	call   16d66 <result>
   1709a:	83 f8 02             	cmp    $0x2,%eax
   1709d:	75 26                	jne    170c5 <seek_interrupt+0x40>
   1709f:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   170a6:	0f b6 c0             	movzbl %al,%eax
   170a9:	25 f8 00 00 00       	and    $0xf8,%eax
   170ae:	83 f8 20             	cmp    $0x20,%eax
   170b1:	75 12                	jne    170c5 <seek_interrupt+0x40>
   170b3:	0f b6 15 6d 21 03 00 	movzbl 0x3216d,%edx
   170ba:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   170c1:	38 c2                	cmp    %al,%dl
   170c3:	74 0c                	je     170d1 <seek_interrupt+0x4c>
		bad_flp_intr();
   170c5:	e8 61 fd ff ff       	call   16e2b <bad_flp_intr>
		do_fd_request();
   170ca:	e8 b4 03 00 00       	call   17483 <do_fd_request>
		return;
   170cf:	eb 11                	jmp    170e2 <seek_interrupt+0x5d>
	}
	// 若寻道操作成功,则继续执行当前请求项的软盘操作,即向软盘控制器发送命令和参数.
	current_track = ST1;							// 设置当前磁道.
   170d1:	0f b6 05 6d 21 03 00 	movzbl 0x3216d,%eax
   170d8:	a2 8c f4 02 00       	mov    %al,0x2f48c
	setup_rw_floppy();								// 设置DMA并输出软盘操作命令和参数.
   170dd:	e8 b6 fe ff ff       	call   16f98 <setup_rw_floppy>
}
   170e2:	83 c4 0c             	add    $0xc,%esp
   170e5:	c3                   	ret    

000170e6 <transfer>:
/*
 * 该函数是在传输操作的所有信息都正确设置好后被调用的(即软驱马达已开启并且已选择了正确的软盘(软驱).
 */
// 读写数据传输函数.
static void transfer(void)
{
   170e6:	83 ec 0c             	sub    $0xc,%esp
	// 首先检查当前驱动器参数是否就是指定驱动器的参数.若不是就发送设置驱动器参数命令及相应参数(参数1:高4位步进速率,低4位磁头卸载时间;
	// 参数2:磁头加载时间).然后判断当前数据传输速率是否与指定驱动器的一致,若不是就发送指定软驱的速率值到数据传输速率控制寄存器(FD_DCR).
	if (cur_spec1 != floppy->spec1) {				// 检测当前参数.
   170e9:	a1 88 f4 02 00       	mov    0x2f488,%eax
   170ee:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   170f2:	0f b6 d0             	movzbl %al,%edx
   170f5:	a1 80 f4 02 00       	mov    0x2f480,%eax
   170fa:	39 c2                	cmp    %eax,%edx
   170fc:	74 3f                	je     1713d <transfer+0x57>
		cur_spec1 = floppy->spec1;
   170fe:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17103:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   17107:	0f b6 c0             	movzbl %al,%eax
   1710a:	a3 80 f4 02 00       	mov    %eax,0x2f480
		output_byte(FD_SPECIFY);					// 发送设置磁盘参数命令.
   1710f:	83 ec 0c             	sub    $0xc,%esp
   17112:	6a 03                	push   $0x3
   17114:	e8 cf fb ff ff       	call   16ce8 <output_byte>
   17119:	83 c4 10             	add    $0x10,%esp
		output_byte(cur_spec1);						/* hut etc */	// 发送参数.
   1711c:	a1 80 f4 02 00       	mov    0x2f480,%eax
   17121:	0f be c0             	movsbl %al,%eax
   17124:	83 ec 0c             	sub    $0xc,%esp
   17127:	50                   	push   %eax
   17128:	e8 bb fb ff ff       	call   16ce8 <output_byte>
   1712d:	83 c4 10             	add    $0x10,%esp
		output_byte(6);								/* Head load time =6ms, DMA */
   17130:	83 ec 0c             	sub    $0xc,%esp
   17133:	6a 06                	push   $0x6
   17135:	e8 ae fb ff ff       	call   16ce8 <output_byte>
   1713a:	83 c4 10             	add    $0x10,%esp
	}
	if (cur_rate != floppy->rate)					// 检测当前速率.
   1713d:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17142:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   17146:	0f b6 d0             	movzbl %al,%edx
   17149:	a1 84 f4 02 00       	mov    0x2f484,%eax
   1714e:	39 c2                	cmp    %eax,%edx
   17150:	74 20                	je     17172 <transfer+0x8c>
		outb_p(cur_rate = floppy->rate,FD_DCR);
   17152:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17157:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   1715b:	0f b6 c0             	movzbl %al,%eax
   1715e:	a3 84 f4 02 00       	mov    %eax,0x2f484
   17163:	a1 84 f4 02 00       	mov    0x2f484,%eax
   17168:	ba f7 03 00 00       	mov    $0x3f7,%edx
   1716d:	ee                   	out    %al,(%dx)
   1716e:	eb 00                	jmp    17170 <transfer+0x8a>
   17170:	eb 00                	jmp    17172 <transfer+0x8c>
	// 若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被置位了,就立刻
	// 去执行do_fd_requst()中的复位处理代码.
	if (reset) {
   17172:	a1 64 21 03 00       	mov    0x32164,%eax
   17177:	85 c0                	test   %eax,%eax
   17179:	74 0a                	je     17185 <transfer+0x9f>
		do_fd_request();
   1717b:	e8 03 03 00 00       	call   17483 <do_fd_request>
		return;
   17180:	e9 b6 00 00 00       	jmp    1723b <transfer+0x155>
	}
	// 如果此时寻道标志为零(即不需要寻道),则设置DMA并向软盘控制器发送相应操作命令和参数后返回.否则就执行寻道处理,于是首先置软盘中断处理
	// 调用函数为寻道中断函数.如果起始磁道号不等于零则发送磁头寻道命令和参数.所使用的参数即是第112-121行上设置的全局变量值.如果起始磁道
	// 号seek_track为0,则执行重新校正命令让磁头归零位.
	if (!seek) {
   17185:	a1 68 21 03 00       	mov    0x32168,%eax
   1718a:	85 c0                	test   %eax,%eax
   1718c:	75 0a                	jne    17198 <transfer+0xb2>
		setup_rw_floppy();							// 发送命令参数块.
   1718e:	e8 05 fe ff ff       	call   16f98 <setup_rw_floppy>
		return;
   17193:	e9 a3 00 00 00       	jmp    1723b <transfer+0x155>
	}
	do_floppy = seek_interrupt;						// 寻道中断调用的C函数.
   17198:	c7 05 54 21 03 00 85 	movl   $0x17085,0x32154
   1719f:	70 01 00 
	if (seek_track) {								// 起始磁道号.
   171a2:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   171a9:	84 c0                	test   %al,%al
   171ab:	74 4c                	je     171f9 <transfer+0x113>
		output_byte(FD_SEEK);						// 发送磁头寻道命令.
   171ad:	83 ec 0c             	sub    $0xc,%esp
   171b0:	6a 0f                	push   $0xf
   171b2:	e8 31 fb ff ff       	call   16ce8 <output_byte>
   171b7:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   171ba:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   171c1:	0f b6 c0             	movzbl %al,%eax
   171c4:	c1 e0 02             	shl    $0x2,%eax
   171c7:	89 c2                	mov    %eax,%edx
   171c9:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   171d0:	09 d0                	or     %edx,%eax
   171d2:	0f be c0             	movsbl %al,%eax
   171d5:	83 ec 0c             	sub    $0xc,%esp
   171d8:	50                   	push   %eax
   171d9:	e8 0a fb ff ff       	call   16ce8 <output_byte>
   171de:	83 c4 10             	add    $0x10,%esp
		output_byte(seek_track);					// 发送参数:磁道号.
   171e1:	0f b6 05 77 21 03 00 	movzbl 0x32177,%eax
   171e8:	0f be c0             	movsbl %al,%eax
   171eb:	83 ec 0c             	sub    $0xc,%esp
   171ee:	50                   	push   %eax
   171ef:	e8 f4 fa ff ff       	call   16ce8 <output_byte>
   171f4:	83 c4 10             	add    $0x10,%esp
   171f7:	eb 34                	jmp    1722d <transfer+0x147>
	} else {
		output_byte(FD_RECALIBRATE);				// 发送重新校正命令(磁头归零).
   171f9:	83 ec 0c             	sub    $0xc,%esp
   171fc:	6a 07                	push   $0x7
   171fe:	e8 e5 fa ff ff       	call   16ce8 <output_byte>
   17203:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   17206:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   1720d:	0f b6 c0             	movzbl %al,%eax
   17210:	c1 e0 02             	shl    $0x2,%eax
   17213:	89 c2                	mov    %eax,%edx
   17215:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   1721c:	09 d0                	or     %edx,%eax
   1721e:	0f be c0             	movsbl %al,%eax
   17221:	83 ec 0c             	sub    $0xc,%esp
   17224:	50                   	push   %eax
   17225:	e8 be fa ff ff       	call   16ce8 <output_byte>
   1722a:	83 c4 10             	add    $0x10,%esp
	}
	// 同样地,若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.若reset真的被置位了,就立刻去执行do_fd_requet()中复位
	// 处理代码.
	if (reset)
   1722d:	a1 64 21 03 00       	mov    0x32164,%eax
   17232:	85 c0                	test   %eax,%eax
   17234:	74 05                	je     1723b <transfer+0x155>
		do_fd_request();
   17236:	e8 48 02 00 00       	call   17483 <do_fd_request>
}
   1723b:	83 c4 0c             	add    $0xc,%esp
   1723e:	c3                   	ret    

0001723f <recal_interrupt>:
 */
// 软驱重新校正中断调用函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志.否则重新校正标志清零.然后再次执行软盘请求项处理函数
// 作相应操作.
static void recal_interrupt(void)
{
   1723f:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   17242:	83 ec 0c             	sub    $0xc,%esp
   17245:	6a 08                	push   $0x8
   17247:	e8 9c fa ff ff       	call   16ce8 <output_byte>
   1724c:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   1724f:	e8 12 fb ff ff       	call   16d66 <result>
   17254:	83 f8 02             	cmp    $0x2,%eax
   17257:	75 14                	jne    1726d <recal_interrupt+0x2e>
   17259:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   17260:	0f b6 c0             	movzbl %al,%eax
   17263:	25 e0 00 00 00       	and    $0xe0,%eax
   17268:	83 f8 60             	cmp    $0x60,%eax
   1726b:	75 0c                	jne    17279 <recal_interrupt+0x3a>
		reset = 1;
   1726d:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   17274:	00 00 00 
   17277:	eb 0a                	jmp    17283 <recal_interrupt+0x44>
	else
		recalibrate = 0;							// 否则复位重新校正标志
   17279:	c7 05 60 21 03 00 00 	movl   $0x0,0x32160
   17280:	00 00 00 
	do_fd_request();								// 作相应处理.
   17283:	e8 fb 01 00 00       	call   17483 <do_fd_request>
}
   17288:	90                   	nop
   17289:	83 c4 0c             	add    $0xc,%esp
   1728c:	c3                   	ret    

0001728d <unexpected_floppy_interrupt>:

// 意外软盘中断请求引发的软盘中断处理程序中调用的函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志,否则置重校正标志.
void unexpected_floppy_interrupt(void)
{
   1728d:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   17290:	83 ec 0c             	sub    $0xc,%esp
   17293:	6a 08                	push   $0x8
   17295:	e8 4e fa ff ff       	call   16ce8 <output_byte>
   1729a:	83 c4 10             	add    $0x10,%esp
	if (result()!=2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   1729d:	e8 c4 fa ff ff       	call   16d66 <result>
   172a2:	83 f8 02             	cmp    $0x2,%eax
   172a5:	75 14                	jne    172bb <unexpected_floppy_interrupt+0x2e>
   172a7:	0f b6 05 6c 21 03 00 	movzbl 0x3216c,%eax
   172ae:	0f b6 c0             	movzbl %al,%eax
   172b1:	25 e0 00 00 00       	and    $0xe0,%eax
   172b6:	83 f8 60             	cmp    $0x60,%eax
   172b9:	75 0c                	jne    172c7 <unexpected_floppy_interrupt+0x3a>
		reset = 1;
   172bb:	c7 05 64 21 03 00 01 	movl   $0x1,0x32164
   172c2:	00 00 00 
   172c5:	eb 0a                	jmp    172d1 <unexpected_floppy_interrupt+0x44>
	else
		recalibrate = 1;							// 否则置重新校正标志.
   172c7:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   172ce:	00 00 00 
}
   172d1:	90                   	nop
   172d2:	83 c4 0c             	add    $0xc,%esp
   172d5:	c3                   	ret    

000172d6 <recalibrate_floppy>:

// 软盘重新校正处理函数.
// 向软盘控制器FDC发送重新校正命令和参数,并复位重新校正标志.当软盘控制器执行完重新校正命令就会再次引发的软盘中断调用
// recal_interrupt()函数.
static void recalibrate_floppy(void)
{
   172d6:	83 ec 0c             	sub    $0xc,%esp
	recalibrate = 0;								// 复位重新校正标志.
   172d9:	c7 05 60 21 03 00 00 	movl   $0x0,0x32160
   172e0:	00 00 00 
	current_track = 0;								// 当前磁道号归零.
   172e3:	c6 05 8c f4 02 00 00 	movb   $0x0,0x2f48c
	do_floppy = recal_interrupt;					// 指向重新校正中断调用的C函数.
   172ea:	c7 05 54 21 03 00 3f 	movl   $0x1723f,0x32154
   172f1:	72 01 00 
	output_byte(FD_RECALIBRATE);					// 命令:重新校正.
   172f4:	83 ec 0c             	sub    $0xc,%esp
   172f7:	6a 07                	push   $0x7
   172f9:	e8 ea f9 ff ff       	call   16ce8 <output_byte>
   172fe:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);			// 参数:磁头号 + 当前驱动器号.
   17301:	0f b6 05 75 21 03 00 	movzbl 0x32175,%eax
   17308:	0f b6 c0             	movzbl %al,%eax
   1730b:	c1 e0 02             	shl    $0x2,%eax
   1730e:	89 c2                	mov    %eax,%edx
   17310:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   17317:	09 d0                	or     %edx,%eax
   17319:	0f be c0             	movsbl %al,%eax
   1731c:	83 ec 0c             	sub    $0xc,%esp
   1731f:	50                   	push   %eax
   17320:	e8 c3 f9 ff ff       	call   16ce8 <output_byte>
   17325:	83 c4 10             	add    $0x10,%esp
	// 若上任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被
	// 置位了,就立刻去执行do_fd_requeset()中的复位处理代码.
	if (reset)
   17328:	a1 64 21 03 00       	mov    0x32164,%eax
   1732d:	85 c0                	test   %eax,%eax
   1732f:	74 05                	je     17336 <recalibrate_floppy+0x60>
		do_fd_request();
   17331:	e8 4d 01 00 00       	call   17483 <do_fd_request>
}
   17336:	90                   	nop
   17337:	83 c4 0c             	add    $0xc,%esp
   1733a:	c3                   	ret    

0001733b <reset_interrupt>:
// 软盘控制器FDC复位中断调用函数.
// 该函数会在向控制器发送了复位操作命令后引发的软盘中断处理程序中被调用.
// 首先发送检测中断状态命令(无参数),然后读出返回的结果字节.接着发送设定软驱参数命令和相关参数,最后再次调用请求项处理函数
// do_fd_request()去执行重新校正工作.但由于执行output_byte()操作函数出错时复位标志又会被置位,因此也可能再次去执行复位处理.
static void reset_interrupt(void)
{
   1733b:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   1733e:	83 ec 0c             	sub    $0xc,%esp
   17341:	6a 08                	push   $0x8
   17343:	e8 a0 f9 ff ff       	call   16ce8 <output_byte>
   17348:	83 c4 10             	add    $0x10,%esp
	(void) result();								// 读取命令执行结果字节.
   1734b:	e8 16 fa ff ff       	call   16d66 <result>
	output_byte(FD_SPECIFY);						// 发送设定软驱参数命令.
   17350:	83 ec 0c             	sub    $0xc,%esp
   17353:	6a 03                	push   $0x3
   17355:	e8 8e f9 ff ff       	call   16ce8 <output_byte>
   1735a:	83 c4 10             	add    $0x10,%esp
	output_byte(cur_spec1);							/* hut etc */	// 发送参数
   1735d:	a1 80 f4 02 00       	mov    0x2f480,%eax
   17362:	0f be c0             	movsbl %al,%eax
   17365:	83 ec 0c             	sub    $0xc,%esp
   17368:	50                   	push   %eax
   17369:	e8 7a f9 ff ff       	call   16ce8 <output_byte>
   1736e:	83 c4 10             	add    $0x10,%esp
	output_byte(6);									/* Head load time =6ms, DMA */
   17371:	83 ec 0c             	sub    $0xc,%esp
   17374:	6a 06                	push   $0x6
   17376:	e8 6d f9 ff ff       	call   16ce8 <output_byte>
   1737b:	83 c4 10             	add    $0x10,%esp
	do_fd_request();                				// 调用执行软盘请求.
   1737e:	e8 00 01 00 00       	call   17483 <do_fd_request>
}
   17383:	90                   	nop
   17384:	83 c4 0c             	add    $0xc,%esp
   17387:	c3                   	ret    

00017388 <reset_floppy>:
// 复位软盘控制器.
// 该函数首先设置参数和标志,把复位标志清0,然后把软驱变量cur_spec1和cur_rate置为无效.因为复位操作后,这两个参数就需要重新设置.接着
// 需要重新校正标志,并设置FDC执行复位操作后引发的软盘中断中调用的C函数reset_interrupt().最后把DOR寄存器位2置0一会儿以对软驱执行
// 复位操作.当前数字输出寄存器DOR的位2是启动/复位软驱位.
static void reset_floppy(void)
{
   17388:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	reset = 0;										// 复位标志置0.
   1738b:	c7 05 64 21 03 00 00 	movl   $0x0,0x32164
   17392:	00 00 00 
	cur_spec1 = -1;									// 使无效.
   17395:	c7 05 80 f4 02 00 ff 	movl   $0xffffffff,0x2f480
   1739c:	ff ff ff 
	cur_rate = -1;
   1739f:	c7 05 84 f4 02 00 ff 	movl   $0xffffffff,0x2f484
   173a6:	ff ff ff 
	recalibrate = 1;								// 重新校正标志置位.
   173a9:	c7 05 60 21 03 00 01 	movl   $0x1,0x32160
   173b0:	00 00 00 
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
   173b3:	83 ec 0c             	sub    $0xc,%esp
   173b6:	68 c3 3f 02 00       	push   $0x23fc3
   173bb:	e8 86 18 ff ff       	call   8c46 <printk>
   173c0:	83 c4 10             	add    $0x10,%esp
	cli();											// 关中断.
   173c3:	fa                   	cli    
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
   173c4:	c7 05 54 21 03 00 3b 	movl   $0x1733b,0x32154
   173cb:	73 01 00 
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
   173ce:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   173d5:	0f b6 c0             	movzbl %al,%eax
   173d8:	83 e0 fb             	and    $0xfffffffb,%eax
   173db:	ba f2 03 00 00       	mov    $0x3f2,%edx
   173e0:	ee                   	out    %al,(%dx)
   173e1:	eb 00                	jmp    173e3 <reset_floppy+0x5b>
   173e3:	eb 00                	jmp    173e5 <reset_floppy+0x5d>
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   173e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   173ec:	00 
   173ed:	eb 06                	jmp    173f5 <reset_floppy+0x6d>
		__asm__("nop");
   173ef:	90                   	nop
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   173f0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   173f5:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
   173fa:	7e f3                	jle    173ef <reset_floppy+0x67>
	outb(current_DOR,FD_DOR);						// 再启动软盘控制器.
   173fc:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   17403:	ba f2 03 00 00       	mov    $0x3f2,%edx
   17408:	ee                   	out    %al,(%dx)
	sti();											// 开中断.
   17409:	fb                   	sti    
}
   1740a:	90                   	nop
   1740b:	83 c4 1c             	add    $0x1c,%esp
   1740e:	c3                   	ret    

0001740f <floppy_on_interrupt>:

// 软驱启动定时中断调用函数.
// 在执行一个请求项要求的操作之前,为了等待指定软驱马达旋转起来到达正常的工作转速,do_fd_request()函数为准备好的当前请求项添加了一个延时
// 定时器.本函数即是该定时器到期时调用的函数.它首先检查数字输出寄存器(DOR),使其选择当前指定的驱动.然后调用执行软盘读写传输函数transfer().
static void floppy_on_interrupt(void)
{
   1740f:	83 ec 0c             	sub    $0xc,%esp
	/* We cannot do a floppy-select, as that might sleep. We just force it */
	/* 我们不能任意设置选择的软驱,因为这可能会引起进程睡眠.我们只能迫使它自己选择 */
	// 如果当前驱动器号与数字输出寄存器DOR中的不同,则需要重新设置DOR为当前驱动器.在向数字输出寄存器输出当前DOR以后,使用定时器延迟2个滴答
	// 时间,以让命令得到执行.然后调用软盘读写传输函数transfer().若当前驱动器与DOR中的相符,那么就可以直接调用软盘读写传输函数.
	selected = 1;									// 置已选定当前驱动器标志.
   17412:	c6 05 58 21 03 00 01 	movb   $0x1,0x32158
	if (current_drive != (current_DOR & 3)) {
   17419:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   17420:	0f b6 c0             	movzbl %al,%eax
   17423:	0f b6 15 c8 f2 02 00 	movzbl 0x2f2c8,%edx
   1742a:	0f b6 d2             	movzbl %dl,%edx
   1742d:	83 e2 03             	and    $0x3,%edx
   17430:	39 d0                	cmp    %edx,%eax
   17432:	74 45                	je     17479 <floppy_on_interrupt+0x6a>
		current_DOR &= 0xFC;
   17434:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   1743b:	83 e0 fc             	and    $0xfffffffc,%eax
   1743e:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
		current_DOR |= current_drive;
   17443:	0f b6 15 c8 f2 02 00 	movzbl 0x2f2c8,%edx
   1744a:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   17451:	09 d0                	or     %edx,%eax
   17453:	a2 c8 f2 02 00       	mov    %al,0x2f2c8
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
   17458:	0f b6 05 c8 f2 02 00 	movzbl 0x2f2c8,%eax
   1745f:	ba f2 03 00 00       	mov    $0x3f2,%edx
   17464:	ee                   	out    %al,(%dx)
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
   17465:	83 ec 08             	sub    $0x8,%esp
   17468:	68 e6 70 01 00       	push   $0x170e6
   1746d:	6a 02                	push   $0x2
   1746f:	e8 3c ff fe ff       	call   73b0 <add_timer>
   17474:	83 c4 10             	add    $0x10,%esp
	} else
		transfer();									// 执行软盘读写传输函数.
}
   17477:	eb 05                	jmp    1747e <floppy_on_interrupt+0x6f>
		transfer();									// 执行软盘读写传输函数.
   17479:	e8 68 fc ff ff       	call   170e6 <transfer>
}
   1747e:	90                   	nop
   1747f:	83 c4 0c             	add    $0xc,%esp
   17482:	c3                   	ret    

00017483 <do_fd_request>:

// 软盘读写请求项处理函数
// 该函数是软盘驱动程序中最主要的函数.主要作用是:1处理有复位标志或重新校正标志置位情况;2利用请求项中的设备号计算取得请求项指定软驱的
// 参数块;3利用内核定时器启动软盘读/写操作.
void do_fd_request(void)
{
   17483:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int block;

	// 首先检查是否有复位标志或重校正标志置位,若有则本函数仅执行相关标志的处理功能后就返回.如果复位标志已置位,则执行软盘复位操作并返回.
	// 如果重新校正标志已置位,则执行软盘重新校正操作并返回.
	seek = 0;										// 清寻道标志.
   17486:	c7 05 68 21 03 00 00 	movl   $0x0,0x32168
   1748d:	00 00 00 
	if (reset) {									// 复位标志已置位.
   17490:	a1 64 21 03 00       	mov    0x32164,%eax
   17495:	85 c0                	test   %eax,%eax
   17497:	74 0a                	je     174a3 <do_fd_request+0x20>
		reset_floppy();
   17499:	e8 ea fe ff ff       	call   17388 <reset_floppy>
		return;
   1749e:	e9 07 02 00 00       	jmp    176aa <do_fd_request+0x227>
	}
	if (recalibrate) {								// 重新校正标志已置位.
   174a3:	a1 60 21 03 00       	mov    0x32160,%eax
   174a8:	85 c0                	test   %eax,%eax
   174aa:	74 0a                	je     174b6 <do_fd_request+0x33>
		recalibrate_floppy();
   174ac:	e8 25 fe ff ff       	call   172d6 <recalibrate_floppy>
		return;
   174b1:	e9 f4 01 00 00       	jmp    176aa <do_fd_request+0x227>
	}
	// 本函数的真正功能从这里开始.首先利用blk.h文件中的INIT_REQUEST宏来检测请求项的合法性,如果已没有请求项则退出.然后利用请求项中的设备
	// 号取得请求项指定软驱的参数块.这个参数块将在下面用于设置软盘操作使用的全局变量参数块.请求项设备号中的软盘类型(MINOR(CURRENT->dev)>>2)
	// 被用作磁盘类型数组floppy_type[]的索引值来取得指定软驱的参数块.
	INIT_REQUEST;
   174b6:	90                   	nop
   174b7:	a1 14 21 03 00       	mov    0x32114,%eax
   174bc:	85 c0                	test   %eax,%eax
   174be:	75 0f                	jne    174cf <do_fd_request+0x4c>
   174c0:	c7 05 54 21 03 00 00 	movl   $0x0,0x32154
   174c7:	00 00 00 
   174ca:	e9 db 01 00 00       	jmp    176aa <do_fd_request+0x227>
   174cf:	a1 14 21 03 00       	mov    0x32114,%eax
   174d4:	8b 00                	mov    (%eax),%eax
   174d6:	c1 e8 08             	shr    $0x8,%eax
   174d9:	83 f8 02             	cmp    $0x2,%eax
   174dc:	74 10                	je     174ee <do_fd_request+0x6b>
   174de:	83 ec 0c             	sub    $0xc,%esp
   174e1:	68 dc 3f 02 00       	push   $0x23fdc
   174e6:	e8 1c 17 ff ff       	call   8c07 <panic>
   174eb:	83 c4 10             	add    $0x10,%esp
   174ee:	a1 14 21 03 00       	mov    0x32114,%eax
   174f3:	8b 40 1c             	mov    0x1c(%eax),%eax
   174f6:	85 c0                	test   %eax,%eax
   174f8:	74 20                	je     1751a <do_fd_request+0x97>
   174fa:	a1 14 21 03 00       	mov    0x32114,%eax
   174ff:	8b 40 1c             	mov    0x1c(%eax),%eax
   17502:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   17506:	84 c0                	test   %al,%al
   17508:	75 10                	jne    1751a <do_fd_request+0x97>
   1750a:	83 ec 0c             	sub    $0xc,%esp
   1750d:	68 fb 3f 02 00       	push   $0x23ffb
   17512:	e8 f0 16 ff ff       	call   8c07 <panic>
   17517:	83 c4 10             	add    $0x10,%esp
	floppy = (MINOR(CURRENT->dev) >> 2) + floppy_type;
   1751a:	a1 14 21 03 00       	mov    0x32114,%eax
   1751f:	8b 00                	mov    (%eax),%eax
   17521:	c1 f8 02             	sar    $0x2,%eax
   17524:	83 e0 3f             	and    $0x3f,%eax
   17527:	89 c2                	mov    %eax,%edx
   17529:	89 d0                	mov    %edx,%eax
   1752b:	01 c0                	add    %eax,%eax
   1752d:	01 d0                	add    %edx,%eax
   1752f:	c1 e0 03             	shl    $0x3,%eax
   17532:	05 c0 f3 02 00       	add    $0x2f3c0,%eax
   17537:	a3 88 f4 02 00       	mov    %eax,0x2f488
	// 下面开始设置全局变量值.如果当前驱动器号current_drive不是请求项中指定的驱动器号,则置标志seek,表示在执行读/写操作之前需要先让驱动
	// 器执行寻道处理.然后把当前驱动器号设置为请求项中指定的驱动器号.
	if (current_drive != CURRENT_DEV)				// CURRENT_DEV是请求项中指定的软驱号.
   1753c:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   17543:	0f b6 d0             	movzbl %al,%edx
   17546:	a1 14 21 03 00       	mov    0x32114,%eax
   1754b:	8b 00                	mov    (%eax),%eax
   1754d:	83 e0 03             	and    $0x3,%eax
   17550:	39 c2                	cmp    %eax,%edx
   17552:	74 0a                	je     1755e <do_fd_request+0xdb>
		seek = 1;
   17554:	c7 05 68 21 03 00 01 	movl   $0x1,0x32168
   1755b:	00 00 00 
	current_drive = CURRENT_DEV;
   1755e:	a1 14 21 03 00       	mov    0x32114,%eax
   17563:	8b 00                	mov    (%eax),%eax
   17565:	83 e0 03             	and    $0x3,%eax
   17568:	a2 73 21 03 00       	mov    %al,0x32173
	// 设置读写起始扇区block.因为每次读写是以块为单位(1块为2个扇区),所以起始扇区需要起码比磁盘总扇区数小2个扇区.否则说明这个请求 参数无效,
	// 结束该次软盘请求项去执行下一个请求项.
	block = CURRENT->sector;						// 取当前软盘请求项中起始扇区号.
   1756d:	a1 14 21 03 00       	mov    0x32114,%eax
   17572:	8b 40 0c             	mov    0xc(%eax),%eax
   17575:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (block + 2 > floppy->size) {					// 如果block + 2大于磁盘扇区总数,则结束本人软盘请求项.
   17579:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1757d:	8d 50 02             	lea    0x2(%eax),%edx
   17580:	a1 88 f4 02 00       	mov    0x2f488,%eax
   17585:	8b 00                	mov    (%eax),%eax
   17587:	39 c2                	cmp    %eax,%edx
   17589:	76 12                	jbe    1759d <do_fd_request+0x11a>
		end_request(0);
   1758b:	83 ec 0c             	sub    $0xc,%esp
   1758e:	6a 00                	push   $0x0
   17590:	e8 e6 f4 ff ff       	call   16a7b <end_request>
   17595:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   17598:	e9 1a ff ff ff       	jmp    174b7 <do_fd_request+0x34>
	}
	// 再求对应在磁道上的扇区号,磁头号,磁道号,搜寻磁道号(对于软驱读不同格式的盘).
	sector = block % floppy->sect;					// 起始扇区对每磁道扇区数取模,得磁道上扇区号.
   1759d:	a1 88 f4 02 00       	mov    0x2f488,%eax
   175a2:	8b 48 04             	mov    0x4(%eax),%ecx
   175a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   175a9:	ba 00 00 00 00       	mov    $0x0,%edx
   175ae:	f7 f1                	div    %ecx
   175b0:	89 d0                	mov    %edx,%eax
   175b2:	a2 74 21 03 00       	mov    %al,0x32174
	block /= floppy->sect;							// 起始扇区对每磁道扇区数取整,得起始磁道数.
   175b7:	a1 88 f4 02 00       	mov    0x2f488,%eax
   175bc:	8b 48 04             	mov    0x4(%eax),%ecx
   175bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   175c3:	ba 00 00 00 00       	mov    $0x0,%edx
   175c8:	f7 f1                	div    %ecx
   175ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
	head = block % floppy->head;					// 起始磁道数对磁头数取模,得操作的磁头号.
   175ce:	a1 88 f4 02 00       	mov    0x2f488,%eax
   175d3:	8b 48 08             	mov    0x8(%eax),%ecx
   175d6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   175da:	ba 00 00 00 00       	mov    $0x0,%edx
   175df:	f7 f1                	div    %ecx
   175e1:	89 d0                	mov    %edx,%eax
   175e3:	a2 75 21 03 00       	mov    %al,0x32175
	track = block / floppy->head;					// 起始磁道数对磁头数取整,得操作的磁道号.
   175e8:	a1 88 f4 02 00       	mov    0x2f488,%eax
   175ed:	8b 48 08             	mov    0x8(%eax),%ecx
   175f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   175f4:	ba 00 00 00 00       	mov    $0x0,%edx
   175f9:	f7 f1                	div    %ecx
   175fb:	a2 76 21 03 00       	mov    %al,0x32176
	seek_track = track << floppy->stretch;			// 相应于软驱中盘类型进行调整,得寻道号.
   17600:	0f b6 05 76 21 03 00 	movzbl 0x32176,%eax
   17607:	0f b6 d0             	movzbl %al,%edx
   1760a:	a1 88 f4 02 00       	mov    0x2f488,%eax
   1760f:	8b 40 10             	mov    0x10(%eax),%eax
   17612:	89 c1                	mov    %eax,%ecx
   17614:	d3 e2                	shl    %cl,%edx
   17616:	89 d0                	mov    %edx,%eax
   17618:	a2 77 21 03 00       	mov    %al,0x32177
	// 再看看是否还需要首先执行寻道操作.如果寻道号与当前磁头所在磁道号不同,则需要进行寻道操作,于是置需要寻道标志seek.最后我们设置执行的软盘
	// 命令command.
	if (seek_track != current_track)
   1761d:	0f b6 15 77 21 03 00 	movzbl 0x32177,%edx
   17624:	0f b6 05 8c f4 02 00 	movzbl 0x2f48c,%eax
   1762b:	38 c2                	cmp    %al,%dl
   1762d:	74 0a                	je     17639 <do_fd_request+0x1b6>
		seek = 1;
   1762f:	c7 05 68 21 03 00 01 	movl   $0x1,0x32168
   17636:	00 00 00 
	sector++;										// 磁盘上实际扇区计数是从1算起.
   17639:	0f b6 05 74 21 03 00 	movzbl 0x32174,%eax
   17640:	83 c0 01             	add    $0x1,%eax
   17643:	a2 74 21 03 00       	mov    %al,0x32174
	if (CURRENT->cmd == READ)						// 如果请求项是读操作,则置读命令码.
   17648:	a1 14 21 03 00       	mov    0x32114,%eax
   1764d:	8b 40 04             	mov    0x4(%eax),%eax
   17650:	85 c0                	test   %eax,%eax
   17652:	75 09                	jne    1765d <do_fd_request+0x1da>
		command = FD_READ;
   17654:	c6 05 78 21 03 00 e6 	movb   $0xe6,0x32178
   1765b:	eb 26                	jmp    17683 <do_fd_request+0x200>
	else if (CURRENT->cmd == WRITE)					// 如果请求项是写操作,则置写命令码.
   1765d:	a1 14 21 03 00       	mov    0x32114,%eax
   17662:	8b 40 04             	mov    0x4(%eax),%eax
   17665:	83 f8 01             	cmp    $0x1,%eax
   17668:	75 09                	jne    17673 <do_fd_request+0x1f0>
		command = FD_WRITE;
   1766a:	c6 05 78 21 03 00 c5 	movb   $0xc5,0x32178
   17671:	eb 10                	jmp    17683 <do_fd_request+0x200>
	else
		panic("do_fd_request: unknown command");
   17673:	83 ec 0c             	sub    $0xc,%esp
   17676:	68 14 40 02 00       	push   $0x24014
   1767b:	e8 87 15 ff ff       	call   8c07 <panic>
   17680:	83 c4 10             	add    $0x10,%esp
	// 在上面设置好所有全局变量值之后,我们可以开始执行请求项操作了.该操作利用定时器来启动.因为为了能对软驱进行读写操作,需要首先启动驱动器马达
	// 并达到正常运转速度.而这需要一定的时间.因此这里利用ticks_to_floppy_on()来计算启动延时时间,然后使用该延时设定一个定时器.当时间到时就调用
	// 函数floppy_on_interrupt().
	add_timer(ticks_to_floppy_on(current_drive), &floppy_on_interrupt);
   17683:	0f b6 05 73 21 03 00 	movzbl 0x32173,%eax
   1768a:	0f b6 c0             	movzbl %al,%eax
   1768d:	83 ec 0c             	sub    $0xc,%esp
   17690:	50                   	push   %eax
   17691:	e8 16 fb fe ff       	call   71ac <ticks_to_floppy_on>
   17696:	83 c4 10             	add    $0x10,%esp
   17699:	83 ec 08             	sub    $0x8,%esp
   1769c:	68 0f 74 01 00       	push   $0x1740f
   176a1:	50                   	push   %eax
   176a2:	e8 09 fd fe ff       	call   73b0 <add_timer>
   176a7:	83 c4 10             	add    $0x10,%esp
}
   176aa:	83 c4 1c             	add    $0x1c,%esp
   176ad:	c3                   	ret    

000176ae <floppy_init>:

// 软盘系统初始化.
// 设置软盘块设备请求项的处理函数do_fd_request(),并设置软盘中断门(int 0x26,对应硬件中断请求信号IRQ6).然后取消对该中断信号的屏蔽,以
// 允许软盘控制器FDC发送中断请求信号.中断描述符表IDT中陷阱门描述符设置宏set_trap_gate()定义在头文件include/asm/system.h中.
void floppy_init(void)
{
   176ae:	53                   	push   %ebx
   176af:	83 ec 10             	sub    $0x10,%esp
	// 设置软盘中断门描述符。floppy_interrup(kernel/sys_call.s)是其中断处理过程。
	blk_size[MAJOR_NR] = floppy_sizes;
   176b2:	c7 05 40 21 03 00 a0 	movl   $0x2f4a0,0x32140
   176b9:	f4 02 00 
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;  						// = do_fd_request()。
   176bc:	c7 05 10 21 03 00 83 	movl   $0x17483,0x32110
   176c3:	74 01 00 
	set_trap_gate(0x26, &floppy_interrupt);          						// 设置陷阱门描述符。
   176c6:	b9 e8 55 00 00       	mov    $0x55e8,%ecx
   176cb:	bb ec 55 00 00       	mov    $0x55ec,%ebx
   176d0:	ba c2 7a 00 00       	mov    $0x7ac2,%edx
   176d5:	b8 00 00 08 00       	mov    $0x80000,%eax
   176da:	66 89 d0             	mov    %dx,%ax
   176dd:	66 ba 00 8f          	mov    $0x8f00,%dx
   176e1:	89 01                	mov    %eax,(%ecx)
   176e3:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x40, 0x21);                   						// 复位软盘中断请求屏蔽位。
   176e5:	b8 21 00 00 00       	mov    $0x21,%eax
   176ea:	89 c2                	mov    %eax,%edx
   176ec:	ec                   	in     (%dx),%al
   176ed:	eb 00                	jmp    176ef <floppy_init+0x41>
   176ef:	eb 00                	jmp    176f1 <floppy_init+0x43>
   176f1:	88 44 24 0f          	mov    %al,0xf(%esp)
   176f5:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   176fa:	0f b6 c0             	movzbl %al,%eax
   176fd:	83 e0 bf             	and    $0xffffffbf,%eax
   17700:	ba 21 00 00 00       	mov    $0x21,%edx
   17705:	ee                   	out    %al,(%dx)
}
   17706:	90                   	nop
   17707:	83 c4 10             	add    $0x10,%esp
   1770a:	5b                   	pop    %ebx
   1770b:	c3                   	ret    

0001770c <unlock_buffer>:
{
   1770c:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   1770f:	8b 44 24 10          	mov    0x10(%esp),%eax
   17713:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   17717:	84 c0                	test   %al,%al
   17719:	75 10                	jne    1772b <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   1771b:	83 ec 0c             	sub    $0xc,%esp
   1771e:	68 34 40 02 00       	push   $0x24034
   17723:	e8 1e 15 ff ff       	call   8c46 <printk>
   17728:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   1772b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1772f:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   17733:	8b 44 24 10          	mov    0x10(%esp),%eax
   17737:	83 c0 10             	add    $0x10,%eax
   1773a:	83 ec 0c             	sub    $0xc,%esp
   1773d:	50                   	push   %eax
   1773e:	e8 0a fa fe ff       	call   714d <wake_up>
   17743:	83 c4 10             	add    $0x10,%esp
}
   17746:	90                   	nop
   17747:	83 c4 0c             	add    $0xc,%esp
   1774a:	c3                   	ret    

0001774b <end_request>:
{
   1774b:	83 ec 0c             	sub    $0xc,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   1774e:	a1 1c 21 03 00       	mov    0x3211c,%eax
   17753:	8b 40 1c             	mov    0x1c(%eax),%eax
   17756:	85 c0                	test   %eax,%eax
   17758:	74 23                	je     1777d <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   1775a:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1775f:	8b 40 1c             	mov    0x1c(%eax),%eax
   17762:	8b 54 24 10          	mov    0x10(%esp),%edx
   17766:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   17769:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1776e:	8b 40 1c             	mov    0x1c(%eax),%eax
   17771:	83 ec 0c             	sub    $0xc,%esp
   17774:	50                   	push   %eax
   17775:	e8 92 ff ff ff       	call   1770c <unlock_buffer>
   1777a:	83 c4 10             	add    $0x10,%esp
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   1777d:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   17782:	75 34                	jne    177b8 <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   17784:	83 ec 0c             	sub    $0xc,%esp
   17787:	68 5a 40 02 00       	push   $0x2405a
   1778c:	e8 b5 14 ff ff       	call   8c46 <printk>
   17791:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
   17794:	a1 1c 21 03 00       	mov    0x3211c,%eax
   17799:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   1779c:	8b 50 04             	mov    0x4(%eax),%edx
   1779f:	a1 1c 21 03 00       	mov    0x3211c,%eax
   177a4:	8b 00                	mov    (%eax),%eax
   177a6:	83 ec 04             	sub    $0x4,%esp
   177a9:	52                   	push   %edx
   177aa:	50                   	push   %eax
   177ab:	68 6f 40 02 00       	push   $0x2406f
   177b0:	e8 91 14 ff ff       	call   8c46 <printk>
   177b5:	83 c4 10             	add    $0x10,%esp
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   177b8:	a1 1c 21 03 00       	mov    0x3211c,%eax
   177bd:	83 c0 18             	add    $0x18,%eax
   177c0:	83 ec 0c             	sub    $0xc,%esp
   177c3:	50                   	push   %eax
   177c4:	e8 84 f9 fe ff       	call   714d <wake_up>
   177c9:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   177cc:	83 ec 0c             	sub    $0xc,%esp
   177cf:	68 e0 20 03 00       	push   $0x320e0
   177d4:	e8 74 f9 fe ff       	call   714d <wake_up>
   177d9:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   177dc:	a1 1c 21 03 00       	mov    0x3211c,%eax
   177e1:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   177e7:	a1 1c 21 03 00       	mov    0x3211c,%eax
   177ec:	8b 40 20             	mov    0x20(%eax),%eax
   177ef:	a3 1c 21 03 00       	mov    %eax,0x3211c
}
   177f4:	90                   	nop
   177f5:	83 c4 0c             	add    $0xc,%esp
   177f8:	c3                   	ret    

000177f9 <sys_setup>:
// 系统设备函数.
// 函数参数BIOS是由初始化程序init/main.c中init子程序设置为指向硬盘参数表结构的指针.
// 该硬盘参数表结构包含2个硬盘参数表的(共32字节),是从内存0x90080处复制而来.0x90080处的硬盘参数表是由setup.s程序利用ROM BIOS
// 功能取得.本函数主要功能是读取CMOS和硬盘参数表信息,用于设置硬盘分区结构hd,并尝试加载RAM虚拟盘和根文件系统.
int sys_setup(void * BIOS)
{
   177f9:	56                   	push   %esi
   177fa:	53                   	push   %ebx
   177fb:	83 ec 24             	sub    $0x24,%esp
	struct buffer_head * bh;

	// 首先设置callable标志,使得本函数只能被调用1次.然后设置硬盘信息数据组hd_info[].如果在include/linux/config.h文件已定义了符号
	// 常数HD_TYPE,那么hd_info[]数组已经在前面第49行上设置好了.否则就需要读取boot/setup.s程序存放在内存0x90080处开始的硬盘参数表.
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
   177fe:	a1 20 f5 02 00       	mov    0x2f520,%eax
   17803:	85 c0                	test   %eax,%eax
   17805:	75 0a                	jne    17811 <sys_setup+0x18>
		return -1;
   17807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1780c:	e9 ab 04 00 00       	jmp    17cbc <sys_setup+0x4c3>
	callable = 0;
   17811:	c7 05 20 f5 02 00 00 	movl   $0x0,0x2f520
   17818:	00 00 00 
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   1781b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   17822:	00 
   17823:	e9 cd 00 00 00       	jmp    178f5 <sys_setup+0xfc>
		hd_info[drive].cyl = *(unsigned short *) BIOS;							// 柱面数
   17828:	8b 44 24 30          	mov    0x30(%esp),%eax
   1782c:	0f b7 00             	movzwl (%eax),%eax
   1782f:	0f b7 c8             	movzwl %ax,%ecx
   17832:	8b 54 24 18          	mov    0x18(%esp),%edx
   17836:	89 d0                	mov    %edx,%eax
   17838:	01 c0                	add    %eax,%eax
   1783a:	01 d0                	add    %edx,%eax
   1783c:	c1 e0 03             	shl    $0x3,%eax
   1783f:	05 a8 21 03 00       	add    $0x321a8,%eax
   17844:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].head = *(unsigned char *) (2 + BIOS);					// 磁头数
   17846:	8b 44 24 30          	mov    0x30(%esp),%eax
   1784a:	83 c0 02             	add    $0x2,%eax
   1784d:	0f b6 00             	movzbl (%eax),%eax
   17850:	0f b6 c8             	movzbl %al,%ecx
   17853:	8b 54 24 18          	mov    0x18(%esp),%edx
   17857:	89 d0                	mov    %edx,%eax
   17859:	01 c0                	add    %eax,%eax
   1785b:	01 d0                	add    %edx,%eax
   1785d:	c1 e0 03             	shl    $0x3,%eax
   17860:	05 a0 21 03 00       	add    $0x321a0,%eax
   17865:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].wpcom = *(unsigned short *) (5 + BIOS);					// 写前预补偿柱面号
   17867:	8b 44 24 30          	mov    0x30(%esp),%eax
   1786b:	83 c0 05             	add    $0x5,%eax
   1786e:	0f b7 00             	movzwl (%eax),%eax
   17871:	0f b7 c8             	movzwl %ax,%ecx
   17874:	8b 54 24 18          	mov    0x18(%esp),%edx
   17878:	89 d0                	mov    %edx,%eax
   1787a:	01 c0                	add    %eax,%eax
   1787c:	01 d0                	add    %edx,%eax
   1787e:	c1 e0 03             	shl    $0x3,%eax
   17881:	05 ac 21 03 00       	add    $0x321ac,%eax
   17886:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].ctl = *(unsigned char *) (8 + BIOS);						// 控制字节
   17888:	8b 44 24 30          	mov    0x30(%esp),%eax
   1788c:	83 c0 08             	add    $0x8,%eax
   1788f:	0f b6 00             	movzbl (%eax),%eax
   17892:	0f b6 c8             	movzbl %al,%ecx
   17895:	8b 54 24 18          	mov    0x18(%esp),%edx
   17899:	89 d0                	mov    %edx,%eax
   1789b:	01 c0                	add    %eax,%eax
   1789d:	01 d0                	add    %edx,%eax
   1789f:	c1 e0 03             	shl    $0x3,%eax
   178a2:	05 b4 21 03 00       	add    $0x321b4,%eax
   178a7:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].lzone = *(unsigned short *) (12 + BIOS);					// 磁头着陆区柱面号
   178a9:	8b 44 24 30          	mov    0x30(%esp),%eax
   178ad:	83 c0 0c             	add    $0xc,%eax
   178b0:	0f b7 00             	movzwl (%eax),%eax
   178b3:	0f b7 c8             	movzwl %ax,%ecx
   178b6:	8b 54 24 18          	mov    0x18(%esp),%edx
   178ba:	89 d0                	mov    %edx,%eax
   178bc:	01 c0                	add    %eax,%eax
   178be:	01 d0                	add    %edx,%eax
   178c0:	c1 e0 03             	shl    $0x3,%eax
   178c3:	05 b0 21 03 00       	add    $0x321b0,%eax
   178c8:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
   178ca:	8b 44 24 30          	mov    0x30(%esp),%eax
   178ce:	83 c0 0e             	add    $0xe,%eax
   178d1:	0f b6 00             	movzbl (%eax),%eax
   178d4:	0f b6 c8             	movzbl %al,%ecx
   178d7:	8b 54 24 18          	mov    0x18(%esp),%edx
   178db:	89 d0                	mov    %edx,%eax
   178dd:	01 c0                	add    %eax,%eax
   178df:	01 d0                	add    %edx,%eax
   178e1:	c1 e0 03             	shl    $0x3,%eax
   178e4:	05 a4 21 03 00       	add    $0x321a4,%eax
   178e9:	89 08                	mov    %ecx,(%eax)
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
   178eb:	83 44 24 30 10       	addl   $0x10,0x30(%esp)
	for (drive = 0 ; drive < 2 ; drive++) {
   178f0:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   178f5:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   178fa:	0f 8e 28 ff ff ff    	jle    17828 <sys_setup+0x2f>
	}
	// setup.s程序在取BIOS硬盘参数表信息时,如果系统中只有1个硬盘,就会将对应第2硬盘的16字节全部清零.因此这里只要判断第2个硬盘柱面数是否为0
	// 就可以知道是否有第2个硬盘了.
	if (hd_info[1].cyl)
   17900:	a1 c0 21 03 00       	mov    0x321c0,%eax
   17905:	85 c0                	test   %eax,%eax
   17907:	74 0c                	je     17915 <sys_setup+0x11c>
		NR_HD = 2;																// 硬盘数置为2.
   17909:	c7 05 d8 21 03 00 02 	movl   $0x2,0x321d8
   17910:	00 00 00 
   17913:	eb 0a                	jmp    1791f <sys_setup+0x126>
	else
		NR_HD = 1;
   17915:	c7 05 d8 21 03 00 01 	movl   $0x1,0x321d8
   1791c:	00 00 00 
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   1791f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17926:	00 
   17927:	eb 73                	jmp    1799c <sys_setup+0x1a3>
		hd[i * 5].start_sect = 0;												// 硬盘起始扇区号
   17929:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1792d:	89 d0                	mov    %edx,%eax
   1792f:	c1 e0 02             	shl    $0x2,%eax
   17932:	01 d0                	add    %edx,%eax
   17934:	c7 04 c5 e0 21 03 00 	movl   $0x0,0x321e0(,%eax,8)
   1793b:	00 00 00 00 
		hd[i * 5].nr_sects = hd_info[i].head * hd_info[i].sect * hd_info[i].cyl;// 硬盘总扇区数
   1793f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17943:	89 d0                	mov    %edx,%eax
   17945:	01 c0                	add    %eax,%eax
   17947:	01 d0                	add    %edx,%eax
   17949:	c1 e0 03             	shl    $0x3,%eax
   1794c:	05 a0 21 03 00       	add    $0x321a0,%eax
   17951:	8b 08                	mov    (%eax),%ecx
   17953:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17957:	89 d0                	mov    %edx,%eax
   17959:	01 c0                	add    %eax,%eax
   1795b:	01 d0                	add    %edx,%eax
   1795d:	c1 e0 03             	shl    $0x3,%eax
   17960:	05 a4 21 03 00       	add    $0x321a4,%eax
   17965:	8b 00                	mov    (%eax),%eax
   17967:	89 cb                	mov    %ecx,%ebx
   17969:	0f af d8             	imul   %eax,%ebx
   1796c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17970:	89 d0                	mov    %edx,%eax
   17972:	01 c0                	add    %eax,%eax
   17974:	01 d0                	add    %edx,%eax
   17976:	c1 e0 03             	shl    $0x3,%eax
   17979:	05 a8 21 03 00       	add    $0x321a8,%eax
   1797e:	8b 08                	mov    (%eax),%ecx
   17980:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17984:	89 d0                	mov    %edx,%eax
   17986:	c1 e0 02             	shl    $0x2,%eax
   17989:	01 c2                	add    %eax,%edx
   1798b:	89 d8                	mov    %ebx,%eax
   1798d:	0f af c1             	imul   %ecx,%eax
   17990:	89 04 d5 e4 21 03 00 	mov    %eax,0x321e4(,%edx,8)
	for (i = 0 ; i < NR_HD ; i++) {
   17997:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1799c:	a1 d8 21 03 00       	mov    0x321d8,%eax
   179a1:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   179a5:	7c 82                	jl     17929 <sys_setup+0x130>
		总之,一个非零值意味着硬盘是一个AT控制器兼容硬盘.
	*/

	// 根据上述原理,下面代码用来检测硬盘到底是不是AT控制器兼容的.这里从CMOS偏移地址0x12处读出硬盘类型字节.如果低半字节值(存放着第2个硬盘类型
	// 值)不为0,则表示系统有两硬盘,否则表示系统只有1个硬盘.如果0x12处读出的值为0,则表示系统中没有AT兼容硬盘.
	if ((cmos_disks = CMOS_READ(0x12)) & 0xf0)
   179a7:	b8 92 00 00 00       	mov    $0x92,%eax
   179ac:	ba 70 00 00 00       	mov    $0x70,%edx
   179b1:	ee                   	out    %al,(%dx)
   179b2:	eb 00                	jmp    179b4 <sys_setup+0x1bb>
   179b4:	eb 00                	jmp    179b6 <sys_setup+0x1bd>
   179b6:	b8 71 00 00 00       	mov    $0x71,%eax
   179bb:	89 c2                	mov    %eax,%edx
   179bd:	ec                   	in     (%dx),%al
   179be:	eb 00                	jmp    179c0 <sys_setup+0x1c7>
   179c0:	eb 00                	jmp    179c2 <sys_setup+0x1c9>
   179c2:	88 44 24 13          	mov    %al,0x13(%esp)
   179c6:	0f b6 44 24 13       	movzbl 0x13(%esp),%eax
   179cb:	88 44 24 12          	mov    %al,0x12(%esp)
   179cf:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   179d4:	25 f0 00 00 00       	and    $0xf0,%eax
   179d9:	85 c0                	test   %eax,%eax
   179db:	74 24                	je     17a01 <sys_setup+0x208>
		if (cmos_disks & 0x0f)
   179dd:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   179e2:	83 e0 0f             	and    $0xf,%eax
   179e5:	85 c0                	test   %eax,%eax
   179e7:	74 0c                	je     179f5 <sys_setup+0x1fc>
			NR_HD = 2;
   179e9:	c7 05 d8 21 03 00 02 	movl   $0x2,0x321d8
   179f0:	00 00 00 
   179f3:	eb 16                	jmp    17a0b <sys_setup+0x212>
		else
			NR_HD = 1;
   179f5:	c7 05 d8 21 03 00 01 	movl   $0x1,0x321d8
   179fc:	00 00 00 
   179ff:	eb 0a                	jmp    17a0b <sys_setup+0x212>
	else
		NR_HD = 0;
   17a01:	c7 05 d8 21 03 00 00 	movl   $0x0,0x321d8
   17a08:	00 00 00 
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   17a0b:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17a10:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   17a14:	eb 31                	jmp    17a47 <sys_setup+0x24e>
		hd[i * 5].start_sect = 0;
   17a16:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17a1a:	89 d0                	mov    %edx,%eax
   17a1c:	c1 e0 02             	shl    $0x2,%eax
   17a1f:	01 d0                	add    %edx,%eax
   17a21:	c7 04 c5 e0 21 03 00 	movl   $0x0,0x321e0(,%eax,8)
   17a28:	00 00 00 00 
		hd[i * 5].nr_sects = 0;
   17a2c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17a30:	89 d0                	mov    %edx,%eax
   17a32:	c1 e0 02             	shl    $0x2,%eax
   17a35:	01 d0                	add    %edx,%eax
   17a37:	c7 04 c5 e4 21 03 00 	movl   $0x0,0x321e4(,%eax,8)
   17a3e:	00 00 00 00 
	for (i = NR_HD ; i < 2 ; i++) {
   17a42:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17a47:	83 7c 24 1c 01       	cmpl   $0x1,0x1c(%esp)
   17a4c:	7e c8                	jle    17a16 <sys_setup+0x21d>
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17a4e:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   17a55:	00 
   17a56:	e9 15 01 00 00       	jmp    17b70 <sys_setup+0x377>
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
   17a5b:	8b 54 24 18          	mov    0x18(%esp),%edx
   17a5f:	89 d0                	mov    %edx,%eax
   17a61:	c1 e0 02             	shl    $0x2,%eax
   17a64:	01 d0                	add    %edx,%eax
   17a66:	05 00 03 00 00       	add    $0x300,%eax
   17a6b:	83 ec 08             	sub    $0x8,%esp
   17a6e:	6a 00                	push   $0x0
   17a70:	50                   	push   %eax
   17a71:	e8 2d 7c ff ff       	call   f6a3 <bread>
   17a76:	83 c4 10             	add    $0x10,%esp
   17a79:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17a7d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17a82:	75 24                	jne    17aa8 <sys_setup+0x2af>
			printk("Unable to read partition table of drive %d\n\r",
   17a84:	83 ec 08             	sub    $0x8,%esp
   17a87:	ff 74 24 20          	pushl  0x20(%esp)
   17a8b:	68 84 40 02 00       	push   $0x24084
   17a90:	e8 b1 11 ff ff       	call   8c46 <printk>
   17a95:	83 c4 10             	add    $0x10,%esp
				drive);
			panic("");
   17a98:	83 ec 0c             	sub    $0xc,%esp
   17a9b:	68 b1 40 02 00       	push   $0x240b1
   17aa0:	e8 62 11 ff ff       	call   8c07 <panic>
   17aa5:	83 c4 10             	add    $0x10,%esp
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17aa8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17aac:	8b 00                	mov    (%eax),%eax
   17aae:	05 fe 01 00 00       	add    $0x1fe,%eax
   17ab3:	0f b6 00             	movzbl (%eax),%eax
   17ab6:	3c 55                	cmp    $0x55,%al
   17ab8:	75 12                	jne    17acc <sys_setup+0x2d3>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
   17aba:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17abe:	8b 00                	mov    (%eax),%eax
   17ac0:	05 ff 01 00 00       	add    $0x1ff,%eax
   17ac5:	0f b6 00             	movzbl (%eax),%eax
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17ac8:	3c aa                	cmp    $0xaa,%al
   17aca:	74 24                	je     17af0 <sys_setup+0x2f7>
			printk("Bad partition table on drive %d\n\r",drive);
   17acc:	83 ec 08             	sub    $0x8,%esp
   17acf:	ff 74 24 20          	pushl  0x20(%esp)
   17ad3:	68 b4 40 02 00       	push   $0x240b4
   17ad8:	e8 69 11 ff ff       	call   8c46 <printk>
   17add:	83 c4 10             	add    $0x10,%esp
			panic("");
   17ae0:	83 ec 0c             	sub    $0xc,%esp
   17ae3:	68 b1 40 02 00       	push   $0x240b1
   17ae8:	e8 1a 11 ff ff       	call   8c07 <panic>
   17aed:	83 c4 10             	add    $0x10,%esp
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
   17af0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17af4:	8b 00                	mov    (%eax),%eax
   17af6:	05 be 01 00 00       	add    $0x1be,%eax
   17afb:	89 44 24 14          	mov    %eax,0x14(%esp)
		for (i = 1; i < 5; i++, p++) {
   17aff:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
   17b06:	00 
   17b07:	eb 4c                	jmp    17b55 <sys_setup+0x35c>
			hd[i + 5 * drive].start_sect = p->start_sect;
   17b09:	8b 44 24 14          	mov    0x14(%esp),%eax
   17b0d:	8b 48 08             	mov    0x8(%eax),%ecx
   17b10:	8b 54 24 18          	mov    0x18(%esp),%edx
   17b14:	89 d0                	mov    %edx,%eax
   17b16:	c1 e0 02             	shl    $0x2,%eax
   17b19:	01 c2                	add    %eax,%edx
   17b1b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b1f:	01 d0                	add    %edx,%eax
   17b21:	89 ca                	mov    %ecx,%edx
   17b23:	89 14 c5 e0 21 03 00 	mov    %edx,0x321e0(,%eax,8)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
   17b2a:	8b 44 24 14          	mov    0x14(%esp),%eax
   17b2e:	8b 48 0c             	mov    0xc(%eax),%ecx
   17b31:	8b 54 24 18          	mov    0x18(%esp),%edx
   17b35:	89 d0                	mov    %edx,%eax
   17b37:	c1 e0 02             	shl    $0x2,%eax
   17b3a:	01 c2                	add    %eax,%edx
   17b3c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b40:	01 d0                	add    %edx,%eax
   17b42:	89 ca                	mov    %ecx,%edx
   17b44:	89 14 c5 e4 21 03 00 	mov    %edx,0x321e4(,%eax,8)
		for (i = 1; i < 5; i++, p++) {
   17b4b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17b50:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
   17b55:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
   17b5a:	7e ad                	jle    17b09 <sys_setup+0x310>
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
   17b5c:	83 ec 0c             	sub    $0xc,%esp
   17b5f:	ff 74 24 18          	pushl  0x18(%esp)
   17b63:	e8 e5 7a ff ff       	call   f64d <brelse>
   17b68:	83 c4 10             	add    $0x10,%esp
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17b6b:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17b70:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17b75:	39 44 24 18          	cmp    %eax,0x18(%esp)
   17b79:	0f 8c dc fe ff ff    	jl     17a5b <sys_setup+0x262>
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17b7f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17b86:	00 
   17b87:	eb 5c                	jmp    17be5 <sys_setup+0x3ec>
		if (hd[i].nr_sects != 0)
   17b89:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b8d:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   17b94:	85 c0                	test   %eax,%eax
   17b96:	74 2e                	je     17bc6 <sys_setup+0x3cd>
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
   17b98:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b9c:	8b 14 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%edx
   17ba3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17ba7:	8b 04 c5 e0 21 03 00 	mov    0x321e0(,%eax,8),%eax
   17bae:	83 ec 0c             	sub    $0xc,%esp
   17bb1:	52                   	push   %edx
   17bb2:	50                   	push   %eax
   17bb3:	ff 74 24 30          	pushl  0x30(%esp)
   17bb7:	68 d8 40 02 00       	push   $0x240d8
   17bbc:	6a 00                	push   $0x0
   17bbe:	e8 81 ad 00 00       	call   22944 <Log>
   17bc3:	83 c4 20             	add    $0x20,%esp
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
   17bc6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17bca:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   17bd1:	d1 f8                	sar    %eax
   17bd3:	89 c2                	mov    %eax,%edx
   17bd5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17bd9:	89 14 85 40 22 03 00 	mov    %edx,0x32240(,%eax,4)
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17be0:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17be5:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
   17bea:	7e 9d                	jle    17b89 <sys_setup+0x390>
	}
	blk_size[MAJOR_NR] = hd_sizes;
   17bec:	c7 05 44 21 03 00 40 	movl   $0x32240,0x32144
   17bf3:	22 03 00 
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
   17bf6:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17bfb:	85 c0                	test   %eax,%eax
   17bfd:	74 29                	je     17c28 <sys_setup+0x42f>
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
   17bff:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17c04:	83 f8 01             	cmp    $0x1,%eax
   17c07:	7e 07                	jle    17c10 <sys_setup+0x417>
   17c09:	b8 1a 41 02 00       	mov    $0x2411a,%eax
   17c0e:	eb 05                	jmp    17c15 <sys_setup+0x41c>
   17c10:	b8 b1 40 02 00       	mov    $0x240b1,%eax
   17c15:	83 ec 04             	sub    $0x4,%esp
   17c18:	50                   	push   %eax
   17c19:	68 1c 41 02 00       	push   $0x2411c
   17c1e:	6a 00                	push   $0x0
   17c20:	e8 1f ad 00 00       	call   22944 <Log>
   17c25:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_HD; i++)
   17c28:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17c2f:	00 
   17c30:	eb 6b                	jmp    17c9d <sys_setup+0x4a4>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
   17c32:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c36:	89 d0                	mov    %edx,%eax
   17c38:	01 c0                	add    %eax,%eax
   17c3a:	01 d0                	add    %edx,%eax
   17c3c:	c1 e0 03             	shl    $0x3,%eax
   17c3f:	05 b4 21 03 00       	add    $0x321b4,%eax
   17c44:	8b 30                	mov    (%eax),%esi
   17c46:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c4a:	89 d0                	mov    %edx,%eax
   17c4c:	01 c0                	add    %eax,%eax
   17c4e:	01 d0                	add    %edx,%eax
   17c50:	c1 e0 03             	shl    $0x3,%eax
   17c53:	05 a4 21 03 00       	add    $0x321a4,%eax
   17c58:	8b 18                	mov    (%eax),%ebx
   17c5a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c5e:	89 d0                	mov    %edx,%eax
   17c60:	01 c0                	add    %eax,%eax
   17c62:	01 d0                	add    %edx,%eax
   17c64:	c1 e0 03             	shl    $0x3,%eax
   17c67:	05 a0 21 03 00       	add    $0x321a0,%eax
   17c6c:	8b 08                	mov    (%eax),%ecx
   17c6e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c72:	89 d0                	mov    %edx,%eax
   17c74:	01 c0                	add    %eax,%eax
   17c76:	01 d0                	add    %edx,%eax
   17c78:	c1 e0 03             	shl    $0x3,%eax
   17c7b:	05 a8 21 03 00       	add    $0x321a8,%eax
   17c80:	8b 00                	mov    (%eax),%eax
   17c82:	83 ec 08             	sub    $0x8,%esp
   17c85:	56                   	push   %esi
   17c86:	53                   	push   %ebx
   17c87:	51                   	push   %ecx
   17c88:	50                   	push   %eax
   17c89:	68 40 41 02 00       	push   $0x24140
   17c8e:	6a 00                	push   $0x0
   17c90:	e8 af ac 00 00       	call   22944 <Log>
   17c95:	83 c4 20             	add    $0x20,%esp
	for (i = 0; i < NR_HD; i++)
   17c98:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17c9d:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17ca2:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17ca6:	7c 8a                	jl     17c32 <sys_setup+0x439>
	rd_load();																	// blk_drv/ramdisk.c
   17ca8:	e8 72 0b 00 00       	call   1881f <rd_load>
	init_swapping();															// mm/swap.c
   17cad:	e8 0d 54 ff ff       	call   d0bf <init_swapping>
	mount_root();																// fs/super.c
   17cb2:	e8 4a 86 ff ff       	call   10301 <mount_root>
	return (0);
   17cb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17cbc:	83 c4 24             	add    $0x24,%esp
   17cbf:	5b                   	pop    %ebx
   17cc0:	5e                   	pop    %esi
   17cc1:	c3                   	ret    

00017cc2 <controller_ready>:
// 则表示等待控制器空闲的时间已经超时而发生错误,若返回值不为0则说明在等待(循环)时间期限内控制器回到空闲状态.OK!
// 实际上,我们仅需检测状态寄存器忙位(位7)是否为1来判断控制器是否处于忙状态,驱动器是否就绪(即位6是否为1)与控制器的状态无关.因此我们可能把第172行
// 语句改写成:"while(--retries && (inb_p(HD_STATUS)&0x80));"另外,由于现在的PC速度都很快,因此我们可以把等待的循环次数再加大一些,例如
// 再增加10倍.
static int controller_ready(void)
{
   17cc2:	83 ec 10             	sub    $0x10,%esp
	int retries = 100000;
   17cc5:	c7 44 24 0c a0 86 01 	movl   $0x186a0,0xc(%esp)
   17ccc:	00 

	//while (--retries && (inb_p(HD_STATUS)&0xc0)!=0x40);
	while(--retries && (inb_p(HD_STATUS) & 0X80)) ;
   17ccd:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   17cd2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17cd7:	74 19                	je     17cf2 <controller_ready+0x30>
   17cd9:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17cde:	89 c2                	mov    %eax,%edx
   17ce0:	ec                   	in     (%dx),%al
   17ce1:	eb 00                	jmp    17ce3 <controller_ready+0x21>
   17ce3:	eb 00                	jmp    17ce5 <controller_ready+0x23>
   17ce5:	88 44 24 0b          	mov    %al,0xb(%esp)
   17ce9:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17cee:	84 c0                	test   %al,%al
   17cf0:	78 db                	js     17ccd <controller_ready+0xb>
	return (retries);									// 返回等待循环次数.
   17cf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   17cf6:	83 c4 10             	add    $0x10,%esp
   17cf9:	c3                   	ret    

00017cfa <win_result>:

// 检测硬盘执行命令后的状态.(win表示温切斯特硬盘的缩写)
// 读取状态寄存器中的命令执行结果状态.返回0表示正常;1表示出错.如果执行命令错,则需要再读错误寄存器HD_ERROR(0x1f1).
static int win_result(void)
{
   17cfa:	83 ec 10             	sub    $0x10,%esp
	int i = inb_p(HD_STATUS);							// 取状态信息.
   17cfd:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17d02:	89 c2                	mov    %eax,%edx
   17d04:	ec                   	in     (%dx),%al
   17d05:	eb 00                	jmp    17d07 <win_result+0xd>
   17d07:	eb 00                	jmp    17d09 <win_result+0xf>
   17d09:	88 44 24 0f          	mov    %al,0xf(%esp)
   17d0d:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17d12:	0f b6 c0             	movzbl %al,%eax
   17d15:	89 44 24 08          	mov    %eax,0x8(%esp)

	if ((i & (BUSY_STAT | READY_STAT | WRERR_STAT | SEEK_STAT | ERR_STAT))
   17d19:	8b 44 24 08          	mov    0x8(%esp),%eax
   17d1d:	25 f1 00 00 00       	and    $0xf1,%eax
   17d22:	83 f8 50             	cmp    $0x50,%eax
   17d25:	75 07                	jne    17d2e <win_result+0x34>
		== (READY_STAT | SEEK_STAT))
		return(0); 										/* ok */
   17d27:	b8 00 00 00 00       	mov    $0x0,%eax
   17d2c:	eb 28                	jmp    17d56 <win_result+0x5c>
	if (i & 1) i = inb(HD_ERROR);						// 若ERR_STAT置位,则读取错误寄存器.
   17d2e:	8b 44 24 08          	mov    0x8(%esp),%eax
   17d32:	83 e0 01             	and    $0x1,%eax
   17d35:	85 c0                	test   %eax,%eax
   17d37:	74 18                	je     17d51 <win_result+0x57>
   17d39:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17d3e:	89 c2                	mov    %eax,%edx
   17d40:	ec                   	in     (%dx),%al
   17d41:	88 44 24 07          	mov    %al,0x7(%esp)
   17d45:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   17d4a:	0f b6 c0             	movzbl %al,%eax
   17d4d:	89 44 24 08          	mov    %eax,0x8(%esp)
	return (1);
   17d51:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17d56:	83 c4 10             	add    $0x10,%esp
   17d59:	c3                   	ret    

00017d5a <hd_out>:
// 第191行定义1个寄存器变量__res.该变量将被保存在1个寄存器中,以便于快速访问.
// 如果想指定寄存器(如eax),则我们可以把该句写成"register char __res asm("ax");"
static void hd_out(unsigned int drive, unsigned int nsect, unsigned int sect,
		unsigned int head, unsigned int cyl, unsigned int cmd,
		void (*intr_addr)(void))
{
   17d5a:	53                   	push   %ebx
   17d5b:	83 ec 08             	sub    $0x8,%esp
	register int port;

	// 首先对参数进行有效性检查.如果驱动器号大于1(只能是0,1)或者磁头号大于15,则程序不支持,停机.否则就判断并循环等待驱动器就绪.如果等待一段时间
	// 后仍未就绪则表示硬盘控制器出错,也停机.
	if (drive > 1 || head > 15)
   17d5e:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   17d63:	77 07                	ja     17d6c <hd_out+0x12>
   17d65:	83 7c 24 1c 0f       	cmpl   $0xf,0x1c(%esp)
   17d6a:	76 10                	jbe    17d7c <hd_out+0x22>
		panic("Trying to write bad sector");
   17d6c:	83 ec 0c             	sub    $0xc,%esp
   17d6f:	68 81 41 02 00       	push   $0x24181
   17d74:	e8 8e 0e ff ff       	call   8c07 <panic>
   17d79:	83 c4 10             	add    $0x10,%esp
	if (!controller_ready())
   17d7c:	e8 41 ff ff ff       	call   17cc2 <controller_ready>
   17d81:	85 c0                	test   %eax,%eax
   17d83:	75 10                	jne    17d95 <hd_out+0x3b>
		panic("HD controller not ready");
   17d85:	83 ec 0c             	sub    $0xc,%esp
   17d88:	68 9c 41 02 00       	push   $0x2419c
   17d8d:	e8 75 0e ff ff       	call   8c07 <panic>
   17d92:	83 c4 10             	add    $0x10,%esp
	// 接着我们设置硬盘中断发生时将调用的C函数指针do_hd(该函数指针定义在blk.h文件).然后在向硬盘控制器发送参数和命令之前,规定要先向控制器命令端口
	// (0x3f6)发送一指定硬盘的控制字节,以建立相应的硬盘控制方式.该控制字节即是硬盘信息结构数组中的ctl字节.然后向控制器端口0x1f1-0x1f7发送7字节
	// 的参数命令块.
	SET_INTR(intr_addr);								// do_hd = intr_addr在中断中被调用.
   17d95:	8b 44 24 28          	mov    0x28(%esp),%eax
   17d99:	a3 80 21 03 00       	mov    %eax,0x32180
   17d9e:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   17da5:	00 00 00 
	outb_p(hd_info[drive].ctl, HD_CMD);					// 向控制寄存器输出控制字节
   17da8:	8b 54 24 10          	mov    0x10(%esp),%edx
   17dac:	89 d0                	mov    %edx,%eax
   17dae:	01 c0                	add    %eax,%eax
   17db0:	01 d0                	add    %edx,%eax
   17db2:	c1 e0 03             	shl    $0x3,%eax
   17db5:	05 b4 21 03 00       	add    $0x321b4,%eax
   17dba:	8b 00                	mov    (%eax),%eax
   17dbc:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17dc1:	ee                   	out    %al,(%dx)
   17dc2:	eb 00                	jmp    17dc4 <hd_out+0x6a>
   17dc4:	eb 00                	jmp    17dc6 <hd_out+0x6c>
	port = HD_DATA;										// 置dx为数据寄存器端口(0x1f0)
   17dc6:	bb f0 01 00 00       	mov    $0x1f0,%ebx
	outb_p(hd_info[drive].wpcom >> 2, ++port);			// 参数:写预补偿柱面号(需除4)
   17dcb:	8b 54 24 10          	mov    0x10(%esp),%edx
   17dcf:	89 d0                	mov    %edx,%eax
   17dd1:	01 c0                	add    %eax,%eax
   17dd3:	01 d0                	add    %edx,%eax
   17dd5:	c1 e0 03             	shl    $0x3,%eax
   17dd8:	05 ac 21 03 00       	add    $0x321ac,%eax
   17ddd:	8b 00                	mov    (%eax),%eax
   17ddf:	c1 f8 02             	sar    $0x2,%eax
   17de2:	83 c3 01             	add    $0x1,%ebx
   17de5:	89 da                	mov    %ebx,%edx
   17de7:	ee                   	out    %al,(%dx)
   17de8:	eb 00                	jmp    17dea <hd_out+0x90>
   17dea:	eb 00                	jmp    17dec <hd_out+0x92>
	outb_p(nsect, ++port);								// 参数:读/写扇区总数.
   17dec:	83 c3 01             	add    $0x1,%ebx
   17def:	8b 44 24 14          	mov    0x14(%esp),%eax
   17df3:	89 da                	mov    %ebx,%edx
   17df5:	ee                   	out    %al,(%dx)
   17df6:	eb 00                	jmp    17df8 <hd_out+0x9e>
   17df8:	eb 00                	jmp    17dfa <hd_out+0xa0>
	outb_p(sect, ++port);								// 参数:起始扇区.
   17dfa:	83 c3 01             	add    $0x1,%ebx
   17dfd:	8b 44 24 18          	mov    0x18(%esp),%eax
   17e01:	89 da                	mov    %ebx,%edx
   17e03:	ee                   	out    %al,(%dx)
   17e04:	eb 00                	jmp    17e06 <hd_out+0xac>
   17e06:	eb 00                	jmp    17e08 <hd_out+0xae>
	outb_p(cyl, ++port);								// 参数:柱面号低8位.
   17e08:	83 c3 01             	add    $0x1,%ebx
   17e0b:	8b 44 24 20          	mov    0x20(%esp),%eax
   17e0f:	89 da                	mov    %ebx,%edx
   17e11:	ee                   	out    %al,(%dx)
   17e12:	eb 00                	jmp    17e14 <hd_out+0xba>
   17e14:	eb 00                	jmp    17e16 <hd_out+0xbc>
	outb_p(cyl >> 8, ++port);							// 参数:柱面号高8位.
   17e16:	8b 44 24 20          	mov    0x20(%esp),%eax
   17e1a:	c1 e8 08             	shr    $0x8,%eax
   17e1d:	83 c3 01             	add    $0x1,%ebx
   17e20:	89 da                	mov    %ebx,%edx
   17e22:	ee                   	out    %al,(%dx)
   17e23:	eb 00                	jmp    17e25 <hd_out+0xcb>
   17e25:	eb 00                	jmp    17e27 <hd_out+0xcd>
	outb_p(0xA0 | (drive << 4) | head, ++port);			// 参数:驱动器号+磁头号.
   17e27:	8b 44 24 10          	mov    0x10(%esp),%eax
   17e2b:	c1 e0 04             	shl    $0x4,%eax
   17e2e:	0b 44 24 1c          	or     0x1c(%esp),%eax
   17e32:	0c a0                	or     $0xa0,%al
   17e34:	83 c3 01             	add    $0x1,%ebx
   17e37:	89 da                	mov    %ebx,%edx
   17e39:	ee                   	out    %al,(%dx)
   17e3a:	eb 00                	jmp    17e3c <hd_out+0xe2>
   17e3c:	eb 00                	jmp    17e3e <hd_out+0xe4>
	outb(cmd, ++port);									// 命令:硬盘控制命令.
   17e3e:	83 c3 01             	add    $0x1,%ebx
   17e41:	8b 44 24 24          	mov    0x24(%esp),%eax
   17e45:	89 da                	mov    %ebx,%edx
   17e47:	ee                   	out    %al,(%dx)
}
   17e48:	90                   	nop
   17e49:	83 c4 08             	add    $0x8,%esp
   17e4c:	5b                   	pop    %ebx
   17e4d:	c3                   	ret    

00017e4e <drive_busy>:

// 等待硬盘就绪.
// 该函数循环等待主状态控制器忙标志复位.若仅有就绪或寻道结束标志置位,则表示就绪,成功返回0.若经过一段时间仍为忙,则返回1.
static int drive_busy(void)
{
   17e4e:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17e51:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17e58:	00 
   17e59:	eb 31                	jmp    17e8c <drive_busy+0x3e>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
   17e5b:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17e60:	89 c2                	mov    %eax,%edx
   17e62:	ec                   	in     (%dx),%al
   17e63:	eb 00                	jmp    17e65 <drive_busy+0x17>
   17e65:	eb 00                	jmp    17e67 <drive_busy+0x19>
   17e67:	88 44 24 0b          	mov    %al,0xb(%esp)
   17e6b:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17e70:	88 44 24 0a          	mov    %al,0xa(%esp)
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
   17e74:	80 64 24 0a d0       	andb   $0xd0,0xa(%esp)
		if (c == (READY_STAT | SEEK_STAT))
   17e79:	80 7c 24 0a 50       	cmpb   $0x50,0xa(%esp)
   17e7e:	75 07                	jne    17e87 <drive_busy+0x39>
			return 0;
   17e80:	b8 00 00 00 00       	mov    $0x0,%eax
   17e85:	eb 24                	jmp    17eab <drive_busy+0x5d>
	for (i = 0; i < 50000; i++) {
   17e87:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17e8c:	81 7c 24 0c 4f c3 00 	cmpl   $0xc34f,0xc(%esp)
   17e93:	00 
   17e94:	76 c5                	jbe    17e5b <drive_busy+0xd>
	}
	printk("HD controller times out\n\r");				// 等待超时,显示信息.并返回1.
   17e96:	83 ec 0c             	sub    $0xc,%esp
   17e99:	68 b4 41 02 00       	push   $0x241b4
   17e9e:	e8 a3 0d ff ff       	call   8c46 <printk>
   17ea3:	83 c4 10             	add    $0x10,%esp
	return(1);
   17ea6:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17eab:	83 c4 1c             	add    $0x1c,%esp
   17eae:	c3                   	ret    

00017eaf <reset_controller>:

// 诊断复位(重新校正)硬盘控制器.
// 首先向控制器寄存器端口(0x3f6)发送允许复位(4)控制字节.然后循环 操作等待一段时间让控制器执行复位操作.接着再向该端口发送正常的控制字节(不禁止重试,重读)
// 并等待硬盘就绪.若等待硬盘就绪超时,则显示警告信息.然后读取错误寄存器内容,若其不等于1(表示无错误)则显示硬盘控制器复位失败信息.
static void reset_controller(void)
{
   17eaf:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	outb(4, HD_CMD);									// 向控制寄存器端口发送复位控制字节.
   17eb2:	b8 04 00 00 00       	mov    $0x4,%eax
   17eb7:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17ebc:	ee                   	out    %al,(%dx)
	for(i = 0; i < 1000; i++) nop();					// 等待一段时间.
   17ebd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17ec4:	00 
   17ec5:	eb 06                	jmp    17ecd <reset_controller+0x1e>
   17ec7:	90                   	nop
   17ec8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17ecd:	81 7c 24 0c e7 03 00 	cmpl   $0x3e7,0xc(%esp)
   17ed4:	00 
   17ed5:	7e f0                	jle    17ec7 <reset_controller+0x18>
	outb(hd_info[0].ctl & 0x0f, HD_CMD);				// 发送正常控制字节(不禁止重试,重读).
   17ed7:	a1 b4 21 03 00       	mov    0x321b4,%eax
   17edc:	83 e0 0f             	and    $0xf,%eax
   17edf:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17ee4:	ee                   	out    %al,(%dx)
	if (drive_busy())
   17ee5:	e8 64 ff ff ff       	call   17e4e <drive_busy>
   17eea:	85 c0                	test   %eax,%eax
   17eec:	74 10                	je     17efe <reset_controller+0x4f>
		printk("HD-controller still busy\n\r");
   17eee:	83 ec 0c             	sub    $0xc,%esp
   17ef1:	68 ce 41 02 00       	push   $0x241ce
   17ef6:	e8 4b 0d ff ff       	call   8c46 <printk>
   17efb:	83 c4 10             	add    $0x10,%esp
	if ((i = inb(HD_ERROR)) != 1)
   17efe:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17f03:	89 c2                	mov    %eax,%edx
   17f05:	ec                   	in     (%dx),%al
   17f06:	88 44 24 0b          	mov    %al,0xb(%esp)
   17f0a:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17f0f:	0f b6 c0             	movzbl %al,%eax
   17f12:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17f16:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   17f1b:	74 14                	je     17f31 <reset_controller+0x82>
		printk("HD-controller reset failed: %02x\n\r",i);
   17f1d:	83 ec 08             	sub    $0x8,%esp
   17f20:	ff 74 24 14          	pushl  0x14(%esp)
   17f24:	68 ec 41 02 00       	push   $0x241ec
   17f29:	e8 18 0d ff ff       	call   8c46 <printk>
   17f2e:	83 c4 10             	add    $0x10,%esp
}
   17f31:	90                   	nop
   17f32:	83 c4 1c             	add    $0x1c,%esp
   17f35:	c3                   	ret    

00017f36 <reset_hd>:

// 硬盘复位操作.
// 首先复位(重新校正)硬盘控制器.然后发送硬盘控制器命令"建立驱动器参数".在本命令引起的硬盘中断处理程序中又会调用本函数.此时该函数会根据执行该命令的结果判断是
// 否要进行出错处理或是继续执行请求项处理操作.
static void reset_hd(void)
{
   17f36:	56                   	push   %esi
   17f37:	53                   	push   %ebx
   17f38:	83 ec 04             	sub    $0x4,%esp
	// 如果复位标志reset是置位的,则把复位标志清零后,执行复位硬盘控制在操作.然后针对第i个硬盘向控制器发送"建立驱动器参数"命令.当控制器执行了该命令后,又会发出硬盘
	// 中断信号.此时本函数会被中断过程调用而再次执行.由于reset已经标志复位,因此会首先去执行246行开始的语句,判断命令执行是否正常.若还是发生错误就会调用bad_rw_intr()
	// 函数以统计出错次数并根据次数确定是否在设置reset标志如果又设置了reset标志则跳转到repeat重新执行本函数.若复位操作正常,则针对下一个硬盘发送"建立驱动器参数"
	// 命令,并作上述处理.如果系统中NR_HD个硬盘都已经正常执行了发送的命令,则再次do_hd_request()函数开始对请求项进行处理.
repeat:
	if (reset) {
   17f3b:	a1 d4 21 03 00       	mov    0x321d4,%eax
   17f40:	85 c0                	test   %eax,%eax
   17f42:	74 1b                	je     17f5f <reset_hd+0x29>
		reset = 0;
   17f44:	c7 05 d4 21 03 00 00 	movl   $0x0,0x321d4
   17f4b:	00 00 00 
		i = -1;											// 初始化当前硬盘号(静态变量).
   17f4e:	c7 05 68 22 03 00 ff 	movl   $0xffffffff,0x32268
   17f55:	ff ff ff 
		reset_controller();
   17f58:	e8 52 ff ff ff       	call   17eaf <reset_controller>
   17f5d:	eb 19                	jmp    17f78 <reset_hd+0x42>
	} else if (win_result()) {
   17f5f:	e8 96 fd ff ff       	call   17cfa <win_result>
   17f64:	85 c0                	test   %eax,%eax
   17f66:	74 10                	je     17f78 <reset_hd+0x42>
		bad_rw_intr();
   17f68:	e8 e2 00 00 00       	call   1804f <bad_rw_intr>
		if (reset)
   17f6d:	a1 d4 21 03 00       	mov    0x321d4,%eax
   17f72:	85 c0                	test   %eax,%eax
   17f74:	74 02                	je     17f78 <reset_hd+0x42>
			goto repeat;
   17f76:	eb c3                	jmp    17f3b <reset_hd+0x5>
	}
	i++;												// 处理下一个硬盘(第1个是0).
   17f78:	a1 68 22 03 00       	mov    0x32268,%eax
   17f7d:	83 c0 01             	add    $0x1,%eax
   17f80:	a3 68 22 03 00       	mov    %eax,0x32268
	if (i < NR_HD) {
   17f85:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f8b:	a1 d8 21 03 00       	mov    0x321d8,%eax
   17f90:	39 c2                	cmp    %eax,%edx
   17f92:	0f 8d 84 00 00 00    	jge    1801c <reset_hd+0xe6>
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
   17f98:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17f9e:	89 d0                	mov    %edx,%eax
   17fa0:	01 c0                	add    %eax,%eax
   17fa2:	01 d0                	add    %edx,%eax
   17fa4:	c1 e0 03             	shl    $0x3,%eax
   17fa7:	05 a8 21 03 00       	add    $0x321a8,%eax
   17fac:	8b 00                	mov    (%eax),%eax
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
   17fae:	89 c6                	mov    %eax,%esi
   17fb0:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17fb6:	89 d0                	mov    %edx,%eax
   17fb8:	01 c0                	add    %eax,%eax
   17fba:	01 d0                	add    %edx,%eax
   17fbc:	c1 e0 03             	shl    $0x3,%eax
   17fbf:	05 a0 21 03 00       	add    $0x321a0,%eax
   17fc4:	8b 00                	mov    (%eax),%eax
   17fc6:	83 e8 01             	sub    $0x1,%eax
   17fc9:	89 c3                	mov    %eax,%ebx
   17fcb:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17fd1:	89 d0                	mov    %edx,%eax
   17fd3:	01 c0                	add    %eax,%eax
   17fd5:	01 d0                	add    %edx,%eax
   17fd7:	c1 e0 03             	shl    $0x3,%eax
   17fda:	05 a4 21 03 00       	add    $0x321a4,%eax
   17fdf:	8b 00                	mov    (%eax),%eax
   17fe1:	89 c1                	mov    %eax,%ecx
   17fe3:	8b 15 68 22 03 00    	mov    0x32268,%edx
   17fe9:	89 d0                	mov    %edx,%eax
   17feb:	01 c0                	add    %eax,%eax
   17fed:	01 d0                	add    %edx,%eax
   17fef:	c1 e0 03             	shl    $0x3,%eax
   17ff2:	05 a4 21 03 00       	add    $0x321a4,%eax
   17ff7:	8b 00                	mov    (%eax),%eax
   17ff9:	89 c2                	mov    %eax,%edx
   17ffb:	a1 68 22 03 00       	mov    0x32268,%eax
   18000:	83 ec 04             	sub    $0x4,%esp
   18003:	68 36 7f 01 00       	push   $0x17f36
   18008:	68 91 00 00 00       	push   $0x91
   1800d:	56                   	push   %esi
   1800e:	53                   	push   %ebx
   1800f:	51                   	push   %ecx
   18010:	52                   	push   %edx
   18011:	50                   	push   %eax
   18012:	e8 43 fd ff ff       	call   17d5a <hd_out>
   18017:	83 c4 20             	add    $0x20,%esp
	} else
		do_hd_request();								// 执行请求项处理.
}
   1801a:	eb 05                	jmp    18021 <reset_hd+0xeb>
		do_hd_request();								// 执行请求项处理.
   1801c:	e8 31 02 00 00       	call   18252 <do_hd_request>
}
   18021:	90                   	nop
   18022:	83 c4 04             	add    $0x4,%esp
   18025:	5b                   	pop    %ebx
   18026:	5e                   	pop    %esi
   18027:	c3                   	ret    

00018028 <unexpected_hd_interrupt>:

// 意外硬盘中断调用函数
// 发生意外硬盘中断时,硬盘中断处理程序中调用的默认C处理函数.在被调用函数指针为NULL时调用该函数.该函数在显示警告信息后设置复位标志reset,然后继续调用请求项函数
// do_hd_request()并在其中执行复位处理操作.
void unexpected_hd_interrupt(void)
{
   18028:	83 ec 0c             	sub    $0xc,%esp
	printk("Unexpected HD interrupt\n\r");
   1802b:	83 ec 0c             	sub    $0xc,%esp
   1802e:	68 0f 42 02 00       	push   $0x2420f
   18033:	e8 0e 0c ff ff       	call   8c46 <printk>
   18038:	83 c4 10             	add    $0x10,%esp
	reset = 1;
   1803b:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   18042:	00 00 00 
	do_hd_request();
   18045:	e8 08 02 00 00       	call   18252 <do_hd_request>
}
   1804a:	90                   	nop
   1804b:	83 c4 0c             	add    $0xc,%esp
   1804e:	c3                   	ret    

0001804f <bad_rw_intr>:

// 读写硬盘失败处理调用函数
// 如果读扇区时的出错次数大于或等于7次时,则结束当前请求项并唤醒等待该请求的进程,而且对应缓冲区更新标志复位,表示数据没有更新.如果读写一扇区时的出错次数已经大于
// 3次,则要求执行复位硬盘控制器操作(设置复位标志).
static void bad_rw_intr(void)
{
   1804f:	83 ec 0c             	sub    $0xc,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   18052:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18057:	8b 50 08             	mov    0x8(%eax),%edx
   1805a:	83 c2 01             	add    $0x1,%edx
   1805d:	89 50 08             	mov    %edx,0x8(%eax)
   18060:	8b 40 08             	mov    0x8(%eax),%eax
   18063:	83 f8 06             	cmp    $0x6,%eax
   18066:	7e 0d                	jle    18075 <bad_rw_intr+0x26>
		end_request(0);
   18068:	83 ec 0c             	sub    $0xc,%esp
   1806b:	6a 00                	push   $0x0
   1806d:	e8 d9 f6 ff ff       	call   1774b <end_request>
   18072:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->errors > MAX_ERRORS / 2)
   18075:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1807a:	8b 40 08             	mov    0x8(%eax),%eax
   1807d:	83 f8 03             	cmp    $0x3,%eax
   18080:	7e 0a                	jle    1808c <bad_rw_intr+0x3d>
		reset = 1;
   18082:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   18089:	00 00 00 
}
   1808c:	90                   	nop
   1808d:	83 c4 0c             	add    $0xc,%esp
   18090:	c3                   	ret    

00018091 <read_intr>:
// 读操作中断调用函数.
// 该函数将在硬盘读命令结束时引发的硬盘中断过程中调用.
// 在读命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序调用的C函数指针do_hd已经指向read_intr(),因此会在一次读扇区操作完成(或出错)
// 后就会执行该函数.
static void read_intr(void)
{
   18091:	57                   	push   %edi
   18092:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次读命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败的问题,接着再次请求硬盘作复位处理并执行其他请求项.然后
	// 返回.每次读操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于
	// 最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.
	if (win_result()) {									// 若控制器忙,读写错或命令执行错,则进行读写硬盘失败处理.
   18095:	e8 60 fc ff ff       	call   17cfa <win_result>
   1809a:	85 c0                	test   %eax,%eax
   1809c:	74 0f                	je     180ad <read_intr+0x1c>
		bad_rw_intr();
   1809e:	e8 ac ff ff ff       	call   1804f <bad_rw_intr>
		do_hd_request();								// 再次请求硬盘作相应(复位)处理.
   180a3:	e8 aa 01 00 00       	call   18252 <do_hd_request>
		return;
   180a8:	e9 85 00 00 00       	jmp    18132 <read_intr+0xa1>
	}
	// 如果读命令没有出错,则从数据寄存器端口把1扇区的数据读到请求项的缓冲区中,并且递减请求项所需读取的扇区数值.若递减后不等于0,表示本项请求还有数据没取完,于是再次置中断
	// 调用C函数指针do_hd为read_intr()并直接返回,等待硬盘在读出另1个扇区数据后发出中断并再次调用本函数.
	// 注意:281行语句中的256是指内存字,即512字节.
	// 注意:262行再次置do_hd指针指向read_intr()是因为硬盘中断处理程序每次调用do_hd时都会将该函数指针置空.
	port_read(HD_DATA, CURRENT->buffer, 256);			// 读数据到请求结构缓冲区.
   180ad:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180b2:	8b 40 14             	mov    0x14(%eax),%eax
   180b5:	ba f0 01 00 00       	mov    $0x1f0,%edx
   180ba:	b9 00 01 00 00       	mov    $0x100,%ecx
   180bf:	89 c7                	mov    %eax,%edi
   180c1:	fc                   	cld    
   180c2:	f3 66 6d             	rep insw (%dx),%es:(%edi)
	CURRENT->errors = 0;								// 清出错次数
   180c5:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180ca:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	CURRENT->buffer += 512;								// 高速缓冲区指针,指向新的空区.
   180d1:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180d6:	8b 50 14             	mov    0x14(%eax),%edx
   180d9:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180de:	81 c2 00 02 00 00    	add    $0x200,%edx
   180e4:	89 50 14             	mov    %edx,0x14(%eax)
	CURRENT->sector++;									// 起始扇区号加1.
   180e7:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180ec:	8b 50 0c             	mov    0xc(%eax),%edx
   180ef:	83 c2 01             	add    $0x1,%edx
   180f2:	89 50 0c             	mov    %edx,0xc(%eax)
	if (--CURRENT->nr_sectors) {						// 如果所需读出的扇区数还没读完,则再置硬盘调用C函数指针为read_intr().
   180f5:	a1 1c 21 03 00       	mov    0x3211c,%eax
   180fa:	8b 50 10             	mov    0x10(%eax),%edx
   180fd:	83 ea 01             	sub    $0x1,%edx
   18100:	89 50 10             	mov    %edx,0x10(%eax)
   18103:	8b 40 10             	mov    0x10(%eax),%eax
   18106:	85 c0                	test   %eax,%eax
   18108:	74 16                	je     18120 <read_intr+0x8f>
		SET_INTR(&read_intr);
   1810a:	c7 05 80 21 03 00 91 	movl   $0x18091,0x32180
   18111:	80 01 00 
   18114:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   1811b:	00 00 00 
		return;
   1811e:	eb 12                	jmp    18132 <read_intr+0xa1>
	}
	// 执行到此,说明本次请求项的全部扇区数据已经读完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_request(),去处理其他硬盘请求项.执行其他硬盘
	// 请求操作.
	end_request(1);										// 数据已更新标志置位(1).
   18120:	83 ec 0c             	sub    $0xc,%esp
   18123:	6a 01                	push   $0x1
   18125:	e8 21 f6 ff ff       	call   1774b <end_request>
   1812a:	83 c4 10             	add    $0x10,%esp
	do_hd_request();
   1812d:	e8 20 01 00 00       	call   18252 <do_hd_request>
}
   18132:	83 c4 08             	add    $0x8,%esp
   18135:	5f                   	pop    %edi
   18136:	c3                   	ret    

00018137 <write_intr>:

// 写扇区中断调用函数
// 该函数将在硬盘写命令结束引发的硬盘中断过程中被调用.函数功能与read_intr()类似.在写命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序中
// 调用的C函数指针do_hd已经指向write_intr(),因此会在一次写扇区操作完成(或出错)后就会执行该函数.
static void write_intr(void)
{
   18137:	56                   	push   %esi
   18138:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次写命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败问题,接着再次请求硬盘作复位处理并执行其他请求项.然后返回.
	// 在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数的一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错
	// 次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.do_hd_request()中会根据当时具体的标志状态来判别是否需要先执
	// 行复位,重新校正等操作,然后再继续或处理下一个请求项.
	if (win_result()) {									// 如果硬盘控制器返回错误信息,则首先进行硬盘读写失败处理,再次请求硬盘作相应(复位)处理.
   1813b:	e8 ba fb ff ff       	call   17cfa <win_result>
   18140:	85 c0                	test   %eax,%eax
   18142:	74 0c                	je     18150 <write_intr+0x19>
		bad_rw_intr();
   18144:	e8 06 ff ff ff       	call   1804f <bad_rw_intr>
		do_hd_request();
   18149:	e8 04 01 00 00       	call   18252 <do_hd_request>
		return;
   1814e:	eb 79                	jmp    181c9 <write_intr+0x92>
	}
	// 此时说明本次写一扇区操作成功,因为将欲写扇区数减1.若其不为0,则说明还有扇区要写,于是把当前请求起始扇区号+1,并调整请求项数据缓冲区指针指向下一块欲写的数据.然后再重置
	// 硬盘中断处理程序中调用的C函数指针do_hd(指向本函数).接着向控制器数据端口写入512字节数据,然后函数返回去等待控制器把些数据写入硬盘后产生的中断.
	if (--CURRENT->nr_sectors) {						// 若还有扇区要写,则
   18150:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18155:	8b 50 10             	mov    0x10(%eax),%edx
   18158:	83 ea 01             	sub    $0x1,%edx
   1815b:	89 50 10             	mov    %edx,0x10(%eax)
   1815e:	8b 40 10             	mov    0x10(%eax),%eax
   18161:	85 c0                	test   %eax,%eax
   18163:	74 52                	je     181b7 <write_intr+0x80>
		CURRENT->sector++;								// 当前请求起始扇区号+1,
   18165:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1816a:	8b 50 0c             	mov    0xc(%eax),%edx
   1816d:	83 c2 01             	add    $0x1,%edx
   18170:	89 50 0c             	mov    %edx,0xc(%eax)
		CURRENT->buffer += 512;							// 调整请求缓冲区指针,
   18173:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18178:	8b 50 14             	mov    0x14(%eax),%edx
   1817b:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18180:	81 c2 00 02 00 00    	add    $0x200,%edx
   18186:	89 50 14             	mov    %edx,0x14(%eax)
		SET_INTR(&write_intr);							// do_hd置函数指针为write_intr().
   18189:	c7 05 80 21 03 00 37 	movl   $0x18137,0x32180
   18190:	81 01 00 
   18193:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   1819a:	00 00 00 
		port_write(HD_DATA, CURRENT->buffer, 256);		// 向数据端口写256字.
   1819d:	a1 1c 21 03 00       	mov    0x3211c,%eax
   181a2:	8b 40 14             	mov    0x14(%eax),%eax
   181a5:	ba f0 01 00 00       	mov    $0x1f0,%edx
   181aa:	b9 00 01 00 00       	mov    $0x100,%ecx
   181af:	89 c6                	mov    %eax,%esi
   181b1:	fc                   	cld    
   181b2:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
		return;
   181b5:	eb 12                	jmp    181c9 <write_intr+0x92>
	}
	// 若本次请求项的全部扇区数据已经写完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_requrest(),去处理其他硬盘请求项.执行其他硬盘请求操作.
	end_request(1);										// 处理请求结束事宜(已设置更新标志).
   181b7:	83 ec 0c             	sub    $0xc,%esp
   181ba:	6a 01                	push   $0x1
   181bc:	e8 8a f5 ff ff       	call   1774b <end_request>
   181c1:	83 c4 10             	add    $0x10,%esp
	do_hd_request();									// 执行其他硬盘请求操作.
   181c4:	e8 89 00 00 00       	call   18252 <do_hd_request>
}
   181c9:	83 c4 08             	add    $0x8,%esp
   181cc:	5e                   	pop    %esi
   181cd:	c3                   	ret    

000181ce <recal_intr>:
// 该函数会在硬盘执行重新校正操作而引发的硬盘中断中被调用.
// 如果硬盘控制器返回错误信息,则函数首先进行硬盘读写失败处理,然后请求硬盘作相应(复位)处理.在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数
// 不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中
// 下一个请求项.do_hd_request()中根据当时具体的标志状态来判别是否需要先执行复位,重新校正等操作,然后再继续或处理下一请求项.
static void recal_intr(void)
{
   181ce:	83 ec 0c             	sub    $0xc,%esp
	if (win_result())									// 若返回出错,则调用bad_rw_intr().
   181d1:	e8 24 fb ff ff       	call   17cfa <win_result>
   181d6:	85 c0                	test   %eax,%eax
   181d8:	74 05                	je     181df <recal_intr+0x11>
		bad_rw_intr();
   181da:	e8 70 fe ff ff       	call   1804f <bad_rw_intr>
	do_hd_request();
   181df:	e8 6e 00 00 00       	call   18252 <do_hd_request>
}
   181e4:	90                   	nop
   181e5:	83 c4 0c             	add    $0xc,%esp
   181e8:	c3                   	ret    

000181e9 <hd_times_out>:
// 硬盘操作超时处理
// 本函数会在do_timer()中(kernel/sched.c)被调用.在向硬盘控制器发送了一个命令后,若在经过了hd_timeout个系统滴答后控制器还没有发出一个硬盘中断信号,则说明控制器(或
// 硬盘)操作超时.此时do_timer()就会调用本函数设置复位标志reset并调用do_hd_request()执行复位处理.若在预定时间内(200滴答)硬盘控制器发出了硬盘中断并开始执行硬盘中断
// 处理程序,那么hd_timeout值就会在中断处理程序中被置0.此时do_timer()就会跳过本函数.
void hd_times_out(void)
{
   181e9:	83 ec 0c             	sub    $0xc,%esp
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
   181ec:	a1 1c 21 03 00       	mov    0x3211c,%eax
   181f1:	85 c0                	test   %eax,%eax
   181f3:	74 58                	je     1824d <hd_times_out+0x64>
		return;
	printk("HD timeout");
   181f5:	83 ec 0c             	sub    $0xc,%esp
   181f8:	68 29 42 02 00       	push   $0x24229
   181fd:	e8 44 0a ff ff       	call   8c46 <printk>
   18202:	83 c4 10             	add    $0x10,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   18205:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1820a:	8b 50 08             	mov    0x8(%eax),%edx
   1820d:	83 c2 01             	add    $0x1,%edx
   18210:	89 50 08             	mov    %edx,0x8(%eax)
   18213:	8b 40 08             	mov    0x8(%eax),%eax
   18216:	83 f8 06             	cmp    $0x6,%eax
   18219:	7e 0d                	jle    18228 <hd_times_out+0x3f>
		end_request(0);
   1821b:	83 ec 0c             	sub    $0xc,%esp
   1821e:	6a 00                	push   $0x0
   18220:	e8 26 f5 ff ff       	call   1774b <end_request>
   18225:	83 c4 10             	add    $0x10,%esp
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
   18228:	c7 05 80 21 03 00 00 	movl   $0x0,0x32180
   1822f:	00 00 00 
   18232:	c7 05 84 21 03 00 c8 	movl   $0xc8,0x32184
   18239:	00 00 00 
	reset = 1;											// 设置复位标志.
   1823c:	c7 05 d4 21 03 00 01 	movl   $0x1,0x321d4
   18243:	00 00 00 
	do_hd_request();
   18246:	e8 07 00 00 00       	call   18252 <do_hd_request>
   1824b:	eb 01                	jmp    1824e <hd_times_out+0x65>
		return;
   1824d:	90                   	nop
}
   1824e:	83 c4 0c             	add    $0xc,%esp
   18251:	c3                   	ret    

00018252 <do_hd_request>:
// 该函数根据设备当前请求项中的设备号和起始扇区号信息首先计算到对应硬盘上的柱面号,当前磁道中扇区号,磁头号数据,然后再根据请求项中的命令(READ/WRITE)对硬盘发送相应读/写命令
// 若控制器复位标志或硬盘重新校正已被置位,那么首先会执行复位或重新校正操作.
// 若请求项此时是块设备的第1个(原来设备空闲),则块设备当前请求项指针会直接指向该请求项(参见ll_rw_blk.c),并会立刻调用本函数执行读写操作.否则在一个读写操作完成而引发的硬盘
// 中断过程,若还有请求项需要处理,则也会在硬盘中断过程中调用本函数
void do_hd_request(void)
{
   18252:	56                   	push   %esi
   18253:	83 ec 38             	sub    $0x38,%esp

	// 函数首先检测请求项的合法性.若请求队列中已没有请求项则退出(参见blk.h)
	// 然后取设备号中的子设备号以及设备当前请求项中的起始扇区号.子设备号即对应硬盘上各分区.如果子设备号不存在或者起始扇区大于该分区扇区数-2,则结束该请求项,并跳转到标号repeat处(定义
	// 在INIT_REQUEST开始处).因为次要求读写一块数据(2个扇区,即1024字节),所以请求的扇区号不能大于分区中最后倒数第二个扇区号.然后通过加上子设备号对应分区的起始扇区号,就把需要读写的
	// 块对应到整个硬盘的绝对扇区号block上.而子设备号被5整除即可得到对应的硬盘号.
	INIT_REQUEST;
   18256:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1825b:	85 c0                	test   %eax,%eax
   1825d:	75 19                	jne    18278 <do_hd_request+0x26>
   1825f:	c7 05 80 21 03 00 00 	movl   $0x0,0x32180
   18266:	00 00 00 
   18269:	c7 05 84 21 03 00 00 	movl   $0x0,0x32184
   18270:	00 00 00 
   18273:	e9 87 02 00 00       	jmp    184ff <do_hd_request+0x2ad>
   18278:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1827d:	8b 00                	mov    (%eax),%eax
   1827f:	c1 e8 08             	shr    $0x8,%eax
   18282:	83 f8 03             	cmp    $0x3,%eax
   18285:	74 10                	je     18297 <do_hd_request+0x45>
   18287:	83 ec 0c             	sub    $0xc,%esp
   1828a:	68 34 42 02 00       	push   $0x24234
   1828f:	e8 73 09 ff ff       	call   8c07 <panic>
   18294:	83 c4 10             	add    $0x10,%esp
   18297:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1829c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1829f:	85 c0                	test   %eax,%eax
   182a1:	74 20                	je     182c3 <do_hd_request+0x71>
   182a3:	a1 1c 21 03 00       	mov    0x3211c,%eax
   182a8:	8b 40 1c             	mov    0x1c(%eax),%eax
   182ab:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   182af:	84 c0                	test   %al,%al
   182b1:	75 10                	jne    182c3 <do_hd_request+0x71>
   182b3:	83 ec 0c             	sub    $0xc,%esp
   182b6:	68 55 42 02 00       	push   $0x24255
   182bb:	e8 47 09 ff ff       	call   8c07 <panic>
   182c0:	83 c4 10             	add    $0x10,%esp
 	dev = MINOR(CURRENT->dev);
   182c3:	a1 1c 21 03 00       	mov    0x3211c,%eax
   182c8:	8b 00                	mov    (%eax),%eax
   182ca:	25 ff 00 00 00       	and    $0xff,%eax
   182cf:	89 44 24 24          	mov    %eax,0x24(%esp)
	block = CURRENT->sector;						// 请求的起始扇区.
   182d3:	a1 1c 21 03 00       	mov    0x3211c,%eax
   182d8:	8b 40 0c             	mov    0xc(%eax),%eax
   182db:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (dev >= 5 * NR_HD || block + 2 > hd[dev].nr_sects) {
   182df:	8b 15 d8 21 03 00    	mov    0x321d8,%edx
   182e5:	89 d0                	mov    %edx,%eax
   182e7:	c1 e0 02             	shl    $0x2,%eax
   182ea:	01 d0                	add    %edx,%eax
   182ec:	39 44 24 24          	cmp    %eax,0x24(%esp)
   182f0:	73 16                	jae    18308 <do_hd_request+0xb6>
   182f2:	8b 44 24 20          	mov    0x20(%esp),%eax
   182f6:	8d 50 02             	lea    0x2(%eax),%edx
   182f9:	8b 44 24 24          	mov    0x24(%esp),%eax
   182fd:	8b 04 c5 e4 21 03 00 	mov    0x321e4(,%eax,8),%eax
   18304:	39 c2                	cmp    %eax,%edx
   18306:	76 12                	jbe    1831a <do_hd_request+0xc8>
		end_request(0);
   18308:	83 ec 0c             	sub    $0xc,%esp
   1830b:	6a 00                	push   $0x0
   1830d:	e8 39 f4 ff ff       	call   1774b <end_request>
   18312:	83 c4 10             	add    $0x10,%esp
		goto repeat;								// 该标号在blk.h最后面.
   18315:	e9 3c ff ff ff       	jmp    18256 <do_hd_request+0x4>
	}
	block += hd[dev].start_sect;
   1831a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1831e:	8b 04 c5 e0 21 03 00 	mov    0x321e0(,%eax,8),%eax
   18325:	01 44 24 20          	add    %eax,0x20(%esp)
	dev /= 5;										// 此时dev代表硬盘号(硬盘0还是硬盘1)
   18329:	8b 44 24 24          	mov    0x24(%esp),%eax
   1832d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   18332:	f7 e2                	mul    %edx
   18334:	89 d0                	mov    %edx,%eax
   18336:	c1 e8 02             	shr    $0x2,%eax
   18339:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
   1833d:	8b 54 24 24          	mov    0x24(%esp),%edx
   18341:	89 d0                	mov    %edx,%eax
   18343:	01 c0                	add    %eax,%eax
   18345:	01 d0                	add    %edx,%eax
   18347:	c1 e0 03             	shl    $0x3,%eax
   1834a:	05 a4 21 03 00       	add    $0x321a4,%eax
   1834f:	8b 08                	mov    (%eax),%ecx
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
   18351:	8b 44 24 20          	mov    0x20(%esp),%eax
   18355:	ba 00 00 00 00       	mov    $0x0,%edx
   1835a:	f7 f1                	div    %ecx
   1835c:	89 44 24 20          	mov    %eax,0x20(%esp)
   18360:	89 54 24 1c          	mov    %edx,0x1c(%esp)
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
		"r" (hd_info[dev].head));
   18364:	8b 54 24 24          	mov    0x24(%esp),%edx
   18368:	89 d0                	mov    %edx,%eax
   1836a:	01 c0                	add    %eax,%eax
   1836c:	01 d0                	add    %edx,%eax
   1836e:	c1 e0 03             	shl    $0x3,%eax
   18371:	05 a0 21 03 00       	add    $0x321a0,%eax
   18376:	8b 08                	mov    (%eax),%ecx
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
   18378:	8b 44 24 20          	mov    0x20(%esp),%eax
   1837c:	ba 00 00 00 00       	mov    $0x0,%edx
   18381:	f7 f1                	div    %ecx
   18383:	89 44 24 18          	mov    %eax,0x18(%esp)
   18387:	89 54 24 14          	mov    %edx,0x14(%esp)
	sec++;											// 对计算所得当前磁道扇区号进行调整.
   1838b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	nsect = CURRENT->nr_sectors;					// 预读/写的扇区数.
   18390:	a1 1c 21 03 00       	mov    0x3211c,%eax
   18395:	8b 40 10             	mov    0x10(%eax),%eax
   18398:	89 44 24 10          	mov    %eax,0x10(%esp)
	// 此时我们得到了欲读写的硬盘起始扇区block所对应的硬盘上柱面号(cyl),在当前磁道上的扇区号(sec),磁头号(head)以及欲读写的总扇区数(nsect).接着我们可以根据这些信息向硬盘控制器发送I/O
	// 操作信息了.但在发送之前我们还需要先看看是否有复位控制器状态和重新校正硬盘的标志.通常在复位操作之后都需要重新校正硬盘磁头位置.若这些标志已被置位,则说明前面的硬盘操作可能出现了一些问题
	// 或者现在是系统第一次硬盘读写操作等情况.于是我们就需要重新复位硬盘或控制器并重新校正硬盘.
	// 如果此时复位标志reset是置位的,则需要执行复位操作.复位硬盘和控制器,并置硬盘需要重新校正标志,返回.reset_hd()将首先向硬盘控制器发送复位(重新校正)命令,然后发送硬盘控制命令"
	// 建立驱动器参数".
	if (reset) {
   1839c:	a1 d4 21 03 00       	mov    0x321d4,%eax
   183a1:	85 c0                	test   %eax,%eax
   183a3:	74 14                	je     183b9 <do_hd_request+0x167>
		recalibrate = 1;							// 置需重新校正标志.
   183a5:	c7 05 d0 21 03 00 01 	movl   $0x1,0x321d0
   183ac:	00 00 00 
		reset_hd();
   183af:	e8 82 fb ff ff       	call   17f36 <reset_hd>
		return;
   183b4:	e9 46 01 00 00       	jmp    184ff <do_hd_request+0x2ad>
	}
	// 如果此时重新校正标志(recalibrate)是置位的,则首先复位该标志,然后向硬盘控制器发送重新校正命令.该命令会执行寻道操作,让处于任何地方的磁头移动到0柱面.
	if (recalibrate) {
   183b9:	a1 d0 21 03 00       	mov    0x321d0,%eax
   183be:	85 c0                	test   %eax,%eax
   183c0:	74 58                	je     1841a <do_hd_request+0x1c8>
		recalibrate = 0;
   183c2:	c7 05 d0 21 03 00 00 	movl   $0x0,0x321d0
   183c9:	00 00 00 
		hd_out(dev, hd_info[CURRENT_DEV].sect, 0, 0, 0,
   183cc:	a1 1c 21 03 00       	mov    0x3211c,%eax
   183d1:	8b 00                	mov    (%eax),%eax
   183d3:	0f b6 c8             	movzbl %al,%ecx
   183d6:	ba 67 66 66 66       	mov    $0x66666667,%edx
   183db:	89 c8                	mov    %ecx,%eax
   183dd:	f7 ea                	imul   %edx
   183df:	d1 fa                	sar    %edx
   183e1:	89 c8                	mov    %ecx,%eax
   183e3:	c1 f8 1f             	sar    $0x1f,%eax
   183e6:	29 c2                	sub    %eax,%edx
   183e8:	89 d0                	mov    %edx,%eax
   183ea:	01 c0                	add    %eax,%eax
   183ec:	01 d0                	add    %edx,%eax
   183ee:	c1 e0 03             	shl    $0x3,%eax
   183f1:	05 a4 21 03 00       	add    $0x321a4,%eax
   183f6:	8b 00                	mov    (%eax),%eax
   183f8:	83 ec 04             	sub    $0x4,%esp
   183fb:	68 ce 81 01 00       	push   $0x181ce
   18400:	6a 10                	push   $0x10
   18402:	6a 00                	push   $0x0
   18404:	6a 00                	push   $0x0
   18406:	6a 00                	push   $0x0
   18408:	50                   	push   %eax
   18409:	ff 74 24 40          	pushl  0x40(%esp)
   1840d:	e8 48 f9 ff ff       	call   17d5a <hd_out>
   18412:	83 c4 20             	add    $0x20,%esp
			WIN_RESTORE, &recal_intr);
		return;
   18415:	e9 e5 00 00 00       	jmp    184ff <do_hd_request+0x2ad>
	}
	// 如果以上两个标志都没有置位,那么我们就可以开始向硬盘控制器发送真正的数据读/写操作命令了.如果当前请求是写扇区操作,则发送命令,循环读取状态寄存器信息并判断请求服务标志DRQ_STAT是否
	// 置位.DRQ_STAT是硬盘状态寄存器的请求服务位表示驱动器已经准备好在主机和数据端口之间传输一个字或一个字节的数据.如果请求服务DRQ置位则退出循环.若等到循环结束也没有置位,则表示发送的
	// 要求写硬盘命令失败,于是跳转去处理出现在问题或继续执行下一个硬盘请求.否则我们可以向硬盘控制器数据寄存器端口HD_DATA写入1个扇区的数据.
	if (CURRENT->cmd == WRITE) {
   1841a:	a1 1c 21 03 00       	mov    0x3211c,%eax
   1841f:	8b 40 04             	mov    0x4(%eax),%eax
   18422:	83 f8 01             	cmp    $0x1,%eax
   18425:	0f 85 90 00 00 00    	jne    184bb <do_hd_request+0x269>
		hd_out(dev, nsect, sec, head, cyl, WIN_WRITE, &write_intr);
   1842b:	83 ec 04             	sub    $0x4,%esp
   1842e:	68 37 81 01 00       	push   $0x18137
   18433:	6a 30                	push   $0x30
   18435:	ff 74 24 24          	pushl  0x24(%esp)
   18439:	ff 74 24 24          	pushl  0x24(%esp)
   1843d:	ff 74 24 30          	pushl  0x30(%esp)
   18441:	ff 74 24 28          	pushl  0x28(%esp)
   18445:	ff 74 24 40          	pushl  0x40(%esp)
   18449:	e8 0c f9 ff ff       	call   17d5a <hd_out>
   1844e:	83 c4 20             	add    $0x20,%esp
		for(i = 0 ; i < 10000 && !(r = inb_p(HD_STATUS) & DRQ_STAT) ; i++)
   18451:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   18458:	00 
   18459:	eb 05                	jmp    18460 <do_hd_request+0x20e>
   1845b:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   18460:	81 7c 24 2c 0f 27 00 	cmpl   $0x270f,0x2c(%esp)
   18467:	00 
   18468:	7f 26                	jg     18490 <do_hd_request+0x23e>
   1846a:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   1846f:	89 c2                	mov    %eax,%edx
   18471:	ec                   	in     (%dx),%al
   18472:	eb 00                	jmp    18474 <do_hd_request+0x222>
   18474:	eb 00                	jmp    18476 <do_hd_request+0x224>
   18476:	88 44 24 0f          	mov    %al,0xf(%esp)
   1847a:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1847f:	0f b6 c0             	movzbl %al,%eax
   18482:	83 e0 08             	and    $0x8,%eax
   18485:	89 44 24 28          	mov    %eax,0x28(%esp)
   18489:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1848e:	74 cb                	je     1845b <do_hd_request+0x209>
			/* nothing */ ;
		if (!r) {
   18490:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   18495:	75 0a                	jne    184a1 <do_hd_request+0x24f>
			bad_rw_intr();
   18497:	e8 b3 fb ff ff       	call   1804f <bad_rw_intr>
			goto repeat;							// 该标号在blk.h文件最后面.
   1849c:	e9 b5 fd ff ff       	jmp    18256 <do_hd_request+0x4>
		}
		port_write(HD_DATA, CURRENT->buffer, 256);
   184a1:	a1 1c 21 03 00       	mov    0x3211c,%eax
   184a6:	8b 40 14             	mov    0x14(%eax),%eax
   184a9:	ba f0 01 00 00       	mov    $0x1f0,%edx
   184ae:	b9 00 01 00 00       	mov    $0x100,%ecx
   184b3:	89 c6                	mov    %eax,%esi
   184b5:	fc                   	cld    
   184b6:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
   184b9:	eb 44                	jmp    184ff <do_hd_request+0x2ad>
	// 如果当前请求是读硬盘数据,则向硬盘控制器发送读扇区命令.若命令无效则停机.
	} else if (CURRENT->cmd == READ) {
   184bb:	a1 1c 21 03 00       	mov    0x3211c,%eax
   184c0:	8b 40 04             	mov    0x4(%eax),%eax
   184c3:	85 c0                	test   %eax,%eax
   184c5:	75 28                	jne    184ef <do_hd_request+0x29d>
		hd_out(dev, nsect, sec, head, cyl, WIN_READ, &read_intr);
   184c7:	83 ec 04             	sub    $0x4,%esp
   184ca:	68 91 80 01 00       	push   $0x18091
   184cf:	6a 20                	push   $0x20
   184d1:	ff 74 24 24          	pushl  0x24(%esp)
   184d5:	ff 74 24 24          	pushl  0x24(%esp)
   184d9:	ff 74 24 30          	pushl  0x30(%esp)
   184dd:	ff 74 24 28          	pushl  0x28(%esp)
   184e1:	ff 74 24 40          	pushl  0x40(%esp)
   184e5:	e8 70 f8 ff ff       	call   17d5a <hd_out>
   184ea:	83 c4 20             	add    $0x20,%esp
   184ed:	eb 10                	jmp    184ff <do_hd_request+0x2ad>
	} else
		panic("unknown hd-command");
   184ef:	83 ec 0c             	sub    $0xc,%esp
   184f2:	68 70 42 02 00       	push   $0x24270
   184f7:	e8 0b 07 ff ff       	call   8c07 <panic>
   184fc:	83 c4 10             	add    $0x10,%esp
}
   184ff:	83 c4 38             	add    $0x38,%esp
   18502:	5e                   	pop    %esi
   18503:	c3                   	ret    

00018504 <hd_init>:
// 设置硬盘中断描述符,并允许硬盘控制器发送中断请求信号.
// 该函数设置硬盘设备的请求项处理函数指针为do_hd_request(),然后设置硬盘中断门描述符.hd_interrup(kernel/sys_call.s)是其中断处理过程地址.硬盘中断号为int 0x2E(46),对应8259A
// 芯片的中断请求信号IRQ13.接着复位接联的主8259A int 2屏蔽位,允许从片发出中断请求信号.再复位硬盘的中断请求屏蔽位(在从片上),允许硬盘控制器发送中断请求信号.中断描述符表IDT内中断门
// 描述符设置宏set_intr_gate()在include/asm/system.h中实现.
void hd_init(void)
{
   18504:	53                   	push   %ebx
   18505:	83 ec 10             	sub    $0x10,%esp
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;				// do_hd_request().
   18508:	c7 05 18 21 03 00 52 	movl   $0x18252,0x32118
   1850f:	82 01 00 
	set_intr_gate(0x2E, &hd_interrupt);							// 设置中断门中处理函数指针
   18512:	b9 28 56 00 00       	mov    $0x5628,%ecx
   18517:	bb 2c 56 00 00       	mov    $0x562c,%ebx
   1851c:	ba 80 7a 00 00       	mov    $0x7a80,%edx
   18521:	b8 00 00 08 00       	mov    $0x80000,%eax
   18526:	66 89 d0             	mov    %dx,%ax
   18529:	66 ba 00 8e          	mov    $0x8e00,%dx
   1852d:	89 01                	mov    %eax,(%ecx)
   1852f:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfb, 0x21);							// 复位接联的主8259A int 2的屏蔽位
   18531:	b8 21 00 00 00       	mov    $0x21,%eax
   18536:	89 c2                	mov    %eax,%edx
   18538:	ec                   	in     (%dx),%al
   18539:	eb 00                	jmp    1853b <hd_init+0x37>
   1853b:	eb 00                	jmp    1853d <hd_init+0x39>
   1853d:	88 44 24 0f          	mov    %al,0xf(%esp)
   18541:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   18546:	0f b6 c0             	movzbl %al,%eax
   18549:	25 fb 00 00 00       	and    $0xfb,%eax
   1854e:	ba 21 00 00 00       	mov    $0x21,%edx
   18553:	ee                   	out    %al,(%dx)
   18554:	eb 00                	jmp    18556 <hd_init+0x52>
   18556:	eb 00                	jmp    18558 <hd_init+0x54>
	outb(inb_p(0xA1) & 0xbf, 0xA1);								// 复位硬盘中断请求屏蔽位(在从片上).
   18558:	b8 a1 00 00 00       	mov    $0xa1,%eax
   1855d:	89 c2                	mov    %eax,%edx
   1855f:	ec                   	in     (%dx),%al
   18560:	eb 00                	jmp    18562 <hd_init+0x5e>
   18562:	eb 00                	jmp    18564 <hd_init+0x60>
   18564:	88 44 24 0e          	mov    %al,0xe(%esp)
   18568:	0f b6 44 24 0e       	movzbl 0xe(%esp),%eax
   1856d:	0f b6 c0             	movzbl %al,%eax
   18570:	25 bf 00 00 00       	and    $0xbf,%eax
   18575:	ba a1 00 00 00       	mov    $0xa1,%edx
   1857a:	ee                   	out    %al,(%dx)
}
   1857b:	90                   	nop
   1857c:	83 c4 10             	add    $0x10,%esp
   1857f:	5b                   	pop    %ebx
   18580:	c3                   	ret    

00018581 <memcpy>:
}

// 内存块复制.从源地址src处开始复制n个字节到目的地址dest处.
// 参数:dest - 复制的目的地址,src - 复制的源地址,n - 复制字节数.
static inline void * memcpy(void * dest, const void * src, int n)
{
   18581:	57                   	push   %edi
   18582:	56                   	push   %esi
   18583:	53                   	push   %ebx
__asm__(
   18584:	8b 44 24 18          	mov    0x18(%esp),%eax
   18588:	8b 54 24 14          	mov    0x14(%esp),%edx
   1858c:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   18590:	89 c1                	mov    %eax,%ecx
   18592:	89 d6                	mov    %edx,%esi
   18594:	89 df                	mov    %ebx,%edi
   18596:	fc                   	cld    
   18597:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
	"cld\n\t"												// 清方向位
	"rep\n\t"												// 重复执行复制ecx个字节.
	"movsb"													// 从ds:[esi]到es:[edi],esi++,edi++.
	::"c" (n), "S" (src), "D" (dest)
	:);
return dest;												// 返回目的地址.
   18599:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1859d:	5b                   	pop    %ebx
   1859e:	5e                   	pop    %esi
   1859f:	5f                   	pop    %edi
   185a0:	c3                   	ret    

000185a1 <unlock_buffer>:
{
   185a1:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   185a4:	8b 44 24 10          	mov    0x10(%esp),%eax
   185a8:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   185ac:	84 c0                	test   %al,%al
   185ae:	75 10                	jne    185c0 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   185b0:	83 ec 0c             	sub    $0xc,%esp
   185b3:	68 84 42 02 00       	push   $0x24284
   185b8:	e8 89 06 ff ff       	call   8c46 <printk>
   185bd:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   185c0:	8b 44 24 10          	mov    0x10(%esp),%eax
   185c4:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   185c8:	8b 44 24 10          	mov    0x10(%esp),%eax
   185cc:	83 c0 10             	add    $0x10,%eax
   185cf:	83 ec 0c             	sub    $0xc,%esp
   185d2:	50                   	push   %eax
   185d3:	e8 75 eb fe ff       	call   714d <wake_up>
   185d8:	83 c4 10             	add    $0x10,%esp
}
   185db:	90                   	nop
   185dc:	83 c4 0c             	add    $0xc,%esp
   185df:	c3                   	ret    

000185e0 <end_request>:
{
   185e0:	83 ec 0c             	sub    $0xc,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   185e3:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185e8:	8b 40 1c             	mov    0x1c(%eax),%eax
   185eb:	85 c0                	test   %eax,%eax
   185ed:	74 23                	je     18612 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   185ef:	a1 0c 21 03 00       	mov    0x3210c,%eax
   185f4:	8b 40 1c             	mov    0x1c(%eax),%eax
   185f7:	8b 54 24 10          	mov    0x10(%esp),%edx
   185fb:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   185fe:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18603:	8b 40 1c             	mov    0x1c(%eax),%eax
   18606:	83 ec 0c             	sub    $0xc,%esp
   18609:	50                   	push   %eax
   1860a:	e8 92 ff ff ff       	call   185a1 <unlock_buffer>
   1860f:	83 c4 10             	add    $0x10,%esp
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   18612:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   18617:	75 34                	jne    1864d <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   18619:	83 ec 0c             	sub    $0xc,%esp
   1861c:	68 a9 42 02 00       	push   $0x242a9
   18621:	e8 20 06 ff ff       	call   8c46 <printk>
   18626:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
   18629:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1862e:	8b 40 1c             	mov    0x1c(%eax),%eax
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   18631:	8b 50 04             	mov    0x4(%eax),%edx
   18634:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18639:	8b 00                	mov    (%eax),%eax
   1863b:	83 ec 04             	sub    $0x4,%esp
   1863e:	52                   	push   %edx
   1863f:	50                   	push   %eax
   18640:	68 bd 42 02 00       	push   $0x242bd
   18645:	e8 fc 05 ff ff       	call   8c46 <printk>
   1864a:	83 c4 10             	add    $0x10,%esp
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   1864d:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18652:	83 c0 18             	add    $0x18,%eax
   18655:	83 ec 0c             	sub    $0xc,%esp
   18658:	50                   	push   %eax
   18659:	e8 ef ea fe ff       	call   714d <wake_up>
   1865e:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   18661:	83 ec 0c             	sub    $0xc,%esp
   18664:	68 e0 20 03 00       	push   $0x320e0
   18669:	e8 df ea fe ff       	call   714d <wake_up>
   1866e:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   18671:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18676:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   1867c:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18681:	8b 40 20             	mov    0x20(%eax),%eax
   18684:	a3 0c 21 03 00       	mov    %eax,0x3210c
}
   18689:	90                   	nop
   1868a:	83 c4 0c             	add    $0xc,%esp
   1868d:	c3                   	ret    

0001868e <do_rd_request>:
// 添加到rd的链表中之后,就会调用该函数对rd当前请求项进行处理.该函数首先计算当前请求项中指定起始扇区对应虚拟盘所处内存
// 的起始位置addr和要求的扇区数对应的字节长度值len,然后根据请求项中的命令进行操作.若是写命令WRITE,就把请求项所指缓
// 冲区中的数据直接复制到内存位置addr处。若是读操作作反之。数据复制完成后即可直接调用end_request()对本次请求项作结束
// 处理。然后跳转到函数开始处再去处理下一个请求项。若已没有请求项则退出。
void do_rd_request(void)
{
   1868e:	83 ec 1c             	sub    $0x1c,%esp
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   18691:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18696:	85 c0                	test   %eax,%eax
   18698:	0f 84 25 01 00 00    	je     187c3 <do_rd_request+0x135>
   1869e:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186a3:	8b 00                	mov    (%eax),%eax
   186a5:	c1 e8 08             	shr    $0x8,%eax
   186a8:	83 f8 01             	cmp    $0x1,%eax
   186ab:	74 10                	je     186bd <do_rd_request+0x2f>
   186ad:	83 ec 0c             	sub    $0xc,%esp
   186b0:	68 d4 42 02 00       	push   $0x242d4
   186b5:	e8 4d 05 ff ff       	call   8c07 <panic>
   186ba:	83 c4 10             	add    $0x10,%esp
   186bd:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186c2:	8b 40 1c             	mov    0x1c(%eax),%eax
   186c5:	85 c0                	test   %eax,%eax
   186c7:	74 20                	je     186e9 <do_rd_request+0x5b>
   186c9:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186ce:	8b 40 1c             	mov    0x1c(%eax),%eax
   186d1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   186d5:	84 c0                	test   %al,%al
   186d7:	75 10                	jne    186e9 <do_rd_request+0x5b>
   186d9:	83 ec 0c             	sub    $0xc,%esp
   186dc:	68 f4 42 02 00       	push   $0x242f4
   186e1:	e8 21 05 ff ff       	call   8c07 <panic>
   186e6:	83 c4 10             	add    $0x10,%esp
	addr = rd_start + (CURRENT->sector << 9);
   186e9:	8b 15 00 28 04 00    	mov    0x42800,%edx
   186ef:	a1 0c 21 03 00       	mov    0x3210c,%eax
   186f4:	8b 40 0c             	mov    0xc(%eax),%eax
   186f7:	c1 e0 09             	shl    $0x9,%eax
   186fa:	01 d0                	add    %edx,%eax
   186fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
	len = CURRENT->nr_sectors << 9;
   18700:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18705:	8b 40 10             	mov    0x10(%eax),%eax
   18708:	c1 e0 09             	shl    $0x9,%eax
   1870b:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 如果当前请求项中子设备号不为1或者对应内存起始位置大于虚拟盘末尾，则结束该请求项，并跳转到repeat处去处理下一个虚拟
	// 盘请求项。标号repeat定义在宏INIT_REQUEST内，位于宏的开始处，参见blk.h文件。
	if ((MINOR(CURRENT->dev) != 1) || (addr + len > rd_start + rd_length)) {
   1870f:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18714:	8b 00                	mov    (%eax),%eax
   18716:	0f b6 c0             	movzbl %al,%eax
   18719:	83 f8 01             	cmp    $0x1,%eax
   1871c:	75 1c                	jne    1873a <do_rd_request+0xac>
   1871e:	8b 54 24 08          	mov    0x8(%esp),%edx
   18722:	8b 44 24 0c          	mov    0xc(%esp),%eax
   18726:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   18729:	a1 00 28 04 00       	mov    0x42800,%eax
   1872e:	8b 15 6c 22 03 00    	mov    0x3226c,%edx
   18734:	01 d0                	add    %edx,%eax
   18736:	39 c1                	cmp    %eax,%ecx
   18738:	76 12                	jbe    1874c <do_rd_request+0xbe>
		end_request(0);
   1873a:	83 ec 0c             	sub    $0xc,%esp
   1873d:	6a 00                	push   $0x0
   1873f:	e8 9c fe ff ff       	call   185e0 <end_request>
   18744:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   18747:	e9 45 ff ff ff       	jmp    18691 <do_rd_request+0x3>
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
   1874c:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18751:	8b 40 04             	mov    0x4(%eax),%eax
   18754:	83 f8 01             	cmp    $0x1,%eax
   18757:	75 1e                	jne    18777 <do_rd_request+0xe9>
		(void ) memcpy(addr,
			      CURRENT->buffer,
   18759:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1875e:	8b 40 14             	mov    0x14(%eax),%eax
		(void ) memcpy(addr,
   18761:	83 ec 04             	sub    $0x4,%esp
   18764:	ff 74 24 0c          	pushl  0xc(%esp)
   18768:	50                   	push   %eax
   18769:	ff 74 24 18          	pushl  0x18(%esp)
   1876d:	e8 0f fe ff ff       	call   18581 <memcpy>
   18772:	83 c4 10             	add    $0x10,%esp
   18775:	eb 3a                	jmp    187b1 <do_rd_request+0x123>
			      len);
	} else if (CURRENT->cmd == READ) {
   18777:	a1 0c 21 03 00       	mov    0x3210c,%eax
   1877c:	8b 40 04             	mov    0x4(%eax),%eax
   1877f:	85 c0                	test   %eax,%eax
   18781:	75 1e                	jne    187a1 <do_rd_request+0x113>
		(void) memcpy(CURRENT->buffer,
   18783:	a1 0c 21 03 00       	mov    0x3210c,%eax
   18788:	8b 40 14             	mov    0x14(%eax),%eax
   1878b:	83 ec 04             	sub    $0x4,%esp
   1878e:	ff 74 24 0c          	pushl  0xc(%esp)
   18792:	ff 74 24 14          	pushl  0x14(%esp)
   18796:	50                   	push   %eax
   18797:	e8 e5 fd ff ff       	call   18581 <memcpy>
   1879c:	83 c4 10             	add    $0x10,%esp
   1879f:	eb 10                	jmp    187b1 <do_rd_request+0x123>
			      addr,
			      len);
	} else
		panic("unknown ramdisk-command");
   187a1:	83 ec 0c             	sub    $0xc,%esp
   187a4:	68 0e 43 02 00       	push   $0x2430e
   187a9:	e8 59 04 ff ff       	call   8c07 <panic>
   187ae:	83 c4 10             	add    $0x10,%esp
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
   187b1:	83 ec 0c             	sub    $0xc,%esp
   187b4:	6a 01                	push   $0x1
   187b6:	e8 25 fe ff ff       	call   185e0 <end_request>
   187bb:	83 c4 10             	add    $0x10,%esp
	goto repeat;
   187be:	e9 ce fe ff ff       	jmp    18691 <do_rd_request+0x3>
	INIT_REQUEST;
   187c3:	90                   	nop
}
   187c4:	83 c4 1c             	add    $0x1c,%esp
   187c7:	c3                   	ret    

000187c8 <rd_init>:
// 该函数首先设置虚拟盘设备的请求项处理函数指针指向do_rd_request(),然后确定虚拟盘在物理内存中的起始地址,占用字节长度
// 值.并对整个虚拟盘区清零.最后返回盘区长度.当linux/Makefile文件中设置过RAMDISK值不为零时,表示系统中会创建RAM虚拟盘
// 设备.在这种情况下的内核初始化过程中,本函数就会被调用(init/main.c).该函数在第2个参数length会被赋值成RAMDISK*1024
// 单位为字节.
long rd_init(long mem_start, int length)
{
   187c8:	83 ec 10             	sub    $0x10,%esp
	int	i;
	char	*cp;

	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
   187cb:	c7 05 08 21 03 00 8e 	movl   $0x1868e,0x32108
   187d2:	86 01 00 
	rd_start = (char *) mem_start;
   187d5:	8b 44 24 14          	mov    0x14(%esp),%eax
   187d9:	a3 00 28 04 00       	mov    %eax,0x42800
	rd_length = length;
   187de:	8b 44 24 18          	mov    0x18(%esp),%eax
   187e2:	a3 6c 22 03 00       	mov    %eax,0x3226c
	cp = rd_start;
   187e7:	a1 00 28 04 00       	mov    0x42800,%eax
   187ec:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将内存空间清零
	for (i = 0; i < length; i++)
   187f0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   187f7:	00 
   187f8:	eb 13                	jmp    1880d <rd_init+0x45>
		*cp++ = '\0';
   187fa:	8b 44 24 08          	mov    0x8(%esp),%eax
   187fe:	8d 50 01             	lea    0x1(%eax),%edx
   18801:	89 54 24 08          	mov    %edx,0x8(%esp)
   18805:	c6 00 00             	movb   $0x0,(%eax)
	for (i = 0; i < length; i++)
   18808:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1880d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   18811:	3b 44 24 18          	cmp    0x18(%esp),%eax
   18815:	7c e3                	jl     187fa <rd_init+0x32>
	return(length);
   18817:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   1881b:	83 c4 10             	add    $0x10,%esp
   1881e:	c3                   	ret    

0001881f <rd_load>:
 */
// 尝试根文件系统加载到虚拟盘中.
// 该函数将在内核设置函数setup()(hd.c)中被调用.另外,1磁盘块 = 1024字节.变量block=256表示根文件系统映像被存储于boot盘第
// 256磁盘块开始处.
void rd_load(void)
{
   1881f:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	struct buffer_head *bh;								// 调整缓冲块头指针.
	struct super_block	s;								// 文件超级块结构.
	int		block = 256;								/* Start at block 256 */	/* 开始于256盘块 */
   18825:	c7 44 24 78 00 01 00 	movl   $0x100,0x78(%esp)
   1882c:	00 
	int		i = 1;
   1882d:	c7 44 24 74 01 00 00 	movl   $0x1,0x74(%esp)
   18834:	00 
	int		nblocks;									// 文件系统盘块总数.
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
   18835:	a1 6c 22 03 00       	mov    0x3226c,%eax
   1883a:	85 c0                	test   %eax,%eax
   1883c:	0f 84 00 02 00 00    	je     18a42 <rd_load+0x223>
		return;
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
   18842:	8b 15 cc 20 03 00    	mov    0x320cc,%edx
   18848:	a1 00 28 04 00       	mov    0x42800,%eax
   1884d:	89 c1                	mov    %eax,%ecx
   1884f:	a1 6c 22 03 00       	mov    0x3226c,%eax
   18854:	52                   	push   %edx
   18855:	51                   	push   %ecx
   18856:	50                   	push   %eax
   18857:	68 28 43 02 00       	push   $0x24328
   1885c:	e8 e5 03 ff ff       	call   8c46 <printk>
   18861:	83 c4 10             	add    $0x10,%esp
	if (MAJOR(ROOT_DEV) != 2)
   18864:	a1 cc 20 03 00       	mov    0x320cc,%eax
   18869:	c1 e8 08             	shr    $0x8,%eax
   1886c:	83 f8 02             	cmp    $0x2,%eax
   1886f:	0f 85 d0 01 00 00    	jne    18a45 <rd_load+0x226>
		return;
	// 然后读根文件系统的基本参数.即读软盘块256+1,256和256+2.这里block+1是指磁盘上的超级块.breada()用于读取指定的数据块,并标出还需要读的块,
	// 然后返回含有数据块的缓冲区指针.如果返回NULL,则表示数据块不可读(fs/buffer.c).然后把缓冲区中的磁盘超级块(d_super_block是磁盘超级
	// 块结构)复制到s变量中,并释放缓冲区.接着我们开始对超级块的有效性进行判断.超级块中文件系统魔数不对,则说明加载的数据块不是MINIX文件
	// 系统,于是退出.
	bh = breada(ROOT_DEV, block + 1, block, block + 2, -1);
   18875:	8b 44 24 78          	mov    0x78(%esp),%eax
   18879:	8d 48 02             	lea    0x2(%eax),%ecx
   1887c:	8b 44 24 78          	mov    0x78(%esp),%eax
   18880:	8d 50 01             	lea    0x1(%eax),%edx
   18883:	a1 cc 20 03 00       	mov    0x320cc,%eax
   18888:	83 ec 0c             	sub    $0xc,%esp
   1888b:	6a ff                	push   $0xffffffff
   1888d:	51                   	push   %ecx
   1888e:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
   18895:	52                   	push   %edx
   18896:	50                   	push   %eax
   18897:	e8 c7 6f ff ff       	call   f863 <breada>
   1889c:	83 c4 20             	add    $0x20,%esp
   1889f:	89 44 24 7c          	mov    %eax,0x7c(%esp)
	if (!bh) {
   188a3:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   188a8:	75 15                	jne    188bf <rd_load+0xa0>
		printk("Disk error while looking for ramdisk!\n");
   188aa:	83 ec 0c             	sub    $0xc,%esp
   188ad:	68 5c 43 02 00       	push   $0x2435c
   188b2:	e8 8f 03 ff ff       	call   8c46 <printk>
   188b7:	83 c4 10             	add    $0x10,%esp
		return;
   188ba:	e9 8a 01 00 00       	jmp    18a49 <rd_load+0x22a>
	}
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
   188bf:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   188c3:	8b 10                	mov    (%eax),%edx
   188c5:	89 e0                	mov    %esp,%eax
   188c7:	8b 0a                	mov    (%edx),%ecx
   188c9:	89 08                	mov    %ecx,(%eax)
   188cb:	8b 4a 04             	mov    0x4(%edx),%ecx
   188ce:	89 48 04             	mov    %ecx,0x4(%eax)
   188d1:	8b 4a 08             	mov    0x8(%edx),%ecx
   188d4:	89 48 08             	mov    %ecx,0x8(%eax)
   188d7:	8b 4a 0c             	mov    0xc(%edx),%ecx
   188da:	89 48 0c             	mov    %ecx,0xc(%eax)
   188dd:	8b 52 10             	mov    0x10(%edx),%edx
   188e0:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
   188e3:	83 ec 0c             	sub    $0xc,%esp
   188e6:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   188ed:	e8 5b 6d ff ff       	call   f64d <brelse>
   188f2:	83 c4 10             	add    $0x10,%esp
	if (s.s_magic != SUPER_MAGIC)
   188f5:	0f b7 44 24 10       	movzwl 0x10(%esp),%eax
   188fa:	66 3d 7f 13          	cmp    $0x137f,%ax
   188fe:	0f 85 44 01 00 00    	jne    18a48 <rd_load+0x229>
		return;
	// 然后我们试图把整个根文件系统读入在内存虚拟盘区中.对于一个文件系统来说,其超级块结构的s_nzones字段中保存着总逻辑块数(或称为区段数).一个
	// 逻辑块中含有的数据块数则由字段s_log_zone_size指定.因此文件系统中的数据块总数nblocks就等于(逻辑块数 *2^(每区段块数的次方)),即
	// nblocks=(s_nzones * 2^s_log_zone_size).如果遇到文件系统中数据块总数大于内存虚拟盘所能容纳的块数的情况,则不能执行加载操作,而只能显示
	// 出错信息并返回.
	nblocks = s.s_nzones << s.s_log_zone_size;
   18904:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   18909:	0f b7 d0             	movzwl %ax,%edx
   1890c:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   18911:	0f b7 c0             	movzwl %ax,%eax
   18914:	89 c1                	mov    %eax,%ecx
   18916:	d3 e2                	shl    %cl,%edx
   18918:	89 d0                	mov    %edx,%eax
   1891a:	89 44 24 70          	mov    %eax,0x70(%esp)
	if (nblocks > (rd_length >> BLOCK_SIZE_BITS)) {
   1891e:	a1 6c 22 03 00       	mov    0x3226c,%eax
   18923:	c1 f8 0a             	sar    $0xa,%eax
   18926:	39 44 24 70          	cmp    %eax,0x70(%esp)
   1892a:	7e 22                	jle    1894e <rd_load+0x12f>
		printk("Ram disk image too big!  (%d blocks, %d avail)\n",
   1892c:	a1 6c 22 03 00       	mov    0x3226c,%eax
   18931:	c1 f8 0a             	sar    $0xa,%eax
   18934:	83 ec 04             	sub    $0x4,%esp
   18937:	50                   	push   %eax
   18938:	ff 74 24 78          	pushl  0x78(%esp)
   1893c:	68 84 43 02 00       	push   $0x24384
   18941:	e8 00 03 ff ff       	call   8c46 <printk>
   18946:	83 c4 10             	add    $0x10,%esp
			nblocks, rd_length >> BLOCK_SIZE_BITS);
		return;
   18949:	e9 fb 00 00 00       	jmp    18a49 <rd_load+0x22a>
	}
	// 若虚拟盘能容纳得下文件系统总数据块数,则我们显示加载数据信息,并让cp指向内存虚拟盘起始处,然后开始执行循环操作将磁盘上根文件系统映像加载到
	// 虚拟盘上.在操作过程中,如果一次需要加载的盘块数大于2块,我们就是用超前预读函数breada(),否则就使用bread()函数进行单块读取.若在读盘过程
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
   1894e:	8b 44 24 70          	mov    0x70(%esp),%eax
   18952:	c1 e0 0a             	shl    $0xa,%eax
   18955:	83 ec 08             	sub    $0x8,%esp
   18958:	50                   	push   %eax
   18959:	68 b4 43 02 00       	push   $0x243b4
   1895e:	e8 e3 02 ff ff       	call   8c46 <printk>
   18963:	83 c4 10             	add    $0x10,%esp
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
   18966:	a1 00 28 04 00       	mov    0x42800,%eax
   1896b:	89 44 24 6c          	mov    %eax,0x6c(%esp)
	while (nblocks) {
   1896f:	e9 b7 00 00 00       	jmp    18a2b <rd_load+0x20c>
		if (nblocks > 2)  								// 若读取块数多于2块则采用超前预读.
   18974:	83 7c 24 70 02       	cmpl   $0x2,0x70(%esp)
   18979:	7e 30                	jle    189ab <rd_load+0x18c>
			bh = breada(ROOT_DEV, block, block + 1, block + 2, -1);
   1897b:	8b 44 24 78          	mov    0x78(%esp),%eax
   1897f:	8d 48 02             	lea    0x2(%eax),%ecx
   18982:	8b 44 24 78          	mov    0x78(%esp),%eax
   18986:	8d 50 01             	lea    0x1(%eax),%edx
   18989:	a1 cc 20 03 00       	mov    0x320cc,%eax
   1898e:	83 ec 0c             	sub    $0xc,%esp
   18991:	6a ff                	push   $0xffffffff
   18993:	51                   	push   %ecx
   18994:	52                   	push   %edx
   18995:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
   1899c:	50                   	push   %eax
   1899d:	e8 c1 6e ff ff       	call   f863 <breada>
   189a2:	83 c4 20             	add    $0x20,%esp
   189a5:	89 44 24 7c          	mov    %eax,0x7c(%esp)
   189a9:	eb 1c                	jmp    189c7 <rd_load+0x1a8>
		else											// 否则就单块读取.
			bh = bread(ROOT_DEV, block);
   189ab:	a1 cc 20 03 00       	mov    0x320cc,%eax
   189b0:	83 ec 08             	sub    $0x8,%esp
   189b3:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   189ba:	50                   	push   %eax
   189bb:	e8 e3 6c ff ff       	call   f6a3 <bread>
   189c0:	83 c4 10             	add    $0x10,%esp
   189c3:	89 44 24 7c          	mov    %eax,0x7c(%esp)
		if (!bh) {
   189c7:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   189cc:	75 19                	jne    189e7 <rd_load+0x1c8>
			printk("I/O error on block %d, aborting load\n",
   189ce:	83 ec 08             	sub    $0x8,%esp
   189d1:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   189d8:	68 dc 43 02 00       	push   $0x243dc
   189dd:	e8 64 02 ff ff       	call   8c46 <printk>
   189e2:	83 c4 10             	add    $0x10,%esp
				block);
			return;
   189e5:	eb 62                	jmp    18a49 <rd_load+0x22a>
		}
		(void) memcpy(cp, bh->b_data, BLOCK_SIZE);		// 复制到cp处.
   189e7:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   189eb:	8b 00                	mov    (%eax),%eax
   189ed:	83 ec 04             	sub    $0x4,%esp
   189f0:	68 00 04 00 00       	push   $0x400
   189f5:	50                   	push   %eax
   189f6:	ff 74 24 78          	pushl  0x78(%esp)
   189fa:	e8 82 fb ff ff       	call   18581 <memcpy>
   189ff:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   18a02:	83 ec 0c             	sub    $0xc,%esp
   18a05:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   18a0c:	e8 3c 6c ff ff       	call   f64d <brelse>
   18a11:	83 c4 10             	add    $0x10,%esp
		cp += BLOCK_SIZE;								// 虚拟盘指针前移.
   18a14:	81 44 24 6c 00 04 00 	addl   $0x400,0x6c(%esp)
   18a1b:	00 
		block++;
   18a1c:	83 44 24 78 01       	addl   $0x1,0x78(%esp)
		nblocks--;
   18a21:	83 6c 24 70 01       	subl   $0x1,0x70(%esp)
		i++;
   18a26:	83 44 24 74 01       	addl   $0x1,0x74(%esp)
	while (nblocks) {
   18a2b:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
   18a30:	0f 85 3e ff ff ff    	jne    18974 <rd_load+0x155>
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
   18a36:	c7 05 cc 20 03 00 01 	movl   $0x101,0x320cc
   18a3d:	01 00 00 
   18a40:	eb 07                	jmp    18a49 <rd_load+0x22a>
		return;
   18a42:	90                   	nop
   18a43:	eb 04                	jmp    18a49 <rd_load+0x22a>
		return;
   18a45:	90                   	nop
   18a46:	eb 01                	jmp    18a49 <rd_load+0x22a>
		return;
   18a48:	90                   	nop
}
   18a49:	81 c4 8c 00 00 00    	add    $0x8c,%esp
   18a4f:	c3                   	ret    

00018a50 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   18a50:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   18a51:	8b 44 24 08          	mov    0x8(%esp),%eax
   18a55:	64 8a 00             	mov    %fs:(%eax),%al
   18a58:	89 c3                	mov    %eax,%ebx
	return _v;
   18a5a:	89 d8                	mov    %ebx,%eax
}
   18a5c:	5b                   	pop    %ebx
   18a5d:	c3                   	ret    

00018a5e <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   18a5e:	83 ec 04             	sub    $0x4,%esp
   18a61:	8b 44 24 08          	mov    0x8(%esp),%eax
   18a65:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   18a68:	0f b6 04 24          	movzbl (%esp),%eax
   18a6c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   18a70:	64 88 02             	mov    %al,%fs:(%edx)
}
   18a73:	90                   	nop
   18a74:	83 c4 04             	add    $0x4,%esp
   18a77:	c3                   	ret    

00018a78 <change_console>:

// 改变前台控制台.
// 将前台控制台设定为指定的虚拟控制台
// 参数:new_console - 指定的新控制台号
void change_console(unsigned int new_console)
{
   18a78:	83 ec 0c             	sub    $0xc,%esp
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
   18a7b:	a1 80 22 03 00       	mov    0x32280,%eax
   18a80:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18a84:	74 4a                	je     18ad0 <change_console+0x58>
   18a86:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   18a8b:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18a8f:	73 3f                	jae    18ad0 <change_console+0x58>
		return;
	fg_console = new_console;
   18a91:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a95:	a3 80 22 03 00       	mov    %eax,0x32280
	table_list[0] = con_queues + 0 + fg_console * 3;
   18a9a:	a1 80 22 03 00       	mov    0x32280,%eax
   18a9f:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18aa5:	05 a0 22 03 00       	add    $0x322a0,%eax
   18aaa:	a3 24 f5 02 00       	mov    %eax,0x2f524
	table_list[1] = con_queues + 1 + fg_console * 3;
   18aaf:	a1 80 22 03 00       	mov    0x32280,%eax
   18ab4:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18aba:	05 10 04 00 00       	add    $0x410,%eax
   18abf:	05 a0 22 03 00       	add    $0x322a0,%eax
   18ac4:	a3 28 f5 02 00       	mov    %eax,0x2f528
	update_screen();
   18ac9:	e8 6d 48 00 00       	call   1d33b <update_screen>
   18ace:	eb 01                	jmp    18ad1 <change_console+0x59>
		return;
   18ad0:	90                   	nop
}
   18ad1:	83 c4 0c             	add    $0xc,%esp
   18ad4:	c3                   	ret    

00018ad5 <sleep_if_empty>:
// 如果队列缓冲区空则让进程进入可中断睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
   18ad5:	83 ec 0c             	sub    $0xc,%esp
	cli();
   18ad8:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18ad9:	eb 13                	jmp    18aee <sleep_if_empty+0x19>
		interruptible_sleep_on(&queue->proc_list);
   18adb:	8b 44 24 10          	mov    0x10(%esp),%eax
   18adf:	83 c0 0c             	add    $0xc,%eax
   18ae2:	83 ec 0c             	sub    $0xc,%esp
   18ae5:	50                   	push   %eax
   18ae6:	e8 30 e6 fe ff       	call   711b <interruptible_sleep_on>
   18aeb:	83 c4 10             	add    $0x10,%esp
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18aee:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18af3:	8b 50 0c             	mov    0xc(%eax),%edx
   18af6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18afb:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18b01:	f7 d0                	not    %eax
   18b03:	21 d0                	and    %edx,%eax
   18b05:	85 c0                	test   %eax,%eax
   18b07:	75 12                	jne    18b1b <sleep_if_empty+0x46>
   18b09:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b0d:	8b 50 04             	mov    0x4(%eax),%edx
   18b10:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b14:	8b 40 08             	mov    0x8(%eax),%eax
   18b17:	39 c2                	cmp    %eax,%edx
   18b19:	74 c0                	je     18adb <sleep_if_empty+0x6>
	sti();
   18b1b:	fb                   	sti    
}
   18b1c:	90                   	nop
   18b1d:	83 c4 0c             	add    $0xc,%esp
   18b20:	c3                   	ret    

00018b21 <sleep_if_full>:

// 若队列缓冲区满则让进程进入可中断的睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在往队列缓冲区中写入字符之前需要调用此函数判断队列的情况.
static void sleep_if_full(struct tty_queue * queue)
{
   18b21:	83 ec 0c             	sub    $0xc,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
   18b24:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b28:	8b 50 08             	mov    0x8(%eax),%edx
   18b2b:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b2f:	8b 40 04             	mov    0x4(%eax),%eax
   18b32:	29 c2                	sub    %eax,%edx
   18b34:	89 d0                	mov    %edx,%eax
   18b36:	83 e8 01             	sub    $0x1,%eax
   18b39:	25 ff 03 00 00       	and    $0x3ff,%eax
   18b3e:	85 c0                	test   %eax,%eax
   18b40:	75 53                	jne    18b95 <sleep_if_full+0x74>
		return;
	cli();
   18b42:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18b43:	eb 13                	jmp    18b58 <sleep_if_full+0x37>
		interruptible_sleep_on(&queue->proc_list);
   18b45:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b49:	83 c0 0c             	add    $0xc,%eax
   18b4c:	83 ec 0c             	sub    $0xc,%esp
   18b4f:	50                   	push   %eax
   18b50:	e8 c6 e5 fe ff       	call   711b <interruptible_sleep_on>
   18b55:	83 c4 10             	add    $0x10,%esp
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18b58:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18b5d:	8b 50 0c             	mov    0xc(%eax),%edx
   18b60:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   18b65:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18b6b:	f7 d0                	not    %eax
   18b6d:	21 d0                	and    %edx,%eax
   18b6f:	85 c0                	test   %eax,%eax
   18b71:	75 1f                	jne    18b92 <sleep_if_full+0x71>
   18b73:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b77:	8b 50 08             	mov    0x8(%eax),%edx
   18b7a:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b7e:	8b 40 04             	mov    0x4(%eax),%eax
   18b81:	29 c2                	sub    %eax,%edx
   18b83:	89 d0                	mov    %edx,%eax
   18b85:	83 e8 01             	sub    $0x1,%eax
   18b88:	25 ff 03 00 00       	and    $0x3ff,%eax
   18b8d:	83 f8 7f             	cmp    $0x7f,%eax
   18b90:	76 b3                	jbe    18b45 <sleep_if_full+0x24>
	sti();
   18b92:	fb                   	sti    
   18b93:	eb 01                	jmp    18b96 <sleep_if_full+0x75>
		return;
   18b95:	90                   	nop
}
   18b96:	83 c4 0c             	add    $0xc,%esp
   18b99:	c3                   	ret    

00018b9a <wait_for_keypress>:

// 等待按键.
// 如果前台控制台读队列缓冲区空,则让进程进入可中断睡眠状态.
void wait_for_keypress(void)
{
   18b9a:	83 ec 0c             	sub    $0xc,%esp
	sleep_if_empty(tty_table[fg_console].secondary);
   18b9d:	a1 80 22 03 00       	mov    0x32280,%eax
   18ba2:	c1 e0 06             	shl    $0x6,%eax
   18ba5:	05 5c 28 04 00       	add    $0x4285c,%eax
   18baa:	8b 00                	mov    (%eax),%eax
   18bac:	83 ec 0c             	sub    $0xc,%esp
   18baf:	50                   	push   %eax
   18bb0:	e8 20 ff ff ff       	call   18ad5 <sleep_if_empty>
   18bb5:	83 c4 10             	add    $0x10,%esp
}
   18bb8:	90                   	nop
   18bb9:	83 c4 0c             	add    $0xc,%esp
   18bbc:	c3                   	ret    

00018bbd <copy_to_cooked>:

// 复制成规范模式字符序列
// 根据终端termios结构中设置的各种标志,将指定tty同读队列缓冲区中的字符复制转换成规范模式(熟模式)字符并存放在辅助队列(规范模式队列)中.
// 参数:tty - 指定终端的tty结构指针.
void copy_to_cooked(struct tty_struct * tty)
{
   18bbd:	83 ec 1c             	sub    $0x1c,%esp
	signed char c;

	// 首先检查当前终端tty结构中缓冲队列指针是否有效.如果三个队列指针都是NULL,则说明内核tty初始化函数有问题.
	if (!(tty->read_q || tty->write_q || tty->secondary)) {
   18bc0:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bc4:	8b 40 34             	mov    0x34(%eax),%eax
   18bc7:	85 c0                	test   %eax,%eax
   18bc9:	75 2b                	jne    18bf6 <copy_to_cooked+0x39>
   18bcb:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bcf:	8b 40 38             	mov    0x38(%eax),%eax
   18bd2:	85 c0                	test   %eax,%eax
   18bd4:	75 20                	jne    18bf6 <copy_to_cooked+0x39>
   18bd6:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bda:	8b 40 3c             	mov    0x3c(%eax),%eax
   18bdd:	85 c0                	test   %eax,%eax
   18bdf:	75 15                	jne    18bf6 <copy_to_cooked+0x39>
		printk("copy_to_cooked: missing queues\n\r");
   18be1:	83 ec 0c             	sub    $0xc,%esp
   18be4:	68 20 44 02 00       	push   $0x24420
   18be9:	e8 58 00 ff ff       	call   8c46 <printk>
   18bee:	83 c4 10             	add    $0x10,%esp
		return;
   18bf1:	e9 36 07 00 00       	jmp    1932c <copy_to_cooked+0x76f>
	// 循环体中,如果此时读队列缓冲区已经取空或都辅助队列缓冲区已经放满字符,就退出循环体.否则程序就从读队列缓冲区尾指针处取一字符,并把尾指针前移
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
   18bf6:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bfa:	8b 40 34             	mov    0x34(%eax),%eax
   18bfd:	8b 50 04             	mov    0x4(%eax),%edx
   18c00:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c04:	8b 40 34             	mov    0x34(%eax),%eax
   18c07:	8b 40 08             	mov    0x8(%eax),%eax
   18c0a:	39 c2                	cmp    %eax,%edx
   18c0c:	0f 84 00 07 00 00    	je     19312 <copy_to_cooked+0x755>
			break;
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
   18c12:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c16:	8b 40 3c             	mov    0x3c(%eax),%eax
   18c19:	8b 50 08             	mov    0x8(%eax),%edx
   18c1c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c20:	8b 40 3c             	mov    0x3c(%eax),%eax
   18c23:	8b 40 04             	mov    0x4(%eax),%eax
   18c26:	29 c2                	sub    %eax,%edx
   18c28:	89 d0                	mov    %edx,%eax
   18c2a:	83 e8 01             	sub    $0x1,%eax
   18c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
   18c32:	85 c0                	test   %eax,%eax
   18c34:	0f 84 db 06 00 00    	je     19315 <copy_to_cooked+0x758>
			break;
		GETCH(tty->read_q, c);								// 取一字符到c,并前移尾指针
   18c3a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c3e:	8b 50 34             	mov    0x34(%eax),%edx
   18c41:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c45:	8b 40 34             	mov    0x34(%eax),%eax
   18c48:	8b 40 08             	mov    0x8(%eax),%eax
   18c4b:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   18c50:	88 44 24 0f          	mov    %al,0xf(%esp)
   18c54:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c58:	8b 40 34             	mov    0x34(%eax),%eax
   18c5b:	8b 40 08             	mov    0x8(%eax),%eax
   18c5e:	8d 50 01             	lea    0x1(%eax),%edx
   18c61:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c65:	8b 40 34             	mov    0x34(%eax),%eax
   18c68:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18c6e:	89 50 08             	mov    %edx,0x8(%eax)
		// 如果该字符是回车符CR(13),那么若回车换行转换行CRNL置位,则将字符转换为换行符NL(10).否则如果忽略回车标志NOCR置位,则忽略该字符,继续处理其他字符
		if (c == 13) {
   18c71:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   18c76:	75 2a                	jne    18ca2 <copy_to_cooked+0xe5>
			if (I_CRNL(tty))
   18c78:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c7c:	8b 00                	mov    (%eax),%eax
   18c7e:	25 00 01 00 00       	and    $0x100,%eax
   18c83:	85 c0                	test   %eax,%eax
   18c85:	74 07                	je     18c8e <copy_to_cooked+0xd1>
				c = 10;
   18c87:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   18c8c:	eb 2d                	jmp    18cbb <copy_to_cooked+0xfe>
			else if (I_NOCR(tty))
   18c8e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c92:	8b 00                	mov    (%eax),%eax
   18c94:	25 80 00 00 00       	and    $0x80,%eax
   18c99:	85 c0                	test   %eax,%eax
   18c9b:	74 1e                	je     18cbb <copy_to_cooked+0xfe>
				continue;
   18c9d:	e9 6b 06 00 00       	jmp    1930d <copy_to_cooked+0x750>
		// 如果字符是换行符NL(10),换行转回车标志NLCR置位,则将其转换为回车符CR(13).
		} else if (c == 10 && I_NLCR(tty))
   18ca2:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18ca7:	75 12                	jne    18cbb <copy_to_cooked+0xfe>
   18ca9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cad:	8b 00                	mov    (%eax),%eax
   18caf:	83 e0 40             	and    $0x40,%eax
   18cb2:	85 c0                	test   %eax,%eax
   18cb4:	74 05                	je     18cbb <copy_to_cooked+0xfe>
			c = 13;
   18cb6:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
		// 如果大写转小写输入标志UCLC置位,则将该字符转换为小写字符.
		if (I_UCLC(tty))
   18cbb:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cbf:	8b 00                	mov    (%eax),%eax
   18cc1:	25 00 02 00 00       	and    $0x200,%eax
   18cc6:	85 c0                	test   %eax,%eax
   18cc8:	74 40                	je     18d0a <copy_to_cooked+0x14d>
			c = tolower(c);
   18cca:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   18ccf:	a2 20 68 04 00       	mov    %al,0x46820
   18cd4:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18cdb:	0f be c0             	movsbl %al,%eax
   18cde:	83 c0 01             	add    $0x1,%eax
   18ce1:	05 a0 f5 02 00       	add    $0x2f5a0,%eax
   18ce6:	0f b6 00             	movzbl (%eax),%eax
   18ce9:	0f b6 c0             	movzbl %al,%eax
   18cec:	83 e0 01             	and    $0x1,%eax
   18cef:	85 c0                	test   %eax,%eax
   18cf1:	74 0c                	je     18cff <copy_to_cooked+0x142>
   18cf3:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18cfa:	83 c0 20             	add    $0x20,%eax
   18cfd:	eb 07                	jmp    18d06 <copy_to_cooked+0x149>
   18cff:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   18d06:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 字符(^D),则循环执行下列代码:
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
   18d0a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d0e:	8b 40 0c             	mov    0xc(%eax),%eax
   18d11:	83 e0 02             	and    $0x2,%eax
   18d14:	85 c0                	test   %eax,%eax
   18d16:	0f 84 9d 02 00 00    	je     18fb9 <copy_to_cooked+0x3fc>
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18d1c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d20:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18d24:	84 c0                	test   %al,%al
   18d26:	0f 84 43 01 00 00    	je     18e6f <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
   18d2c:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18d31:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d35:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18d39:	0f b6 c0             	movzbl %al,%eax
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18d3c:	39 c2                	cmp    %eax,%edx
   18d3e:	0f 85 2b 01 00 00    	jne    18e6f <copy_to_cooked+0x2b2>
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18d44:	e9 af 00 00 00       	jmp    18df8 <copy_to_cooked+0x23b>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
					if (L_ECHO(tty)) {						// 若本地回显标志置位
   18d49:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d4d:	8b 40 0c             	mov    0xc(%eax),%eax
   18d50:	83 e0 08             	and    $0x8,%eax
   18d53:	85 c0                	test   %eax,%eax
   18d55:	0f 84 80 00 00 00    	je     18ddb <copy_to_cooked+0x21e>
						if (c < 32)							// 控制字符要删2字节
   18d5b:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18d60:	7f 33                	jg     18d95 <copy_to_cooked+0x1d8>
							PUTCH(127, tty->write_q);
   18d62:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d66:	8b 50 38             	mov    0x38(%eax),%edx
   18d69:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d6d:	8b 40 38             	mov    0x38(%eax),%eax
   18d70:	8b 40 04             	mov    0x4(%eax),%eax
   18d73:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18d78:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d7c:	8b 40 38             	mov    0x38(%eax),%eax
   18d7f:	8b 40 04             	mov    0x4(%eax),%eax
   18d82:	8d 50 01             	lea    0x1(%eax),%edx
   18d85:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d89:	8b 40 38             	mov    0x38(%eax),%eax
   18d8c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d92:	89 50 04             	mov    %edx,0x4(%eax)
						PUTCH(127, tty->write_q);
   18d95:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d99:	8b 50 38             	mov    0x38(%eax),%edx
   18d9c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18da0:	8b 40 38             	mov    0x38(%eax),%eax
   18da3:	8b 40 04             	mov    0x4(%eax),%eax
   18da6:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18dab:	8b 44 24 20          	mov    0x20(%esp),%eax
   18daf:	8b 40 38             	mov    0x38(%eax),%eax
   18db2:	8b 40 04             	mov    0x4(%eax),%eax
   18db5:	8d 50 01             	lea    0x1(%eax),%edx
   18db8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dbc:	8b 40 38             	mov    0x38(%eax),%eax
   18dbf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18dc5:	89 50 04             	mov    %edx,0x4(%eax)
						tty->write(tty);
   18dc8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dcc:	8b 40 30             	mov    0x30(%eax),%eax
   18dcf:	83 ec 0c             	sub    $0xc,%esp
   18dd2:	ff 74 24 2c          	pushl  0x2c(%esp)
   18dd6:	ff d0                	call   *%eax
   18dd8:	83 c4 10             	add    $0x10,%esp
					}
					DEC(tty->secondary->head);
   18ddb:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ddf:	8b 40 3c             	mov    0x3c(%eax),%eax
   18de2:	8b 40 04             	mov    0x4(%eax),%eax
   18de5:	8d 50 ff             	lea    -0x1(%eax),%edx
   18de8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dec:	8b 40 3c             	mov    0x3c(%eax),%eax
   18def:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18df5:	89 50 04             	mov    %edx,0x4(%eax)
				while(!(EMPTY(tty->secondary) ||
   18df8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dfc:	8b 40 3c             	mov    0x3c(%eax),%eax
   18dff:	8b 50 04             	mov    0x4(%eax),%edx
   18e02:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e06:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e09:	8b 40 08             	mov    0x8(%eax),%eax
   18e0c:	39 c2                	cmp    %eax,%edx
   18e0e:	0f 84 ec 04 00 00    	je     19300 <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
   18e14:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e18:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e1b:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e1f:	8b 52 3c             	mov    0x3c(%edx),%edx
   18e22:	8b 52 04             	mov    0x4(%edx),%edx
   18e25:	83 ea 01             	sub    $0x1,%edx
   18e28:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e2e:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18e33:	88 44 24 0f          	mov    %al,0xf(%esp)
				while(!(EMPTY(tty->secondary) ||
   18e37:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18e3c:	0f 84 be 04 00 00    	je     19300 <copy_to_cooked+0x743>
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18e42:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e46:	0f b6 40 15          	movzbl 0x15(%eax),%eax
				while(!(EMPTY(tty->secondary) ||
   18e4a:	84 c0                	test   %al,%al
   18e4c:	0f 84 f7 fe ff ff    	je     18d49 <copy_to_cooked+0x18c>
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18e52:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18e57:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e5b:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18e5f:	0f b6 c0             	movzbl %al,%eax
   18e62:	39 c2                	cmp    %eax,%edx
   18e64:	0f 85 df fe ff ff    	jne    18d49 <copy_to_cooked+0x18c>
				}
				continue;									// 继续读取读队列中字符进行处理.
   18e6a:	e9 91 04 00 00       	jmp    19300 <copy_to_cooked+0x743>
			}
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
   18e6f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e73:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18e77:	84 c0                	test   %al,%al
   18e79:	0f 84 3a 01 00 00    	je     18fb9 <copy_to_cooked+0x3fc>
   18e7f:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18e84:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e88:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18e8c:	0f b6 c0             	movzbl %al,%eax
   18e8f:	39 c2                	cmp    %eax,%edx
   18e91:	0f 85 22 01 00 00    	jne    18fb9 <copy_to_cooked+0x3fc>
				if (EMPTY(tty->secondary) ||
   18e97:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e9b:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e9e:	8b 50 04             	mov    0x4(%eax),%edx
   18ea1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ea5:	8b 40 3c             	mov    0x3c(%eax),%eax
   18ea8:	8b 40 08             	mov    0x8(%eax),%eax
   18eab:	39 c2                	cmp    %eax,%edx
   18ead:	0f 84 53 04 00 00    	je     19306 <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
   18eb3:	8b 44 24 20          	mov    0x20(%esp),%eax
   18eb7:	8b 40 3c             	mov    0x3c(%eax),%eax
   18eba:	8b 54 24 20          	mov    0x20(%esp),%edx
   18ebe:	8b 52 3c             	mov    0x3c(%edx),%edx
   18ec1:	8b 52 04             	mov    0x4(%edx),%edx
   18ec4:	83 ea 01             	sub    $0x1,%edx
   18ec7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18ecd:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18ed2:	88 44 24 0f          	mov    %al,0xf(%esp)
				if (EMPTY(tty->secondary) ||
   18ed6:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18edb:	0f 84 25 04 00 00    	je     19306 <copy_to_cooked+0x749>
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18ee1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ee5:	0f b6 40 15          	movzbl 0x15(%eax),%eax
				   (c = LAST(tty->secondary)) == 10 ||
   18ee9:	84 c0                	test   %al,%al
   18eeb:	74 18                	je     18f05 <copy_to_cooked+0x348>
				    (c == EOF_CHAR(tty))))
   18eed:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18ef2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ef6:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18efa:	0f b6 c0             	movzbl %al,%eax
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18efd:	39 c2                	cmp    %eax,%edx
   18eff:	0f 84 01 04 00 00    	je     19306 <copy_to_cooked+0x749>
					continue;
				if (L_ECHO(tty)) {							// 若本地回显标志置位.
   18f05:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f09:	8b 40 0c             	mov    0xc(%eax),%eax
   18f0c:	83 e0 08             	and    $0x8,%eax
   18f0f:	85 c0                	test   %eax,%eax
   18f11:	0f 84 80 00 00 00    	je     18f97 <copy_to_cooked+0x3da>
					if (c < 32)
   18f17:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18f1c:	7f 33                	jg     18f51 <copy_to_cooked+0x394>
						PUTCH(127, tty->write_q);
   18f1e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f22:	8b 50 38             	mov    0x38(%eax),%edx
   18f25:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f29:	8b 40 38             	mov    0x38(%eax),%eax
   18f2c:	8b 40 04             	mov    0x4(%eax),%eax
   18f2f:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18f34:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f38:	8b 40 38             	mov    0x38(%eax),%eax
   18f3b:	8b 40 04             	mov    0x4(%eax),%eax
   18f3e:	8d 50 01             	lea    0x1(%eax),%edx
   18f41:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f45:	8b 40 38             	mov    0x38(%eax),%eax
   18f48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f4e:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(127, tty->write_q);
   18f51:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f55:	8b 50 38             	mov    0x38(%eax),%edx
   18f58:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f5c:	8b 40 38             	mov    0x38(%eax),%eax
   18f5f:	8b 40 04             	mov    0x4(%eax),%eax
   18f62:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18f67:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f6b:	8b 40 38             	mov    0x38(%eax),%eax
   18f6e:	8b 40 04             	mov    0x4(%eax),%eax
   18f71:	8d 50 01             	lea    0x1(%eax),%edx
   18f74:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f78:	8b 40 38             	mov    0x38(%eax),%eax
   18f7b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f81:	89 50 04             	mov    %edx,0x4(%eax)
					tty->write(tty);
   18f84:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f88:	8b 40 30             	mov    0x30(%eax),%eax
   18f8b:	83 ec 0c             	sub    $0xc,%esp
   18f8e:	ff 74 24 2c          	pushl  0x2c(%esp)
   18f92:	ff d0                	call   *%eax
   18f94:	83 c4 10             	add    $0x10,%esp
				}
				DEC(tty->secondary->head);
   18f97:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f9b:	8b 40 3c             	mov    0x3c(%eax),%eax
   18f9e:	8b 40 04             	mov    0x4(%eax),%eax
   18fa1:	8d 50 ff             	lea    -0x1(%eax),%edx
   18fa4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fa8:	8b 40 3c             	mov    0x3c(%eax),%eax
   18fab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18fb1:	89 50 04             	mov    %edx,0x4(%eax)
				continue;
   18fb4:	e9 54 03 00 00       	jmp    1930d <copy_to_cooked+0x750>
		// 如果设置了IXON标志,则使终端停止/开始输出控制字符起作用.如果没有设置此标志,那么停止和开始字符将被作为一般字符供进程读取.在这段代码中,如果读取的字符是停止
		// 字符STOP(^S),则置tty停止标志,让tty暂停输出.同时丢弃该特殊控制字符(不放入辅助队列中),并继续处理其他字符.如果字符是开始字符START(^Q),则复位tty停止
		// 标志,恢复tty输出.同时丢弃该控制字符,并继续处理其他字符.对于控制台来说,这里的tty->write()是console.c中的con_write()函数.因此对于伪终端也是由于设置
		// 了终端stopped标志而会暂停写操作(chr_drv/console.c).对于伪终端也是由于设置了终端stopped标志而会暂停写操作(chr_drv/pty.c).
		// 对于串行终端,也应该在发送终端过程中根据终端stopped标志暂停发送,但本版未实现.
		if (I_IXON(tty)) {
   18fb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fbd:	8b 00                	mov    (%eax),%eax
   18fbf:	25 00 04 00 00       	and    $0x400,%eax
   18fc4:	85 c0                	test   %eax,%eax
   18fc6:	0f 84 86 00 00 00    	je     19052 <copy_to_cooked+0x495>
			if ((STOP_CHAR(tty) != _POSIX_VDISABLE) && (c==STOP_CHAR(tty))) {
   18fcc:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fd0:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18fd4:	84 c0                	test   %al,%al
   18fd6:	74 37                	je     1900f <copy_to_cooked+0x452>
   18fd8:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18fdd:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fe1:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18fe5:	0f b6 c0             	movzbl %al,%eax
   18fe8:	39 c2                	cmp    %eax,%edx
   18fea:	75 23                	jne    1900f <copy_to_cooked+0x452>
				tty->stopped = 1;
   18fec:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ff0:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);
   18ff7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ffb:	8b 40 30             	mov    0x30(%eax),%eax
   18ffe:	83 ec 0c             	sub    $0xc,%esp
   19001:	ff 74 24 2c          	pushl  0x2c(%esp)
   19005:	ff d0                	call   *%eax
   19007:	83 c4 10             	add    $0x10,%esp
				continue;
   1900a:	e9 fe 02 00 00       	jmp    1930d <copy_to_cooked+0x750>
			}
			if ((START_CHAR(tty) != _POSIX_VDISABLE) && (c==START_CHAR(tty))) {
   1900f:	8b 44 24 20          	mov    0x20(%esp),%eax
   19013:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   19017:	84 c0                	test   %al,%al
   19019:	74 37                	je     19052 <copy_to_cooked+0x495>
   1901b:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19020:	8b 44 24 20          	mov    0x20(%esp),%eax
   19024:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   19028:	0f b6 c0             	movzbl %al,%eax
   1902b:	39 c2                	cmp    %eax,%edx
   1902d:	75 23                	jne    19052 <copy_to_cooked+0x495>
				tty->stopped = 0;
   1902f:	8b 44 24 20          	mov    0x20(%esp),%eax
   19033:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   1903a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1903e:	8b 40 30             	mov    0x30(%eax),%eax
   19041:	83 ec 0c             	sub    $0xc,%esp
   19044:	ff 74 24 2c          	pushl  0x2c(%esp)
   19048:	ff d0                	call   *%eax
   1904a:	83 c4 10             	add    $0x10,%esp
				continue;
   1904d:	e9 bb 02 00 00       	jmp    1930d <copy_to_cooked+0x750>
        }
		// 若输入模式标志集中ISIG标志置位,表示终端键盘可以产生信号,则在收到控制字符INTR,QUIT,SUSP或DSUSP时,需要为进程产生相应的信号.如果该字符是键盘中断符(^C),则向
		// 当前进程之进程组中所有进程发送键盘中断信号SIGINT,并继续处理下一字符.如果该字符是退出符(^\),则向当前进程之进程组中所有进程发送键盘退出信号SIGQUIT,并继续处理
		// 下一字符.如果字符是暂停符(^Z),则向当前进程发送暂停信息SIGTSTP.同样,若定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_ISIG(tty)) {
   19052:	8b 44 24 20          	mov    0x20(%esp),%eax
   19056:	8b 40 0c             	mov    0xc(%eax),%eax
   19059:	83 e0 01             	and    $0x1,%eax
   1905c:	85 c0                	test   %eax,%eax
   1905e:	0f 84 cf 00 00 00    	je     19133 <copy_to_cooked+0x576>
			if ((INTR_CHAR(tty) != _POSIX_VDISABLE) && (c==INTR_CHAR(tty))) {
   19064:	8b 44 24 20          	mov    0x20(%esp),%eax
   19068:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   1906c:	84 c0                	test   %al,%al
   1906e:	74 30                	je     190a0 <copy_to_cooked+0x4e3>
   19070:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19075:	8b 44 24 20          	mov    0x20(%esp),%eax
   19079:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   1907d:	0f b6 c0             	movzbl %al,%eax
   19080:	39 c2                	cmp    %eax,%edx
   19082:	75 1c                	jne    190a0 <copy_to_cooked+0x4e3>
				kill_pg(tty->pgrp, SIGINT, 1);
   19084:	8b 44 24 20          	mov    0x20(%esp),%eax
   19088:	8b 40 24             	mov    0x24(%eax),%eax
   1908b:	83 ec 04             	sub    $0x4,%esp
   1908e:	6a 01                	push   $0x1
   19090:	6a 02                	push   $0x2
   19092:	50                   	push   %eax
   19093:	e8 70 1a ff ff       	call   ab08 <kill_pg>
   19098:	83 c4 10             	add    $0x10,%esp
				continue;
   1909b:	e9 6d 02 00 00       	jmp    1930d <copy_to_cooked+0x750>
			}
			if ((QUIT_CHAR(tty) != _POSIX_VDISABLE) && (c==QUIT_CHAR(tty))) {
   190a0:	8b 44 24 20          	mov    0x20(%esp),%eax
   190a4:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   190a8:	84 c0                	test   %al,%al
   190aa:	74 30                	je     190dc <copy_to_cooked+0x51f>
   190ac:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   190b1:	8b 44 24 20          	mov    0x20(%esp),%eax
   190b5:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   190b9:	0f b6 c0             	movzbl %al,%eax
   190bc:	39 c2                	cmp    %eax,%edx
   190be:	75 1c                	jne    190dc <copy_to_cooked+0x51f>
				kill_pg(tty->pgrp, SIGQUIT, 1);
   190c0:	8b 44 24 20          	mov    0x20(%esp),%eax
   190c4:	8b 40 24             	mov    0x24(%eax),%eax
   190c7:	83 ec 04             	sub    $0x4,%esp
   190ca:	6a 01                	push   $0x1
   190cc:	6a 03                	push   $0x3
   190ce:	50                   	push   %eax
   190cf:	e8 34 1a ff ff       	call   ab08 <kill_pg>
   190d4:	83 c4 10             	add    $0x10,%esp
				continue;
   190d7:	e9 31 02 00 00       	jmp    1930d <copy_to_cooked+0x750>
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
   190dc:	8b 44 24 20          	mov    0x20(%esp),%eax
   190e0:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   190e4:	84 c0                	test   %al,%al
   190e6:	74 4b                	je     19133 <copy_to_cooked+0x576>
   190e8:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   190ed:	8b 44 24 20          	mov    0x20(%esp),%eax
   190f1:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   190f5:	0f b6 c0             	movzbl %al,%eax
   190f8:	39 c2                	cmp    %eax,%edx
   190fa:	75 37                	jne    19133 <copy_to_cooked+0x576>
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
   190fc:	8b 44 24 20          	mov    0x20(%esp),%eax
   19100:	8b 40 24             	mov    0x24(%eax),%eax
   19103:	83 ec 0c             	sub    $0xc,%esp
   19106:	50                   	push   %eax
   19107:	e8 c4 1b ff ff       	call   acd0 <is_orphaned_pgrp>
   1910c:	83 c4 10             	add    $0x10,%esp
   1910f:	85 c0                	test   %eax,%eax
   19111:	0f 85 f5 01 00 00    	jne    1930c <copy_to_cooked+0x74f>
					kill_pg(tty->pgrp, SIGTSTP, 1);
   19117:	8b 44 24 20          	mov    0x20(%esp),%eax
   1911b:	8b 40 24             	mov    0x24(%eax),%eax
   1911e:	83 ec 04             	sub    $0x4,%esp
   19121:	6a 01                	push   $0x1
   19123:	6a 14                	push   $0x14
   19125:	50                   	push   %eax
   19126:	e8 dd 19 ff ff       	call   ab08 <kill_pg>
   1912b:	83 c4 10             	add    $0x10,%esp
				continue;
   1912e:	e9 d9 01 00 00       	jmp    1930c <copy_to_cooked+0x74f>
			}
		}
		// 如果该字符是换行符NL(10),或者是文件结束符EOF(4,^D),表示一行字符已处理完,则把辅助缓冲队列中当前含有字符行数值secondar.data增1.如果在函数tty_read()中取走一行
		// 字符,该值即会减1.
		if (c == 10 || (EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)))
   19133:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   19138:	74 20                	je     1915a <copy_to_cooked+0x59d>
   1913a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1913e:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19142:	84 c0                	test   %al,%al
   19144:	74 22                	je     19168 <copy_to_cooked+0x5ab>
   19146:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   1914b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1914f:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19153:	0f b6 c0             	movzbl %al,%eax
   19156:	39 c2                	cmp    %eax,%edx
   19158:	75 0e                	jne    19168 <copy_to_cooked+0x5ab>
			tty->secondary->data++;
   1915a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1915e:	8b 40 3c             	mov    0x3c(%eax),%eax
   19161:	8b 10                	mov    (%eax),%edx
   19163:	83 c2 01             	add    $0x1,%edx
   19166:	89 10                	mov    %edx,(%eax)
		// 如果本地模式标志中回显标志ECHO在置位状态,那么,如果字符是换行符NL(10),则将换行符NL(10)和回车符(13)放入tty写队列缓冲区中;如果字符是控制字符(值<32)并且回显控制
		// 字符标志ECHOCTL置位,则将字符'^'和字符c+64放入tty写队列中(也即会显示^C,^H等);否则将该字符直接放入tty写缓冲队列中.最后调用该tty写操作函数.
		if (L_ECHO(tty)) {
   19168:	8b 44 24 20          	mov    0x20(%esp),%eax
   1916c:	8b 40 0c             	mov    0xc(%eax),%eax
   1916f:	83 e0 08             	and    $0x8,%eax
   19172:	85 c0                	test   %eax,%eax
   19174:	0f 84 4a 01 00 00    	je     192c4 <copy_to_cooked+0x707>
			if (c == 10) {
   1917a:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1917f:	75 6b                	jne    191ec <copy_to_cooked+0x62f>
				PUTCH(10, tty->write_q);
   19181:	8b 44 24 20          	mov    0x20(%esp),%eax
   19185:	8b 50 38             	mov    0x38(%eax),%edx
   19188:	8b 44 24 20          	mov    0x20(%esp),%eax
   1918c:	8b 40 38             	mov    0x38(%eax),%eax
   1918f:	8b 40 04             	mov    0x4(%eax),%eax
   19192:	c6 44 02 10 0a       	movb   $0xa,0x10(%edx,%eax,1)
   19197:	8b 44 24 20          	mov    0x20(%esp),%eax
   1919b:	8b 40 38             	mov    0x38(%eax),%eax
   1919e:	8b 40 04             	mov    0x4(%eax),%eax
   191a1:	8d 50 01             	lea    0x1(%eax),%edx
   191a4:	8b 44 24 20          	mov    0x20(%esp),%eax
   191a8:	8b 40 38             	mov    0x38(%eax),%eax
   191ab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   191b1:	89 50 04             	mov    %edx,0x4(%eax)
				PUTCH(13, tty->write_q);
   191b4:	8b 44 24 20          	mov    0x20(%esp),%eax
   191b8:	8b 50 38             	mov    0x38(%eax),%edx
   191bb:	8b 44 24 20          	mov    0x20(%esp),%eax
   191bf:	8b 40 38             	mov    0x38(%eax),%eax
   191c2:	8b 40 04             	mov    0x4(%eax),%eax
   191c5:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   191ca:	8b 44 24 20          	mov    0x20(%esp),%eax
   191ce:	8b 40 38             	mov    0x38(%eax),%eax
   191d1:	8b 40 04             	mov    0x4(%eax),%eax
   191d4:	8d 50 01             	lea    0x1(%eax),%edx
   191d7:	8b 44 24 20          	mov    0x20(%esp),%eax
   191db:	8b 40 38             	mov    0x38(%eax),%eax
   191de:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   191e4:	89 50 04             	mov    %edx,0x4(%eax)
   191e7:	e9 c5 00 00 00       	jmp    192b1 <copy_to_cooked+0x6f4>
			} else if (c < 32) {
   191ec:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   191f1:	0f 8f 83 00 00 00    	jg     1927a <copy_to_cooked+0x6bd>
				if (L_ECHOCTL(tty)) {
   191f7:	8b 44 24 20          	mov    0x20(%esp),%eax
   191fb:	8b 40 0c             	mov    0xc(%eax),%eax
   191fe:	25 00 02 00 00       	and    $0x200,%eax
   19203:	85 c0                	test   %eax,%eax
   19205:	0f 84 a6 00 00 00    	je     192b1 <copy_to_cooked+0x6f4>
					PUTCH('^', tty->write_q);
   1920b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1920f:	8b 50 38             	mov    0x38(%eax),%edx
   19212:	8b 44 24 20          	mov    0x20(%esp),%eax
   19216:	8b 40 38             	mov    0x38(%eax),%eax
   19219:	8b 40 04             	mov    0x4(%eax),%eax
   1921c:	c6 44 02 10 5e       	movb   $0x5e,0x10(%edx,%eax,1)
   19221:	8b 44 24 20          	mov    0x20(%esp),%eax
   19225:	8b 40 38             	mov    0x38(%eax),%eax
   19228:	8b 40 04             	mov    0x4(%eax),%eax
   1922b:	8d 50 01             	lea    0x1(%eax),%edx
   1922e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19232:	8b 40 38             	mov    0x38(%eax),%eax
   19235:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1923b:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(c + 64, tty->write_q);
   1923e:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   19243:	8d 48 40             	lea    0x40(%eax),%ecx
   19246:	8b 44 24 20          	mov    0x20(%esp),%eax
   1924a:	8b 50 38             	mov    0x38(%eax),%edx
   1924d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19251:	8b 40 38             	mov    0x38(%eax),%eax
   19254:	8b 40 04             	mov    0x4(%eax),%eax
   19257:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1925b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1925f:	8b 40 38             	mov    0x38(%eax),%eax
   19262:	8b 40 04             	mov    0x4(%eax),%eax
   19265:	8d 50 01             	lea    0x1(%eax),%edx
   19268:	8b 44 24 20          	mov    0x20(%esp),%eax
   1926c:	8b 40 38             	mov    0x38(%eax),%eax
   1926f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19275:	89 50 04             	mov    %edx,0x4(%eax)
   19278:	eb 37                	jmp    192b1 <copy_to_cooked+0x6f4>
				}
			} else
				PUTCH(c, tty->write_q);
   1927a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1927e:	8b 50 38             	mov    0x38(%eax),%edx
   19281:	8b 44 24 20          	mov    0x20(%esp),%eax
   19285:	8b 40 38             	mov    0x38(%eax),%eax
   19288:	8b 40 04             	mov    0x4(%eax),%eax
   1928b:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19290:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19294:	8b 44 24 20          	mov    0x20(%esp),%eax
   19298:	8b 40 38             	mov    0x38(%eax),%eax
   1929b:	8b 40 04             	mov    0x4(%eax),%eax
   1929e:	8d 50 01             	lea    0x1(%eax),%edx
   192a1:	8b 44 24 20          	mov    0x20(%esp),%eax
   192a5:	8b 40 38             	mov    0x38(%eax),%eax
   192a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   192ae:	89 50 04             	mov    %edx,0x4(%eax)
			tty->write(tty);
   192b1:	8b 44 24 20          	mov    0x20(%esp),%eax
   192b5:	8b 40 30             	mov    0x30(%eax),%eax
   192b8:	83 ec 0c             	sub    $0xc,%esp
   192bb:	ff 74 24 2c          	pushl  0x2c(%esp)
   192bf:	ff d0                	call   *%eax
   192c1:	83 c4 10             	add    $0x10,%esp
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
   192c4:	8b 44 24 20          	mov    0x20(%esp),%eax
   192c8:	8b 50 3c             	mov    0x3c(%eax),%edx
   192cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   192cf:	8b 40 3c             	mov    0x3c(%eax),%eax
   192d2:	8b 40 04             	mov    0x4(%eax),%eax
   192d5:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   192da:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   192de:	8b 44 24 20          	mov    0x20(%esp),%eax
   192e2:	8b 40 3c             	mov    0x3c(%eax),%eax
   192e5:	8b 40 04             	mov    0x4(%eax),%eax
   192e8:	8d 50 01             	lea    0x1(%eax),%edx
   192eb:	8b 44 24 20          	mov    0x20(%esp),%eax
   192ef:	8b 40 3c             	mov    0x3c(%eax),%eax
   192f2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   192f8:	89 50 04             	mov    %edx,0x4(%eax)
   192fb:	e9 f6 f8 ff ff       	jmp    18bf6 <copy_to_cooked+0x39>
				continue;									// 继续读取读队列中字符进行处理.
   19300:	90                   	nop
   19301:	e9 f0 f8 ff ff       	jmp    18bf6 <copy_to_cooked+0x39>
					continue;
   19306:	90                   	nop
   19307:	e9 ea f8 ff ff       	jmp    18bf6 <copy_to_cooked+0x39>
				continue;
   1930c:	90                   	nop
		if (EMPTY(tty->read_q))
   1930d:	e9 e4 f8 ff ff       	jmp    18bf6 <copy_to_cooked+0x39>
			break;
   19312:	90                   	nop
   19313:	eb 01                	jmp    19316 <copy_to_cooked+0x759>
			break;
   19315:	90                   	nop
    }
	// 在退出循环体后唤醒等待该辅助缓冲队列的进程(如果有的话).
	wake_up(&tty->secondary->proc_list);
   19316:	8b 44 24 20          	mov    0x20(%esp),%eax
   1931a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1931d:	83 c0 0c             	add    $0xc,%eax
   19320:	83 ec 0c             	sub    $0xc,%esp
   19323:	50                   	push   %eax
   19324:	e8 24 de fe ff       	call   714d <wake_up>
   19329:	83 c4 10             	add    $0x10,%esp
}
   1932c:	83 c4 1c             	add    $0x1c,%esp
   1932f:	c3                   	ret    

00019330 <tty_signal>:
 */
// 向使用终端的进程组中所有进程发送信号。
// 在后台进程组中的一个进程访问控制终端时，该函数用于向后台进程组中的所有进程发送SIGTTIN或SIGTTOU信号。无论后台进程组
// 中的进程是否已经阻塞或忽略掉了这两个信号，当前进程都将立刻退出读写操作而返回。
int tty_signal(int sig, struct tty_struct *tty)
{
   19330:	53                   	push   %ebx
   19331:	83 ec 08             	sub    $0x8,%esp
	// 我们不希望停止一个孤儿进程组的进程（参见文件kernel/exit.c的说明）。
	// 因此如果当前进程组是孤儿进程组，就出错返回。否则就向当前进程组所有进程发送指定信号。
	if (is_orphaned_pgrp(current->pgrp))
   19334:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19339:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1933f:	83 ec 0c             	sub    $0xc,%esp
   19342:	50                   	push   %eax
   19343:	e8 88 19 ff ff       	call   acd0 <is_orphaned_pgrp>
   19348:	83 c4 10             	add    $0x10,%esp
   1934b:	85 c0                	test   %eax,%eax
   1934d:	74 0a                	je     19359 <tty_signal+0x29>
		return -EIO;									/* don't stop an orphaned pgrp */
   1934f:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19354:	e9 88 00 00 00       	jmp    193e1 <tty_signal+0xb1>
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
   19359:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1935e:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19364:	83 ec 04             	sub    $0x4,%esp
   19367:	6a 01                	push   $0x1
   19369:	ff 74 24 18          	pushl  0x18(%esp)
   1936d:	50                   	push   %eax
   1936e:	e8 95 17 ff ff       	call   ab08 <kill_pg>
   19373:	83 c4 10             	add    $0x10,%esp
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   19376:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1937b:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   19381:	8b 54 24 10          	mov    0x10(%esp),%edx
   19385:	83 ea 01             	sub    $0x1,%edx
   19388:	bb 01 00 00 00       	mov    $0x1,%ebx
   1938d:	89 d1                	mov    %edx,%ecx
   1938f:	d3 e3                	shl    %cl,%ebx
   19391:	89 da                	mov    %ebx,%edx
   19393:	21 d0                	and    %edx,%eax
   19395:	85 c0                	test   %eax,%eax
   19397:	75 1b                	jne    193b4 <tty_signal+0x84>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
   19399:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1939e:	8b 54 24 10          	mov    0x10(%esp),%edx
   193a2:	83 ea 01             	sub    $0x1,%edx
   193a5:	83 c2 01             	add    $0x1,%edx
   193a8:	c1 e2 04             	shl    $0x4,%edx
   193ab:	01 d0                	add    %edx,%eax
   193ad:	8b 00                	mov    (%eax),%eax
	if ((current->blocked & (1 << (sig - 1))) ||
   193af:	83 f8 01             	cmp    $0x1,%eax
   193b2:	75 07                	jne    193bb <tty_signal+0x8b>
		return -EIO;		/* Our signal will be ignored */
   193b4:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   193b9:	eb 26                	jmp    193e1 <tty_signal+0xb1>
	else if (current->sigaction[sig-1].sa_handler)
   193bb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   193c0:	8b 54 24 10          	mov    0x10(%esp),%edx
   193c4:	83 ea 01             	sub    $0x1,%edx
   193c7:	83 c2 01             	add    $0x1,%edx
   193ca:	c1 e2 04             	shl    $0x4,%edx
   193cd:	01 d0                	add    %edx,%eax
   193cf:	8b 00                	mov    (%eax),%eax
   193d1:	85 c0                	test   %eax,%eax
   193d3:	74 07                	je     193dc <tty_signal+0xac>
		return -EINTR;		/* We _will_ be interrupted :-) */
   193d5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   193da:	eb 05                	jmp    193e1 <tty_signal+0xb1>
	else
		return -ERESTARTSYS;	/* We _will_ be interrupted :-) */
   193dc:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
					/* (but restart after we continue) */
}
   193e1:	83 c4 08             	add    $0x8,%esp
   193e4:	5b                   	pop    %ebx
   193e5:	c3                   	ret    

000193e6 <tty_read>:

// tty读函数。
// 从终端辅助缓冲队列读取指定数量的字符，放到用户指定的缓冲区中。
// 参数：channel - 子设备号；buf - 用户缓冲区指针；nr - 欲读字节数。
int tty_read(unsigned channel, char * buf, int nr)
{
   193e6:	83 ec 2c             	sub    $0x2c,%esp
	struct tty_struct * tty;
	struct tty_struct * other_tty = NULL;
   193e9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   193f0:	00 
	char c, *b = buf;
   193f1:	8b 44 24 34          	mov    0x34(%esp),%eax
   193f5:	89 44 24 18          	mov    %eax,0x18(%esp)
	int minimum, time;

	// 首先判断参数有效性并取终端的tty结构指针。如果tty终端的三个缓冲队列指针都是NULL，则返回EIO出错信息。如果tty
	// 终端是一个伪终端，则再取得另一个对应伪终端的tty结构other_tty。
	if (channel > 255)
   193f9:	81 7c 24 30 ff 00 00 	cmpl   $0xff,0x30(%esp)
   19400:	00 
   19401:	76 0a                	jbe    1940d <tty_read+0x27>
		return -EIO;
   19403:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19408:	e9 10 04 00 00       	jmp    1981d <tty_read+0x437>
	tty = TTY_TABLE(channel);
   1940d:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
   19412:	74 28                	je     1943c <tty_read+0x56>
   19414:	83 7c 24 30 3f       	cmpl   $0x3f,0x30(%esp)
   19419:	77 13                	ja     1942e <tty_read+0x48>
   1941b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1941f:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   19424:	c1 e0 06             	shl    $0x6,%eax
   19427:	05 20 28 04 00       	add    $0x42820,%eax
   1942c:	eb 1b                	jmp    19449 <tty_read+0x63>
   1942e:	8b 44 24 30          	mov    0x30(%esp),%eax
   19432:	c1 e0 06             	shl    $0x6,%eax
   19435:	05 20 28 04 00       	add    $0x42820,%eax
   1943a:	eb 0d                	jmp    19449 <tty_read+0x63>
   1943c:	a1 80 22 03 00       	mov    0x32280,%eax
   19441:	c1 e0 06             	shl    $0x6,%eax
   19444:	05 20 28 04 00       	add    $0x42820,%eax
   19449:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   1944d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19451:	8b 40 38             	mov    0x38(%eax),%eax
   19454:	85 c0                	test   %eax,%eax
   19456:	75 20                	jne    19478 <tty_read+0x92>
   19458:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1945c:	8b 40 34             	mov    0x34(%eax),%eax
   1945f:	85 c0                	test   %eax,%eax
   19461:	75 15                	jne    19478 <tty_read+0x92>
   19463:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19467:	8b 40 3c             	mov    0x3c(%eax),%eax
   1946a:	85 c0                	test   %eax,%eax
   1946c:	75 0a                	jne    19478 <tty_read+0x92>
		return -EIO;
   1946e:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19473:	e9 a5 03 00 00       	jmp    1981d <tty_read+0x437>
	// 如果当前进程使用的是这里正在处理的tty终端，但该终端的进程组号却与当前进程组号不同，表示当前进程是后台进程组中
	// 的一个进程，即进程不在前台。于是我们要停止当前进程组的所有进程。因此这里就需要向当前进程组发送SIGTTIN信号，
	// 并返回等待成为前台进程组后再执行读操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp))
   19478:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1947d:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   19483:	39 44 24 30          	cmp    %eax,0x30(%esp)
   19487:	75 2c                	jne    194b5 <tty_read+0xcf>
   19489:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1948d:	8b 50 24             	mov    0x24(%eax),%edx
   19490:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19495:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1949b:	39 c2                	cmp    %eax,%edx
   1949d:	74 16                	je     194b5 <tty_read+0xcf>
		return(tty_signal(SIGTTIN, tty));
   1949f:	83 ec 08             	sub    $0x8,%esp
   194a2:	ff 74 24 14          	pushl  0x14(%esp)
   194a6:	6a 15                	push   $0x15
   194a8:	e8 83 fe ff ff       	call   19330 <tty_signal>
   194ad:	83 c4 10             	add    $0x10,%esp
   194b0:	e9 68 03 00 00       	jmp    1981d <tty_read+0x437>
	// 如果当前终端是伪终端，那么对应的另一个伪终端就是other_tty。若这里tty是主伪终端，那么other_tty就是对应的从伪
	// 终端，反之亦然。
	if (channel & 0x80)
   194b5:	8b 44 24 30          	mov    0x30(%esp),%eax
   194b9:	25 80 00 00 00       	and    $0x80,%eax
   194be:	85 c0                	test   %eax,%eax
   194c0:	74 13                	je     194d5 <tty_read+0xef>
		other_tty = tty_table + (channel ^ 0x40);
   194c2:	8b 44 24 30          	mov    0x30(%esp),%eax
   194c6:	83 f0 40             	xor    $0x40,%eax
   194c9:	c1 e0 06             	shl    $0x6,%eax
   194cc:	05 20 28 04 00       	add    $0x42820,%eax
   194d1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后根据VTIME和VMIN对应的控制字符数组值设置读字符操作超时定时值time和最少需要读取的字符个数minimum。在非规范
	// 模式下，这两个是超时定时值。VMIN表示为了满足读操作而需要读取的最少字符个数。VTIME是一个1/10秒计数计时值。
	time = 10L * tty->termios.c_cc[VTIME];            				// 设置读操作超时定时值。
   194d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194d9:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   194dd:	0f b6 d0             	movzbl %al,%edx
   194e0:	89 d0                	mov    %edx,%eax
   194e2:	c1 e0 02             	shl    $0x2,%eax
   194e5:	01 d0                	add    %edx,%eax
   194e7:	01 c0                	add    %eax,%eax
   194e9:	89 44 24 10          	mov    %eax,0x10(%esp)
	minimum = tty->termios.c_cc[VMIN];              				// 最少需要读取的字符个数。
   194ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194f1:	0f b6 40 17          	movzbl 0x17(%eax),%eax
   194f5:	0f b6 c0             	movzbl %al,%eax
   194f8:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 定时值为无限大，以让进程先读取辅助队列中已有字符。如果读到的字符数不足minimum的话，后面代码会根据指定的超时值time
	// 来设置进程的读超时值timeout，并会等待读取其余字符。若此时没有设置最少读取字符数minimum（为0），则将其设置为进程
	// 欲读字符数nr，并且如果设置了超时定时值time的话，就把进程读字符超时定时值timeout设置为系统当前时间值+指定的超时
	// 值time，同时复位time。另外，如果以上设置的最少读取字符数minimum大于进程欲读取的字符数nr，则让minimum=nr。即对
	// 于规范模式下的读取操作，它不受VTIME和VMIN对应控制字符值的约束和控制，它们仅在非规范模式（生模式）操作中起作用。
	if (L_CANON(tty)) {
   194fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19500:	8b 40 0c             	mov    0xc(%eax),%eax
   19503:	83 e0 02             	and    $0x2,%eax
   19506:	85 c0                	test   %eax,%eax
   19508:	74 21                	je     1952b <tty_read+0x145>
		minimum = nr;
   1950a:	8b 44 24 38          	mov    0x38(%esp),%eax
   1950e:	89 44 24 14          	mov    %eax,0x14(%esp)
		current->timeout = 0xffffffff;
   19512:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19517:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   1951e:	ff ff ff 
		time = 0;
   19521:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   19528:	00 
   19529:	eb 46                	jmp    19571 <tty_read+0x18b>
	} else if (minimum)
   1952b:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   19530:	74 11                	je     19543 <tty_read+0x15d>
		current->timeout = 0xffffffff;
   19532:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19537:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   1953e:	ff ff ff 
   19541:	eb 2e                	jmp    19571 <tty_read+0x18b>
	else {
		minimum = nr;
   19543:	8b 44 24 38          	mov    0x38(%esp),%eax
   19547:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (time)
   1954b:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   19550:	74 17                	je     19569 <tty_read+0x183>
			current->timeout = time + jiffies;
   19552:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   19556:	8b 15 00 fb 02 00    	mov    0x2fb00,%edx
   1955c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19561:	01 ca                	add    %ecx,%edx
   19563:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		time = 0;
   19569:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   19570:	00 
	}
	if (minimum > nr)
   19571:	8b 44 24 14          	mov    0x14(%esp),%eax
   19575:	3b 44 24 38          	cmp    0x38(%esp),%eax
   19579:	0f 8e 47 02 00 00    	jle    197c6 <tty_read+0x3e0>
		minimum = nr;           									// 最多读取要求的字符数。
   1957f:	8b 44 24 38          	mov    0x38(%esp),%eax
   19583:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   19587:	e9 3a 02 00 00       	jmp    197c6 <tty_read+0x3e0>
		if (other_tty)
   1958c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   19591:	74 13                	je     195a6 <tty_read+0x1c0>
			other_tty->write(other_tty);
   19593:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   19597:	8b 40 30             	mov    0x30(%eax),%eax
   1959a:	83 ec 0c             	sub    $0xc,%esp
   1959d:	ff 74 24 28          	pushl  0x28(%esp)
   195a1:	ff d0                	call   *%eax
   195a3:	83 c4 10             	add    $0x10,%esp
		// 如果tty辅助缓冲队列为空，或者设置了规范模式标志并且tty读队列缓冲区未满，并且辅助队列中字符行数为0,那么，如果没
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
   195a6:	fa                   	cli    
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   195a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195ab:	8b 40 3c             	mov    0x3c(%eax),%eax
   195ae:	8b 50 04             	mov    0x4(%eax),%edx
   195b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195b5:	8b 40 3c             	mov    0x3c(%eax),%eax
   195b8:	8b 40 08             	mov    0x8(%eax),%eax
   195bb:	39 c2                	cmp    %eax,%edx
   195bd:	74 43                	je     19602 <tty_read+0x21c>
   195bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195c3:	8b 40 0c             	mov    0xc(%eax),%eax
   195c6:	83 e0 02             	and    $0x2,%eax
   195c9:	85 c0                	test   %eax,%eax
   195cb:	0f 84 9f 00 00 00    	je     19670 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   195d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195d5:	8b 40 34             	mov    0x34(%eax),%eax
   195d8:	8b 50 08             	mov    0x8(%eax),%edx
   195db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195df:	8b 40 34             	mov    0x34(%eax),%eax
   195e2:	8b 40 04             	mov    0x4(%eax),%eax
   195e5:	29 c2                	sub    %eax,%edx
   195e7:	89 d0                	mov    %edx,%eax
   195e9:	83 e8 01             	sub    $0x1,%eax
   195ec:	25 ff 03 00 00       	and    $0x3ff,%eax
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   195f1:	85 c0                	test   %eax,%eax
   195f3:	74 7b                	je     19670 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   195f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195f9:	8b 40 3c             	mov    0x3c(%eax),%eax
   195fc:	8b 00                	mov    (%eax),%eax
   195fe:	85 c0                	test   %eax,%eax
   19600:	75 6e                	jne    19670 <tty_read+0x28a>
			if (!current->timeout ||
   19602:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19607:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   1960d:	85 c0                	test   %eax,%eax
   1960f:	74 1b                	je     1962c <tty_read+0x246>
			  (current->signal & ~current->blocked)) {
   19611:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19616:	8b 50 0c             	mov    0xc(%eax),%edx
   19619:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1961e:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   19624:	f7 d0                	not    %eax
   19626:	21 d0                	and    %edx,%eax
			if (!current->timeout ||
   19628:	85 c0                	test   %eax,%eax
   1962a:	74 06                	je     19632 <tty_read+0x24c>
			  	sti();
   1962c:	fb                   	sti    
				break;
   1962d:	e9 a2 01 00 00       	jmp    197d4 <tty_read+0x3ee>
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
   19632:	8b 44 24 30          	mov    0x30(%esp),%eax
   19636:	25 c0 00 00 00       	and    $0xc0,%eax
   1963b:	3d c0 00 00 00       	cmp    $0xc0,%eax
   19640:	75 12                	jne    19654 <tty_read+0x26e>
   19642:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   19646:	8b 40 08             	mov    0x8(%eax),%eax
   19649:	83 e0 0f             	and    $0xf,%eax
   1964c:	85 c0                	test   %eax,%eax
   1964e:	0f 84 7f 01 00 00    	je     197d3 <tty_read+0x3ed>
				break;
			interruptible_sleep_on(&tty->secondary->proc_list);
   19654:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19658:	8b 40 3c             	mov    0x3c(%eax),%eax
   1965b:	83 c0 0c             	add    $0xc,%eax
   1965e:	83 ec 0c             	sub    $0xc,%esp
   19661:	50                   	push   %eax
   19662:	e8 b4 da fe ff       	call   711b <interruptible_sleep_on>
   19667:	83 c4 10             	add    $0x10,%esp
			sti();
   1966a:	fb                   	sti    
			continue;
   1966b:	e9 56 01 00 00       	jmp    197c6 <tty_read+0x3e0>
		}
		sti();
   19670:	fb                   	sti    
		// 现在还没有遇到文件结束符或者正处于原始（非规范）模式。在这种模式中用户以字符流作为读取对象，也不识别其中的控制字符
		// （如文件结束符）。于是将字符直接放入用户数据缓冲区buf中，并把欲读字符数减1.此时如果欲读字符数已为0则中断循环。另外
		// 如果终端处于规范模式并且读取的字符是换行符NL（10），则也退出循环。除此之外，只要还没有取完欲读字符数nr并且辅助队列
		// 不空，就继续取队列中的字符。
		do {
			GETCH(tty->secondary, c);
   19671:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19675:	8b 50 3c             	mov    0x3c(%eax),%edx
   19678:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1967c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1967f:	8b 40 08             	mov    0x8(%eax),%eax
   19682:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   19687:	88 44 24 0b          	mov    %al,0xb(%esp)
   1968b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1968f:	8b 40 3c             	mov    0x3c(%eax),%eax
   19692:	8b 40 08             	mov    0x8(%eax),%eax
   19695:	8d 50 01             	lea    0x1(%eax),%edx
   19698:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1969c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1969f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   196a5:	89 50 08             	mov    %edx,0x8(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) || c == 10)
   196a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196ac:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   196b0:	84 c0                	test   %al,%al
   196b2:	74 14                	je     196c8 <tty_read+0x2e2>
   196b4:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   196b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196bd:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   196c1:	0f b6 c0             	movzbl %al,%eax
   196c4:	39 c2                	cmp    %eax,%edx
   196c6:	74 07                	je     196cf <tty_read+0x2e9>
   196c8:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   196cd:	75 0e                	jne    196dd <tty_read+0x2f7>
				tty->secondary->data--;
   196cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196d3:	8b 40 3c             	mov    0x3c(%eax),%eax
   196d6:	8b 10                	mov    (%eax),%edx
   196d8:	83 ea 01             	sub    $0x1,%edx
   196db:	89 10                	mov    %edx,(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
   196dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196e1:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   196e5:	84 c0                	test   %al,%al
   196e7:	74 22                	je     1970b <tty_read+0x325>
   196e9:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   196ee:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196f2:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   196f6:	0f b6 c0             	movzbl %al,%eax
   196f9:	39 c2                	cmp    %eax,%edx
   196fb:	75 0e                	jne    1970b <tty_read+0x325>
   196fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19701:	8b 40 0c             	mov    0xc(%eax),%eax
   19704:	83 e0 02             	and    $0x2,%eax
   19707:	85 c0                	test   %eax,%eax
   19709:	75 67                	jne    19772 <tty_read+0x38c>
				break;
			else {
				put_fs_byte(c, b++);
   1970b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1970f:	8d 50 01             	lea    0x1(%eax),%edx
   19712:	89 54 24 18          	mov    %edx,0x18(%esp)
   19716:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   1971b:	83 ec 08             	sub    $0x8,%esp
   1971e:	50                   	push   %eax
   1971f:	52                   	push   %edx
   19720:	e8 39 f3 ff ff       	call   18a5e <put_fs_byte>
   19725:	83 c4 10             	add    $0x10,%esp
				if (!--nr)
   19728:	83 6c 24 38 01       	subl   $0x1,0x38(%esp)
   1972d:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   19732:	74 3a                	je     1976e <tty_read+0x388>
					break;
			}
			if (c == 10 && L_CANON(tty))
   19734:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   19739:	75 0e                	jne    19749 <tty_read+0x363>
   1973b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1973f:	8b 40 0c             	mov    0xc(%eax),%eax
   19742:	83 e0 02             	and    $0x2,%eax
   19745:	85 c0                	test   %eax,%eax
   19747:	75 28                	jne    19771 <tty_read+0x38b>
				break;
		} while (nr > 0 && !EMPTY(tty->secondary));
   19749:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   1974e:	7e 22                	jle    19772 <tty_read+0x38c>
   19750:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19754:	8b 40 3c             	mov    0x3c(%eax),%eax
   19757:	8b 50 04             	mov    0x4(%eax),%edx
   1975a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1975e:	8b 40 3c             	mov    0x3c(%eax),%eax
   19761:	8b 40 08             	mov    0x8(%eax),%eax
   19764:	39 c2                	cmp    %eax,%edx
   19766:	0f 85 05 ff ff ff    	jne    19671 <tty_read+0x28b>
   1976c:	eb 04                	jmp    19772 <tty_read+0x38c>
					break;
   1976e:	90                   	nop
   1976f:	eb 01                	jmp    19772 <tty_read+0x38c>
				break;
   19771:	90                   	nop
		// 执行到此，那么如果tty终端处于规范模式下，说明我们可能读到了换行符或者遇到了文件结束符。如果是处于非规范模式下，那么
		// 说明我们已经读取了nr个字符，或者辅助队列已经被取空了。于是我们首先唤醒等待队列的进程，然后看看是否设置过超时定时值
		// time。如果超时定时值time不为0,我们就要求等待一定的时间让其他进程可以把字符写入读队列中。于是设置进程读超时定时值
		// 为系统当前时间jiffies + 读超时值time。当然，如果终端处于规范模式，或者已经读取nr个字符，我们就可以直接退出这个大
		// 循环了。
		wake_up(&tty->read_q->proc_list);
   19772:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19776:	8b 40 34             	mov    0x34(%eax),%eax
   19779:	83 c0 0c             	add    $0xc,%eax
   1977c:	83 ec 0c             	sub    $0xc,%esp
   1977f:	50                   	push   %eax
   19780:	e8 c8 d9 fe ff       	call   714d <wake_up>
   19785:	83 c4 10             	add    $0x10,%esp
		if (time)
   19788:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1978d:	74 17                	je     197a6 <tty_read+0x3c0>
			current->timeout = time + jiffies;
   1978f:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   19793:	8b 15 00 fb 02 00    	mov    0x2fb00,%edx
   19799:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1979e:	01 ca                	add    %ecx,%edx
   197a0:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		if (L_CANON(tty) || b - buf >= minimum)
   197a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   197aa:	8b 40 0c             	mov    0xc(%eax),%eax
   197ad:	83 e0 02             	and    $0x2,%eax
   197b0:	85 c0                	test   %eax,%eax
   197b2:	75 20                	jne    197d4 <tty_read+0x3ee>
   197b4:	8b 54 24 18          	mov    0x18(%esp),%edx
   197b8:	8b 44 24 34          	mov    0x34(%esp),%eax
   197bc:	29 c2                	sub    %eax,%edx
   197be:	89 d0                	mov    %edx,%eax
   197c0:	39 44 24 14          	cmp    %eax,0x14(%esp)
   197c4:	7e 0e                	jle    197d4 <tty_read+0x3ee>
	while (nr > 0) {
   197c6:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   197cb:	0f 8f bb fd ff ff    	jg     1958c <tty_read+0x1a6>
   197d1:	eb 01                	jmp    197d4 <tty_read+0x3ee>
				break;
   197d3:	90                   	nop
			break;
    }
	// 此时读取tty字符循环操作结束，因此复位进程的读取超时定时值timeout。如果此时当前进程已收到信号并且还没有读取到任何字符
	// 则以重新启动系统调用号“-ERESTARTSYS”返回。否则就返回已读取的字符数（b-buf）。
	current->timeout = 0;
   197d4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   197d9:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   197e0:	00 00 00 
	if ((current->signal & ~current->blocked) && !(b - buf))
   197e3:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   197e8:	8b 50 0c             	mov    0xc(%eax),%edx
   197eb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   197f0:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   197f6:	f7 d0                	not    %eax
   197f8:	21 d0                	and    %edx,%eax
   197fa:	85 c0                	test   %eax,%eax
   197fc:	74 13                	je     19811 <tty_read+0x42b>
   197fe:	8b 54 24 18          	mov    0x18(%esp),%edx
   19802:	8b 44 24 34          	mov    0x34(%esp),%eax
   19806:	39 c2                	cmp    %eax,%edx
   19808:	75 07                	jne    19811 <tty_read+0x42b>
		return -ERESTARTSYS;
   1980a:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   1980f:	eb 0c                	jmp    1981d <tty_read+0x437>
	return (b - buf);
   19811:	8b 54 24 18          	mov    0x18(%esp),%edx
   19815:	8b 44 24 34          	mov    0x34(%esp),%eax
   19819:	29 c2                	sub    %eax,%edx
   1981b:	89 d0                	mov    %edx,%eax
}
   1981d:	83 c4 2c             	add    $0x2c,%esp
   19820:	c3                   	ret    

00019821 <tty_write>:
// tty写函数.
// 把用户缓冲区中的字符放入tty写队列缓冲区中.
// 参数:channel - 子设备号;buf - 缓冲区指针;nr - 写字节数.
// 返回已写字节数.
int tty_write(unsigned channel, char * buf, int nr)
{
   19821:	83 ec 1c             	sub    $0x1c,%esp
	static int cr_flag=0;
	struct tty_struct * tty;
	char c, *b = buf;
   19824:	8b 44 24 24          	mov    0x24(%esp),%eax
   19828:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先判断参数有效性并取终端的tty结构指针.如果tty终端的三个缓冲队列指针都是NULL,则返回EIO出错信息.
	if (channel > 255)
   1982c:	81 7c 24 20 ff 00 00 	cmpl   $0xff,0x20(%esp)
   19833:	00 
   19834:	76 0a                	jbe    19840 <tty_write+0x1f>
		return -EIO;
   19836:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1983b:	e9 b7 02 00 00       	jmp    19af7 <tty_write+0x2d6>
	tty = TTY_TABLE(channel);
   19840:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   19845:	74 28                	je     1986f <tty_write+0x4e>
   19847:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   1984c:	77 13                	ja     19861 <tty_write+0x40>
   1984e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19852:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   19857:	c1 e0 06             	shl    $0x6,%eax
   1985a:	05 20 28 04 00       	add    $0x42820,%eax
   1985f:	eb 1b                	jmp    1987c <tty_write+0x5b>
   19861:	8b 44 24 20          	mov    0x20(%esp),%eax
   19865:	c1 e0 06             	shl    $0x6,%eax
   19868:	05 20 28 04 00       	add    $0x42820,%eax
   1986d:	eb 0d                	jmp    1987c <tty_write+0x5b>
   1986f:	a1 80 22 03 00       	mov    0x32280,%eax
   19874:	c1 e0 06             	shl    $0x6,%eax
   19877:	05 20 28 04 00       	add    $0x42820,%eax
   1987c:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   19880:	8b 44 24 04          	mov    0x4(%esp),%eax
   19884:	8b 40 38             	mov    0x38(%eax),%eax
   19887:	85 c0                	test   %eax,%eax
   19889:	75 20                	jne    198ab <tty_write+0x8a>
   1988b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1988f:	8b 40 34             	mov    0x34(%eax),%eax
   19892:	85 c0                	test   %eax,%eax
   19894:	75 15                	jne    198ab <tty_write+0x8a>
   19896:	8b 44 24 04          	mov    0x4(%esp),%eax
   1989a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1989d:	85 c0                	test   %eax,%eax
   1989f:	75 0a                	jne    198ab <tty_write+0x8a>
		return -EIO;
   198a1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   198a6:	e9 4c 02 00 00       	jmp    19af7 <tty_write+0x2d6>
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   198ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   198af:	8b 40 0c             	mov    0xc(%eax),%eax
   198b2:	25 00 01 00 00       	and    $0x100,%eax
   198b7:	85 c0                	test   %eax,%eax
   198b9:	0f 84 1e 02 00 00    	je     19add <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   198bf:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   198c4:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
	if (L_TOSTOP(tty) &&
   198ca:	39 44 24 20          	cmp    %eax,0x20(%esp)
   198ce:	0f 85 09 02 00 00    	jne    19add <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   198d4:	8b 44 24 04          	mov    0x4(%esp),%eax
   198d8:	8b 50 24             	mov    0x24(%eax),%edx
   198db:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   198e0:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   198e6:	39 c2                	cmp    %eax,%edx
   198e8:	0f 84 ef 01 00 00    	je     19add <tty_write+0x2bc>
		return(tty_signal(SIGTTOU, tty));
   198ee:	83 ec 08             	sub    $0x8,%esp
   198f1:	ff 74 24 0c          	pushl  0xc(%esp)
   198f5:	6a 16                	push   $0x16
   198f7:	e8 34 fa ff ff       	call   19330 <tty_signal>
   198fc:	83 c4 10             	add    $0x10,%esp
   198ff:	e9 f3 01 00 00       	jmp    19af7 <tty_write+0x2d6>
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
		sleep_if_full(tty->write_q);
   19904:	8b 44 24 04          	mov    0x4(%esp),%eax
   19908:	8b 40 38             	mov    0x38(%eax),%eax
   1990b:	83 ec 0c             	sub    $0xc,%esp
   1990e:	50                   	push   %eax
   1990f:	e8 0d f2 ff ff       	call   18b21 <sleep_if_full>
   19914:	83 c4 10             	add    $0x10,%esp
		if (current->signal & ~current->blocked)
   19917:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1991c:	8b 50 0c             	mov    0xc(%eax),%edx
   1991f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   19924:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1992a:	f7 d0                	not    %eax
   1992c:	21 d0                	and    %edx,%eax
   1992e:	85 c0                	test   %eax,%eax
   19930:	0f 85 b4 01 00 00    	jne    19aea <tty_write+0x2c9>
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   19936:	e9 54 01 00 00       	jmp    19a8f <tty_write+0x26e>
			c = get_fs_byte(b);
   1993b:	83 ec 0c             	sub    $0xc,%esp
   1993e:	ff 74 24 14          	pushl  0x14(%esp)
   19942:	e8 09 f1 ff ff       	call   18a50 <get_fs_byte>
   19947:	83 c4 10             	add    $0x10,%esp
   1994a:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果终端输出模式标志集中的执行输出处理标志OPOST置位,则执行对字符的后处理操作.
			if (O_POST(tty)) {
   1994e:	8b 44 24 04          	mov    0x4(%esp),%eax
   19952:	8b 40 04             	mov    0x4(%eax),%eax
   19955:	83 e0 01             	and    $0x1,%eax
   19958:	85 c0                	test   %eax,%eax
   1995a:	0f 84 e4 00 00 00    	je     19a44 <tty_write+0x223>
				// 如果该字符是回车符'\r'(CR,13)并且回车符转换行标志OCRNL置位,则将该字符换成行符'\n'(NL,10);
				if (c == '\r' && O_CRNL(tty))
   19960:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   19965:	75 15                	jne    1997c <tty_write+0x15b>
   19967:	8b 44 24 04          	mov    0x4(%esp),%eax
   1996b:	8b 40 04             	mov    0x4(%eax),%eax
   1996e:	83 e0 08             	and    $0x8,%eax
   19971:	85 c0                	test   %eax,%eax
   19973:	74 07                	je     1997c <tty_write+0x15b>
					c = '\n';
   19975:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   1997a:	eb 1a                	jmp    19996 <tty_write+0x175>
				// 如果该字符是换行符'\n'(NL,10)并且换行转回车功能标志ONLRET置位的话,则将该字符换成回车符'\r'(CR,13).
				else if (c == '\n' && O_NLRET(tty))
   1997c:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   19981:	75 13                	jne    19996 <tty_write+0x175>
   19983:	8b 44 24 04          	mov    0x4(%esp),%eax
   19987:	8b 40 04             	mov    0x4(%eax),%eax
   1998a:	83 e0 20             	and    $0x20,%eax
   1998d:	85 c0                	test   %eax,%eax
   1998f:	74 05                	je     19996 <tty_write+0x175>
					c = '\r';
   19991:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
				// 如果该字符是换行符'\n'并且回车标志cr_flag没有置位,但换行转回车-换行标志ONLCR置位的话,则将cr_flag标志置位,并将一回车符放入写队列中.然后继续处理下一个字符.
				if (c == '\n' && !cr_flag && O_NLCR(tty)) {
   19996:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1999b:	75 59                	jne    199f6 <tty_write+0x1d5>
   1999d:	a1 00 fe 03 00       	mov    0x3fe00,%eax
   199a2:	85 c0                	test   %eax,%eax
   199a4:	75 50                	jne    199f6 <tty_write+0x1d5>
   199a6:	8b 44 24 04          	mov    0x4(%esp),%eax
   199aa:	8b 40 04             	mov    0x4(%eax),%eax
   199ad:	83 e0 04             	and    $0x4,%eax
   199b0:	85 c0                	test   %eax,%eax
   199b2:	74 42                	je     199f6 <tty_write+0x1d5>
					cr_flag = 1;
   199b4:	c7 05 00 fe 03 00 01 	movl   $0x1,0x3fe00
   199bb:	00 00 00 
					PUTCH(13, tty->write_q);
   199be:	8b 44 24 04          	mov    0x4(%esp),%eax
   199c2:	8b 50 38             	mov    0x38(%eax),%edx
   199c5:	8b 44 24 04          	mov    0x4(%esp),%eax
   199c9:	8b 40 38             	mov    0x38(%eax),%eax
   199cc:	8b 40 04             	mov    0x4(%eax),%eax
   199cf:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   199d4:	8b 44 24 04          	mov    0x4(%esp),%eax
   199d8:	8b 40 38             	mov    0x38(%eax),%eax
   199db:	8b 40 04             	mov    0x4(%eax),%eax
   199de:	8d 50 01             	lea    0x1(%eax),%edx
   199e1:	8b 44 24 04          	mov    0x4(%esp),%eax
   199e5:	8b 40 38             	mov    0x38(%eax),%eax
   199e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   199ee:	89 50 04             	mov    %edx,0x4(%eax)
					continue;
   199f1:	e9 99 00 00 00       	jmp    19a8f <tty_write+0x26e>
				}
				// 如果小写转大写标志OLCUC置位的话,就将该字符转成大写字符.
				if (O_LCUC(tty))
   199f6:	8b 44 24 04          	mov    0x4(%esp),%eax
   199fa:	8b 40 04             	mov    0x4(%eax),%eax
   199fd:	83 e0 02             	and    $0x2,%eax
   19a00:	85 c0                	test   %eax,%eax
   19a02:	74 40                	je     19a44 <tty_write+0x223>
					c = toupper(c);									// 小写转成大写字符.
   19a04:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   19a09:	a2 20 68 04 00       	mov    %al,0x46820
   19a0e:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   19a15:	0f be c0             	movsbl %al,%eax
   19a18:	83 c0 01             	add    $0x1,%eax
   19a1b:	05 a0 f5 02 00       	add    $0x2f5a0,%eax
   19a20:	0f b6 00             	movzbl (%eax),%eax
   19a23:	0f b6 c0             	movzbl %al,%eax
   19a26:	83 e0 02             	and    $0x2,%eax
   19a29:	85 c0                	test   %eax,%eax
   19a2b:	74 0c                	je     19a39 <tty_write+0x218>
   19a2d:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   19a34:	83 e8 20             	sub    $0x20,%eax
   19a37:	eb 07                	jmp    19a40 <tty_write+0x21f>
   19a39:	0f b6 05 20 68 04 00 	movzbl 0x46820,%eax
   19a40:	88 44 24 0f          	mov    %al,0xf(%esp)
			}
			// 接着把用户数据缓冲指针b前移1字节;欲写字节数减1字节;复位cr_flag标志,并将该字节放入tty写队列中.
			b++; nr--;
   19a44:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   19a49:	83 6c 24 28 01       	subl   $0x1,0x28(%esp)
			cr_flag = 0;
   19a4e:	c7 05 00 fe 03 00 00 	movl   $0x0,0x3fe00
   19a55:	00 00 00 
			PUTCH(c, tty->write_q);
   19a58:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a5c:	8b 50 38             	mov    0x38(%eax),%edx
   19a5f:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a63:	8b 40 38             	mov    0x38(%eax),%eax
   19a66:	8b 40 04             	mov    0x4(%eax),%eax
   19a69:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19a6e:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19a72:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a76:	8b 40 38             	mov    0x38(%eax),%eax
   19a79:	8b 40 04             	mov    0x4(%eax),%eax
   19a7c:	8d 50 01             	lea    0x1(%eax),%edx
   19a7f:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a83:	8b 40 38             	mov    0x38(%eax),%eax
   19a86:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19a8c:	89 50 04             	mov    %edx,0x4(%eax)
		while (nr > 0 && !FULL(tty->write_q)) {
   19a8f:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a94:	7e 28                	jle    19abe <tty_write+0x29d>
   19a96:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a9a:	8b 40 38             	mov    0x38(%eax),%eax
   19a9d:	8b 50 08             	mov    0x8(%eax),%edx
   19aa0:	8b 44 24 04          	mov    0x4(%esp),%eax
   19aa4:	8b 40 38             	mov    0x38(%eax),%eax
   19aa7:	8b 40 04             	mov    0x4(%eax),%eax
   19aaa:	29 c2                	sub    %eax,%edx
   19aac:	89 d0                	mov    %edx,%eax
   19aae:	83 e8 01             	sub    $0x1,%eax
   19ab1:	25 ff 03 00 00       	and    $0x3ff,%eax
   19ab6:	85 c0                	test   %eax,%eax
   19ab8:	0f 85 7d fe ff ff    	jne    1993b <tty_write+0x11a>
		}
		// 若要求的字符全部写完,或者写队列已满,则程序退出循环.此时会调用对应tty写函数,把写队列缓冲区中的字符显示在控制台屏幕上,或者通过串行端口发送出去.如果当前处理的tty
		// 是控制台终端,那么tty->write()调用的是con_write();如果tty是串行终端,则tty->write()调用的是rs_write()函数.若还有字节要写,则等待写队列中字符取走.
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
   19abe:	8b 44 24 04          	mov    0x4(%esp),%eax
   19ac2:	8b 40 30             	mov    0x30(%eax),%eax
   19ac5:	83 ec 0c             	sub    $0xc,%esp
   19ac8:	ff 74 24 10          	pushl  0x10(%esp)
   19acc:	ff d0                	call   *%eax
   19ace:	83 c4 10             	add    $0x10,%esp
		if (nr > 0)
   19ad1:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19ad6:	7e 05                	jle    19add <tty_write+0x2bc>
			schedule();
   19ad8:	e8 66 d3 fe ff       	call   6e43 <schedule>
	while (nr > 0) {
   19add:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19ae2:	0f 8f 1c fe ff ff    	jg     19904 <tty_write+0xe3>
   19ae8:	eb 01                	jmp    19aeb <tty_write+0x2ca>
			break;
   19aea:	90                   	nop
        }
	return (b - buf);												// 最后返回写入的字节数.
   19aeb:	8b 54 24 08          	mov    0x8(%esp),%edx
   19aef:	8b 44 24 24          	mov    0x24(%esp),%eax
   19af3:	29 c2                	sub    %eax,%edx
   19af5:	89 d0                	mov    %edx,%eax
}
   19af7:	83 c4 1c             	add    $0x1c,%esp
   19afa:	c3                   	ret    

00019afb <do_tty_interrupt>:
// tty中断处理调用函数 - 字符规范模式处理.
// 参数:tty - 指定的tty终端号.
// 将指定tty终端队列缓冲区中的字符复制或转换成规范(熟)模式字符并存放在辅助队列中.该函数会在串口读字符中断(rs_io.s)和键盘中断(
// kerboard.S)中被调用.
void do_tty_interrupt(int tty)
{
   19afb:	83 ec 0c             	sub    $0xc,%esp
	copy_to_cooked(TTY_TABLE(tty));
   19afe:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   19b03:	74 26                	je     19b2b <do_tty_interrupt+0x30>
   19b05:	83 7c 24 10 3f       	cmpl   $0x3f,0x10(%esp)
   19b0a:	7f 11                	jg     19b1d <do_tty_interrupt+0x22>
   19b0c:	8b 44 24 10          	mov    0x10(%esp),%eax
   19b10:	83 e8 01             	sub    $0x1,%eax
   19b13:	c1 e0 06             	shl    $0x6,%eax
   19b16:	05 20 28 04 00       	add    $0x42820,%eax
   19b1b:	eb 1b                	jmp    19b38 <do_tty_interrupt+0x3d>
   19b1d:	8b 44 24 10          	mov    0x10(%esp),%eax
   19b21:	c1 e0 06             	shl    $0x6,%eax
   19b24:	05 20 28 04 00       	add    $0x42820,%eax
   19b29:	eb 0d                	jmp    19b38 <do_tty_interrupt+0x3d>
   19b2b:	a1 80 22 03 00       	mov    0x32280,%eax
   19b30:	c1 e0 06             	shl    $0x6,%eax
   19b33:	05 20 28 04 00       	add    $0x42820,%eax
   19b38:	83 ec 0c             	sub    $0xc,%esp
   19b3b:	50                   	push   %eax
   19b3c:	e8 7c f0 ff ff       	call   18bbd <copy_to_cooked>
   19b41:	83 c4 10             	add    $0x10,%esp
}
   19b44:	90                   	nop
   19b45:	83 c4 0c             	add    $0xc,%esp
   19b48:	c3                   	ret    

00019b49 <chr_dev_init>:

//字符设备初始化函数.空,为以后扩展做准备.
void chr_dev_init(void)
{
}
   19b49:	90                   	nop
   19b4a:	c3                   	ret    

00019b4b <tty_init>:

// tty终端初始化函数
// 初始化所有终端缓冲队列,初始化串口终端和控制台终端.
void tty_init(void)
{
   19b4b:	57                   	push   %edi
   19b4c:	56                   	push   %esi
   19b4d:	53                   	push   %ebx
   19b4e:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19b51:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19b58:	00 
   19b59:	eb 7f                	jmp    19bda <tty_init+0x8f>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
   19b5b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b5f:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b65:	05 a0 22 03 00       	add    $0x322a0,%eax
   19b6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b70:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b74:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b7a:	05 a4 22 03 00       	add    $0x322a4,%eax
   19b7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b85:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b89:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19b8f:	05 a8 22 03 00       	add    $0x322a8,%eax
   19b94:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b9a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b9e:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19ba4:	05 ac 22 03 00       	add    $0x322ac,%eax
   19ba9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19baf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bb3:	69 c0 10 04 00 00    	imul   $0x410,%eax,%eax
   19bb9:	05 b0 22 03 00       	add    $0x322b0,%eax
   19bbe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19bc4:	8d 50 04             	lea    0x4(%eax),%edx
   19bc7:	b8 00 00 00 00       	mov    $0x0,%eax
   19bcc:	b9 ff 00 00 00       	mov    $0xff,%ecx
   19bd1:	89 d7                	mov    %edx,%edi
   19bd3:	f3 ab                	rep stos %eax,%es:(%edi)
	for (i = 0 ; i < QUEUES ; i++)
   19bd5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19bda:	83 7c 24 0c 35       	cmpl   $0x35,0xc(%esp)
   19bdf:	0f 8e 76 ff ff ff    	jle    19b5b <tty_init+0x10>
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19be5:	ba 20 84 03 00       	mov    $0x38420,%edx
   19bea:	bb 80 44 02 00       	mov    $0x24480,%ebx
   19bef:	b8 04 01 00 00       	mov    $0x104,%eax
   19bf4:	89 d7                	mov    %edx,%edi
   19bf6:	89 de                	mov    %ebx,%esi
   19bf8:	89 c1                	mov    %eax,%ecx
   19bfa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19bfc:	ba 30 88 03 00       	mov    $0x38830,%edx
   19c01:	bb 80 44 02 00       	mov    $0x24480,%ebx
   19c06:	b8 04 01 00 00       	mov    $0x104,%eax
   19c0b:	89 d7                	mov    %edx,%edi
   19c0d:	89 de                	mov    %ebx,%esi
   19c0f:	89 c1                	mov    %eax,%ecx
   19c11:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19c13:	ba 50 90 03 00       	mov    $0x39050,%edx
   19c18:	bb a0 48 02 00       	mov    $0x248a0,%ebx
   19c1d:	b8 04 01 00 00       	mov    $0x104,%eax
   19c22:	89 d7                	mov    %edx,%edi
   19c24:	89 de                	mov    %ebx,%esi
   19c26:	89 c1                	mov    %eax,%ecx
   19c28:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19c2a:	ba 60 94 03 00       	mov    $0x39460,%edx
   19c2f:	bb a0 48 02 00       	mov    $0x248a0,%ebx
   19c34:	b8 04 01 00 00       	mov    $0x104,%eax
   19c39:	89 d7                	mov    %edx,%edi
   19c3b:	89 de                	mov    %ebx,%esi
   19c3d:	89 c1                	mov    %eax,%ecx
   19c3f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	for (i = 0 ; i < 256 ; i++) {
   19c41:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19c48:	00 
   19c49:	e9 14 01 00 00       	jmp    19d62 <tty_init+0x217>
		tty_table[i] =  (struct tty_struct) {
   19c4e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c52:	c1 e0 06             	shl    $0x6,%eax
   19c55:	05 20 28 04 00       	add    $0x42820,%eax
   19c5a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c60:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c64:	c1 e0 06             	shl    $0x6,%eax
   19c67:	05 24 28 04 00       	add    $0x42824,%eax
   19c6c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c72:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c76:	c1 e0 06             	shl    $0x6,%eax
   19c79:	05 28 28 04 00       	add    $0x42828,%eax
   19c7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c84:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c88:	c1 e0 06             	shl    $0x6,%eax
   19c8b:	05 2c 28 04 00       	add    $0x4282c,%eax
   19c90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c96:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c9a:	c1 e0 06             	shl    $0x6,%eax
   19c9d:	05 30 28 04 00       	add    $0x42830,%eax
   19ca2:	c6 00 00             	movb   $0x0,(%eax)
   19ca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ca9:	c1 e0 06             	shl    $0x6,%eax
   19cac:	05 30 28 04 00       	add    $0x42830,%eax
   19cb1:	8b 15 b0 4c 02 00    	mov    0x24cb0,%edx
   19cb7:	89 50 01             	mov    %edx,0x1(%eax)
   19cba:	8b 15 b4 4c 02 00    	mov    0x24cb4,%edx
   19cc0:	89 50 05             	mov    %edx,0x5(%eax)
   19cc3:	8b 15 b8 4c 02 00    	mov    0x24cb8,%edx
   19cc9:	89 50 09             	mov    %edx,0x9(%eax)
   19ccc:	8b 15 bc 4c 02 00    	mov    0x24cbc,%edx
   19cd2:	89 50 0d             	mov    %edx,0xd(%eax)
   19cd5:	0f b6 15 c0 4c 02 00 	movzbl 0x24cc0,%edx
   19cdc:	88 50 11             	mov    %dl,0x11(%eax)
   19cdf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ce3:	c1 e0 06             	shl    $0x6,%eax
   19ce6:	05 44 28 04 00       	add    $0x42844,%eax
   19ceb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cf5:	c1 e0 06             	shl    $0x6,%eax
   19cf8:	05 48 28 04 00       	add    $0x42848,%eax
   19cfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d03:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d07:	c1 e0 06             	shl    $0x6,%eax
   19d0a:	05 4c 28 04 00       	add    $0x4284c,%eax
   19d0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d19:	c1 e0 06             	shl    $0x6,%eax
   19d1c:	05 50 28 04 00       	add    $0x42850,%eax
   19d21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d27:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d2b:	c1 e0 06             	shl    $0x6,%eax
   19d2e:	05 54 28 04 00       	add    $0x42854,%eax
   19d33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d39:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d3d:	c1 e0 06             	shl    $0x6,%eax
   19d40:	05 58 28 04 00       	add    $0x42858,%eax
   19d45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d4b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d4f:	c1 e0 06             	shl    $0x6,%eax
   19d52:	05 5c 28 04 00       	add    $0x4285c,%eax
   19d57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (i = 0 ; i < 256 ; i++) {
   19d5d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19d62:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
   19d69:	00 
   19d6a:	0f 8e de fe ff ff    	jle    19c4e <tty_init+0x103>
	// 接着初始化控制台终端(console.c).把con_init()放在这里,是因为我们需要根据显示卡类型和显示内存容量来确定系统虚拟控制台的数量
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
   19d70:	e8 28 30 00 00       	call   1cd9d <con_init>
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19d75:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19d7c:	00 
   19d7d:	e9 42 01 00 00       	jmp    19ec4 <tty_init+0x379>
			INIT_C_CC},												// 控制字符数组c_cc[]
			0,														/* initial pgrp */	// 所属初始进程组pgrp
			0,														/* initial session */	// 初始会话级session
			0,														/* initial stopped */	// 初始停止标志stopped
			con_write,
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
   19d82:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d86:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d8c:	8d b0 a0 22 03 00    	lea    0x322a0(%eax),%esi
   19d92:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d96:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d9c:	05 10 04 00 00       	add    $0x410,%eax
   19da1:	8d 98 a0 22 03 00    	lea    0x322a0(%eax),%ebx
   19da7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dab:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19db1:	05 20 08 00 00       	add    $0x820,%eax
   19db6:	8d 88 a0 22 03 00    	lea    0x322a0(%eax),%ecx
		con_table[i] = (struct tty_struct) {
   19dbc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dc0:	c1 e0 06             	shl    $0x6,%eax
   19dc3:	05 20 28 04 00       	add    $0x42820,%eax
   19dc8:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   19dce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dd2:	c1 e0 06             	shl    $0x6,%eax
   19dd5:	05 24 28 04 00       	add    $0x42824,%eax
   19dda:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
   19de0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19de4:	c1 e0 06             	shl    $0x6,%eax
   19de7:	05 28 28 04 00       	add    $0x42828,%eax
   19dec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19df2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19df6:	c1 e0 06             	shl    $0x6,%eax
   19df9:	05 2c 28 04 00       	add    $0x4282c,%eax
   19dfe:	c7 00 0b 0e 00 00    	movl   $0xe0b,(%eax)
   19e04:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e08:	c1 e0 06             	shl    $0x6,%eax
   19e0b:	05 30 28 04 00       	add    $0x42830,%eax
   19e10:	c6 00 00             	movb   $0x0,(%eax)
   19e13:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e17:	c1 e0 06             	shl    $0x6,%eax
   19e1a:	05 30 28 04 00       	add    $0x42830,%eax
   19e1f:	8b 15 b0 4c 02 00    	mov    0x24cb0,%edx
   19e25:	89 50 01             	mov    %edx,0x1(%eax)
   19e28:	8b 15 b4 4c 02 00    	mov    0x24cb4,%edx
   19e2e:	89 50 05             	mov    %edx,0x5(%eax)
   19e31:	8b 15 b8 4c 02 00    	mov    0x24cb8,%edx
   19e37:	89 50 09             	mov    %edx,0x9(%eax)
   19e3a:	8b 15 bc 4c 02 00    	mov    0x24cbc,%edx
   19e40:	89 50 0d             	mov    %edx,0xd(%eax)
   19e43:	0f b6 15 c0 4c 02 00 	movzbl 0x24cc0,%edx
   19e4a:	88 50 11             	mov    %dl,0x11(%eax)
   19e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e51:	c1 e0 06             	shl    $0x6,%eax
   19e54:	05 44 28 04 00       	add    $0x42844,%eax
   19e59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e5f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e63:	c1 e0 06             	shl    $0x6,%eax
   19e66:	05 48 28 04 00       	add    $0x42848,%eax
   19e6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e75:	c1 e0 06             	shl    $0x6,%eax
   19e78:	05 4c 28 04 00       	add    $0x4284c,%eax
   19e7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e83:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e87:	c1 e0 06             	shl    $0x6,%eax
   19e8a:	05 50 28 04 00       	add    $0x42850,%eax
   19e8f:	c7 00 a8 b9 01 00    	movl   $0x1b9a8,(%eax)
   19e95:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e99:	c1 e0 06             	shl    $0x6,%eax
   19e9c:	05 54 28 04 00       	add    $0x42854,%eax
   19ea1:	89 30                	mov    %esi,(%eax)
   19ea3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ea7:	c1 e0 06             	shl    $0x6,%eax
   19eaa:	05 58 28 04 00       	add    $0x42858,%eax
   19eaf:	89 18                	mov    %ebx,(%eax)
   19eb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19eb5:	c1 e0 06             	shl    $0x6,%eax
   19eb8:	05 5c 28 04 00       	add    $0x4285c,%eax
   19ebd:	89 08                	mov    %ecx,(%eax)
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19ebf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19ec4:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   19ec9:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   19ecd:	0f 8c af fe ff ff    	jl     19d82 <tty_init+0x237>
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19ed3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19eda:	00 
   19edb:	e9 c8 00 00 00       	jmp    19fa8 <tty_init+0x45d>
		rs_table[i] = (struct tty_struct) {
   19ee0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ee4:	83 c0 40             	add    $0x40,%eax
   19ee7:	c1 e0 06             	shl    $0x6,%eax
   19eea:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                     						// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			rs_write,                       						// 串口终端写函数。
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
   19eef:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19ef3:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19ef9:	81 c2 80 61 00 00    	add    $0x6180,%edx
   19eff:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   19f05:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f09:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f0f:	81 c2 90 65 00 00    	add    $0x6590,%edx
   19f15:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   19f1b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f1f:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f25:	81 c2 a0 69 00 00    	add    $0x69a0,%edx
   19f2b:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		rs_table[i] = (struct tty_struct) {
   19f31:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19f37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19f3e:	c7 40 08 3b 00 00 00 	movl   $0x3b,0x8(%eax)
   19f45:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19f4c:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19f50:	8b 15 b0 4c 02 00    	mov    0x24cb0,%edx
   19f56:	89 50 11             	mov    %edx,0x11(%eax)
   19f59:	8b 15 b4 4c 02 00    	mov    0x24cb4,%edx
   19f5f:	89 50 15             	mov    %edx,0x15(%eax)
   19f62:	8b 15 b8 4c 02 00    	mov    0x24cb8,%edx
   19f68:	89 50 19             	mov    %edx,0x19(%eax)
   19f6b:	8b 15 bc 4c 02 00    	mov    0x24cbc,%edx
   19f71:	89 50 1d             	mov    %edx,0x1d(%eax)
   19f74:	0f b6 15 c0 4c 02 00 	movzbl 0x24cc0,%edx
   19f7b:	88 50 21             	mov    %dl,0x21(%eax)
   19f7e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19f85:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19f8c:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   19f93:	c7 40 30 d4 df 01 00 	movl   $0x1dfd4,0x30(%eax)
   19f9a:	89 70 34             	mov    %esi,0x34(%eax)
   19f9d:	89 58 38             	mov    %ebx,0x38(%eax)
   19fa0:	89 48 3c             	mov    %ecx,0x3c(%eax)
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19fa3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19fa8:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   19fad:	0f 8e 2d ff ff ff    	jle    19ee0 <tty_init+0x395>
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   19fb3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19fba:	00 
   19fbb:	e9 8d 01 00 00       	jmp    1a14d <tty_init+0x602>
		mpty_table[i] = (struct tty_struct) {
   19fc0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19fc4:	83 e8 80             	sub    $0xffffff80,%eax
   19fc7:	c1 e0 06             	shl    $0x6,%eax
   19fca:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
   19fcf:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19fd3:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19fd9:	81 c2 e0 79 00 00    	add    $0x79e0,%edx
   19fdf:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   19fe5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19fe9:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19fef:	81 c2 f0 7d 00 00    	add    $0x7df0,%edx
   19ff5:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   19ffb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19fff:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a005:	81 c2 00 82 00 00    	add    $0x8200,%edx
   1a00b:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		mpty_table[i] = (struct tty_struct) {
   1a011:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a017:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a01e:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a025:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   1a02c:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a030:	8b 15 b0 4c 02 00    	mov    0x24cb0,%edx
   1a036:	89 50 11             	mov    %edx,0x11(%eax)
   1a039:	8b 15 b4 4c 02 00    	mov    0x24cb4,%edx
   1a03f:	89 50 15             	mov    %edx,0x15(%eax)
   1a042:	8b 15 b8 4c 02 00    	mov    0x24cb8,%edx
   1a048:	89 50 19             	mov    %edx,0x19(%eax)
   1a04b:	8b 15 bc 4c 02 00    	mov    0x24cbc,%edx
   1a051:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a054:	0f b6 15 c0 4c 02 00 	movzbl 0x24cc0,%edx
   1a05b:	88 50 21             	mov    %dl,0x21(%eax)
   1a05e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a065:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a06c:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a073:	c7 40 30 2e eb 01 00 	movl   $0x1eb2e,0x30(%eax)
   1a07a:	89 70 34             	mov    %esi,0x34(%eax)
   1a07d:	89 58 38             	mov    %ebx,0x38(%eax)
   1a080:	89 48 3c             	mov    %ecx,0x3c(%eax)
		};
		spty_table[i] = (struct tty_struct) {
   1a083:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a087:	05 c0 00 00 00       	add    $0xc0,%eax
   1a08c:	c1 e0 06             	shl    $0x6,%eax
   1a08f:	05 20 28 04 00       	add    $0x42820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
   1a094:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a098:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a09e:	81 c2 a0 aa 00 00    	add    $0xaaa0,%edx
   1a0a4:	8d b2 a0 22 03 00    	lea    0x322a0(%edx),%esi
   1a0aa:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a0ae:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a0b4:	81 c2 b0 ae 00 00    	add    $0xaeb0,%edx
   1a0ba:	8d 9a a0 22 03 00    	lea    0x322a0(%edx),%ebx
   1a0c0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a0c4:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a0ca:	81 c2 c0 b2 00 00    	add    $0xb2c0,%edx
   1a0d0:	8d 8a a0 22 03 00    	lea    0x322a0(%edx),%ecx
		spty_table[i] = (struct tty_struct) {
   1a0d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a0dc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a0e3:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a0ea:	c7 40 0c 03 04 00 00 	movl   $0x403,0xc(%eax)
   1a0f1:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a0f5:	8b 15 b0 4c 02 00    	mov    0x24cb0,%edx
   1a0fb:	89 50 11             	mov    %edx,0x11(%eax)
   1a0fe:	8b 15 b4 4c 02 00    	mov    0x24cb4,%edx
   1a104:	89 50 15             	mov    %edx,0x15(%eax)
   1a107:	8b 15 b8 4c 02 00    	mov    0x24cb8,%edx
   1a10d:	89 50 19             	mov    %edx,0x19(%eax)
   1a110:	8b 15 bc 4c 02 00    	mov    0x24cbc,%edx
   1a116:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a119:	0f b6 15 c0 4c 02 00 	movzbl 0x24cc0,%edx
   1a120:	88 50 21             	mov    %dl,0x21(%eax)
   1a123:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a12a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a131:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a138:	c7 40 30 7f eb 01 00 	movl   $0x1eb7f,0x30(%eax)
   1a13f:	89 70 34             	mov    %esi,0x34(%eax)
   1a142:	89 58 38             	mov    %ebx,0x38(%eax)
   1a145:	89 48 3c             	mov    %ecx,0x3c(%eax)
	for (i = 0 ; i < NR_PTYS ; i++) {
   1a148:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1a14d:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
   1a152:	0f 8e 68 fe ff ff    	jle    19fc0 <tty_init+0x475>
		};
	}
	// 最后初始化串行中断处理程序和串行接口1和2（serial.c），并显示系统含有的虚拟控制台数NR_CONSOLES和伪终端数NR_PTYS。
	rs_init();
   1a158:	e8 ec 3d 00 00       	call   1df49 <rs_init>
	printk("%d virtual consoles\n\r", NR_CONSOLES);
   1a15d:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1a162:	83 ec 08             	sub    $0x8,%esp
   1a165:	50                   	push   %eax
   1a166:	68 41 44 02 00       	push   $0x24441
   1a16b:	e8 d6 ea fe ff       	call   8c46 <printk>
   1a170:	83 c4 10             	add    $0x10,%esp
	printk("%d pty's\n\r", NR_PTYS);
   1a173:	83 ec 08             	sub    $0x8,%esp
   1a176:	6a 04                	push   $0x4
   1a178:	68 57 44 02 00       	push   $0x24457
   1a17d:	e8 c4 ea fe ff       	call   8c46 <printk>
   1a182:	83 c4 10             	add    $0x10,%esp
}
   1a185:	90                   	nop
   1a186:	83 c4 10             	add    $0x10,%esp
   1a189:	5b                   	pop    %ebx
   1a18a:	5e                   	pop    %esi
   1a18b:	5f                   	pop    %edi
   1a18c:	c3                   	ret    

0001a18d <get_fs_byte>:
{
   1a18d:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1a18e:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a192:	64 8a 00             	mov    %fs:(%eax),%al
   1a195:	89 c3                	mov    %eax,%ebx
	return _v;
   1a197:	89 d8                	mov    %ebx,%eax
}
   1a199:	5b                   	pop    %ebx
   1a19a:	c3                   	ret    

0001a19b <put_fs_byte>:
{
   1a19b:	83 ec 04             	sub    $0x4,%esp
   1a19e:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a1a2:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1a1a5:	0f b6 04 24          	movzbl (%esp),%eax
   1a1a9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a1ad:	64 88 02             	mov    %al,%fs:(%edx)
}
   1a1b0:	90                   	nop
   1a1b1:	83 c4 04             	add    $0x4,%esp
   1a1b4:	c3                   	ret    

0001a1b5 <gotoxy>:
// 注意,函数中的所有变量实际上是vc_cons[currcons]结构中的相应字段.以下函数相同.
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
   1a1b5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1a1b9:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a1be:	39 c2                	cmp    %eax,%edx
   1a1c0:	0f 87 a5 00 00 00    	ja     1a26b <gotoxy+0xb6>
   1a1c6:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a1cb:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   1a1cf:	0f 83 96 00 00 00    	jae    1a26b <gotoxy+0xb6>
		return;
	x = new_x;
   1a1d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1a1d9:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1dd:	89 d0                	mov    %edx,%eax
   1a1df:	c1 e0 03             	shl    $0x3,%eax
   1a1e2:	01 d0                	add    %edx,%eax
   1a1e4:	c1 e0 04             	shl    $0x4,%eax
   1a1e7:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1a1ec:	89 08                	mov    %ecx,(%eax)
	y = new_y;
   1a1ee:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1f2:	89 d0                	mov    %edx,%eax
   1a1f4:	c1 e0 03             	shl    $0x3,%eax
   1a1f7:	01 d0                	add    %edx,%eax
   1a1f9:	c1 e0 04             	shl    $0x4,%eax
   1a1fc:	8d 90 88 fe 03 00    	lea    0x3fe88(%eax),%edx
   1a202:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a206:	89 02                	mov    %eax,(%edx)
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
   1a208:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a20c:	89 d0                	mov    %edx,%eax
   1a20e:	c1 e0 03             	shl    $0x3,%eax
   1a211:	01 d0                	add    %edx,%eax
   1a213:	c1 e0 04             	shl    $0x4,%eax
   1a216:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a21b:	8b 08                	mov    (%eax),%ecx
   1a21d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a221:	89 d0                	mov    %edx,%eax
   1a223:	c1 e0 03             	shl    $0x3,%eax
   1a226:	01 d0                	add    %edx,%eax
   1a228:	c1 e0 04             	shl    $0x4,%eax
   1a22b:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a230:	8b 10                	mov    (%eax),%edx
   1a232:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a237:	0f af c2             	imul   %edx,%eax
   1a23a:	01 c1                	add    %eax,%ecx
   1a23c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a240:	89 d0                	mov    %edx,%eax
   1a242:	c1 e0 03             	shl    $0x3,%eax
   1a245:	01 d0                	add    %edx,%eax
   1a247:	c1 e0 04             	shl    $0x4,%eax
   1a24a:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1a24f:	8b 00                	mov    (%eax),%eax
   1a251:	01 c0                	add    %eax,%eax
   1a253:	01 c1                	add    %eax,%ecx
   1a255:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a259:	89 d0                	mov    %edx,%eax
   1a25b:	c1 e0 03             	shl    $0x3,%eax
   1a25e:	01 d0                	add    %edx,%eax
   1a260:	c1 e0 04             	shl    $0x4,%eax
   1a263:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a268:	89 08                	mov    %ecx,(%eax)
   1a26a:	c3                   	ret    
		return;
   1a26b:	90                   	nop
}
   1a26c:	c3                   	ret    

0001a26d <set_origin>:
static inline void set_origin(int currcons)
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1a26d:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a274:	3c 21                	cmp    $0x21,%al
   1a276:	74 0f                	je     1a287 <set_origin+0x1a>
   1a278:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a27f:	3c 20                	cmp    $0x20,%al
   1a281:	0f 85 93 00 00 00    	jne    1a31a <set_origin+0xad>
		return;
	if (currcons != fg_console)
   1a287:	a1 80 22 03 00       	mov    0x32280,%eax
   1a28c:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1a290:	0f 85 86 00 00 00    	jne    1a31c <set_origin+0xaf>
		return;
	// 然后向显示寄存器选择端口video_port_reg输出12,即选择显示控制数据寄存器r12,接着写入滚屏起始地址高字节.其中向右移动9位,实际上表示向右移动
	// 8位再除以2(上1个字符用2字节表示).再选择显示控制数据寄存器r13,然后写入滚屏起始地址低字节.向右移动1位表示除以2,同样代表屏幕上1个字符用2字节
	// 表示.输出值相对于默认显示内存起始位置video_mem_base进行操作.
	// 例如对于EGA/VGA彩色模式,viedo_mem_base = 物理内存地址0xb8000.
	cli();
   1a296:	fa                   	cli    
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
   1a297:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1a29e:	b8 0c 00 00 00       	mov    $0xc,%eax
   1a2a3:	ee                   	out    %al,(%dx)
   1a2a4:	eb 00                	jmp    1a2a6 <set_origin+0x39>
   1a2a6:	eb 00                	jmp    1a2a8 <set_origin+0x3b>
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
   1a2a8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a2ac:	89 d0                	mov    %edx,%eax
   1a2ae:	c1 e0 03             	shl    $0x3,%eax
   1a2b1:	01 d0                	add    %edx,%eax
   1a2b3:	c1 e0 04             	shl    $0x4,%eax
   1a2b6:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a2bb:	8b 10                	mov    (%eax),%edx
   1a2bd:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1a2c2:	29 c2                	sub    %eax,%edx
   1a2c4:	89 d0                	mov    %edx,%eax
   1a2c6:	c1 e8 09             	shr    $0x9,%eax
   1a2c9:	0f b6 c0             	movzbl %al,%eax
   1a2cc:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1a2d3:	ee                   	out    %al,(%dx)
   1a2d4:	eb 00                	jmp    1a2d6 <set_origin+0x69>
   1a2d6:	eb 00                	jmp    1a2d8 <set_origin+0x6b>
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
   1a2d8:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1a2df:	b8 0d 00 00 00       	mov    $0xd,%eax
   1a2e4:	ee                   	out    %al,(%dx)
   1a2e5:	eb 00                	jmp    1a2e7 <set_origin+0x7a>
   1a2e7:	eb 00                	jmp    1a2e9 <set_origin+0x7c>
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
   1a2e9:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a2ed:	89 d0                	mov    %edx,%eax
   1a2ef:	c1 e0 03             	shl    $0x3,%eax
   1a2f2:	01 d0                	add    %edx,%eax
   1a2f4:	c1 e0 04             	shl    $0x4,%eax
   1a2f7:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a2fc:	8b 10                	mov    (%eax),%edx
   1a2fe:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1a303:	29 c2                	sub    %eax,%edx
   1a305:	89 d0                	mov    %edx,%eax
   1a307:	d1 e8                	shr    %eax
   1a309:	0f b6 c0             	movzbl %al,%eax
   1a30c:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1a313:	ee                   	out    %al,(%dx)
   1a314:	eb 00                	jmp    1a316 <set_origin+0xa9>
   1a316:	eb 00                	jmp    1a318 <set_origin+0xab>
	sti();
   1a318:	fb                   	sti    
   1a319:	c3                   	ret    
		return;
   1a31a:	90                   	nop
   1a31b:	c3                   	ret    
		return;
   1a31c:	90                   	nop
}
   1a31d:	c3                   	ret    

0001a31e <scrup>:

// 向上卷动上行
// 将屏幕滚动窗口向上移动一行,并在屏幕滚动区域底出现的新行上添加空格字符.滚屏区域必须大于1行.
static void scrup(int currcons)
{
   1a31e:	57                   	push   %edi
   1a31f:	56                   	push   %esi
   1a320:	53                   	push   %ebx
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
   1a321:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a325:	89 d0                	mov    %edx,%eax
   1a327:	c1 e0 03             	shl    $0x3,%eax
   1a32a:	01 d0                	add    %edx,%eax
   1a32c:	c1 e0 04             	shl    $0x4,%eax
   1a32f:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a334:	8b 08                	mov    (%eax),%ecx
   1a336:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a33a:	89 d0                	mov    %edx,%eax
   1a33c:	c1 e0 03             	shl    $0x3,%eax
   1a33f:	01 d0                	add    %edx,%eax
   1a341:	c1 e0 04             	shl    $0x4,%eax
   1a344:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a349:	8b 00                	mov    (%eax),%eax
   1a34b:	39 c1                	cmp    %eax,%ecx
   1a34d:	0f 86 5d 04 00 00    	jbe    1a7b0 <scrup+0x492>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a353:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a35a:	3c 21                	cmp    $0x21,%al
   1a35c:	74 0f                	je     1a36d <scrup+0x4f>
   1a35e:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a365:	3c 20                	cmp    $0x20,%al
   1a367:	0f 85 71 03 00 00    	jne    1a6de <scrup+0x3c0>
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a36d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a371:	89 d0                	mov    %edx,%eax
   1a373:	c1 e0 03             	shl    $0x3,%eax
   1a376:	01 d0                	add    %edx,%eax
   1a378:	c1 e0 04             	shl    $0x4,%eax
   1a37b:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a380:	8b 00                	mov    (%eax),%eax
   1a382:	85 c0                	test   %eax,%eax
   1a384:	0f 85 7f 02 00 00    	jne    1a609 <scrup+0x2eb>
   1a38a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a38e:	89 d0                	mov    %edx,%eax
   1a390:	c1 e0 03             	shl    $0x3,%eax
   1a393:	01 d0                	add    %edx,%eax
   1a395:	c1 e0 04             	shl    $0x4,%eax
   1a398:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a39d:	8b 10                	mov    (%eax),%edx
   1a39f:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a3a4:	39 c2                	cmp    %eax,%edx
   1a3a6:	0f 85 5d 02 00 00    	jne    1a609 <scrup+0x2eb>
			origin += video_size_row;
   1a3ac:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3b0:	89 d0                	mov    %edx,%eax
   1a3b2:	c1 e0 03             	shl    $0x3,%eax
   1a3b5:	01 d0                	add    %edx,%eax
   1a3b7:	c1 e0 04             	shl    $0x4,%eax
   1a3ba:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a3bf:	8b 10                	mov    (%eax),%edx
   1a3c1:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a3c6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a3c9:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3cd:	89 d0                	mov    %edx,%eax
   1a3cf:	c1 e0 03             	shl    $0x3,%eax
   1a3d2:	01 d0                	add    %edx,%eax
   1a3d4:	c1 e0 04             	shl    $0x4,%eax
   1a3d7:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a3dc:	89 08                	mov    %ecx,(%eax)
			pos += video_size_row;
   1a3de:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3e2:	89 d0                	mov    %edx,%eax
   1a3e4:	c1 e0 03             	shl    $0x3,%eax
   1a3e7:	01 d0                	add    %edx,%eax
   1a3e9:	c1 e0 04             	shl    $0x4,%eax
   1a3ec:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a3f1:	8b 10                	mov    (%eax),%edx
   1a3f3:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a3f8:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a3fb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3ff:	89 d0                	mov    %edx,%eax
   1a401:	c1 e0 03             	shl    $0x3,%eax
   1a404:	01 d0                	add    %edx,%eax
   1a406:	c1 e0 04             	shl    $0x4,%eax
   1a409:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a40e:	89 08                	mov    %ecx,(%eax)
			scr_end += video_size_row;
   1a410:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a414:	89 d0                	mov    %edx,%eax
   1a416:	c1 e0 03             	shl    $0x3,%eax
   1a419:	01 d0                	add    %edx,%eax
   1a41b:	c1 e0 04             	shl    $0x4,%eax
   1a41e:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a423:	8b 10                	mov    (%eax),%edx
   1a425:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a42a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a42d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a431:	89 d0                	mov    %edx,%eax
   1a433:	c1 e0 03             	shl    $0x3,%eax
   1a436:	01 d0                	add    %edx,%eax
   1a438:	c1 e0 04             	shl    $0x4,%eax
   1a43b:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a440:	89 08                	mov    %ecx,(%eax)
			// 如果屏幕窗口末端所对应的显示内存指针scr_end超出了实际显示内存末端,则将屏幕内容除第一行以外所有行对应的内存数据移动到显示内存的起始位置video_mem_start
			// 处,并在整屏窗口向下移动出现的新行上填入空格字符.然后根据屏幕内存数据移动后的情况,重新调整当前屏幕对应内存的起始指针,光标位置指针和屏幕末端
			// 对应内存指针scr_end.
			if (scr_end > video_mem_end) {
   1a442:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a446:	89 d0                	mov    %edx,%eax
   1a448:	c1 e0 03             	shl    $0x3,%eax
   1a44b:	01 d0                	add    %edx,%eax
   1a44d:	c1 e0 04             	shl    $0x4,%eax
   1a450:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a455:	8b 08                	mov    (%eax),%ecx
   1a457:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a45b:	89 d0                	mov    %edx,%eax
   1a45d:	c1 e0 03             	shl    $0x3,%eax
   1a460:	01 d0                	add    %edx,%eax
   1a462:	c1 e0 04             	shl    $0x4,%eax
   1a465:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1a46a:	8b 00                	mov    (%eax),%eax
   1a46c:	39 c1                	cmp    %eax,%ecx
   1a46e:	0f 86 44 01 00 00    	jbe    1a5b8 <scrup+0x29a>
					"rep\n\t"												// 重复操作,将当前屏幕内存数据移动到显示内存起始处
					"movsl\n\t"
					"movl video_num_columns, %1\n\t"
					"rep\n\t"												// 在新行上填入空格字符
					"stosw"
					::"a" (video_erase_char),
   1a474:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a478:	89 d0                	mov    %edx,%eax
   1a47a:	c1 e0 03             	shl    $0x3,%eax
   1a47d:	01 d0                	add    %edx,%eax
   1a47f:	c1 e0 04             	shl    $0x4,%eax
   1a482:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a487:	0f b7 18             	movzwl (%eax),%ebx
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
   1a48a:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1a48f:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a492:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a497:	0f af c2             	imul   %edx,%eax
   1a49a:	d1 e8                	shr    %eax
   1a49c:	89 c1                	mov    %eax,%ecx
					"D" (video_mem_start),
   1a49e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4a2:	89 d0                	mov    %edx,%eax
   1a4a4:	c1 e0 03             	shl    $0x3,%eax
   1a4a7:	01 d0                	add    %edx,%eax
   1a4a9:	c1 e0 04             	shl    $0x4,%eax
   1a4ac:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a4b1:	8b 38                	mov    (%eax),%edi
					"S" (origin)
   1a4b3:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4b7:	89 d0                	mov    %edx,%eax
   1a4b9:	c1 e0 03             	shl    $0x3,%eax
   1a4bc:	01 d0                	add    %edx,%eax
   1a4be:	c1 e0 04             	shl    $0x4,%eax
   1a4c1:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a4c6:	8b 10                	mov    (%eax),%edx
				__asm__("cld\n\t"											// 清方向位
   1a4c8:	89 d8                	mov    %ebx,%eax
   1a4ca:	89 d6                	mov    %edx,%esi
   1a4cc:	fc                   	cld    
   1a4cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a4cf:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a4d5:	f3 66 ab             	rep stos %ax,%es:(%edi)
					:);
				// 重新设置快速滚屏的末端位置
				scr_end -= origin - video_mem_start;
   1a4d8:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4dc:	89 d0                	mov    %edx,%eax
   1a4de:	c1 e0 03             	shl    $0x3,%eax
   1a4e1:	01 d0                	add    %edx,%eax
   1a4e3:	c1 e0 04             	shl    $0x4,%eax
   1a4e6:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a4eb:	8b 08                	mov    (%eax),%ecx
   1a4ed:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4f1:	89 d0                	mov    %edx,%eax
   1a4f3:	c1 e0 03             	shl    $0x3,%eax
   1a4f6:	01 d0                	add    %edx,%eax
   1a4f8:	c1 e0 04             	shl    $0x4,%eax
   1a4fb:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a500:	8b 18                	mov    (%eax),%ebx
   1a502:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a506:	89 d0                	mov    %edx,%eax
   1a508:	c1 e0 03             	shl    $0x3,%eax
   1a50b:	01 d0                	add    %edx,%eax
   1a50d:	c1 e0 04             	shl    $0x4,%eax
   1a510:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a515:	8b 00                	mov    (%eax),%eax
   1a517:	29 c3                	sub    %eax,%ebx
   1a519:	89 d8                	mov    %ebx,%eax
   1a51b:	01 c1                	add    %eax,%ecx
   1a51d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a521:	89 d0                	mov    %edx,%eax
   1a523:	c1 e0 03             	shl    $0x3,%eax
   1a526:	01 d0                	add    %edx,%eax
   1a528:	c1 e0 04             	shl    $0x4,%eax
   1a52b:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a530:	89 08                	mov    %ecx,(%eax)
				// 设置当前显示位置
				pos -= origin - video_mem_start;
   1a532:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a536:	89 d0                	mov    %edx,%eax
   1a538:	c1 e0 03             	shl    $0x3,%eax
   1a53b:	01 d0                	add    %edx,%eax
   1a53d:	c1 e0 04             	shl    $0x4,%eax
   1a540:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a545:	8b 08                	mov    (%eax),%ecx
   1a547:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a54b:	89 d0                	mov    %edx,%eax
   1a54d:	c1 e0 03             	shl    $0x3,%eax
   1a550:	01 d0                	add    %edx,%eax
   1a552:	c1 e0 04             	shl    $0x4,%eax
   1a555:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a55a:	8b 18                	mov    (%eax),%ebx
   1a55c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a560:	89 d0                	mov    %edx,%eax
   1a562:	c1 e0 03             	shl    $0x3,%eax
   1a565:	01 d0                	add    %edx,%eax
   1a567:	c1 e0 04             	shl    $0x4,%eax
   1a56a:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a56f:	8b 00                	mov    (%eax),%eax
   1a571:	29 c3                	sub    %eax,%ebx
   1a573:	89 d8                	mov    %ebx,%eax
   1a575:	01 c1                	add    %eax,%ecx
   1a577:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a57b:	89 d0                	mov    %edx,%eax
   1a57d:	c1 e0 03             	shl    $0x3,%eax
   1a580:	01 d0                	add    %edx,%eax
   1a582:	c1 e0 04             	shl    $0x4,%eax
   1a585:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1a58a:	89 08                	mov    %ecx,(%eax)
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
   1a58c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a590:	89 d0                	mov    %edx,%eax
   1a592:	c1 e0 03             	shl    $0x3,%eax
   1a595:	01 d0                	add    %edx,%eax
   1a597:	c1 e0 04             	shl    $0x4,%eax
   1a59a:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1a59f:	8b 08                	mov    (%eax),%ecx
   1a5a1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5a5:	89 d0                	mov    %edx,%eax
   1a5a7:	c1 e0 03             	shl    $0x3,%eax
   1a5aa:	01 d0                	add    %edx,%eax
   1a5ac:	c1 e0 04             	shl    $0x4,%eax
   1a5af:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a5b4:	89 08                	mov    %ecx,(%eax)
   1a5b6:	eb 40                	jmp    1a5f8 <scrup+0x2da>
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
   1a5b8:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5bc:	89 d0                	mov    %edx,%eax
   1a5be:	c1 e0 03             	shl    $0x3,%eax
   1a5c1:	01 d0                	add    %edx,%eax
   1a5c3:	c1 e0 04             	shl    $0x4,%eax
   1a5c6:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a5cb:	0f b7 18             	movzwl (%eax),%ebx
				__asm__("cld\n\t"
   1a5ce:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
   1a5d4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5d8:	89 d0                	mov    %edx,%eax
   1a5da:	c1 e0 03             	shl    $0x3,%eax
   1a5dd:	01 d0                	add    %edx,%eax
   1a5df:	c1 e0 04             	shl    $0x4,%eax
   1a5e2:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1a5e7:	8b 10                	mov    (%eax),%edx
   1a5e9:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a5ee:	29 c2                	sub    %eax,%edx
				__asm__("cld\n\t"
   1a5f0:	89 d8                	mov    %ebx,%eax
   1a5f2:	89 d7                	mov    %edx,%edi
   1a5f4:	fc                   	cld    
   1a5f5:	f3 66 ab             	rep stos %ax,%es:(%edi)
					:);
			}
			// 然后把新屏幕滚动窗口内存起始位置值origin写入显示控制器中.
			set_origin(currcons);
   1a5f8:	ff 74 24 10          	pushl  0x10(%esp)
   1a5fc:	e8 6c fc ff ff       	call   1a26d <set_origin>
   1a601:	83 c4 04             	add    $0x4,%esp
		if (!top && bottom == video_num_lines) {
   1a604:	e9 a8 01 00 00       	jmp    1a7b1 <scrup+0x493>
				"rep\n\t"													// 循环操作,将top+1到bottom行所对应的内存块移到top行开始处.
				"movsl\n\t"
				"movl video_num_columns, %%ecx\n\t"
				"rep\n\t"													// 在新行上填入擦除字符.
				"stosw"
				::"a" (video_erase_char),
   1a609:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a60d:	89 d0                	mov    %edx,%eax
   1a60f:	c1 e0 03             	shl    $0x3,%eax
   1a612:	01 d0                	add    %edx,%eax
   1a614:	c1 e0 04             	shl    $0x4,%eax
   1a617:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a61c:	0f b7 18             	movzwl (%eax),%ebx
				"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a61f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a623:	89 d0                	mov    %edx,%eax
   1a625:	c1 e0 03             	shl    $0x3,%eax
   1a628:	01 d0                	add    %edx,%eax
   1a62a:	c1 e0 04             	shl    $0x4,%eax
   1a62d:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a632:	8b 08                	mov    (%eax),%ecx
   1a634:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a638:	89 d0                	mov    %edx,%eax
   1a63a:	c1 e0 03             	shl    $0x3,%eax
   1a63d:	01 d0                	add    %edx,%eax
   1a63f:	c1 e0 04             	shl    $0x4,%eax
   1a642:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a647:	8b 00                	mov    (%eax),%eax
   1a649:	29 c1                	sub    %eax,%ecx
   1a64b:	89 c8                	mov    %ecx,%eax
   1a64d:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a650:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a655:	0f af c2             	imul   %edx,%eax
   1a658:	d1 e8                	shr    %eax
   1a65a:	89 c1                	mov    %eax,%ecx
				"D" (origin + video_size_row * top),
   1a65c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a660:	89 d0                	mov    %edx,%eax
   1a662:	c1 e0 03             	shl    $0x3,%eax
   1a665:	01 d0                	add    %edx,%eax
   1a667:	c1 e0 04             	shl    $0x4,%eax
   1a66a:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a66f:	8b 30                	mov    (%eax),%esi
   1a671:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a675:	89 d0                	mov    %edx,%eax
   1a677:	c1 e0 03             	shl    $0x3,%eax
   1a67a:	01 d0                	add    %edx,%eax
   1a67c:	c1 e0 04             	shl    $0x4,%eax
   1a67f:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a684:	8b 10                	mov    (%eax),%edx
   1a686:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a68b:	0f af c2             	imul   %edx,%eax
   1a68e:	8d 3c 06             	lea    (%esi,%eax,1),%edi
				"S" (origin + video_size_row * (top + 1))
   1a691:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a695:	89 d0                	mov    %edx,%eax
   1a697:	c1 e0 03             	shl    $0x3,%eax
   1a69a:	01 d0                	add    %edx,%eax
   1a69c:	c1 e0 04             	shl    $0x4,%eax
   1a69f:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a6a4:	8b 30                	mov    (%eax),%esi
   1a6a6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6aa:	89 d0                	mov    %edx,%eax
   1a6ac:	c1 e0 03             	shl    $0x3,%eax
   1a6af:	01 d0                	add    %edx,%eax
   1a6b1:	c1 e0 04             	shl    $0x4,%eax
   1a6b4:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a6b9:	8b 00                	mov    (%eax),%eax
   1a6bb:	8d 50 01             	lea    0x1(%eax),%edx
   1a6be:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a6c3:	0f af c2             	imul   %edx,%eax
   1a6c6:	8d 14 06             	lea    (%esi,%eax,1),%edx
			__asm__("cld\n\t"
   1a6c9:	89 d8                	mov    %ebx,%eax
   1a6cb:	89 d6                	mov    %edx,%esi
   1a6cd:	fc                   	cld    
   1a6ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a6d0:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a6d6:	f3 66 ab             	rep stos %ax,%es:(%edi)
		if (!top && bottom == video_num_lines) {
   1a6d9:	e9 d3 00 00 00       	jmp    1a7b1 <scrup+0x493>
			"rep\n\t"
			"movsl\n\t"
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a6de:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6e2:	89 d0                	mov    %edx,%eax
   1a6e4:	c1 e0 03             	shl    $0x3,%eax
   1a6e7:	01 d0                	add    %edx,%eax
   1a6e9:	c1 e0 04             	shl    $0x4,%eax
   1a6ec:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a6f1:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a6f4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6f8:	89 d0                	mov    %edx,%eax
   1a6fa:	c1 e0 03             	shl    $0x3,%eax
   1a6fd:	01 d0                	add    %edx,%eax
   1a6ff:	c1 e0 04             	shl    $0x4,%eax
   1a702:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a707:	8b 08                	mov    (%eax),%ecx
   1a709:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a70d:	89 d0                	mov    %edx,%eax
   1a70f:	c1 e0 03             	shl    $0x3,%eax
   1a712:	01 d0                	add    %edx,%eax
   1a714:	c1 e0 04             	shl    $0x4,%eax
   1a717:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a71c:	8b 00                	mov    (%eax),%eax
   1a71e:	29 c1                	sub    %eax,%ecx
   1a720:	89 c8                	mov    %ecx,%eax
   1a722:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a725:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a72a:	0f af c2             	imul   %edx,%eax
   1a72d:	d1 e8                	shr    %eax
   1a72f:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * top),
   1a731:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a735:	89 d0                	mov    %edx,%eax
   1a737:	c1 e0 03             	shl    $0x3,%eax
   1a73a:	01 d0                	add    %edx,%eax
   1a73c:	c1 e0 04             	shl    $0x4,%eax
   1a73f:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a744:	8b 30                	mov    (%eax),%esi
   1a746:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a74a:	89 d0                	mov    %edx,%eax
   1a74c:	c1 e0 03             	shl    $0x3,%eax
   1a74f:	01 d0                	add    %edx,%eax
   1a751:	c1 e0 04             	shl    $0x4,%eax
   1a754:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a759:	8b 10                	mov    (%eax),%edx
   1a75b:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a760:	0f af c2             	imul   %edx,%eax
   1a763:	8d 3c 06             	lea    (%esi,%eax,1),%edi
			"S" (origin + video_size_row * (top + 1))
   1a766:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a76a:	89 d0                	mov    %edx,%eax
   1a76c:	c1 e0 03             	shl    $0x3,%eax
   1a76f:	01 d0                	add    %edx,%eax
   1a771:	c1 e0 04             	shl    $0x4,%eax
   1a774:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a779:	8b 30                	mov    (%eax),%esi
   1a77b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a77f:	89 d0                	mov    %edx,%eax
   1a781:	c1 e0 03             	shl    $0x3,%eax
   1a784:	01 d0                	add    %edx,%eax
   1a786:	c1 e0 04             	shl    $0x4,%eax
   1a789:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a78e:	8b 00                	mov    (%eax),%eax
   1a790:	8d 50 01             	lea    0x1(%eax),%edx
   1a793:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a798:	0f af c2             	imul   %edx,%eax
   1a79b:	8d 14 06             	lea    (%esi,%eax,1),%edx
		__asm__("cld\n\t"
   1a79e:	89 d8                	mov    %ebx,%eax
   1a7a0:	89 d6                	mov    %edx,%esi
   1a7a2:	fc                   	cld    
   1a7a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a7a5:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a7ab:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a7ae:	eb 01                	jmp    1a7b1 <scrup+0x493>
		return;
   1a7b0:	90                   	nop
			:);
	}
}
   1a7b1:	5b                   	pop    %ebx
   1a7b2:	5e                   	pop    %esi
   1a7b3:	5f                   	pop    %edi
   1a7b4:	c3                   	ret    

0001a7b5 <scrdown>:
// 将屏幕滚动窗口向上移动一行,相应屏幕滚动区域内容向下移动1行.并在移动开始行的上方出现一新行.处理方法与scrup()相似,只是为了在
// 移动显示内存数据时不会出现数据覆盖的问题,复制操作是以逆向进行的,即先从屏幕倒数第2行的最后一个字符开始复制到最后一行,再将倒数第3行
// 复制到倒数第2行,等等.因为此时对EGA/VGA显示类型和MDA类型的处理过程完全一样,所以该函数实际上没有必要写两段相同的代码.即这里if和
// else语句块中的操作完全一样.
static void scrdown(int currcons)
{
   1a7b5:	57                   	push   %edi
   1a7b6:	56                   	push   %esi
   1a7b7:	53                   	push   %ebx
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
   1a7b8:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7bc:	89 d0                	mov    %edx,%eax
   1a7be:	c1 e0 03             	shl    $0x3,%eax
   1a7c1:	01 d0                	add    %edx,%eax
   1a7c3:	c1 e0 04             	shl    $0x4,%eax
   1a7c6:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a7cb:	8b 08                	mov    (%eax),%ecx
   1a7cd:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7d1:	89 d0                	mov    %edx,%eax
   1a7d3:	c1 e0 03             	shl    $0x3,%eax
   1a7d6:	01 d0                	add    %edx,%eax
   1a7d8:	c1 e0 04             	shl    $0x4,%eax
   1a7db:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a7e0:	8b 00                	mov    (%eax),%eax
   1a7e2:	39 c1                	cmp    %eax,%ecx
   1a7e4:	0f 86 cf 01 00 00    	jbe    1a9b9 <scrdown+0x204>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a7ea:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a7f1:	3c 21                	cmp    $0x21,%al
   1a7f3:	74 0f                	je     1a804 <scrdown+0x4f>
   1a7f5:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1a7fc:	3c 20                	cmp    $0x20,%al
   1a7fe:	0f 85 dc 00 00 00    	jne    1a8e0 <scrdown+0x12b>
			"movsl\n\t"
			"addl $2, %%edi\n\t"								/* %edi has been decremented by 4 */ /* %edi已减4,因也是反向填擦除字符 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"											// 将擦除字符填入上方新行中.
			"stosw"
			::"a" (video_erase_char),
   1a804:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a808:	89 d0                	mov    %edx,%eax
   1a80a:	c1 e0 03             	shl    $0x3,%eax
   1a80d:	01 d0                	add    %edx,%eax
   1a80f:	c1 e0 04             	shl    $0x4,%eax
   1a812:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a817:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a81a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a81e:	89 d0                	mov    %edx,%eax
   1a820:	c1 e0 03             	shl    $0x3,%eax
   1a823:	01 d0                	add    %edx,%eax
   1a825:	c1 e0 04             	shl    $0x4,%eax
   1a828:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a82d:	8b 08                	mov    (%eax),%ecx
   1a82f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a833:	89 d0                	mov    %edx,%eax
   1a835:	c1 e0 03             	shl    $0x3,%eax
   1a838:	01 d0                	add    %edx,%eax
   1a83a:	c1 e0 04             	shl    $0x4,%eax
   1a83d:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a842:	8b 00                	mov    (%eax),%eax
   1a844:	29 c1                	sub    %eax,%ecx
   1a846:	89 c8                	mov    %ecx,%eax
   1a848:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a84b:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a850:	0f af c2             	imul   %edx,%eax
   1a853:	d1 e8                	shr    %eax
   1a855:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a857:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a85b:	89 d0                	mov    %edx,%eax
   1a85d:	c1 e0 03             	shl    $0x3,%eax
   1a860:	01 d0                	add    %edx,%eax
   1a862:	c1 e0 04             	shl    $0x4,%eax
   1a865:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a86a:	8b 30                	mov    (%eax),%esi
   1a86c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a870:	89 d0                	mov    %edx,%eax
   1a872:	c1 e0 03             	shl    $0x3,%eax
   1a875:	01 d0                	add    %edx,%eax
   1a877:	c1 e0 04             	shl    $0x4,%eax
   1a87a:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a87f:	8b 10                	mov    (%eax),%edx
   1a881:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a886:	0f af c2             	imul   %edx,%eax
   1a889:	01 f0                	add    %esi,%eax
   1a88b:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a88e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a892:	89 d0                	mov    %edx,%eax
   1a894:	c1 e0 03             	shl    $0x3,%eax
   1a897:	01 d0                	add    %edx,%eax
   1a899:	c1 e0 04             	shl    $0x4,%eax
   1a89c:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a8a1:	8b 30                	mov    (%eax),%esi
   1a8a3:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8a7:	89 d0                	mov    %edx,%eax
   1a8a9:	c1 e0 03             	shl    $0x3,%eax
   1a8ac:	01 d0                	add    %edx,%eax
   1a8ae:	c1 e0 04             	shl    $0x4,%eax
   1a8b1:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a8b6:	8b 00                	mov    (%eax),%eax
   1a8b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a8bb:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a8c0:	0f af c2             	imul   %edx,%eax
   1a8c3:	01 f0                	add    %esi,%eax
   1a8c5:	8d 50 fc             	lea    -0x4(%eax),%edx
		__asm__("std\n\t"										// 置方向位!!
   1a8c8:	89 d8                	mov    %ebx,%eax
   1a8ca:	89 d6                	mov    %edx,%esi
   1a8cc:	fd                   	std    
   1a8cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a8cf:	83 c7 02             	add    $0x2,%edi
   1a8d2:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a8d8:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a8db:	e9 da 00 00 00       	jmp    1a9ba <scrdown+0x205>
			"movsl\n\t"
			"addl $2, %%edi\n\t"									/* %edi has been decremented by 4 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a8e0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8e4:	89 d0                	mov    %edx,%eax
   1a8e6:	c1 e0 03             	shl    $0x3,%eax
   1a8e9:	01 d0                	add    %edx,%eax
   1a8eb:	c1 e0 04             	shl    $0x4,%eax
   1a8ee:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1a8f3:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a8f6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8fa:	89 d0                	mov    %edx,%eax
   1a8fc:	c1 e0 03             	shl    $0x3,%eax
   1a8ff:	01 d0                	add    %edx,%eax
   1a901:	c1 e0 04             	shl    $0x4,%eax
   1a904:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a909:	8b 08                	mov    (%eax),%ecx
   1a90b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a90f:	89 d0                	mov    %edx,%eax
   1a911:	c1 e0 03             	shl    $0x3,%eax
   1a914:	01 d0                	add    %edx,%eax
   1a916:	c1 e0 04             	shl    $0x4,%eax
   1a919:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1a91e:	8b 00                	mov    (%eax),%eax
   1a920:	29 c1                	sub    %eax,%ecx
   1a922:	89 c8                	mov    %ecx,%eax
   1a924:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a927:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1a92c:	0f af c2             	imul   %edx,%eax
   1a92f:	d1 e8                	shr    %eax
   1a931:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a933:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a937:	89 d0                	mov    %edx,%eax
   1a939:	c1 e0 03             	shl    $0x3,%eax
   1a93c:	01 d0                	add    %edx,%eax
   1a93e:	c1 e0 04             	shl    $0x4,%eax
   1a941:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a946:	8b 30                	mov    (%eax),%esi
   1a948:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a94c:	89 d0                	mov    %edx,%eax
   1a94e:	c1 e0 03             	shl    $0x3,%eax
   1a951:	01 d0                	add    %edx,%eax
   1a953:	c1 e0 04             	shl    $0x4,%eax
   1a956:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a95b:	8b 10                	mov    (%eax),%edx
   1a95d:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a962:	0f af c2             	imul   %edx,%eax
   1a965:	01 f0                	add    %esi,%eax
   1a967:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a96a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a96e:	89 d0                	mov    %edx,%eax
   1a970:	c1 e0 03             	shl    $0x3,%eax
   1a973:	01 d0                	add    %edx,%eax
   1a975:	c1 e0 04             	shl    $0x4,%eax
   1a978:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1a97d:	8b 30                	mov    (%eax),%esi
   1a97f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a983:	89 d0                	mov    %edx,%eax
   1a985:	c1 e0 03             	shl    $0x3,%eax
   1a988:	01 d0                	add    %edx,%eax
   1a98a:	c1 e0 04             	shl    $0x4,%eax
   1a98d:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a992:	8b 00                	mov    (%eax),%eax
   1a994:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a997:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1a99c:	0f af c2             	imul   %edx,%eax
   1a99f:	01 f0                	add    %esi,%eax
   1a9a1:	8d 50 fc             	lea    -0x4(%eax),%edx
		__asm__("std\n\t"
   1a9a4:	89 d8                	mov    %ebx,%eax
   1a9a6:	89 d6                	mov    %edx,%esi
   1a9a8:	fd                   	std    
   1a9a9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a9ab:	83 c7 02             	add    $0x2,%edi
   1a9ae:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1a9b4:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a9b7:	eb 01                	jmp    1a9ba <scrdown+0x205>
		return;
   1a9b9:	90                   	nop
			:);
	}
}
   1a9ba:	5b                   	pop    %ebx
   1a9bb:	5e                   	pop    %esi
   1a9bc:	5f                   	pop    %edi
   1a9bd:	c3                   	ret    

0001a9be <lf>:
// 如果光标没有处在最后一行,则直接修改光标当前行变量y++,并调整光标对应显示内存位置pos(加上一行字符所对应的内存长度).否则
// 需要将屏幕窗口内容上移一行.
// 函数名称lf(line feed 换行)是指处理控制字符LF.
static void lf(int currcons)
{
	if (y + 1 < bottom) {
   1a9be:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9c2:	89 d0                	mov    %edx,%eax
   1a9c4:	c1 e0 03             	shl    $0x3,%eax
   1a9c7:	01 d0                	add    %edx,%eax
   1a9c9:	c1 e0 04             	shl    $0x4,%eax
   1a9cc:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1a9d1:	8b 00                	mov    (%eax),%eax
   1a9d3:	8d 48 01             	lea    0x1(%eax),%ecx
   1a9d6:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9da:	89 d0                	mov    %edx,%eax
   1a9dc:	c1 e0 03             	shl    $0x3,%eax
   1a9df:	01 d0                	add    %edx,%eax
   1a9e1:	c1 e0 04             	shl    $0x4,%eax
   1a9e4:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1a9e9:	8b 00                	mov    (%eax),%eax
   1a9eb:	39 c1                	cmp    %eax,%ecx
   1a9ed:	73 60                	jae    1aa4f <lf+0x91>
		y++;
   1a9ef:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9f3:	89 d0                	mov    %edx,%eax
   1a9f5:	c1 e0 03             	shl    $0x3,%eax
   1a9f8:	01 d0                	add    %edx,%eax
   1a9fa:	c1 e0 04             	shl    $0x4,%eax
   1a9fd:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa02:	8b 00                	mov    (%eax),%eax
   1aa04:	8d 48 01             	lea    0x1(%eax),%ecx
   1aa07:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa0b:	89 d0                	mov    %edx,%eax
   1aa0d:	c1 e0 03             	shl    $0x3,%eax
   1aa10:	01 d0                	add    %edx,%eax
   1aa12:	c1 e0 04             	shl    $0x4,%eax
   1aa15:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa1a:	89 08                	mov    %ecx,(%eax)
		pos += video_size_row;							// 加上屏幕一行占用内存的字节数.
   1aa1c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa20:	89 d0                	mov    %edx,%eax
   1aa22:	c1 e0 03             	shl    $0x3,%eax
   1aa25:	01 d0                	add    %edx,%eax
   1aa27:	c1 e0 04             	shl    $0x4,%eax
   1aa2a:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aa2f:	8b 10                	mov    (%eax),%edx
   1aa31:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1aa36:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1aa39:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa3d:	89 d0                	mov    %edx,%eax
   1aa3f:	c1 e0 03             	shl    $0x3,%eax
   1aa42:	01 d0                	add    %edx,%eax
   1aa44:	c1 e0 04             	shl    $0x4,%eax
   1aa47:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aa4c:	89 08                	mov    %ecx,(%eax)
		return;
   1aa4e:	c3                   	ret    
	}
	scrup(currcons);									// 将屏幕窗口内容上移一行.
   1aa4f:	ff 74 24 04          	pushl  0x4(%esp)
   1aa53:	e8 c6 f8 ff ff       	call   1a31e <scrup>
   1aa58:	83 c4 04             	add    $0x4,%esp
}
   1aa5b:	c3                   	ret    

0001aa5c <ri>:
// 如果光标不在屏幕第一行上,则直接修改光标当前标量y--,并调整光标对应显示内存位置pos,减去屏幕上一行字符所对应的内存长度字节数.
// 否则需要将屏幕窗口内容下移一行.
// 函数名称ri(reverse index 反向索引)是指控制字符RI或转义序列"ESC M".
static void ri(int currcons)
{
	if (y > top) {
   1aa5c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa60:	89 d0                	mov    %edx,%eax
   1aa62:	c1 e0 03             	shl    $0x3,%eax
   1aa65:	01 d0                	add    %edx,%eax
   1aa67:	c1 e0 04             	shl    $0x4,%eax
   1aa6a:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa6f:	8b 08                	mov    (%eax),%ecx
   1aa71:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa75:	89 d0                	mov    %edx,%eax
   1aa77:	c1 e0 03             	shl    $0x3,%eax
   1aa7a:	01 d0                	add    %edx,%eax
   1aa7c:	c1 e0 04             	shl    $0x4,%eax
   1aa7f:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1aa84:	8b 00                	mov    (%eax),%eax
   1aa86:	39 c1                	cmp    %eax,%ecx
   1aa88:	76 61                	jbe    1aaeb <ri+0x8f>
		y--;											// 减去屏幕一行占用内存的字节数
   1aa8a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa8e:	89 d0                	mov    %edx,%eax
   1aa90:	c1 e0 03             	shl    $0x3,%eax
   1aa93:	01 d0                	add    %edx,%eax
   1aa95:	c1 e0 04             	shl    $0x4,%eax
   1aa98:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aa9d:	8b 00                	mov    (%eax),%eax
   1aa9f:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1aaa2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aaa6:	89 d0                	mov    %edx,%eax
   1aaa8:	c1 e0 03             	shl    $0x3,%eax
   1aaab:	01 d0                	add    %edx,%eax
   1aaad:	c1 e0 04             	shl    $0x4,%eax
   1aab0:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1aab5:	89 08                	mov    %ecx,(%eax)
		pos -= video_size_row;
   1aab7:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aabb:	89 d0                	mov    %edx,%eax
   1aabd:	c1 e0 03             	shl    $0x3,%eax
   1aac0:	01 d0                	add    %edx,%eax
   1aac2:	c1 e0 04             	shl    $0x4,%eax
   1aac5:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aaca:	8b 10                	mov    (%eax),%edx
   1aacc:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1aad1:	89 d1                	mov    %edx,%ecx
   1aad3:	29 c1                	sub    %eax,%ecx
   1aad5:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aad9:	89 d0                	mov    %edx,%eax
   1aadb:	c1 e0 03             	shl    $0x3,%eax
   1aade:	01 d0                	add    %edx,%eax
   1aae0:	c1 e0 04             	shl    $0x4,%eax
   1aae3:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1aae8:	89 08                	mov    %ecx,(%eax)
		return;
   1aaea:	c3                   	ret    
	}
	scrdown(currcons);									// 将屏幕窗口内容下移一行
   1aaeb:	ff 74 24 04          	pushl  0x4(%esp)
   1aaef:	e8 c1 fc ff ff       	call   1a7b5 <scrdown>
   1aaf4:	83 c4 04             	add    $0x4,%esp
}
   1aaf7:	c3                   	ret    

0001aaf8 <cr>:
// 光标回到第1列(0列).
// 调整光标对应内存位置pos.光标所在列号*2即是0列到光标所在列对应的内存字节长度.
// 函数名称cr(carriage return回车)指明处理的控制字符的回车.
static void cr(int currcons)
{
	pos -= x << 1;										// 减去0列到光标处占用的内存字节数.
   1aaf8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aafc:	89 d0                	mov    %edx,%eax
   1aafe:	c1 e0 03             	shl    $0x3,%eax
   1ab01:	01 d0                	add    %edx,%eax
   1ab03:	c1 e0 04             	shl    $0x4,%eax
   1ab06:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab0b:	8b 08                	mov    (%eax),%ecx
   1ab0d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab11:	89 d0                	mov    %edx,%eax
   1ab13:	c1 e0 03             	shl    $0x3,%eax
   1ab16:	01 d0                	add    %edx,%eax
   1ab18:	c1 e0 04             	shl    $0x4,%eax
   1ab1b:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ab20:	8b 00                	mov    (%eax),%eax
   1ab22:	01 c0                	add    %eax,%eax
   1ab24:	29 c1                	sub    %eax,%ecx
   1ab26:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab2a:	89 d0                	mov    %edx,%eax
   1ab2c:	c1 e0 03             	shl    $0x3,%eax
   1ab2f:	01 d0                	add    %edx,%eax
   1ab31:	c1 e0 04             	shl    $0x4,%eax
   1ab34:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab39:	89 08                	mov    %ecx,(%eax)
	x = 0;
   1ab3b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab3f:	89 d0                	mov    %edx,%eax
   1ab41:	c1 e0 03             	shl    $0x3,%eax
   1ab44:	01 d0                	add    %edx,%eax
   1ab46:	c1 e0 04             	shl    $0x4,%eax
   1ab49:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ab4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1ab54:	90                   	nop
   1ab55:	c3                   	ret    

0001ab56 <del>:

// 擦除光标前一字符(用空格替代)(del -delete 删除)
// 如果光标没有处在0列,则将光标对应内存位置pos后退2字节(对应屏幕上一个字符),然后将当前光标变量列值减1,并将光标所在位置处字符符擦除
static void del(int currcons)
{
	if (x) {
   1ab56:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab5a:	89 d0                	mov    %edx,%eax
   1ab5c:	c1 e0 03             	shl    $0x3,%eax
   1ab5f:	01 d0                	add    %edx,%eax
   1ab61:	c1 e0 04             	shl    $0x4,%eax
   1ab64:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ab69:	8b 00                	mov    (%eax),%eax
   1ab6b:	85 c0                	test   %eax,%eax
   1ab6d:	0f 84 8a 00 00 00    	je     1abfd <del+0xa7>
		pos -= 2;
   1ab73:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab77:	89 d0                	mov    %edx,%eax
   1ab79:	c1 e0 03             	shl    $0x3,%eax
   1ab7c:	01 d0                	add    %edx,%eax
   1ab7e:	c1 e0 04             	shl    $0x4,%eax
   1ab81:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab86:	8b 00                	mov    (%eax),%eax
   1ab88:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1ab8b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab8f:	89 d0                	mov    %edx,%eax
   1ab91:	c1 e0 03             	shl    $0x3,%eax
   1ab94:	01 d0                	add    %edx,%eax
   1ab96:	c1 e0 04             	shl    $0x4,%eax
   1ab99:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ab9e:	89 08                	mov    %ecx,(%eax)
		x--;
   1aba0:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aba4:	89 d0                	mov    %edx,%eax
   1aba6:	c1 e0 03             	shl    $0x3,%eax
   1aba9:	01 d0                	add    %edx,%eax
   1abab:	c1 e0 04             	shl    $0x4,%eax
   1abae:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1abb3:	8b 00                	mov    (%eax),%eax
   1abb5:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1abb8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abbc:	89 d0                	mov    %edx,%eax
   1abbe:	c1 e0 03             	shl    $0x3,%eax
   1abc1:	01 d0                	add    %edx,%eax
   1abc3:	c1 e0 04             	shl    $0x4,%eax
   1abc6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1abcb:	89 08                	mov    %ecx,(%eax)
		*(unsigned short *)pos = video_erase_char;
   1abcd:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abd1:	89 d0                	mov    %edx,%eax
   1abd3:	c1 e0 03             	shl    $0x3,%eax
   1abd6:	01 d0                	add    %edx,%eax
   1abd8:	c1 e0 04             	shl    $0x4,%eax
   1abdb:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1abe0:	8b 00                	mov    (%eax),%eax
   1abe2:	89 c1                	mov    %eax,%ecx
   1abe4:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abe8:	89 d0                	mov    %edx,%eax
   1abea:	c1 e0 03             	shl    $0x3,%eax
   1abed:	01 d0                	add    %edx,%eax
   1abef:	c1 e0 04             	shl    $0x4,%eax
   1abf2:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1abf7:	0f b7 00             	movzwl (%eax),%eax
   1abfa:	66 89 01             	mov    %ax,(%ecx)
	}
}
   1abfd:	90                   	nop
   1abfe:	c3                   	ret    

0001abff <csi_J>:
// ANSI控制序列: 'ESC [ Ps J'(Ps = 0 - 删除光标处到屏幕底端;1 - 删除屏幕开始到光标处;2 - 整屏删除).本函数根据指定的控制序列
// 具体参数值,执行与光标位置的删除操作,并且在擦除字符或行时光标位置不变.
// 函数名称csi_J(CSI - Control Sequence Introducer,即控制序列引导码)指明对控制序列"CSI Ps J"进行处理.
// 参数:vpar - 对应上面控制序列中Ps的值.
static void csi_J(int currcons, int vpar)
{
   1abff:	57                   	push   %edi
   1ac00:	53                   	push   %ebx
   1ac01:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ac04:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ac08:	83 f8 01             	cmp    $0x1,%eax
   1ac0b:	74 61                	je     1ac6e <csi_J+0x6f>
   1ac0d:	83 f8 02             	cmp    $0x2,%eax
   1ac10:	0f 84 a7 00 00 00    	je     1acbd <csi_J+0xbe>
   1ac16:	85 c0                	test   %eax,%eax
   1ac18:	74 05                	je     1ac1f <csi_J+0x20>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
			start = origin;
			break;
		default:
			return;
   1ac1a:	e9 f0 00 00 00       	jmp    1ad0f <csi_J+0x110>
			count = (scr_end - pos) >> 1;					/* 擦除光标到屏幕底端所有字符 */
   1ac1f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac23:	89 d0                	mov    %edx,%eax
   1ac25:	c1 e0 03             	shl    $0x3,%eax
   1ac28:	01 d0                	add    %edx,%eax
   1ac2a:	c1 e0 04             	shl    $0x4,%eax
   1ac2d:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1ac32:	8b 08                	mov    (%eax),%ecx
   1ac34:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac38:	89 d0                	mov    %edx,%eax
   1ac3a:	c1 e0 03             	shl    $0x3,%eax
   1ac3d:	01 d0                	add    %edx,%eax
   1ac3f:	c1 e0 04             	shl    $0x4,%eax
   1ac42:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ac47:	8b 00                	mov    (%eax),%eax
   1ac49:	29 c1                	sub    %eax,%ecx
   1ac4b:	89 c8                	mov    %ecx,%eax
   1ac4d:	d1 e8                	shr    %eax
   1ac4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1ac53:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac57:	89 d0                	mov    %edx,%eax
   1ac59:	c1 e0 03             	shl    $0x3,%eax
   1ac5c:	01 d0                	add    %edx,%eax
   1ac5e:	c1 e0 04             	shl    $0x4,%eax
   1ac61:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ac66:	8b 00                	mov    (%eax),%eax
   1ac68:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ac6c:	eb 7b                	jmp    1ace9 <csi_J+0xea>
			count = (pos - origin) >> 1;					/* 删除从屏幕开始到光标处的字符 */
   1ac6e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac72:	89 d0                	mov    %edx,%eax
   1ac74:	c1 e0 03             	shl    $0x3,%eax
   1ac77:	01 d0                	add    %edx,%eax
   1ac79:	c1 e0 04             	shl    $0x4,%eax
   1ac7c:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ac81:	8b 08                	mov    (%eax),%ecx
   1ac83:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac87:	89 d0                	mov    %edx,%eax
   1ac89:	c1 e0 03             	shl    $0x3,%eax
   1ac8c:	01 d0                	add    %edx,%eax
   1ac8e:	c1 e0 04             	shl    $0x4,%eax
   1ac91:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1ac96:	8b 00                	mov    (%eax),%eax
   1ac98:	29 c1                	sub    %eax,%ecx
   1ac9a:	89 c8                	mov    %ecx,%eax
   1ac9c:	d1 e8                	shr    %eax
   1ac9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1aca2:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1aca6:	89 d0                	mov    %edx,%eax
   1aca8:	c1 e0 03             	shl    $0x3,%eax
   1acab:	01 d0                	add    %edx,%eax
   1acad:	c1 e0 04             	shl    $0x4,%eax
   1acb0:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1acb5:	8b 00                	mov    (%eax),%eax
   1acb7:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1acbb:	eb 2c                	jmp    1ace9 <csi_J+0xea>
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
   1acbd:	8b 15 34 fe 03 00    	mov    0x3fe34,%edx
   1acc3:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1acc8:	0f af c2             	imul   %edx,%eax
   1accb:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1accf:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acd3:	89 d0                	mov    %edx,%eax
   1acd5:	c1 e0 03             	shl    $0x3,%eax
   1acd8:	01 d0                	add    %edx,%eax
   1acda:	c1 e0 04             	shl    $0x4,%eax
   1acdd:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1ace2:	8b 00                	mov    (%eax),%eax
   1ace4:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ace8:	90                   	nop
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1ace9:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1aced:	89 d0                	mov    %edx,%eax
   1acef:	c1 e0 03             	shl    $0x3,%eax
   1acf2:	01 d0                	add    %edx,%eax
   1acf4:	c1 e0 04             	shl    $0x4,%eax
   1acf7:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1acfc:	0f b7 00             	movzwl (%eax),%eax
	__asm__("cld\n\t"
   1acff:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ad03:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ad07:	89 d1                	mov    %edx,%ecx
   1ad09:	89 df                	mov    %ebx,%edi
   1ad0b:	fc                   	cld    
   1ad0c:	f3 66 ab             	rep stos %ax,%es:(%edi)
		:);
}
   1ad0f:	83 c4 10             	add    $0x10,%esp
   1ad12:	5b                   	pop    %ebx
   1ad13:	5f                   	pop    %edi
   1ad14:	c3                   	ret    

0001ad15 <csi_K>:
// 删除上一行上与光标位置相关的部分.
// ANSI转义字符序列:'ESC [ Ps K'(Ps = 0删除到行尾;1 从开始删除;2 整行都删除).本函数根据参数擦除光标所在行的部分或所有字符.擦除操作从屏幕上
// 移走字符但不影响其他字符.擦除的字符被丢弃.在擦除字符或行时光标位置不变.
// 参数:par - 对应上面控制序列中Ps的值.
static void csi_K(int currcons, int vpar)
{
   1ad15:	57                   	push   %edi
   1ad16:	53                   	push   %ebx
   1ad17:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ad1a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ad1e:	83 f8 01             	cmp    $0x1,%eax
   1ad21:	74 75                	je     1ad98 <csi_K+0x83>
   1ad23:	83 f8 02             	cmp    $0x2,%eax
   1ad26:	0f 84 c5 00 00 00    	je     1adf1 <csi_K+0xdc>
   1ad2c:	85 c0                	test   %eax,%eax
   1ad2e:	74 05                	je     1ad35 <csi_K+0x20>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
			count = video_num_columns;
			break;
		default:
			return;
   1ad30:	e9 23 01 00 00       	jmp    1ae58 <csi_K+0x143>
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
   1ad35:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad39:	89 d0                	mov    %edx,%eax
   1ad3b:	c1 e0 03             	shl    $0x3,%eax
   1ad3e:	01 d0                	add    %edx,%eax
   1ad40:	c1 e0 04             	shl    $0x4,%eax
   1ad43:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ad48:	8b 10                	mov    (%eax),%edx
   1ad4a:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ad4f:	39 c2                	cmp    %eax,%edx
   1ad51:	0f 83 00 01 00 00    	jae    1ae57 <csi_K+0x142>
			count = video_num_columns - x;
   1ad57:	8b 0d 34 fe 03 00    	mov    0x3fe34,%ecx
   1ad5d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad61:	89 d0                	mov    %edx,%eax
   1ad63:	c1 e0 03             	shl    $0x3,%eax
   1ad66:	01 d0                	add    %edx,%eax
   1ad68:	c1 e0 04             	shl    $0x4,%eax
   1ad6b:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ad70:	8b 00                	mov    (%eax),%eax
   1ad72:	29 c1                	sub    %eax,%ecx
   1ad74:	89 c8                	mov    %ecx,%eax
   1ad76:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1ad7a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad7e:	89 d0                	mov    %edx,%eax
   1ad80:	c1 e0 03             	shl    $0x3,%eax
   1ad83:	01 d0                	add    %edx,%eax
   1ad85:	c1 e0 04             	shl    $0x4,%eax
   1ad88:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ad8d:	8b 00                	mov    (%eax),%eax
   1ad8f:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ad93:	e9 97 00 00 00       	jmp    1ae2f <csi_K+0x11a>
			start = pos - (x << 1);								/* 删除从行开始到光标处 */
   1ad98:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad9c:	89 d0                	mov    %edx,%eax
   1ad9e:	c1 e0 03             	shl    $0x3,%eax
   1ada1:	01 d0                	add    %edx,%eax
   1ada3:	c1 e0 04             	shl    $0x4,%eax
   1ada6:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1adab:	8b 08                	mov    (%eax),%ecx
   1adad:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adb1:	89 d0                	mov    %edx,%eax
   1adb3:	c1 e0 03             	shl    $0x3,%eax
   1adb6:	01 d0                	add    %edx,%eax
   1adb8:	c1 e0 04             	shl    $0x4,%eax
   1adbb:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1adc0:	8b 00                	mov    (%eax),%eax
   1adc2:	01 c0                	add    %eax,%eax
   1adc4:	29 c1                	sub    %eax,%ecx
   1adc6:	89 c8                	mov    %ecx,%eax
   1adc8:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = (x < video_num_columns) ? x : video_num_columns;
   1adcc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1add0:	89 d0                	mov    %edx,%eax
   1add2:	c1 e0 03             	shl    $0x3,%eax
   1add5:	01 d0                	add    %edx,%eax
   1add7:	c1 e0 04             	shl    $0x4,%eax
   1adda:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1addf:	8b 10                	mov    (%eax),%edx
   1ade1:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ade6:	39 c2                	cmp    %eax,%edx
   1ade8:	0f 46 c2             	cmovbe %edx,%eax
   1adeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1adef:	eb 3e                	jmp    1ae2f <csi_K+0x11a>
			start = pos - (x << 1);								/* 将整行字符全删除 */
   1adf1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adf5:	89 d0                	mov    %edx,%eax
   1adf7:	c1 e0 03             	shl    $0x3,%eax
   1adfa:	01 d0                	add    %edx,%eax
   1adfc:	c1 e0 04             	shl    $0x4,%eax
   1adff:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1ae04:	8b 08                	mov    (%eax),%ecx
   1ae06:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae0a:	89 d0                	mov    %edx,%eax
   1ae0c:	c1 e0 03             	shl    $0x3,%eax
   1ae0f:	01 d0                	add    %edx,%eax
   1ae11:	c1 e0 04             	shl    $0x4,%eax
   1ae14:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1ae19:	8b 00                	mov    (%eax),%eax
   1ae1b:	01 c0                	add    %eax,%eax
   1ae1d:	29 c1                	sub    %eax,%ecx
   1ae1f:	89 c8                	mov    %ecx,%eax
   1ae21:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = video_num_columns;
   1ae25:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1ae2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1ae2e:	90                   	nop
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1ae2f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae33:	89 d0                	mov    %edx,%eax
   1ae35:	c1 e0 03             	shl    $0x3,%eax
   1ae38:	01 d0                	add    %edx,%eax
   1ae3a:	c1 e0 04             	shl    $0x4,%eax
   1ae3d:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ae42:	0f b7 00             	movzwl (%eax),%eax
	__asm__("cld\n\t"
   1ae45:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ae49:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ae4d:	89 d1                	mov    %edx,%ecx
   1ae4f:	89 df                	mov    %ebx,%edi
   1ae51:	fc                   	cld    
   1ae52:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1ae55:	eb 01                	jmp    1ae58 <csi_K+0x143>
				return;
   1ae57:	90                   	nop
		:);
}
   1ae58:	83 c4 10             	add    $0x10,%esp
   1ae5b:	5b                   	pop    %ebx
   1ae5c:	5f                   	pop    %edi
   1ae5d:	c3                   	ret    

0001ae5e <csi_m>:
// 设置显示字符属性
// ANSI转义序列:'ESC [ Ps;PS m'.Ps = 0 - 默认属性;1 - 粗体并增亮;4 - 下划线;5 - 闪烁;7 - 反显;22 - 非粗体;24 - 无下划线;
// 25 - 无闪烁;27 - 正显;30~38 - 设置前景色彩;39 - 默认前景色(White);40~48 - 设置背景色彩;49 - 默认背景色(Black).
// 该控制序列根据参数设置字符显示属性.以后所有发送到终端的字符都将使用这里指定的属性,直到再次执行本控制序列重新设置字符显示的属性.
void csi_m(int currcons)
{
   1ae5e:	53                   	push   %ebx
   1ae5f:	83 ec 10             	sub    $0x10,%esp
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1ae62:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1ae69:	00 
   1ae6a:	e9 ba 05 00 00       	jmp    1b429 <csi_m+0x5cb>
		switch (par[i]) {
   1ae6f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae73:	89 d0                	mov    %edx,%eax
   1ae75:	c1 e0 03             	shl    $0x3,%eax
   1ae78:	01 d0                	add    %edx,%eax
   1ae7a:	c1 e0 02             	shl    $0x2,%eax
   1ae7d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ae81:	01 d0                	add    %edx,%eax
   1ae83:	83 c0 0c             	add    $0xc,%eax
   1ae86:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1ae8d:	83 f8 31             	cmp    $0x31,%eax
   1ae90:	0f 87 2b 04 00 00    	ja     1b2c1 <csi_m+0x463>
   1ae96:	8b 04 85 8c 4d 02 00 	mov    0x24d8c(,%eax,4),%eax
   1ae9d:	ff e0                	jmp    *%eax
			case 0:
				attr = def_attr; break;  									/* default */
   1ae9f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aea3:	89 d0                	mov    %edx,%eax
   1aea5:	c1 e0 03             	shl    $0x3,%eax
   1aea8:	01 d0                	add    %edx,%eax
   1aeaa:	c1 e0 04             	shl    $0x4,%eax
   1aead:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1aeb2:	0f b6 08             	movzbl (%eax),%ecx
   1aeb5:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aeb9:	89 d0                	mov    %edx,%eax
   1aebb:	c1 e0 03             	shl    $0x3,%eax
   1aebe:	01 d0                	add    %edx,%eax
   1aec0:	c1 e0 04             	shl    $0x4,%eax
   1aec3:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1aec8:	88 08                	mov    %cl,(%eax)
   1aeca:	e9 55 05 00 00       	jmp    1b424 <csi_m+0x5c6>
			case 1:
				attr = (iscolor ? attr | 0x08 : attr | 0x0f); break;  		/* bold */
   1aecf:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aed3:	89 d0                	mov    %edx,%eax
   1aed5:	c1 e0 03             	shl    $0x3,%eax
   1aed8:	01 d0                	add    %edx,%eax
   1aeda:	c1 e0 04             	shl    $0x4,%eax
   1aedd:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1aee2:	8b 00                	mov    (%eax),%eax
   1aee4:	85 c0                	test   %eax,%eax
   1aee6:	74 1d                	je     1af05 <csi_m+0xa7>
   1aee8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aeec:	89 d0                	mov    %edx,%eax
   1aeee:	c1 e0 03             	shl    $0x3,%eax
   1aef1:	01 d0                	add    %edx,%eax
   1aef3:	c1 e0 04             	shl    $0x4,%eax
   1aef6:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1aefb:	0f b6 00             	movzbl (%eax),%eax
   1aefe:	83 c8 08             	or     $0x8,%eax
   1af01:	89 c1                	mov    %eax,%ecx
   1af03:	eb 1b                	jmp    1af20 <csi_m+0xc2>
   1af05:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af09:	89 d0                	mov    %edx,%eax
   1af0b:	c1 e0 03             	shl    $0x3,%eax
   1af0e:	01 d0                	add    %edx,%eax
   1af10:	c1 e0 04             	shl    $0x4,%eax
   1af13:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af18:	0f b6 00             	movzbl (%eax),%eax
   1af1b:	83 c8 0f             	or     $0xf,%eax
   1af1e:	89 c1                	mov    %eax,%ecx
   1af20:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af24:	89 d0                	mov    %edx,%eax
   1af26:	c1 e0 03             	shl    $0x3,%eax
   1af29:	01 d0                	add    %edx,%eax
   1af2b:	c1 e0 04             	shl    $0x4,%eax
   1af2e:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af33:	88 08                	mov    %cl,(%eax)
   1af35:	e9 ea 04 00 00       	jmp    1b424 <csi_m+0x5c6>
			/*case 4: attr=attr|0x01;break;*/  /* underline */
			case 4: 														/* bold */
			  if (!iscolor)
   1af3a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af3e:	89 d0                	mov    %edx,%eax
   1af40:	c1 e0 03             	shl    $0x3,%eax
   1af43:	01 d0                	add    %edx,%eax
   1af45:	c1 e0 04             	shl    $0x4,%eax
   1af48:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1af4d:	8b 00                	mov    (%eax),%eax
   1af4f:	85 c0                	test   %eax,%eax
   1af51:	75 35                	jne    1af88 <csi_m+0x12a>
			    attr |= 0x01;												// 单色则带下划线显示.
   1af53:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af57:	89 d0                	mov    %edx,%eax
   1af59:	c1 e0 03             	shl    $0x3,%eax
   1af5c:	01 d0                	add    %edx,%eax
   1af5e:	c1 e0 04             	shl    $0x4,%eax
   1af61:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af66:	0f b6 00             	movzbl (%eax),%eax
   1af69:	83 c8 01             	or     $0x1,%eax
   1af6c:	89 c1                	mov    %eax,%ecx
   1af6e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af72:	89 d0                	mov    %edx,%eax
   1af74:	c1 e0 03             	shl    $0x3,%eax
   1af77:	01 d0                	add    %edx,%eax
   1af79:	c1 e0 04             	shl    $0x4,%eax
   1af7c:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1af81:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1af83:	e9 9c 04 00 00       	jmp    1b424 <csi_m+0x5c6>
			    if (vc_cons[currcons].vc_bold_attr != -1)
   1af88:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af8c:	89 d0                	mov    %edx,%eax
   1af8e:	c1 e0 03             	shl    $0x3,%eax
   1af91:	01 d0                	add    %edx,%eax
   1af93:	c1 e0 04             	shl    $0x4,%eax
   1af96:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1af9b:	8b 00                	mov    (%eax),%eax
   1af9d:	83 f8 ff             	cmp    $0xffffffff,%eax
   1afa0:	74 51                	je     1aff3 <csi_m+0x195>
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
   1afa2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afa6:	89 d0                	mov    %edx,%eax
   1afa8:	c1 e0 03             	shl    $0x3,%eax
   1afab:	01 d0                	add    %edx,%eax
   1afad:	c1 e0 04             	shl    $0x4,%eax
   1afb0:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1afb5:	8b 00                	mov    (%eax),%eax
   1afb7:	83 e0 0f             	and    $0xf,%eax
   1afba:	89 c1                	mov    %eax,%ecx
   1afbc:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afc0:	89 d0                	mov    %edx,%eax
   1afc2:	c1 e0 03             	shl    $0x3,%eax
   1afc5:	01 d0                	add    %edx,%eax
   1afc7:	c1 e0 04             	shl    $0x4,%eax
   1afca:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1afcf:	0f b6 00             	movzbl (%eax),%eax
   1afd2:	83 e0 f0             	and    $0xfffffff0,%eax
   1afd5:	09 c8                	or     %ecx,%eax
   1afd7:	89 c1                	mov    %eax,%ecx
   1afd9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afdd:	89 d0                	mov    %edx,%eax
   1afdf:	c1 e0 03             	shl    $0x3,%eax
   1afe2:	01 d0                	add    %edx,%eax
   1afe4:	c1 e0 04             	shl    $0x4,%eax
   1afe7:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1afec:	88 08                	mov    %cl,(%eax)
			  break;
   1afee:	e9 31 04 00 00       	jmp    1b424 <csi_m+0x5c6>
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
   1aff3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aff7:	89 d0                	mov    %edx,%eax
   1aff9:	c1 e0 03             	shl    $0x3,%eax
   1affc:	01 d0                	add    %edx,%eax
   1affe:	c1 e0 04             	shl    $0x4,%eax
   1b001:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b006:	0f b6 00             	movzbl (%eax),%eax
   1b009:	83 f0 0f             	xor    $0xf,%eax
   1b00c:	0f b6 c0             	movzbl %al,%eax
   1b00f:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b014:	0f bf 4c 24 0a       	movswl 0xa(%esp),%ecx
   1b019:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b01d:	89 d0                	mov    %edx,%eax
   1b01f:	c1 e0 03             	shl    $0x3,%eax
   1b022:	01 d0                	add    %edx,%eax
   1b024:	c1 e0 04             	shl    $0x4,%eax
   1b027:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b02c:	0f b6 00             	movzbl (%eax),%eax
   1b02f:	c0 e8 04             	shr    $0x4,%al
   1b032:	0f b6 c0             	movzbl %al,%eax
   1b035:	31 c8                	xor    %ecx,%eax
   1b037:	83 e0 0f             	and    $0xf,%eax
   1b03a:	85 c0                	test   %eax,%eax
   1b03c:	75 65                	jne    1b0a3 <csi_m+0x245>
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1b03e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b042:	89 d0                	mov    %edx,%eax
   1b044:	c1 e0 03             	shl    $0x3,%eax
   1b047:	01 d0                	add    %edx,%eax
   1b049:	c1 e0 04             	shl    $0x4,%eax
   1b04c:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b051:	0f b6 00             	movzbl (%eax),%eax
   1b054:	83 e0 f0             	and    $0xfffffff0,%eax
   1b057:	89 c3                	mov    %eax,%ebx
   1b059:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b05d:	89 d0                	mov    %edx,%eax
   1b05f:	c1 e0 03             	shl    $0x3,%eax
   1b062:	01 d0                	add    %edx,%eax
   1b064:	c1 e0 04             	shl    $0x4,%eax
   1b067:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b06c:	0f b6 00             	movzbl (%eax),%eax
   1b06f:	0f b6 c0             	movzbl %al,%eax
   1b072:	83 e0 0f             	and    $0xf,%eax
   1b075:	8d 48 01             	lea    0x1(%eax),%ecx
   1b078:	ba 89 88 88 88       	mov    $0x88888889,%edx
   1b07d:	89 c8                	mov    %ecx,%eax
   1b07f:	f7 ea                	imul   %edx
   1b081:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
   1b084:	c1 f8 03             	sar    $0x3,%eax
   1b087:	89 c2                	mov    %eax,%edx
   1b089:	89 c8                	mov    %ecx,%eax
   1b08b:	c1 f8 1f             	sar    $0x1f,%eax
   1b08e:	29 c2                	sub    %eax,%edx
   1b090:	89 d0                	mov    %edx,%eax
   1b092:	89 c2                	mov    %eax,%edx
   1b094:	c1 e2 04             	shl    $0x4,%edx
   1b097:	29 c2                	sub    %eax,%edx
   1b099:	89 c8                	mov    %ecx,%eax
   1b09b:	29 d0                	sub    %edx,%eax
   1b09d:	09 d8                	or     %ebx,%eax
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b09f:	89 c1                	mov    %eax,%ecx
   1b0a1:	eb 07                	jmp    1b0aa <csi_m+0x24c>
   1b0a3:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1b0a8:	89 c1                	mov    %eax,%ecx
   1b0aa:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0ae:	89 d0                	mov    %edx,%eax
   1b0b0:	c1 e0 03             	shl    $0x3,%eax
   1b0b3:	01 d0                	add    %edx,%eax
   1b0b5:	c1 e0 04             	shl    $0x4,%eax
   1b0b8:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0bd:	88 08                	mov    %cl,(%eax)
			  break;
   1b0bf:	e9 60 03 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 5,则把当前虚拟控制台随后显示的字符设置为闪烁,即把属性字节位7置1.
			case 5: attr = attr | 0x80; break;  							/* blinking */
   1b0c4:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0c8:	89 d0                	mov    %edx,%eax
   1b0ca:	c1 e0 03             	shl    $0x3,%eax
   1b0cd:	01 d0                	add    %edx,%eax
   1b0cf:	c1 e0 04             	shl    $0x4,%eax
   1b0d2:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0d7:	0f b6 00             	movzbl (%eax),%eax
   1b0da:	83 c8 80             	or     $0xffffff80,%eax
   1b0dd:	89 c1                	mov    %eax,%ecx
   1b0df:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0e3:	89 d0                	mov    %edx,%eax
   1b0e5:	c1 e0 03             	shl    $0x3,%eax
   1b0e8:	01 d0                	add    %edx,%eax
   1b0ea:	c1 e0 04             	shl    $0x4,%eax
   1b0ed:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b0f2:	88 08                	mov    %cl,(%eax)
   1b0f4:	e9 2b 03 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 7,则把当前虚拟控制台随后显示的字符设置为反显,即把前景色和背景色交换.
			case 7: attr = (attr << 4) | (attr >> 4); break;  				/* negative */
   1b0f9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0fd:	89 d0                	mov    %edx,%eax
   1b0ff:	c1 e0 03             	shl    $0x3,%eax
   1b102:	01 d0                	add    %edx,%eax
   1b104:	c1 e0 04             	shl    $0x4,%eax
   1b107:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b10c:	0f b6 00             	movzbl (%eax),%eax
   1b10f:	0f b6 c0             	movzbl %al,%eax
   1b112:	c1 e0 04             	shl    $0x4,%eax
   1b115:	89 c1                	mov    %eax,%ecx
   1b117:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b11b:	89 d0                	mov    %edx,%eax
   1b11d:	c1 e0 03             	shl    $0x3,%eax
   1b120:	01 d0                	add    %edx,%eax
   1b122:	c1 e0 04             	shl    $0x4,%eax
   1b125:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b12a:	0f b6 00             	movzbl (%eax),%eax
   1b12d:	c0 e8 04             	shr    $0x4,%al
   1b130:	09 c8                	or     %ecx,%eax
   1b132:	89 c1                	mov    %eax,%ecx
   1b134:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b138:	89 d0                	mov    %edx,%eax
   1b13a:	c1 e0 03             	shl    $0x3,%eax
   1b13d:	01 d0                	add    %edx,%eax
   1b13f:	c1 e0 04             	shl    $0x4,%eax
   1b142:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b147:	88 08                	mov    %cl,(%eax)
   1b149:	e9 d6 02 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 22,则取消随后字符的高亮度显示(取消粗体显示).
			case 22: attr = attr & 0xf7; break; 							/* not bold */
   1b14e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b152:	89 d0                	mov    %edx,%eax
   1b154:	c1 e0 03             	shl    $0x3,%eax
   1b157:	01 d0                	add    %edx,%eax
   1b159:	c1 e0 04             	shl    $0x4,%eax
   1b15c:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b161:	0f b6 00             	movzbl (%eax),%eax
   1b164:	83 e0 f7             	and    $0xfffffff7,%eax
   1b167:	89 c1                	mov    %eax,%ecx
   1b169:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b16d:	89 d0                	mov    %edx,%eax
   1b16f:	c1 e0 03             	shl    $0x3,%eax
   1b172:	01 d0                	add    %edx,%eax
   1b174:	c1 e0 04             	shl    $0x4,%eax
   1b177:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b17c:	88 08                	mov    %cl,(%eax)
   1b17e:	e9 a1 02 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 24,则对于单色显示是取消随后字符的下划线显示,对于彩色显示取是取消绿色.
			case 24: attr = attr & 0xfe; break;  							/* not underline */
   1b183:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b187:	89 d0                	mov    %edx,%eax
   1b189:	c1 e0 03             	shl    $0x3,%eax
   1b18c:	01 d0                	add    %edx,%eax
   1b18e:	c1 e0 04             	shl    $0x4,%eax
   1b191:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b196:	0f b6 00             	movzbl (%eax),%eax
   1b199:	83 e0 fe             	and    $0xfffffffe,%eax
   1b19c:	89 c1                	mov    %eax,%ecx
   1b19e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1a2:	89 d0                	mov    %edx,%eax
   1b1a4:	c1 e0 03             	shl    $0x3,%eax
   1b1a7:	01 d0                	add    %edx,%eax
   1b1a9:	c1 e0 04             	shl    $0x4,%eax
   1b1ac:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b1b1:	88 08                	mov    %cl,(%eax)
   1b1b3:	e9 6c 02 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 25,则取消随后字符的闪烁显示.
			case 25: attr = attr & 0x7f; break;  							/* not blinking */
   1b1b8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1bc:	89 d0                	mov    %edx,%eax
   1b1be:	c1 e0 03             	shl    $0x3,%eax
   1b1c1:	01 d0                	add    %edx,%eax
   1b1c3:	c1 e0 04             	shl    $0x4,%eax
   1b1c6:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b1cb:	0f b6 00             	movzbl (%eax),%eax
   1b1ce:	83 e0 7f             	and    $0x7f,%eax
   1b1d1:	89 c1                	mov    %eax,%ecx
   1b1d3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1d7:	89 d0                	mov    %edx,%eax
   1b1d9:	c1 e0 03             	shl    $0x3,%eax
   1b1dc:	01 d0                	add    %edx,%eax
   1b1de:	c1 e0 04             	shl    $0x4,%eax
   1b1e1:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b1e6:	88 08                	mov    %cl,(%eax)
   1b1e8:	e9 37 02 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 27,则取消随后字符的反显.
			case 27: attr = def_attr; break; 								/* positive image */
   1b1ed:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1f1:	89 d0                	mov    %edx,%eax
   1b1f3:	c1 e0 03             	shl    $0x3,%eax
   1b1f6:	01 d0                	add    %edx,%eax
   1b1f8:	c1 e0 04             	shl    $0x4,%eax
   1b1fb:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b200:	0f b6 08             	movzbl (%eax),%ecx
   1b203:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b207:	89 d0                	mov    %edx,%eax
   1b209:	c1 e0 03             	shl    $0x3,%eax
   1b20c:	01 d0                	add    %edx,%eax
   1b20e:	c1 e0 04             	shl    $0x4,%eax
   1b211:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b216:	88 08                	mov    %cl,(%eax)
   1b218:	e9 07 02 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 39,则复位随后字符的前景色为默认前景色(白色).
			case 39: attr = (attr & 0xf0) | (def_attr & 0x0f); break;
   1b21d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b221:	89 d0                	mov    %edx,%eax
   1b223:	c1 e0 03             	shl    $0x3,%eax
   1b226:	01 d0                	add    %edx,%eax
   1b228:	c1 e0 04             	shl    $0x4,%eax
   1b22b:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b230:	0f b6 00             	movzbl (%eax),%eax
   1b233:	83 e0 f0             	and    $0xfffffff0,%eax
   1b236:	89 c1                	mov    %eax,%ecx
   1b238:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b23c:	89 d0                	mov    %edx,%eax
   1b23e:	c1 e0 03             	shl    $0x3,%eax
   1b241:	01 d0                	add    %edx,%eax
   1b243:	c1 e0 04             	shl    $0x4,%eax
   1b246:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b24b:	0f b6 00             	movzbl (%eax),%eax
   1b24e:	83 e0 0f             	and    $0xf,%eax
   1b251:	09 c8                	or     %ecx,%eax
   1b253:	89 c1                	mov    %eax,%ecx
   1b255:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b259:	89 d0                	mov    %edx,%eax
   1b25b:	c1 e0 03             	shl    $0x3,%eax
   1b25e:	01 d0                	add    %edx,%eax
   1b260:	c1 e0 04             	shl    $0x4,%eax
   1b263:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b268:	88 08                	mov    %cl,(%eax)
   1b26a:	e9 b5 01 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
   1b26f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b273:	89 d0                	mov    %edx,%eax
   1b275:	c1 e0 03             	shl    $0x3,%eax
   1b278:	01 d0                	add    %edx,%eax
   1b27a:	c1 e0 04             	shl    $0x4,%eax
   1b27d:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b282:	0f b6 00             	movzbl (%eax),%eax
   1b285:	83 e0 0f             	and    $0xf,%eax
   1b288:	89 c1                	mov    %eax,%ecx
   1b28a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b28e:	89 d0                	mov    %edx,%eax
   1b290:	c1 e0 03             	shl    $0x3,%eax
   1b293:	01 d0                	add    %edx,%eax
   1b295:	c1 e0 04             	shl    $0x4,%eax
   1b298:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1b29d:	0f b6 00             	movzbl (%eax),%eax
   1b2a0:	83 e0 f0             	and    $0xfffffff0,%eax
   1b2a3:	09 c8                	or     %ecx,%eax
   1b2a5:	89 c1                	mov    %eax,%ecx
   1b2a7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2ab:	89 d0                	mov    %edx,%eax
   1b2ad:	c1 e0 03             	shl    $0x3,%eax
   1b2b0:	01 d0                	add    %edx,%eax
   1b2b2:	c1 e0 04             	shl    $0x4,%eax
   1b2b5:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b2ba:	88 08                	mov    %cl,(%eax)
   1b2bc:	e9 63 01 00 00       	jmp    1b424 <csi_m+0x5c6>
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
   1b2c1:	a1 50 fe 03 00       	mov    0x3fe50,%eax
   1b2c6:	85 c0                	test   %eax,%eax
   1b2c8:	0f 84 55 01 00 00    	je     1b423 <csi_m+0x5c5>
			    break;
			  iscolor = 1;
   1b2ce:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2d2:	89 d0                	mov    %edx,%eax
   1b2d4:	c1 e0 03             	shl    $0x3,%eax
   1b2d7:	01 d0                	add    %edx,%eax
   1b2d9:	c1 e0 04             	shl    $0x4,%eax
   1b2dc:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1b2e1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			  if ((par[i] >= 30) && (par[i] <= 38))		 					// 设置前景色.
   1b2e7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2eb:	89 d0                	mov    %edx,%eax
   1b2ed:	c1 e0 03             	shl    $0x3,%eax
   1b2f0:	01 d0                	add    %edx,%eax
   1b2f2:	c1 e0 02             	shl    $0x2,%eax
   1b2f5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b2f9:	01 d0                	add    %edx,%eax
   1b2fb:	83 c0 0c             	add    $0xc,%eax
   1b2fe:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b305:	83 f8 1d             	cmp    $0x1d,%eax
   1b308:	76 7b                	jbe    1b385 <csi_m+0x527>
   1b30a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b30e:	89 d0                	mov    %edx,%eax
   1b310:	c1 e0 03             	shl    $0x3,%eax
   1b313:	01 d0                	add    %edx,%eax
   1b315:	c1 e0 02             	shl    $0x2,%eax
   1b318:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b31c:	01 d0                	add    %edx,%eax
   1b31e:	83 c0 0c             	add    $0xc,%eax
   1b321:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b328:	83 f8 26             	cmp    $0x26,%eax
   1b32b:	77 58                	ja     1b385 <csi_m+0x527>
			    attr = (attr & 0xf0) | (par[i] - 30);
   1b32d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b331:	89 d0                	mov    %edx,%eax
   1b333:	c1 e0 03             	shl    $0x3,%eax
   1b336:	01 d0                	add    %edx,%eax
   1b338:	c1 e0 04             	shl    $0x4,%eax
   1b33b:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b340:	0f b6 00             	movzbl (%eax),%eax
   1b343:	83 e0 f0             	and    $0xfffffff0,%eax
   1b346:	89 c1                	mov    %eax,%ecx
   1b348:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b34c:	89 d0                	mov    %edx,%eax
   1b34e:	c1 e0 03             	shl    $0x3,%eax
   1b351:	01 d0                	add    %edx,%eax
   1b353:	c1 e0 02             	shl    $0x2,%eax
   1b356:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b35a:	01 d0                	add    %edx,%eax
   1b35c:	83 c0 0c             	add    $0xc,%eax
   1b35f:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b366:	83 e8 1e             	sub    $0x1e,%eax
   1b369:	09 c1                	or     %eax,%ecx
   1b36b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b36f:	89 d0                	mov    %edx,%eax
   1b371:	c1 e0 03             	shl    $0x3,%eax
   1b374:	01 d0                	add    %edx,%eax
   1b376:	c1 e0 04             	shl    $0x4,%eax
   1b379:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b37e:	88 08                	mov    %cl,(%eax)
   1b380:	e9 9f 00 00 00       	jmp    1b424 <csi_m+0x5c6>
			  else  														/* Background color */			 // 设置背景色.
			    if ((par[i] >= 40) && (par[i] <= 48))
   1b385:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b389:	89 d0                	mov    %edx,%eax
   1b38b:	c1 e0 03             	shl    $0x3,%eax
   1b38e:	01 d0                	add    %edx,%eax
   1b390:	c1 e0 02             	shl    $0x2,%eax
   1b393:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b397:	01 d0                	add    %edx,%eax
   1b399:	83 c0 0c             	add    $0xc,%eax
   1b39c:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b3a3:	83 f8 27             	cmp    $0x27,%eax
   1b3a6:	76 7c                	jbe    1b424 <csi_m+0x5c6>
   1b3a8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3ac:	89 d0                	mov    %edx,%eax
   1b3ae:	c1 e0 03             	shl    $0x3,%eax
   1b3b1:	01 d0                	add    %edx,%eax
   1b3b3:	c1 e0 02             	shl    $0x2,%eax
   1b3b6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b3ba:	01 d0                	add    %edx,%eax
   1b3bc:	83 c0 0c             	add    $0xc,%eax
   1b3bf:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b3c6:	83 f8 30             	cmp    $0x30,%eax
   1b3c9:	77 59                	ja     1b424 <csi_m+0x5c6>
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
   1b3cb:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3cf:	89 d0                	mov    %edx,%eax
   1b3d1:	c1 e0 03             	shl    $0x3,%eax
   1b3d4:	01 d0                	add    %edx,%eax
   1b3d6:	c1 e0 04             	shl    $0x4,%eax
   1b3d9:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b3de:	0f b6 00             	movzbl (%eax),%eax
   1b3e1:	83 e0 0f             	and    $0xf,%eax
   1b3e4:	89 c1                	mov    %eax,%ecx
   1b3e6:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3ea:	89 d0                	mov    %edx,%eax
   1b3ec:	c1 e0 03             	shl    $0x3,%eax
   1b3ef:	01 d0                	add    %edx,%eax
   1b3f1:	c1 e0 02             	shl    $0x2,%eax
   1b3f4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b3f8:	01 d0                	add    %edx,%eax
   1b3fa:	83 c0 0c             	add    $0xc,%eax
   1b3fd:	8b 04 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%eax
   1b404:	83 e8 28             	sub    $0x28,%eax
   1b407:	c1 e0 04             	shl    $0x4,%eax
   1b40a:	09 c1                	or     %eax,%ecx
   1b40c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b410:	89 d0                	mov    %edx,%eax
   1b412:	c1 e0 03             	shl    $0x3,%eax
   1b415:	01 d0                	add    %edx,%eax
   1b417:	c1 e0 04             	shl    $0x4,%eax
   1b41a:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1b41f:	88 08                	mov    %cl,(%eax)
   1b421:	eb 01                	jmp    1b424 <csi_m+0x5c6>
			    break;
   1b423:	90                   	nop
	for (i = 0; i <= npar; i++)
   1b424:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b429:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b42d:	89 d0                	mov    %edx,%eax
   1b42f:	c1 e0 03             	shl    $0x3,%eax
   1b432:	01 d0                	add    %edx,%eax
   1b434:	c1 e0 04             	shl    $0x4,%eax
   1b437:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1b43c:	8b 10                	mov    (%eax),%edx
   1b43e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b442:	39 c2                	cmp    %eax,%edx
   1b444:	0f 83 25 fa ff ff    	jae    1ae6f <csi_m+0x11>
			    else
					break;
		}
}
   1b44a:	90                   	nop
   1b44b:	83 c4 10             	add    $0x10,%esp
   1b44e:	5b                   	pop    %ebx
   1b44f:	c3                   	ret    

0001b450 <set_cursor>:
// 根据光标对应显示内存位置pos,设置显示控制器光标的显示位置.
static inline void set_cursor(int currcons)
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
   1b450:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1b455:	a3 28 fe 03 00       	mov    %eax,0x3fe28
	if (currcons != fg_console)
   1b45a:	a1 80 22 03 00       	mov    0x32280,%eax
   1b45f:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1b463:	0f 85 84 00 00 00    	jne    1b4ed <set_cursor+0x9d>
		return;
	// 然后使用索引寄存器端口选择显示控制数据寄存器r14(光标当前显示位置高字节),接着写入光标当前位置高字节(向右移动9位表示高字节移到低字节再除以2),
	// 相对于默认显示内存操作的.再使用索引寄存器选择r15,并将光标当前位置低字节写入其中.
	cli();
   1b469:	fa                   	cli    
	outb_p(14, video_port_reg);
   1b46a:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1b471:	b8 0e 00 00 00       	mov    $0xe,%eax
   1b476:	ee                   	out    %al,(%dx)
   1b477:	eb 00                	jmp    1b479 <set_cursor+0x29>
   1b479:	eb 00                	jmp    1b47b <set_cursor+0x2b>
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
   1b47b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b47f:	89 d0                	mov    %edx,%eax
   1b481:	c1 e0 03             	shl    $0x3,%eax
   1b484:	01 d0                	add    %edx,%eax
   1b486:	c1 e0 04             	shl    $0x4,%eax
   1b489:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b48e:	8b 10                	mov    (%eax),%edx
   1b490:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1b495:	29 c2                	sub    %eax,%edx
   1b497:	89 d0                	mov    %edx,%eax
   1b499:	c1 e8 09             	shr    $0x9,%eax
   1b49c:	0f b6 c0             	movzbl %al,%eax
   1b49f:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1b4a6:	ee                   	out    %al,(%dx)
   1b4a7:	eb 00                	jmp    1b4a9 <set_cursor+0x59>
   1b4a9:	eb 00                	jmp    1b4ab <set_cursor+0x5b>
	outb_p(15, video_port_reg);
   1b4ab:	0f b7 15 4a fe 03 00 	movzwl 0x3fe4a,%edx
   1b4b2:	b8 0f 00 00 00       	mov    $0xf,%eax
   1b4b7:	ee                   	out    %al,(%dx)
   1b4b8:	eb 00                	jmp    1b4ba <set_cursor+0x6a>
   1b4ba:	eb 00                	jmp    1b4bc <set_cursor+0x6c>
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
   1b4bc:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b4c0:	89 d0                	mov    %edx,%eax
   1b4c2:	c1 e0 03             	shl    $0x3,%eax
   1b4c5:	01 d0                	add    %edx,%eax
   1b4c7:	c1 e0 04             	shl    $0x4,%eax
   1b4ca:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b4cf:	8b 10                	mov    (%eax),%edx
   1b4d1:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1b4d6:	29 c2                	sub    %eax,%edx
   1b4d8:	89 d0                	mov    %edx,%eax
   1b4da:	d1 e8                	shr    %eax
   1b4dc:	0f b6 c0             	movzbl %al,%eax
   1b4df:	0f b7 15 4c fe 03 00 	movzwl 0x3fe4c,%edx
   1b4e6:	ee                   	out    %al,(%dx)
   1b4e7:	eb 00                	jmp    1b4e9 <set_cursor+0x99>
   1b4e9:	eb 00                	jmp    1b4eb <set_cursor+0x9b>
	sti();
   1b4eb:	fb                   	sti    
   1b4ec:	c3                   	ret    
		return;
   1b4ed:	90                   	nop
}
   1b4ee:	c3                   	ret    

0001b4ef <respond>:
// 发送对VT100的响应序列.
// 即为响应主机请求终端向主机发送设备属性(DA).主机通过发送不带参数或参数是0的DA控制序列('ESC [ 0c'或'ESC Z']要求终端发送一个设备属性(DA)控制
// 序列,终端则发送第85行上定义的应答序列(即'ESC [?];2c']来主机的序列,该序列告诉主机本终端是具有高级视频功能的VT100兼容终端.处理过程是将应答序列
// 放入读缓冲队列中,并使用copy_to_cooked()函数处理后放入辅助队列中.
static void respond(int currcons, struct tty_struct * tty)
{
   1b4ef:	83 ec 1c             	sub    $0x1c,%esp
	char * p = RESPONSE;
   1b4f2:	c7 44 24 0c 54 4e 02 	movl   $0x24e54,0xc(%esp)
   1b4f9:	00 

	cli();
   1b4fa:	fa                   	cli    
	while (*p) {									// 将应答序列放入读队列.
   1b4fb:	eb 3e                	jmp    1b53b <respond+0x4c>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
   1b4fd:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b501:	8b 50 34             	mov    0x34(%eax),%edx
   1b504:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b508:	8b 40 34             	mov    0x34(%eax),%eax
   1b50b:	8b 40 04             	mov    0x4(%eax),%eax
   1b50e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b512:	0f b6 09             	movzbl (%ecx),%ecx
   1b515:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1b519:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b51d:	8b 40 34             	mov    0x34(%eax),%eax
   1b520:	8b 40 04             	mov    0x4(%eax),%eax
   1b523:	8d 50 01             	lea    0x1(%eax),%edx
   1b526:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b52a:	8b 40 34             	mov    0x34(%eax),%eax
   1b52d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b533:	89 50 04             	mov    %edx,0x4(%eax)
		p++;
   1b536:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	while (*p) {									// 将应答序列放入读队列.
   1b53b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b53f:	0f b6 00             	movzbl (%eax),%eax
   1b542:	84 c0                	test   %al,%al
   1b544:	75 b7                	jne    1b4fd <respond+0xe>
	}
	sti();
   1b546:	fb                   	sti    
	copy_to_cooked(tty);							// 转换成规范模式(放入辅助队列中).tty_io.c
   1b547:	83 ec 0c             	sub    $0xc,%esp
   1b54a:	ff 74 24 30          	pushl  0x30(%esp)
   1b54e:	e8 6a d6 ff ff       	call   18bbd <copy_to_cooked>
   1b553:	83 c4 10             	add    $0x10,%esp
}
   1b556:	90                   	nop
   1b557:	83 c4 1c             	add    $0x1c,%esp
   1b55a:	c3                   	ret    

0001b55b <insert_char>:

// 在光标处插入一空格字符.
// 把光标开始处的所有字符右移一格,并将擦除字符插入在光标所在处.
static void insert_char(int currcons)
{
   1b55b:	83 ec 10             	sub    $0x10,%esp
	int i = x;
   1b55e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b562:	89 d0                	mov    %edx,%eax
   1b564:	c1 e0 03             	shl    $0x3,%eax
   1b567:	01 d0                	add    %edx,%eax
   1b569:	c1 e0 04             	shl    $0x4,%eax
   1b56c:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b571:	8b 00                	mov    (%eax),%eax
   1b573:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
   1b577:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b57b:	89 d0                	mov    %edx,%eax
   1b57d:	c1 e0 03             	shl    $0x3,%eax
   1b580:	01 d0                	add    %edx,%eax
   1b582:	c1 e0 04             	shl    $0x4,%eax
   1b585:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1b58a:	0f b7 00             	movzwl (%eax),%eax
   1b58d:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.
   1b592:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b596:	89 d0                	mov    %edx,%eax
   1b598:	c1 e0 03             	shl    $0x3,%eax
   1b59b:	01 d0                	add    %edx,%eax
   1b59d:	c1 e0 04             	shl    $0x4,%eax
   1b5a0:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b5a5:	8b 00                	mov    (%eax),%eax
   1b5a7:	89 44 24 04          	mov    %eax,0x4(%esp)

	while (i++ < video_num_columns) {
   1b5ab:	eb 27                	jmp    1b5d4 <insert_char+0x79>
		tmp = *p;
   1b5ad:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b5b1:	0f b7 00             	movzwl (%eax),%eax
   1b5b4:	66 89 44 24 02       	mov    %ax,0x2(%esp)
		*p = old;
   1b5b9:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b5bd:	0f b7 54 24 0a       	movzwl 0xa(%esp),%edx
   1b5c2:	66 89 10             	mov    %dx,(%eax)
		old = tmp;
   1b5c5:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   1b5ca:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
		p++;
   1b5cf:	83 44 24 04 02       	addl   $0x2,0x4(%esp)
	while (i++ < video_num_columns) {
   1b5d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b5d8:	8d 50 01             	lea    0x1(%eax),%edx
   1b5db:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1b5df:	89 c2                	mov    %eax,%edx
   1b5e1:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b5e6:	39 c2                	cmp    %eax,%edx
   1b5e8:	72 c3                	jb     1b5ad <insert_char+0x52>
	}
}
   1b5ea:	90                   	nop
   1b5eb:	83 c4 10             	add    $0x10,%esp
   1b5ee:	c3                   	ret    

0001b5ef <insert_line>:

// 在光标处插入一行.
// 将屏幕窗口从光标所在行到窗口底的内容向下卷动一行.光标将处在新的空行上.
static void insert_line(int currcons)
{
   1b5ef:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向下滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b5f2:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5f6:	89 d0                	mov    %edx,%eax
   1b5f8:	c1 e0 03             	shl    $0x3,%eax
   1b5fb:	01 d0                	add    %edx,%eax
   1b5fd:	c1 e0 04             	shl    $0x4,%eax
   1b600:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b605:	8b 00                	mov    (%eax),%eax
   1b607:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b60b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b60f:	89 d0                	mov    %edx,%eax
   1b611:	c1 e0 03             	shl    $0x3,%eax
   1b614:	01 d0                	add    %edx,%eax
   1b616:	c1 e0 04             	shl    $0x4,%eax
   1b619:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b61e:	8b 00                	mov    (%eax),%eax
   1b620:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和结束行.
   1b624:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b628:	89 d0                	mov    %edx,%eax
   1b62a:	c1 e0 03             	shl    $0x3,%eax
   1b62d:	01 d0                	add    %edx,%eax
   1b62f:	c1 e0 04             	shl    $0x4,%eax
   1b632:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b637:	8b 08                	mov    (%eax),%ecx
   1b639:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b63d:	89 d0                	mov    %edx,%eax
   1b63f:	c1 e0 03             	shl    $0x3,%eax
   1b642:	01 d0                	add    %edx,%eax
   1b644:	c1 e0 04             	shl    $0x4,%eax
   1b647:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b64c:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b64e:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1b654:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b658:	89 d0                	mov    %edx,%eax
   1b65a:	c1 e0 03             	shl    $0x3,%eax
   1b65d:	01 d0                	add    %edx,%eax
   1b65f:	c1 e0 04             	shl    $0x4,%eax
   1b662:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b667:	89 08                	mov    %ecx,(%eax)
	scrdown(currcons);								// 从光标开始处,屏幕内容向下滚动一行.
   1b669:	ff 74 24 14          	pushl  0x14(%esp)
   1b66d:	e8 43 f1 ff ff       	call   1a7b5 <scrdown>
   1b672:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b675:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b679:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b67d:	89 d0                	mov    %edx,%eax
   1b67f:	c1 e0 03             	shl    $0x3,%eax
   1b682:	01 d0                	add    %edx,%eax
   1b684:	c1 e0 04             	shl    $0x4,%eax
   1b687:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b68c:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b68e:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b692:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b696:	89 d0                	mov    %edx,%eax
   1b698:	c1 e0 03             	shl    $0x3,%eax
   1b69b:	01 d0                	add    %edx,%eax
   1b69d:	c1 e0 04             	shl    $0x4,%eax
   1b6a0:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b6a5:	89 08                	mov    %ecx,(%eax)
}
   1b6a7:	90                   	nop
   1b6a8:	83 c4 10             	add    $0x10,%esp
   1b6ab:	c3                   	ret    

0001b6ac <delete_char>:

// 删除一个字符
// 删除光标处的一个字符,光标右边的所有字符左移一格.
static void delete_char(int currcons)
{
   1b6ac:	83 ec 10             	sub    $0x10,%esp
	int i;
	unsigned short * p = (unsigned short *) pos;
   1b6af:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6b3:	89 d0                	mov    %edx,%eax
   1b6b5:	c1 e0 03             	shl    $0x3,%eax
   1b6b8:	01 d0                	add    %edx,%eax
   1b6ba:	c1 e0 04             	shl    $0x4,%eax
   1b6bd:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1b6c2:	8b 00                	mov    (%eax),%eax
   1b6c4:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
   1b6c8:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6cc:	89 d0                	mov    %edx,%eax
   1b6ce:	c1 e0 03             	shl    $0x3,%eax
   1b6d1:	01 d0                	add    %edx,%eax
   1b6d3:	c1 e0 04             	shl    $0x4,%eax
   1b6d6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b6db:	8b 10                	mov    (%eax),%edx
   1b6dd:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b6e2:	39 c2                	cmp    %eax,%edx
   1b6e4:	73 60                	jae    1b746 <delete_char+0x9a>
		return;
	i = x;
   1b6e6:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6ea:	89 d0                	mov    %edx,%eax
   1b6ec:	c1 e0 03             	shl    $0x3,%eax
   1b6ef:	01 d0                	add    %edx,%eax
   1b6f1:	c1 e0 04             	shl    $0x4,%eax
   1b6f4:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b6f9:	8b 00                	mov    (%eax),%eax
   1b6fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b6ff:	eb 14                	jmp    1b715 <delete_char+0x69>
		*p = *(p + 1);
   1b701:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b705:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1b709:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b70d:	66 89 10             	mov    %dx,(%eax)
		p++;
   1b710:	83 44 24 08 02       	addl   $0x2,0x8(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b715:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b71a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b71e:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b723:	39 c2                	cmp    %eax,%edx
   1b725:	72 da                	jb     1b701 <delete_char+0x55>
	}
	*p = video_erase_char;							// 最后填入擦除字符.
   1b727:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b72b:	89 d0                	mov    %edx,%eax
   1b72d:	c1 e0 03             	shl    $0x3,%eax
   1b730:	01 d0                	add    %edx,%eax
   1b732:	c1 e0 04             	shl    $0x4,%eax
   1b735:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1b73a:	0f b7 10             	movzwl (%eax),%edx
   1b73d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b741:	66 89 10             	mov    %dx,(%eax)
   1b744:	eb 01                	jmp    1b747 <delete_char+0x9b>
		return;
   1b746:	90                   	nop
}
   1b747:	83 c4 10             	add    $0x10,%esp
   1b74a:	c3                   	ret    

0001b74b <delete_line>:

// 删除光标所在行
// 删除光标所在的一行,并从光标所在行开始屏幕内容上巻一行.
static void delete_line(int currcons)
{
   1b74b:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向上滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b74e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b752:	89 d0                	mov    %edx,%eax
   1b754:	c1 e0 03             	shl    $0x3,%eax
   1b757:	01 d0                	add    %edx,%eax
   1b759:	c1 e0 04             	shl    $0x4,%eax
   1b75c:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b761:	8b 00                	mov    (%eax),%eax
   1b763:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b767:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b76b:	89 d0                	mov    %edx,%eax
   1b76d:	c1 e0 03             	shl    $0x3,%eax
   1b770:	01 d0                	add    %edx,%eax
   1b772:	c1 e0 04             	shl    $0x4,%eax
   1b775:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b77a:	8b 00                	mov    (%eax),%eax
   1b77c:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和最后行.
   1b780:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b784:	89 d0                	mov    %edx,%eax
   1b786:	c1 e0 03             	shl    $0x3,%eax
   1b789:	01 d0                	add    %edx,%eax
   1b78b:	c1 e0 04             	shl    $0x4,%eax
   1b78e:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b793:	8b 08                	mov    (%eax),%ecx
   1b795:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b799:	89 d0                	mov    %edx,%eax
   1b79b:	c1 e0 03             	shl    $0x3,%eax
   1b79e:	01 d0                	add    %edx,%eax
   1b7a0:	c1 e0 04             	shl    $0x4,%eax
   1b7a3:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b7a8:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b7aa:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1b7b0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7b4:	89 d0                	mov    %edx,%eax
   1b7b6:	c1 e0 03             	shl    $0x3,%eax
   1b7b9:	01 d0                	add    %edx,%eax
   1b7bb:	c1 e0 04             	shl    $0x4,%eax
   1b7be:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b7c3:	89 08                	mov    %ecx,(%eax)
	scrup(currcons);								// 从光标开始处,屏幕内容向上滚动一行.
   1b7c5:	ff 74 24 14          	pushl  0x14(%esp)
   1b7c9:	e8 50 eb ff ff       	call   1a31e <scrup>
   1b7ce:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b7d1:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b7d5:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7d9:	89 d0                	mov    %edx,%eax
   1b7db:	c1 e0 03             	shl    $0x3,%eax
   1b7de:	01 d0                	add    %edx,%eax
   1b7e0:	c1 e0 04             	shl    $0x4,%eax
   1b7e3:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1b7e8:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b7ea:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b7ee:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7f2:	89 d0                	mov    %edx,%eax
   1b7f4:	c1 e0 03             	shl    $0x3,%eax
   1b7f7:	01 d0                	add    %edx,%eax
   1b7f9:	c1 e0 04             	shl    $0x4,%eax
   1b7fc:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1b801:	89 08                	mov    %ecx,(%eax)
}
   1b803:	90                   	nop
   1b804:	83 c4 10             	add    $0x10,%esp
   1b807:	c3                   	ret    

0001b808 <csi_at>:
// 的字符将右移.超过右边界的字符将被丢失.
// 参数 nr = 转义字符序列中的参数Pn.
static void csi_at(int currcons, unsigned int nr)
{
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
   1b808:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b80d:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b811:	76 0b                	jbe    1b81e <csi_at+0x16>
		nr = video_num_columns;
   1b813:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b818:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b81c:	eb 1d                	jmp    1b83b <csi_at+0x33>
	else if (!nr)
   1b81e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b823:	75 16                	jne    1b83b <csi_at+0x33>
		nr = 1;
   1b825:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b82c:	00 
	while (nr--)
   1b82d:	eb 0c                	jmp    1b83b <csi_at+0x33>
		insert_char(currcons);
   1b82f:	ff 74 24 04          	pushl  0x4(%esp)
   1b833:	e8 23 fd ff ff       	call   1b55b <insert_char>
   1b838:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b83b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b83f:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b842:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b846:	85 c0                	test   %eax,%eax
   1b848:	75 e5                	jne    1b82f <csi_at+0x27>
}
   1b84a:	90                   	nop
   1b84b:	c3                   	ret    

0001b84c <csi_L>:
// 行就丢失.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_L(int currcons, unsigned int nr)
{
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
   1b84c:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b851:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b855:	76 0b                	jbe    1b862 <csi_L+0x16>
		nr = video_num_lines;
   1b857:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b85c:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b860:	eb 1d                	jmp    1b87f <csi_L+0x33>
	else if (!nr)
   1b862:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b867:	75 16                	jne    1b87f <csi_L+0x33>
		nr = 1;
   1b869:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b870:	00 
	while (nr--)
   1b871:	eb 0c                	jmp    1b87f <csi_L+0x33>
		insert_line(currcons);
   1b873:	ff 74 24 04          	pushl  0x4(%esp)
   1b877:	e8 73 fd ff ff       	call   1b5ef <insert_line>
   1b87c:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b87f:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b883:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b886:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b88a:	85 c0                	test   %eax,%eax
   1b88c:	75 e5                	jne    1b873 <csi_L+0x27>
}
   1b88e:	90                   	nop
   1b88f:	c3                   	ret    

0001b890 <csi_P>:
// 相同,但这里作了简化处理,仅使用字符的默认属性(黑底白字空格0x0720)来设置空字符.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_P(int currcons, unsigned int nr)
{
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
   1b890:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b895:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b899:	76 0b                	jbe    1b8a6 <csi_P+0x16>
		nr = video_num_columns;
   1b89b:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1b8a0:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b8a4:	eb 1d                	jmp    1b8c3 <csi_P+0x33>
	else if (!nr)
   1b8a6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b8ab:	75 16                	jne    1b8c3 <csi_P+0x33>
		nr = 1;
   1b8ad:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b8b4:	00 
	while (nr--)
   1b8b5:	eb 0c                	jmp    1b8c3 <csi_P+0x33>
		delete_char(currcons);
   1b8b7:	ff 74 24 04          	pushl  0x4(%esp)
   1b8bb:	e8 ec fd ff ff       	call   1b6ac <delete_char>
   1b8c0:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b8c3:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b8c7:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b8ca:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b8ce:	85 c0                	test   %eax,%eax
   1b8d0:	75 e5                	jne    1b8b7 <csi_P+0x27>
}
   1b8d2:	90                   	nop
   1b8d3:	c3                   	ret    

0001b8d4 <csi_M>:
// Pn大于显示页上剩余行数,则本序列仅删除这些剩余行,并对滚动区域处不起作用.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_M(int currcons, unsigned int nr)
{
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
   1b8d4:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b8d9:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b8dd:	76 0b                	jbe    1b8ea <csi_M+0x16>
		nr = video_num_lines;
   1b8df:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1b8e4:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b8e8:	eb 1d                	jmp    1b907 <csi_M+0x33>
	else if (!nr)
   1b8ea:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b8ef:	75 16                	jne    1b907 <csi_M+0x33>
		nr=1;
   1b8f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b8f8:	00 
	while (nr--)
   1b8f9:	eb 0c                	jmp    1b907 <csi_M+0x33>
		delete_line(currcons);
   1b8fb:	ff 74 24 04          	pushl  0x4(%esp)
   1b8ff:	e8 47 fe ff ff       	call   1b74b <delete_line>
   1b904:	83 c4 04             	add    $0x4,%esp
	while (nr--)
   1b907:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b90b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b90e:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b912:	85 c0                	test   %eax,%eax
   1b914:	75 e5                	jne    1b8fb <csi_M+0x27>
}
   1b916:	90                   	nop
   1b917:	c3                   	ret    

0001b918 <save_cur>:

//// 保存当前光标位置
static void save_cur(int currcons)
{
	saved_x = x;
   1b918:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b91c:	89 d0                	mov    %edx,%eax
   1b91e:	c1 e0 03             	shl    $0x3,%eax
   1b921:	01 d0                	add    %edx,%eax
   1b923:	c1 e0 04             	shl    $0x4,%eax
   1b926:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1b92b:	8b 08                	mov    (%eax),%ecx
   1b92d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b931:	89 d0                	mov    %edx,%eax
   1b933:	c1 e0 03             	shl    $0x3,%eax
   1b936:	01 d0                	add    %edx,%eax
   1b938:	c1 e0 04             	shl    $0x4,%eax
   1b93b:	05 e0 fe 03 00       	add    $0x3fee0,%eax
   1b940:	89 08                	mov    %ecx,(%eax)
	saved_y = y;
   1b942:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b946:	89 d0                	mov    %edx,%eax
   1b948:	c1 e0 03             	shl    $0x3,%eax
   1b94b:	01 d0                	add    %edx,%eax
   1b94d:	c1 e0 04             	shl    $0x4,%eax
   1b950:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1b955:	8b 08                	mov    (%eax),%ecx
   1b957:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b95b:	89 d0                	mov    %edx,%eax
   1b95d:	c1 e0 03             	shl    $0x3,%eax
   1b960:	01 d0                	add    %edx,%eax
   1b962:	c1 e0 04             	shl    $0x4,%eax
   1b965:	05 e4 fe 03 00       	add    $0x3fee4,%eax
   1b96a:	89 08                	mov    %ecx,(%eax)
}
   1b96c:	90                   	nop
   1b96d:	c3                   	ret    

0001b96e <restore_cur>:

// 恢复保存的光标位置
static void restore_cur(int currcons)
{
	gotoxy(currcons, saved_x, saved_y);
   1b96e:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b972:	89 d0                	mov    %edx,%eax
   1b974:	c1 e0 03             	shl    $0x3,%eax
   1b977:	01 d0                	add    %edx,%eax
   1b979:	c1 e0 04             	shl    $0x4,%eax
   1b97c:	05 e4 fe 03 00       	add    $0x3fee4,%eax
   1b981:	8b 08                	mov    (%eax),%ecx
   1b983:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b987:	89 d0                	mov    %edx,%eax
   1b989:	c1 e0 03             	shl    $0x3,%eax
   1b98c:	01 d0                	add    %edx,%eax
   1b98e:	c1 e0 04             	shl    $0x4,%eax
   1b991:	05 e0 fe 03 00       	add    $0x3fee0,%eax
   1b996:	8b 00                	mov    (%eax),%eax
   1b998:	51                   	push   %ecx
   1b999:	50                   	push   %eax
   1b99a:	ff 74 24 0c          	pushl  0xc(%esp)
   1b99e:	e8 12 e8 ff ff       	call   1a1b5 <gotoxy>
   1b9a3:	83 c4 0c             	add    $0xc,%esp
}
   1b9a6:	90                   	nop
   1b9a7:	c3                   	ret    

0001b9a8 <con_write>:
// 控制台写函数
// 从终端对应的tty写缓冲队列中取字符针对每个字符进行分析.若是控制字符或转义或控制序列,则进行光标定位,字符删除等的控制处理;对于普通字符就直接在光标处
// 显示.
// 参数:tty是当前控制台使用的tty结构指针.
void con_write(struct tty_struct * tty)
{
   1b9a8:	53                   	push   %ebx
   1b9a9:	83 ec 18             	sub    $0x18,%esp

	// 该函数首先根据当前控制台使用的tty在tty表的项位置取得对应控制台号currcons,然后计算出(CHARS())目前tty写队列中含有的字符数nr,并循环取出其中的每个
	// 字符进行处理.不过如果当前控制台由于接收键盘或发出的暂停命令(如按键Ctrl-S)而处于停止状态,那么本函数就停止处理写队列中的字符,退出函数.另外,如果取出的
	// 是控制字符CAN(24)或SUB(6),那么若是在转义或控制序列期间收到的,则序列不会执行而立刻终止,同时显示随后的字符.注意,con_write()函数只处理取队列字符数
	// 时写队列中当前含有的字符.这有可能在一个序列被放到写队列期间读取字符数,因此本函数前一次退出时state有可能处于处理转义或控制序列的其他状态上.
	currcons = tty - tty_table;
   1b9ac:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9b0:	ba 20 28 04 00       	mov    $0x42820,%edx
   1b9b5:	29 d0                	sub    %edx,%eax
   1b9b7:	c1 f8 06             	sar    $0x6,%eax
   1b9ba:	89 44 24 08          	mov    %eax,0x8(%esp)
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
   1b9be:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
   1b9c3:	7f 07                	jg     1b9cc <con_write+0x24>
   1b9c5:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b9ca:	79 10                	jns    1b9dc <con_write+0x34>
		panic("con_write: illegal tty");
   1b9cc:	83 ec 0c             	sub    $0xc,%esp
   1b9cf:	68 5c 4e 02 00       	push   $0x24e5c
   1b9d4:	e8 2e d2 fe ff       	call   8c07 <panic>
   1b9d9:	83 c4 10             	add    $0x10,%esp

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
   1b9dc:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9e0:	8b 40 38             	mov    0x38(%eax),%eax
   1b9e3:	8b 50 04             	mov    0x4(%eax),%edx
   1b9e6:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9ea:	8b 40 38             	mov    0x38(%eax),%eax
   1b9ed:	8b 40 08             	mov    0x8(%eax),%eax
   1b9f0:	29 c2                	sub    %eax,%edx
   1b9f2:	89 d0                	mov    %edx,%eax
   1b9f4:	25 ff 03 00 00       	and    $0x3ff,%eax
   1b9f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (nr--) {
   1b9fd:	e9 70 13 00 00       	jmp    1cd72 <con_write+0x13ca>
		if (tty->stopped)
   1ba02:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba06:	8b 40 2c             	mov    0x2c(%eax),%eax
   1ba09:	85 c0                	test   %eax,%eax
   1ba0b:	0f 85 76 13 00 00    	jne    1cd87 <con_write+0x13df>
			break;
		GETCH(tty->write_q, c);										// 取1字符到c中
   1ba11:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba15:	8b 50 38             	mov    0x38(%eax),%edx
   1ba18:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba1c:	8b 40 38             	mov    0x38(%eax),%eax
   1ba1f:	8b 40 08             	mov    0x8(%eax),%eax
   1ba22:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1ba27:	88 44 24 07          	mov    %al,0x7(%esp)
   1ba2b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba2f:	8b 40 38             	mov    0x38(%eax),%eax
   1ba32:	8b 40 08             	mov    0x8(%eax),%eax
   1ba35:	8d 50 01             	lea    0x1(%eax),%edx
   1ba38:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba3c:	8b 40 38             	mov    0x38(%eax),%eax
   1ba3f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ba45:	89 50 08             	mov    %edx,0x8(%eax)
		if (c == 24 || c == 26)										// 控制字符CAN,SUB - 取消,替换
   1ba48:	80 7c 24 07 18       	cmpb   $0x18,0x7(%esp)
   1ba4d:	74 07                	je     1ba56 <con_write+0xae>
   1ba4f:	80 7c 24 07 1a       	cmpb   $0x1a,0x7(%esp)
   1ba54:	75 19                	jne    1ba6f <con_write+0xc7>
			state = ESnormal;
   1ba56:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba5a:	89 d0                	mov    %edx,%eax
   1ba5c:	c1 e0 03             	shl    $0x3,%eax
   1ba5f:	01 d0                	add    %edx,%eax
   1ba61:	c1 e0 04             	shl    $0x4,%eax
   1ba64:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1ba69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		switch(state) {
   1ba6f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba73:	89 d0                	mov    %edx,%eax
   1ba75:	c1 e0 03             	shl    $0x3,%eax
   1ba78:	01 d0                	add    %edx,%eax
   1ba7a:	c1 e0 04             	shl    $0x4,%eax
   1ba7d:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1ba82:	8b 00                	mov    (%eax),%eax
   1ba84:	83 f8 07             	cmp    $0x7,%eax
   1ba87:	0f 87 cc 12 00 00    	ja     1cd59 <con_write+0x13b1>
   1ba8d:	8b 04 85 88 4e 02 00 	mov    0x24e88(,%eax,4),%eax
   1ba94:	ff e0                	jmp    *%eax
			//          标位置进行设置.当刚处理完一个转义或控制序列,程序也会返回到本状态.
			// 如果从写队列中取出的字符是普通显示字符代码,就直接从当前映射字符集中取出对应的显示字符,并放到当前光标所处的显示内存位置处,即直接显示该字符.然后把光标
			// 位置右移一个字符位置.具体地,如果字符不是控制字符也不是扩展字符,即(31<c<127),那么,若当前光标处在行末端或末端以外,则将光标移到下行头列.并调整光标位置
			// 对应的内存指针pos.然后将字符c写到显示内存中pos处,并将光标右移1列,同时也将pos对应地移动2个字节.
			case ESnormal:
				if (c > 31 && c < 127) {							// 是普通显示字符
   1ba96:	80 7c 24 07 1f       	cmpb   $0x1f,0x7(%esp)
   1ba9b:	0f 8e 51 01 00 00    	jle    1bbf2 <con_write+0x24a>
   1baa1:	80 7c 24 07 7f       	cmpb   $0x7f,0x7(%esp)
   1baa6:	0f 84 46 01 00 00    	je     1bbf2 <con_write+0x24a>
					if (x >= video_num_columns) {					// 要换行?
   1baac:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bab0:	89 d0                	mov    %edx,%eax
   1bab2:	c1 e0 03             	shl    $0x3,%eax
   1bab5:	01 d0                	add    %edx,%eax
   1bab7:	c1 e0 04             	shl    $0x4,%eax
   1baba:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1babf:	8b 10                	mov    (%eax),%edx
   1bac1:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bac6:	39 c2                	cmp    %eax,%edx
   1bac8:	72 75                	jb     1bb3f <con_write+0x197>
						x -= video_num_columns;
   1baca:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bace:	89 d0                	mov    %edx,%eax
   1bad0:	c1 e0 03             	shl    $0x3,%eax
   1bad3:	01 d0                	add    %edx,%eax
   1bad5:	c1 e0 04             	shl    $0x4,%eax
   1bad8:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1badd:	8b 10                	mov    (%eax),%edx
   1badf:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bae4:	89 d1                	mov    %edx,%ecx
   1bae6:	29 c1                	sub    %eax,%ecx
   1bae8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1baec:	89 d0                	mov    %edx,%eax
   1baee:	c1 e0 03             	shl    $0x3,%eax
   1baf1:	01 d0                	add    %edx,%eax
   1baf3:	c1 e0 04             	shl    $0x4,%eax
   1baf6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bafb:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1bafd:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb01:	89 d0                	mov    %edx,%eax
   1bb03:	c1 e0 03             	shl    $0x3,%eax
   1bb06:	01 d0                	add    %edx,%eax
   1bb08:	c1 e0 04             	shl    $0x4,%eax
   1bb0b:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb10:	8b 10                	mov    (%eax),%edx
   1bb12:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1bb17:	89 d1                	mov    %edx,%ecx
   1bb19:	29 c1                	sub    %eax,%ecx
   1bb1b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb1f:	89 d0                	mov    %edx,%eax
   1bb21:	c1 e0 03             	shl    $0x3,%eax
   1bb24:	01 d0                	add    %edx,%eax
   1bb26:	c1 e0 04             	shl    $0x4,%eax
   1bb29:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb2e:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bb30:	83 ec 0c             	sub    $0xc,%esp
   1bb33:	ff 74 24 14          	pushl  0x14(%esp)
   1bb37:	e8 82 ee ff ff       	call   1a9be <lf>
   1bb3c:	83 c4 10             	add    $0x10,%esp
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
   1bb3f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb43:	89 d0                	mov    %edx,%eax
   1bb45:	c1 e0 03             	shl    $0x3,%eax
   1bb48:	01 d0                	add    %edx,%eax
   1bb4a:	c1 e0 04             	shl    $0x4,%eax
   1bb4d:	05 ec fe 03 00       	add    $0x3feec,%eax
   1bb52:	8b 00                	mov    (%eax),%eax
   1bb54:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bb59:	83 ea 20             	sub    $0x20,%edx
   1bb5c:	01 d0                	add    %edx,%eax
   1bb5e:	0f b6 08             	movzbl (%eax),%ecx
						"m" (*(short *)pos),
   1bb61:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb65:	89 d0                	mov    %edx,%eax
   1bb67:	c1 e0 03             	shl    $0x3,%eax
   1bb6a:	01 d0                	add    %edx,%eax
   1bb6c:	c1 e0 04             	shl    $0x4,%eax
   1bb6f:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bb74:	8b 00                	mov    (%eax),%eax
   1bb76:	89 c3                	mov    %eax,%ebx
					__asm__("movb %2, %%ah\n\t"						// 写字符
   1bb78:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb7c:	89 d0                	mov    %edx,%eax
   1bb7e:	c1 e0 03             	shl    $0x3,%eax
   1bb81:	01 d0                	add    %edx,%eax
   1bb83:	c1 e0 04             	shl    $0x4,%eax
   1bb86:	8d 90 62 fe 03 00    	lea    0x3fe62(%eax),%edx
   1bb8c:	89 c8                	mov    %ecx,%eax
   1bb8e:	8a 22                	mov    (%edx),%ah
   1bb90:	66 89 03             	mov    %ax,(%ebx)
						"m" (attr)
						:);
					pos += 2;
   1bb93:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb97:	89 d0                	mov    %edx,%eax
   1bb99:	c1 e0 03             	shl    $0x3,%eax
   1bb9c:	01 d0                	add    %edx,%eax
   1bb9e:	c1 e0 04             	shl    $0x4,%eax
   1bba1:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bba6:	8b 00                	mov    (%eax),%eax
   1bba8:	8d 48 02             	lea    0x2(%eax),%ecx
   1bbab:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbaf:	89 d0                	mov    %edx,%eax
   1bbb1:	c1 e0 03             	shl    $0x3,%eax
   1bbb4:	01 d0                	add    %edx,%eax
   1bbb6:	c1 e0 04             	shl    $0x4,%eax
   1bbb9:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bbbe:	89 08                	mov    %ecx,(%eax)
					x++;
   1bbc0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbc4:	89 d0                	mov    %edx,%eax
   1bbc6:	c1 e0 03             	shl    $0x3,%eax
   1bbc9:	01 d0                	add    %edx,%eax
   1bbcb:	c1 e0 04             	shl    $0x4,%eax
   1bbce:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bbd3:	8b 00                	mov    (%eax),%eax
   1bbd5:	8d 48 01             	lea    0x1(%eax),%ecx
   1bbd8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbdc:	89 d0                	mov    %edx,%eax
   1bbde:	c1 e0 03             	shl    $0x3,%eax
   1bbe1:	01 d0                	add    %edx,%eax
   1bbe3:	c1 e0 04             	shl    $0x4,%eax
   1bbe6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bbeb:	89 08                	mov    %ecx,(%eax)
   1bbed:	e9 a5 02 00 00       	jmp    1be97 <con_write+0x4ef>
				// 如果字符c是转义字符ESC,则转换状态state到ESesc
				} else if (c == 27)									// ESC - 转义控制字符
   1bbf2:	80 7c 24 07 1b       	cmpb   $0x1b,0x7(%esp)
   1bbf7:	75 1e                	jne    1bc17 <con_write+0x26f>
					state = ESesc;
   1bbf9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbfd:	89 d0                	mov    %edx,%eax
   1bbff:	c1 e0 03             	shl    $0x3,%eax
   1bc02:	01 d0                	add    %edx,%eax
   1bc04:	c1 e0 04             	shl    $0x4,%eax
   1bc07:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bc0c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   1bc12:	e9 5b 11 00 00       	jmp    1cd72 <con_write+0x13ca>
				// 如果c是换行符LF(10),或垂直制表符VT(11),或换页符FF(12),则光标移动到下1行.
				else if (c == 10 || c == 11 || c == 12)
   1bc17:	80 7c 24 07 0a       	cmpb   $0xa,0x7(%esp)
   1bc1c:	74 0e                	je     1bc2c <con_write+0x284>
   1bc1e:	80 7c 24 07 0b       	cmpb   $0xb,0x7(%esp)
   1bc23:	74 07                	je     1bc2c <con_write+0x284>
   1bc25:	80 7c 24 07 0c       	cmpb   $0xc,0x7(%esp)
   1bc2a:	75 14                	jne    1bc40 <con_write+0x298>
					lf(currcons);
   1bc2c:	83 ec 0c             	sub    $0xc,%esp
   1bc2f:	ff 74 24 14          	pushl  0x14(%esp)
   1bc33:	e8 86 ed ff ff       	call   1a9be <lf>
   1bc38:	83 c4 10             	add    $0x10,%esp
   1bc3b:	e9 57 02 00 00       	jmp    1be97 <con_write+0x4ef>
				// 如果c是回车符CR(13),则将光标移动到头列(0列)
				else if (c == 13)									// CR - 回车
   1bc40:	80 7c 24 07 0d       	cmpb   $0xd,0x7(%esp)
   1bc45:	75 14                	jne    1bc5b <con_write+0x2b3>
					cr(currcons);
   1bc47:	83 ec 0c             	sub    $0xc,%esp
   1bc4a:	ff 74 24 14          	pushl  0x14(%esp)
   1bc4e:	e8 a5 ee ff ff       	call   1aaf8 <cr>
   1bc53:	83 c4 10             	add    $0x10,%esp
   1bc56:	e9 17 11 00 00       	jmp    1cd72 <con_write+0x13ca>
				// 如果c是DEL(127),则将光标左边字符擦除(用空格字符替代),并将光标移到被擦除位置.
				else if (c == ERASE_CHAR(tty))
   1bc5b:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bc60:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bc64:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   1bc68:	0f b6 c0             	movzbl %al,%eax
   1bc6b:	39 c2                	cmp    %eax,%edx
   1bc6d:	75 14                	jne    1bc83 <con_write+0x2db>
					del(currcons);
   1bc6f:	83 ec 0c             	sub    $0xc,%esp
   1bc72:	ff 74 24 14          	pushl  0x14(%esp)
   1bc76:	e8 db ee ff ff       	call   1ab56 <del>
   1bc7b:	83 c4 10             	add    $0x10,%esp
   1bc7e:	e9 ef 10 00 00       	jmp    1cd72 <con_write+0x13ca>
				// 如果c是BS(backspace,8),则将光标左移1格,并相应调整光标对应内存位置指针pos.
				else if (c == 8) {									// BS - 后退.
   1bc83:	80 7c 24 07 08       	cmpb   $0x8,0x7(%esp)
   1bc88:	75 7c                	jne    1bd06 <con_write+0x35e>
					if (x) {
   1bc8a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc8e:	89 d0                	mov    %edx,%eax
   1bc90:	c1 e0 03             	shl    $0x3,%eax
   1bc93:	01 d0                	add    %edx,%eax
   1bc95:	c1 e0 04             	shl    $0x4,%eax
   1bc98:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bc9d:	8b 00                	mov    (%eax),%eax
   1bc9f:	85 c0                	test   %eax,%eax
   1bca1:	0f 84 cb 10 00 00    	je     1cd72 <con_write+0x13ca>
						x--;
   1bca7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcab:	89 d0                	mov    %edx,%eax
   1bcad:	c1 e0 03             	shl    $0x3,%eax
   1bcb0:	01 d0                	add    %edx,%eax
   1bcb2:	c1 e0 04             	shl    $0x4,%eax
   1bcb5:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bcba:	8b 00                	mov    (%eax),%eax
   1bcbc:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1bcbf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcc3:	89 d0                	mov    %edx,%eax
   1bcc5:	c1 e0 03             	shl    $0x3,%eax
   1bcc8:	01 d0                	add    %edx,%eax
   1bcca:	c1 e0 04             	shl    $0x4,%eax
   1bccd:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bcd2:	89 08                	mov    %ecx,(%eax)
						pos -= 2;
   1bcd4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcd8:	89 d0                	mov    %edx,%eax
   1bcda:	c1 e0 03             	shl    $0x3,%eax
   1bcdd:	01 d0                	add    %edx,%eax
   1bcdf:	c1 e0 04             	shl    $0x4,%eax
   1bce2:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bce7:	8b 00                	mov    (%eax),%eax
   1bce9:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1bcec:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcf0:	89 d0                	mov    %edx,%eax
   1bcf2:	c1 e0 03             	shl    $0x3,%eax
   1bcf5:	01 d0                	add    %edx,%eax
   1bcf7:	c1 e0 04             	shl    $0x4,%eax
   1bcfa:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bcff:	89 08                	mov    %ecx,(%eax)
   1bd01:	e9 6c 10 00 00       	jmp    1cd72 <con_write+0x13ca>
					}
				// 如果字符c是水平制表符HT(9),则将光标移到8的位数列上.若此时光标列数超出屏幕最大列数,则将光标移到下一行上.
				} else if (c == 9) {								// HT - 水平制表
   1bd06:	80 7c 24 07 09       	cmpb   $0x9,0x7(%esp)
   1bd0b:	0f 85 28 01 00 00    	jne    1be39 <con_write+0x491>
					c = 8 - (x & 7);
   1bd11:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd15:	89 d0                	mov    %edx,%eax
   1bd17:	c1 e0 03             	shl    $0x3,%eax
   1bd1a:	01 d0                	add    %edx,%eax
   1bd1c:	c1 e0 04             	shl    $0x4,%eax
   1bd1f:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd24:	8b 00                	mov    (%eax),%eax
   1bd26:	83 e0 07             	and    $0x7,%eax
   1bd29:	ba 08 00 00 00       	mov    $0x8,%edx
   1bd2e:	29 c2                	sub    %eax,%edx
   1bd30:	89 d0                	mov    %edx,%eax
   1bd32:	88 44 24 07          	mov    %al,0x7(%esp)
					x += c;
   1bd36:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd3a:	89 d0                	mov    %edx,%eax
   1bd3c:	c1 e0 03             	shl    $0x3,%eax
   1bd3f:	01 d0                	add    %edx,%eax
   1bd41:	c1 e0 04             	shl    $0x4,%eax
   1bd44:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd49:	8b 10                	mov    (%eax),%edx
   1bd4b:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1bd50:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1bd53:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd57:	89 d0                	mov    %edx,%eax
   1bd59:	c1 e0 03             	shl    $0x3,%eax
   1bd5c:	01 d0                	add    %edx,%eax
   1bd5e:	c1 e0 04             	shl    $0x4,%eax
   1bd61:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bd66:	89 08                	mov    %ecx,(%eax)
					pos += c << 1;
   1bd68:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd6c:	89 d0                	mov    %edx,%eax
   1bd6e:	c1 e0 03             	shl    $0x3,%eax
   1bd71:	01 d0                	add    %edx,%eax
   1bd73:	c1 e0 04             	shl    $0x4,%eax
   1bd76:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bd7b:	8b 00                	mov    (%eax),%eax
   1bd7d:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bd82:	01 d2                	add    %edx,%edx
   1bd84:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   1bd87:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd8b:	89 d0                	mov    %edx,%eax
   1bd8d:	c1 e0 03             	shl    $0x3,%eax
   1bd90:	01 d0                	add    %edx,%eax
   1bd92:	c1 e0 04             	shl    $0x4,%eax
   1bd95:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1bd9a:	89 08                	mov    %ecx,(%eax)
					if (x > video_num_columns) {
   1bd9c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bda0:	89 d0                	mov    %edx,%eax
   1bda2:	c1 e0 03             	shl    $0x3,%eax
   1bda5:	01 d0                	add    %edx,%eax
   1bda7:	c1 e0 04             	shl    $0x4,%eax
   1bdaa:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bdaf:	8b 10                	mov    (%eax),%edx
   1bdb1:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bdb6:	39 c2                	cmp    %eax,%edx
   1bdb8:	76 75                	jbe    1be2f <con_write+0x487>
						x -= video_num_columns;
   1bdba:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdbe:	89 d0                	mov    %edx,%eax
   1bdc0:	c1 e0 03             	shl    $0x3,%eax
   1bdc3:	01 d0                	add    %edx,%eax
   1bdc5:	c1 e0 04             	shl    $0x4,%eax
   1bdc8:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bdcd:	8b 10                	mov    (%eax),%edx
   1bdcf:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1bdd4:	89 d1                	mov    %edx,%ecx
   1bdd6:	29 c1                	sub    %eax,%ecx
   1bdd8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bddc:	89 d0                	mov    %edx,%eax
   1bdde:	c1 e0 03             	shl    $0x3,%eax
   1bde1:	01 d0                	add    %edx,%eax
   1bde3:	c1 e0 04             	shl    $0x4,%eax
   1bde6:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1bdeb:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1bded:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdf1:	89 d0                	mov    %edx,%eax
   1bdf3:	c1 e0 03             	shl    $0x3,%eax
   1bdf6:	01 d0                	add    %edx,%eax
   1bdf8:	c1 e0 04             	shl    $0x4,%eax
   1bdfb:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1be00:	8b 10                	mov    (%eax),%edx
   1be02:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1be07:	89 d1                	mov    %edx,%ecx
   1be09:	29 c1                	sub    %eax,%ecx
   1be0b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be0f:	89 d0                	mov    %edx,%eax
   1be11:	c1 e0 03             	shl    $0x3,%eax
   1be14:	01 d0                	add    %edx,%eax
   1be16:	c1 e0 04             	shl    $0x4,%eax
   1be19:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1be1e:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1be20:	83 ec 0c             	sub    $0xc,%esp
   1be23:	ff 74 24 14          	pushl  0x14(%esp)
   1be27:	e8 92 eb ff ff       	call   1a9be <lf>
   1be2c:	83 c4 10             	add    $0x10,%esp
					}
					c = 9;
   1be2f:	c6 44 24 07 09       	movb   $0x9,0x7(%esp)
   1be34:	e9 39 0f 00 00       	jmp    1cd72 <con_write+0x13ca>
				// 如果字符c是响铃符BEL(7),则调用蜂鸣函数,使扬声器发声.
				} else if (c == 7)									// BEL - 响铃
   1be39:	80 7c 24 07 07       	cmpb   $0x7,0x7(%esp)
   1be3e:	75 0a                	jne    1be4a <con_write+0x4a2>
					sysbeep();
   1be40:	e8 3f 15 00 00       	call   1d384 <sysbeep>
   1be45:	e9 28 0f 00 00       	jmp    1cd72 <con_write+0x13ca>
				// 如果c是控制字符SO(14)或SI(15),则相应选择字符集G1或G0作为显示字符集.
			  	else if (c == 14)									// SO - 换出,使用G1.
   1be4a:	80 7c 24 07 0e       	cmpb   $0xe,0x7(%esp)
   1be4f:	75 20                	jne    1be71 <con_write+0x4c9>
			  		translate = GRAF_TRANS;
   1be51:	8b 0d 40 f5 02 00    	mov    0x2f540,%ecx
   1be57:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be5b:	89 d0                	mov    %edx,%eax
   1be5d:	c1 e0 03             	shl    $0x3,%eax
   1be60:	01 d0                	add    %edx,%eax
   1be62:	c1 e0 04             	shl    $0x4,%eax
   1be65:	05 ec fe 03 00       	add    $0x3feec,%eax
   1be6a:	89 08                	mov    %ecx,(%eax)
   1be6c:	e9 01 0f 00 00       	jmp    1cd72 <con_write+0x13ca>
			  	else if (c == 15)									// SI - 换进,使用G0.
   1be71:	80 7c 24 07 0f       	cmpb   $0xf,0x7(%esp)
   1be76:	0f 85 f6 0e 00 00    	jne    1cd72 <con_write+0x13ca>
					translate = NORM_TRANS;
   1be7c:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1be82:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be86:	89 d0                	mov    %edx,%eax
   1be88:	c1 e0 03             	shl    $0x3,%eax
   1be8b:	01 d0                	add    %edx,%eax
   1be8d:	c1 e0 04             	shl    $0x4,%eax
   1be90:	05 ec fe 03 00       	add    $0x3feec,%eax
   1be95:	89 08                	mov    %ecx,(%eax)
				break;
   1be97:	e9 d6 0e 00 00       	jmp    1cd72 <con_write+0x13ca>
			//       ESsquare去处理.否则就把接收到的字符作为转义序列来处理.对于选择字符集转义序列'ESC ('和'ESC )',使用单独的状态ESsetgraph
			//       来处理;对于设备控制字符串序列'ESC P',使用单独的状态ESsetterm来处理
			// 如果在ESnormal状态收到转义字符ESC(0x1b = 033 = 27),则转到本状态处理.该状态对C1中控制字符或转义字符进行处理.处理完后默认的
			// 状态将是ESnormal.
			case ESesc:
				state = ESnormal;
   1be9c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bea0:	89 d0                	mov    %edx,%eax
   1bea2:	c1 e0 03             	shl    $0x3,%eax
   1bea5:	01 d0                	add    %edx,%eax
   1bea7:	c1 e0 04             	shl    $0x4,%eax
   1beaa:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1beaf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				switch (c)
   1beb5:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1beba:	83 e8 23             	sub    $0x23,%eax
   1bebd:	83 f8 40             	cmp    $0x40,%eax
   1bec0:	0f 87 ac 0e 00 00    	ja     1cd72 <con_write+0x13ca>
   1bec6:	8b 04 85 a8 4e 02 00 	mov    0x24ea8(,%eax,4),%eax
   1becd:	ff e0                	jmp    *%eax
				{
				  case '[':											// ESC [ - 是CSI序列.
					state = ESsquare;
   1becf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bed3:	89 d0                	mov    %edx,%eax
   1bed5:	c1 e0 03             	shl    $0x3,%eax
   1bed8:	01 d0                	add    %edx,%eax
   1beda:	c1 e0 04             	shl    $0x4,%eax
   1bedd:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bee2:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
					break;
   1bee8:	e9 e7 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'E':											// ESC E - 光标下移1行回0列.
					gotoxy(currcons, 0, y + 1);
   1beed:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bef1:	89 d0                	mov    %edx,%eax
   1bef3:	c1 e0 03             	shl    $0x3,%eax
   1bef6:	01 d0                	add    %edx,%eax
   1bef8:	c1 e0 04             	shl    $0x4,%eax
   1befb:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1bf00:	8b 00                	mov    (%eax),%eax
   1bf02:	83 c0 01             	add    $0x1,%eax
   1bf05:	83 ec 04             	sub    $0x4,%esp
   1bf08:	50                   	push   %eax
   1bf09:	6a 00                	push   $0x0
   1bf0b:	ff 74 24 14          	pushl  0x14(%esp)
   1bf0f:	e8 a1 e2 ff ff       	call   1a1b5 <gotoxy>
   1bf14:	83 c4 10             	add    $0x10,%esp
					break;
   1bf17:	e9 b8 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'M':											// ESC M - 光标上移一行.
					ri(currcons);
   1bf1c:	83 ec 0c             	sub    $0xc,%esp
   1bf1f:	ff 74 24 14          	pushl  0x14(%esp)
   1bf23:	e8 34 eb ff ff       	call   1aa5c <ri>
   1bf28:	83 c4 10             	add    $0x10,%esp
					break;
   1bf2b:	e9 a4 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'D':											// ESC D - 光标下移一行
					lf(currcons);
   1bf30:	83 ec 0c             	sub    $0xc,%esp
   1bf33:	ff 74 24 14          	pushl  0x14(%esp)
   1bf37:	e8 82 ea ff ff       	call   1a9be <lf>
   1bf3c:	83 c4 10             	add    $0x10,%esp
					break;
   1bf3f:	e9 90 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'Z':											// ESC Z - 设备属性查询
					respond(currcons, tty);
   1bf44:	83 ec 08             	sub    $0x8,%esp
   1bf47:	ff 74 24 28          	pushl  0x28(%esp)
   1bf4b:	ff 74 24 14          	pushl  0x14(%esp)
   1bf4f:	e8 9b f5 ff ff       	call   1b4ef <respond>
   1bf54:	83 c4 10             	add    $0x10,%esp
					break;
   1bf57:	e9 78 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case '7':											// ESC 7 - 保存光标位置
					save_cur(currcons);
   1bf5c:	83 ec 0c             	sub    $0xc,%esp
   1bf5f:	ff 74 24 14          	pushl  0x14(%esp)
   1bf63:	e8 b0 f9 ff ff       	call   1b918 <save_cur>
   1bf68:	83 c4 10             	add    $0x10,%esp
					break;
   1bf6b:	e9 64 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case '8':											// ESC 8 - 恢复光标位置
					restore_cur(currcons);
   1bf70:	83 ec 0c             	sub    $0xc,%esp
   1bf73:	ff 74 24 14          	pushl  0x14(%esp)
   1bf77:	e8 f2 f9 ff ff       	call   1b96e <restore_cur>
   1bf7c:	83 c4 10             	add    $0x10,%esp
					break;
   1bf7f:	e9 50 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case '(':  case ')':								// ESC(,ESC) - 选择字符集
				    	state = ESsetgraph;
   1bf84:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf88:	89 d0                	mov    %edx,%eax
   1bf8a:	c1 e0 03             	shl    $0x3,%eax
   1bf8d:	01 d0                	add    %edx,%eax
   1bf8f:	c1 e0 04             	shl    $0x4,%eax
   1bf92:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bf97:	c7 00 07 00 00 00    	movl   $0x7,(%eax)
					break;
   1bf9d:	e9 32 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'P':											// ESC P - 设置终端参数
				    	state = ESsetterm;
   1bfa2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bfa6:	89 d0                	mov    %edx,%eax
   1bfa8:	c1 e0 03             	shl    $0x3,%eax
   1bfab:	01 d0                	add    %edx,%eax
   1bfad:	c1 e0 04             	shl    $0x4,%eax
   1bfb0:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bfb5:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
				    	break;
   1bfbb:	e9 14 01 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case '#':											// ESC # - 修改整行属性
				  	state = -1;
   1bfc0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bfc4:	89 d0                	mov    %edx,%eax
   1bfc6:	c1 e0 03             	shl    $0x3,%eax
   1bfc9:	01 d0                	add    %edx,%eax
   1bfcb:	c1 e0 04             	shl    $0x4,%eax
   1bfce:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1bfd3:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
				  	break;
   1bfd9:	e9 f6 00 00 00       	jmp    1c0d4 <con_write+0x72c>
				  case 'c':											// ESC c - 复位到终端初始设置
					tty->termios = DEF_TERMIOS;
   1bfde:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfe2:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   1bfe8:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfec:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
   1bff3:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bff7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   1bffe:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c002:	c7 40 0c 0b 0e 00 00 	movl   $0xe0b,0xc(%eax)
   1c009:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c00d:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1c011:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c015:	8b 15 73 4e 02 00    	mov    0x24e73,%edx
   1c01b:	89 50 11             	mov    %edx,0x11(%eax)
   1c01e:	8b 15 77 4e 02 00    	mov    0x24e77,%edx
   1c024:	89 50 15             	mov    %edx,0x15(%eax)
   1c027:	8b 15 7b 4e 02 00    	mov    0x24e7b,%edx
   1c02d:	89 50 19             	mov    %edx,0x19(%eax)
   1c030:	8b 15 7f 4e 02 00    	mov    0x24e7f,%edx
   1c036:	89 50 1d             	mov    %edx,0x1d(%eax)
   1c039:	0f b6 15 83 4e 02 00 	movzbl 0x24e83,%edx
   1c040:	88 50 21             	mov    %dl,0x21(%eax)
				  	state = restate = ESnormal;
   1c043:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c047:	89 d0                	mov    %edx,%eax
   1c049:	c1 e0 03             	shl    $0x3,%eax
   1c04c:	01 d0                	add    %edx,%eax
   1c04e:	c1 e0 04             	shl    $0x4,%eax
   1c051:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1c056:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c05c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c060:	89 d0                	mov    %edx,%eax
   1c062:	c1 e0 03             	shl    $0x3,%eax
   1c065:	01 d0                	add    %edx,%eax
   1c067:	c1 e0 04             	shl    $0x4,%eax
   1c06a:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1c06f:	8b 08                	mov    (%eax),%ecx
   1c071:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c075:	89 d0                	mov    %edx,%eax
   1c077:	c1 e0 03             	shl    $0x3,%eax
   1c07a:	01 d0                	add    %edx,%eax
   1c07c:	c1 e0 04             	shl    $0x4,%eax
   1c07f:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c084:	89 08                	mov    %ecx,(%eax)
					checkin = 0;
   1c086:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c08a:	89 d0                	mov    %edx,%eax
   1c08c:	c1 e0 03             	shl    $0x3,%eax
   1c08f:	01 d0                	add    %edx,%eax
   1c091:	c1 e0 04             	shl    $0x4,%eax
   1c094:	05 74 fe 03 00       	add    $0x3fe74,%eax
   1c099:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					top = 0;
   1c09f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0a3:	89 d0                	mov    %edx,%eax
   1c0a5:	c1 e0 03             	shl    $0x3,%eax
   1c0a8:	01 d0                	add    %edx,%eax
   1c0aa:	c1 e0 04             	shl    $0x4,%eax
   1c0ad:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1c0b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					bottom = video_num_lines;
   1c0b8:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1c0be:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0c2:	89 d0                	mov    %edx,%eax
   1c0c4:	c1 e0 03             	shl    $0x3,%eax
   1c0c7:	01 d0                	add    %edx,%eax
   1c0c9:	c1 e0 04             	shl    $0x4,%eax
   1c0cc:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1c0d1:	89 08                	mov    %ecx,(%eax)
					break;
   1c0d3:	90                   	nop
				 /* case '>':   Numeric keypad */
				 /* case '=':   Appl. keypad */
				}
				break;
   1c0d4:	e9 99 0c 00 00       	jmp    1cd72 <con_write+0x13ca>
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c0d9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0dd:	89 d0                	mov    %edx,%eax
   1c0df:	c1 e0 03             	shl    $0x3,%eax
   1c0e2:	01 d0                	add    %edx,%eax
   1c0e4:	c1 e0 04             	shl    $0x4,%eax
   1c0e7:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c0ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c0f2:	eb 60                	jmp    1c154 <con_write+0x7ac>
					par[npar] = 0;
   1c0f4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0f8:	89 d0                	mov    %edx,%eax
   1c0fa:	c1 e0 03             	shl    $0x3,%eax
   1c0fd:	01 d0                	add    %edx,%eax
   1c0ff:	c1 e0 04             	shl    $0x4,%eax
   1c102:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c107:	8b 08                	mov    (%eax),%ecx
   1c109:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c10d:	89 d0                	mov    %edx,%eax
   1c10f:	c1 e0 03             	shl    $0x3,%eax
   1c112:	01 d0                	add    %edx,%eax
   1c114:	c1 e0 02             	shl    $0x2,%eax
   1c117:	01 c8                	add    %ecx,%eax
   1c119:	83 c0 0c             	add    $0xc,%eax
   1c11c:	c7 04 85 68 fe 03 00 	movl   $0x0,0x3fe68(,%eax,4)
   1c123:	00 00 00 00 
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c127:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c12b:	89 d0                	mov    %edx,%eax
   1c12d:	c1 e0 03             	shl    $0x3,%eax
   1c130:	01 d0                	add    %edx,%eax
   1c132:	c1 e0 04             	shl    $0x4,%eax
   1c135:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c13a:	8b 00                	mov    (%eax),%eax
   1c13c:	8d 48 01             	lea    0x1(%eax),%ecx
   1c13f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c143:	89 d0                	mov    %edx,%eax
   1c145:	c1 e0 03             	shl    $0x3,%eax
   1c148:	01 d0                	add    %edx,%eax
   1c14a:	c1 e0 04             	shl    $0x4,%eax
   1c14d:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c152:	89 08                	mov    %ecx,(%eax)
   1c154:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c158:	89 d0                	mov    %edx,%eax
   1c15a:	c1 e0 03             	shl    $0x3,%eax
   1c15d:	01 d0                	add    %edx,%eax
   1c15f:	c1 e0 04             	shl    $0x4,%eax
   1c162:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c167:	8b 00                	mov    (%eax),%eax
   1c169:	83 f8 0f             	cmp    $0xf,%eax
   1c16c:	76 86                	jbe    1c0f4 <con_write+0x74c>
				npar = 0;
   1c16e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c172:	89 d0                	mov    %edx,%eax
   1c174:	c1 e0 03             	shl    $0x3,%eax
   1c177:	01 d0                	add    %edx,%eax
   1c179:	c1 e0 04             	shl    $0x4,%eax
   1c17c:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c181:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				state = ESgetpars;
   1c187:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c18b:	89 d0                	mov    %edx,%eax
   1c18d:	c1 e0 03             	shl    $0x3,%eax
   1c190:	01 d0                	add    %edx,%eax
   1c192:	c1 e0 04             	shl    $0x4,%eax
   1c195:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c19a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
				if (c == '[')  										/* Function key */	// 'ESC [['是功能键.
   1c1a0:	80 7c 24 07 5b       	cmpb   $0x5b,0x7(%esp)
   1c1a5:	75 1e                	jne    1c1c5 <con_write+0x81d>
				{
					state = ESfunckey;
   1c1a7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1ab:	89 d0                	mov    %edx,%eax
   1c1ad:	c1 e0 03             	shl    $0x3,%eax
   1c1b0:	01 d0                	add    %edx,%eax
   1c1b2:	c1 e0 04             	shl    $0x4,%eax
   1c1b5:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c1ba:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
					break;
   1c1c0:	e9 ad 0b 00 00       	jmp    1cd72 <con_write+0x13ca>
				}
				if (ques = (c == '?'))
   1c1c5:	80 7c 24 07 3f       	cmpb   $0x3f,0x7(%esp)
   1c1ca:	0f 94 c0             	sete   %al
   1c1cd:	0f b6 c8             	movzbl %al,%ecx
   1c1d0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1d4:	89 d0                	mov    %edx,%eax
   1c1d6:	c1 e0 03             	shl    $0x3,%eax
   1c1d9:	01 d0                	add    %edx,%eax
   1c1db:	c1 e0 04             	shl    $0x4,%eax
   1c1de:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c1e3:	89 08                	mov    %ecx,(%eax)
   1c1e5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1e9:	89 d0                	mov    %edx,%eax
   1c1eb:	c1 e0 03             	shl    $0x3,%eax
   1c1ee:	01 d0                	add    %edx,%eax
   1c1f0:	c1 e0 04             	shl    $0x4,%eax
   1c1f3:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c1f8:	8b 00                	mov    (%eax),%eax
   1c1fa:	85 c0                	test   %eax,%eax
   1c1fc:	74 05                	je     1c203 <con_write+0x85b>
					break;
   1c1fe:	e9 6f 0b 00 00       	jmp    1cd72 <con_write+0x13ca>
			//            则还是维持在本状态,并把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态
			//            ESgotparts去处理.
			// 该状态表示此时要接收控制序列的参数值.参数用十进制数表示,把接收到的数字字符转换成数值并保存到par[]数组中.如果收到一个分号';',则还是维持在本状态,并
			// 把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态ESgotpars去处理.
			case ESgetpars:
				if (c == ';' && npar < NPAR - 1) {
   1c203:	80 7c 24 07 3b       	cmpb   $0x3b,0x7(%esp)
   1c208:	75 4c                	jne    1c256 <con_write+0x8ae>
   1c20a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c20e:	89 d0                	mov    %edx,%eax
   1c210:	c1 e0 03             	shl    $0x3,%eax
   1c213:	01 d0                	add    %edx,%eax
   1c215:	c1 e0 04             	shl    $0x4,%eax
   1c218:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c21d:	8b 00                	mov    (%eax),%eax
   1c21f:	83 f8 0e             	cmp    $0xe,%eax
   1c222:	77 32                	ja     1c256 <con_write+0x8ae>
					npar++;
   1c224:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c228:	89 d0                	mov    %edx,%eax
   1c22a:	c1 e0 03             	shl    $0x3,%eax
   1c22d:	01 d0                	add    %edx,%eax
   1c22f:	c1 e0 04             	shl    $0x4,%eax
   1c232:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c237:	8b 00                	mov    (%eax),%eax
   1c239:	8d 48 01             	lea    0x1(%eax),%ecx
   1c23c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c240:	89 d0                	mov    %edx,%eax
   1c242:	c1 e0 03             	shl    $0x3,%eax
   1c245:	01 d0                	add    %edx,%eax
   1c247:	c1 e0 04             	shl    $0x4,%eax
   1c24a:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c24f:	89 08                	mov    %ecx,(%eax)
					break;
   1c251:	e9 1c 0b 00 00       	jmp    1cd72 <con_write+0x13ca>
				} else if (c >= '0' && c <= '9') {
   1c256:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   1c25b:	0f 8e 80 00 00 00    	jle    1c2e1 <con_write+0x939>
   1c261:	80 7c 24 07 39       	cmpb   $0x39,0x7(%esp)
   1c266:	7f 79                	jg     1c2e1 <con_write+0x939>
					par[npar] = 10 * par[npar] + c - '0';
   1c268:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c26c:	89 d0                	mov    %edx,%eax
   1c26e:	c1 e0 03             	shl    $0x3,%eax
   1c271:	01 d0                	add    %edx,%eax
   1c273:	c1 e0 04             	shl    $0x4,%eax
   1c276:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c27b:	8b 08                	mov    (%eax),%ecx
   1c27d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c281:	89 d0                	mov    %edx,%eax
   1c283:	c1 e0 03             	shl    $0x3,%eax
   1c286:	01 d0                	add    %edx,%eax
   1c288:	c1 e0 02             	shl    $0x2,%eax
   1c28b:	01 c8                	add    %ecx,%eax
   1c28d:	83 c0 0c             	add    $0xc,%eax
   1c290:	8b 14 85 68 fe 03 00 	mov    0x3fe68(,%eax,4),%edx
   1c297:	89 d0                	mov    %edx,%eax
   1c299:	c1 e0 02             	shl    $0x2,%eax
   1c29c:	01 d0                	add    %edx,%eax
   1c29e:	01 c0                	add    %eax,%eax
   1c2a0:	89 c2                	mov    %eax,%edx
   1c2a2:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c2a7:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1c2aa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2ae:	89 d0                	mov    %edx,%eax
   1c2b0:	c1 e0 03             	shl    $0x3,%eax
   1c2b3:	01 d0                	add    %edx,%eax
   1c2b5:	c1 e0 04             	shl    $0x4,%eax
   1c2b8:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1c2bd:	8b 18                	mov    (%eax),%ebx
   1c2bf:	83 e9 30             	sub    $0x30,%ecx
   1c2c2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2c6:	89 d0                	mov    %edx,%eax
   1c2c8:	c1 e0 03             	shl    $0x3,%eax
   1c2cb:	01 d0                	add    %edx,%eax
   1c2cd:	c1 e0 02             	shl    $0x2,%eax
   1c2d0:	01 d8                	add    %ebx,%eax
   1c2d2:	83 c0 0c             	add    $0xc,%eax
   1c2d5:	89 0c 85 68 fe 03 00 	mov    %ecx,0x3fe68(,%eax,4)
					break;
   1c2dc:	e9 91 0a 00 00       	jmp    1cd72 <con_write+0x13ca>
				} else state = ESgotpars;
   1c2e1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2e5:	89 d0                	mov    %edx,%eax
   1c2e7:	c1 e0 03             	shl    $0x3,%eax
   1c2ea:	01 d0                	add    %edx,%eax
   1c2ec:	c1 e0 04             	shl    $0x4,%eax
   1c2ef:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c2f4:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			//           收到过'?',说明这个序列是终端设备私有序列.本内核不对支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.
			//           待序列处理完后就把状态恢复到ESnormal.
			// ESgotpars状态表示我们已经接收到一个完整的控制序列.此时可以根据本状态接收到的结尾字符对相应控制序列进行处理.不过在处理之前,如果在ESsquare状态收到过'?',
			// 说明这个序列是终端设备私有序列.本内核不支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.待序列处理完后就把状态恢复到ESnormal.
			case ESgotpars:
				state = ESnormal;
   1c2fa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2fe:	89 d0                	mov    %edx,%eax
   1c300:	c1 e0 03             	shl    $0x3,%eax
   1c303:	01 d0                	add    %edx,%eax
   1c305:	c1 e0 04             	shl    $0x4,%eax
   1c308:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1c30d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (ques)
   1c313:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c317:	89 d0                	mov    %edx,%eax
   1c319:	c1 e0 03             	shl    $0x3,%eax
   1c31c:	01 d0                	add    %edx,%eax
   1c31e:	c1 e0 04             	shl    $0x4,%eax
   1c321:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c326:	8b 00                	mov    (%eax),%eax
   1c328:	85 c0                	test   %eax,%eax
   1c32a:	74 1e                	je     1c34a <con_write+0x9a2>
				{ ques =0;
   1c32c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c330:	89 d0                	mov    %edx,%eax
   1c332:	c1 e0 03             	shl    $0x3,%eax
   1c335:	01 d0                	add    %edx,%eax
   1c337:	c1 e0 04             	shl    $0x4,%eax
   1c33a:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1c33f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				  break;
   1c345:	e9 28 0a 00 00       	jmp    1cd72 <con_write+0x13ca>
				}
				switch(c) {
   1c34a:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c34f:	83 e8 40             	sub    $0x40,%eax
   1c352:	83 f8 35             	cmp    $0x35,%eax
   1c355:	0f 87 17 0a 00 00    	ja     1cd72 <con_write+0x13ca>
   1c35b:	8b 04 85 ac 4f 02 00 	mov    0x24fac(,%eax,4),%eax
   1c362:	ff e0                	jmp    *%eax
					// 如果c是字符'G'或'`',则par[]中第1个参数代表列号,若列号不为零,则将光标左移1格.
					case 'G': case '`':							// CSI Pn G - 光标水平移动.
						if (par[0]) par[0]--;
   1c364:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c368:	89 d0                	mov    %edx,%eax
   1c36a:	c1 e0 03             	shl    $0x3,%eax
   1c36d:	01 d0                	add    %edx,%eax
   1c36f:	c1 e0 04             	shl    $0x4,%eax
   1c372:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c377:	8b 00                	mov    (%eax),%eax
   1c379:	85 c0                	test   %eax,%eax
   1c37b:	74 2d                	je     1c3aa <con_write+0xa02>
   1c37d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c381:	89 d0                	mov    %edx,%eax
   1c383:	c1 e0 03             	shl    $0x3,%eax
   1c386:	01 d0                	add    %edx,%eax
   1c388:	c1 e0 04             	shl    $0x4,%eax
   1c38b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c390:	8b 00                	mov    (%eax),%eax
   1c392:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c395:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c399:	89 d0                	mov    %edx,%eax
   1c39b:	c1 e0 03             	shl    $0x3,%eax
   1c39e:	01 d0                	add    %edx,%eax
   1c3a0:	c1 e0 04             	shl    $0x4,%eax
   1c3a3:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3a8:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[0], y);
   1c3aa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3ae:	89 d0                	mov    %edx,%eax
   1c3b0:	c1 e0 03             	shl    $0x3,%eax
   1c3b3:	01 d0                	add    %edx,%eax
   1c3b5:	c1 e0 04             	shl    $0x4,%eax
   1c3b8:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c3bd:	8b 08                	mov    (%eax),%ecx
   1c3bf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3c3:	89 d0                	mov    %edx,%eax
   1c3c5:	c1 e0 03             	shl    $0x3,%eax
   1c3c8:	01 d0                	add    %edx,%eax
   1c3ca:	c1 e0 04             	shl    $0x4,%eax
   1c3cd:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3d2:	8b 00                	mov    (%eax),%eax
   1c3d4:	83 ec 04             	sub    $0x4,%esp
   1c3d7:	51                   	push   %ecx
   1c3d8:	50                   	push   %eax
   1c3d9:	ff 74 24 14          	pushl  0x14(%esp)
   1c3dd:	e8 d3 dd ff ff       	call   1a1b5 <gotoxy>
   1c3e2:	83 c4 10             	add    $0x10,%esp
						break;
   1c3e5:	e9 4b 08 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'A',则第1个参数代表光标上移的行数.若参数为0则上移1行.
					case 'A':									// CSI Pn A - 光标上移.
						if (!par[0]) par[0]++;
   1c3ea:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3ee:	89 d0                	mov    %edx,%eax
   1c3f0:	c1 e0 03             	shl    $0x3,%eax
   1c3f3:	01 d0                	add    %edx,%eax
   1c3f5:	c1 e0 04             	shl    $0x4,%eax
   1c3f8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c3fd:	8b 00                	mov    (%eax),%eax
   1c3ff:	85 c0                	test   %eax,%eax
   1c401:	75 2d                	jne    1c430 <con_write+0xa88>
   1c403:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c407:	89 d0                	mov    %edx,%eax
   1c409:	c1 e0 03             	shl    $0x3,%eax
   1c40c:	01 d0                	add    %edx,%eax
   1c40e:	c1 e0 04             	shl    $0x4,%eax
   1c411:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c416:	8b 00                	mov    (%eax),%eax
   1c418:	8d 48 01             	lea    0x1(%eax),%ecx
   1c41b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c41f:	89 d0                	mov    %edx,%eax
   1c421:	c1 e0 03             	shl    $0x3,%eax
   1c424:	01 d0                	add    %edx,%eax
   1c426:	c1 e0 04             	shl    $0x4,%eax
   1c429:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c42e:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y - par[0]);
   1c430:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c434:	89 d0                	mov    %edx,%eax
   1c436:	c1 e0 03             	shl    $0x3,%eax
   1c439:	01 d0                	add    %edx,%eax
   1c43b:	c1 e0 04             	shl    $0x4,%eax
   1c43e:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c443:	8b 08                	mov    (%eax),%ecx
   1c445:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c449:	89 d0                	mov    %edx,%eax
   1c44b:	c1 e0 03             	shl    $0x3,%eax
   1c44e:	01 d0                	add    %edx,%eax
   1c450:	c1 e0 04             	shl    $0x4,%eax
   1c453:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c458:	8b 00                	mov    (%eax),%eax
   1c45a:	29 c1                	sub    %eax,%ecx
   1c45c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c460:	89 d0                	mov    %edx,%eax
   1c462:	c1 e0 03             	shl    $0x3,%eax
   1c465:	01 d0                	add    %edx,%eax
   1c467:	c1 e0 04             	shl    $0x4,%eax
   1c46a:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c46f:	8b 00                	mov    (%eax),%eax
   1c471:	83 ec 04             	sub    $0x4,%esp
   1c474:	51                   	push   %ecx
   1c475:	50                   	push   %eax
   1c476:	ff 74 24 14          	pushl  0x14(%esp)
   1c47a:	e8 36 dd ff ff       	call   1a1b5 <gotoxy>
   1c47f:	83 c4 10             	add    $0x10,%esp
						break;
   1c482:	e9 ae 07 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'B'或'e',则第1个代表光标右移的格数.若参数为0则下移一行.
					case 'B': case 'e':							// CSI Pn B - 光标下移.
						if (!par[0]) par[0]++;
   1c487:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c48b:	89 d0                	mov    %edx,%eax
   1c48d:	c1 e0 03             	shl    $0x3,%eax
   1c490:	01 d0                	add    %edx,%eax
   1c492:	c1 e0 04             	shl    $0x4,%eax
   1c495:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c49a:	8b 00                	mov    (%eax),%eax
   1c49c:	85 c0                	test   %eax,%eax
   1c49e:	75 2d                	jne    1c4cd <con_write+0xb25>
   1c4a0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4a4:	89 d0                	mov    %edx,%eax
   1c4a6:	c1 e0 03             	shl    $0x3,%eax
   1c4a9:	01 d0                	add    %edx,%eax
   1c4ab:	c1 e0 04             	shl    $0x4,%eax
   1c4ae:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4b3:	8b 00                	mov    (%eax),%eax
   1c4b5:	8d 48 01             	lea    0x1(%eax),%ecx
   1c4b8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4bc:	89 d0                	mov    %edx,%eax
   1c4be:	c1 e0 03             	shl    $0x3,%eax
   1c4c1:	01 d0                	add    %edx,%eax
   1c4c3:	c1 e0 04             	shl    $0x4,%eax
   1c4c6:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4cb:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y + par[0]);
   1c4cd:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4d1:	89 d0                	mov    %edx,%eax
   1c4d3:	c1 e0 03             	shl    $0x3,%eax
   1c4d6:	01 d0                	add    %edx,%eax
   1c4d8:	c1 e0 04             	shl    $0x4,%eax
   1c4db:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c4e0:	8b 08                	mov    (%eax),%ecx
   1c4e2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4e6:	89 d0                	mov    %edx,%eax
   1c4e8:	c1 e0 03             	shl    $0x3,%eax
   1c4eb:	01 d0                	add    %edx,%eax
   1c4ed:	c1 e0 04             	shl    $0x4,%eax
   1c4f0:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c4f5:	8b 00                	mov    (%eax),%eax
   1c4f7:	01 c1                	add    %eax,%ecx
   1c4f9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4fd:	89 d0                	mov    %edx,%eax
   1c4ff:	c1 e0 03             	shl    $0x3,%eax
   1c502:	01 d0                	add    %edx,%eax
   1c504:	c1 e0 04             	shl    $0x4,%eax
   1c507:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c50c:	8b 00                	mov    (%eax),%eax
   1c50e:	83 ec 04             	sub    $0x4,%esp
   1c511:	51                   	push   %ecx
   1c512:	50                   	push   %eax
   1c513:	ff 74 24 14          	pushl  0x14(%esp)
   1c517:	e8 99 dc ff ff       	call   1a1b5 <gotoxy>
   1c51c:	83 c4 10             	add    $0x10,%esp
						break;
   1c51f:	e9 11 07 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'C'或'a',则第1个参数代表光标右移的格数.若参数为0则右移1格.
					case 'C': case 'a':							// CSI Pn C - 光标右移.
						if (!par[0]) par[0]++;
   1c524:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c528:	89 d0                	mov    %edx,%eax
   1c52a:	c1 e0 03             	shl    $0x3,%eax
   1c52d:	01 d0                	add    %edx,%eax
   1c52f:	c1 e0 04             	shl    $0x4,%eax
   1c532:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c537:	8b 00                	mov    (%eax),%eax
   1c539:	85 c0                	test   %eax,%eax
   1c53b:	75 2d                	jne    1c56a <con_write+0xbc2>
   1c53d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c541:	89 d0                	mov    %edx,%eax
   1c543:	c1 e0 03             	shl    $0x3,%eax
   1c546:	01 d0                	add    %edx,%eax
   1c548:	c1 e0 04             	shl    $0x4,%eax
   1c54b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c550:	8b 00                	mov    (%eax),%eax
   1c552:	8d 48 01             	lea    0x1(%eax),%ecx
   1c555:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c559:	89 d0                	mov    %edx,%eax
   1c55b:	c1 e0 03             	shl    $0x3,%eax
   1c55e:	01 d0                	add    %edx,%eax
   1c560:	c1 e0 04             	shl    $0x4,%eax
   1c563:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c568:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x + par[0], y);
   1c56a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c56e:	89 d0                	mov    %edx,%eax
   1c570:	c1 e0 03             	shl    $0x3,%eax
   1c573:	01 d0                	add    %edx,%eax
   1c575:	c1 e0 04             	shl    $0x4,%eax
   1c578:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c57d:	8b 08                	mov    (%eax),%ecx
   1c57f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c583:	89 d0                	mov    %edx,%eax
   1c585:	c1 e0 03             	shl    $0x3,%eax
   1c588:	01 d0                	add    %edx,%eax
   1c58a:	c1 e0 04             	shl    $0x4,%eax
   1c58d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c592:	8b 18                	mov    (%eax),%ebx
   1c594:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c598:	89 d0                	mov    %edx,%eax
   1c59a:	c1 e0 03             	shl    $0x3,%eax
   1c59d:	01 d0                	add    %edx,%eax
   1c59f:	c1 e0 04             	shl    $0x4,%eax
   1c5a2:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c5a7:	8b 00                	mov    (%eax),%eax
   1c5a9:	01 d8                	add    %ebx,%eax
   1c5ab:	83 ec 04             	sub    $0x4,%esp
   1c5ae:	51                   	push   %ecx
   1c5af:	50                   	push   %eax
   1c5b0:	ff 74 24 14          	pushl  0x14(%esp)
   1c5b4:	e8 fc db ff ff       	call   1a1b5 <gotoxy>
   1c5b9:	83 c4 10             	add    $0x10,%esp
						break;
   1c5bc:	e9 74 06 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'D',则第1个参数代表光标左移的格数.若参数为0则左移1格.
					case 'D':									// CSI Pn D - 光标左移.
						if (!par[0]) par[0]++;
   1c5c1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5c5:	89 d0                	mov    %edx,%eax
   1c5c7:	c1 e0 03             	shl    $0x3,%eax
   1c5ca:	01 d0                	add    %edx,%eax
   1c5cc:	c1 e0 04             	shl    $0x4,%eax
   1c5cf:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c5d4:	8b 00                	mov    (%eax),%eax
   1c5d6:	85 c0                	test   %eax,%eax
   1c5d8:	75 2d                	jne    1c607 <con_write+0xc5f>
   1c5da:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5de:	89 d0                	mov    %edx,%eax
   1c5e0:	c1 e0 03             	shl    $0x3,%eax
   1c5e3:	01 d0                	add    %edx,%eax
   1c5e5:	c1 e0 04             	shl    $0x4,%eax
   1c5e8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c5ed:	8b 00                	mov    (%eax),%eax
   1c5ef:	8d 48 01             	lea    0x1(%eax),%ecx
   1c5f2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5f6:	89 d0                	mov    %edx,%eax
   1c5f8:	c1 e0 03             	shl    $0x3,%eax
   1c5fb:	01 d0                	add    %edx,%eax
   1c5fd:	c1 e0 04             	shl    $0x4,%eax
   1c600:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c605:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x - par[0], y);
   1c607:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c60b:	89 d0                	mov    %edx,%eax
   1c60d:	c1 e0 03             	shl    $0x3,%eax
   1c610:	01 d0                	add    %edx,%eax
   1c612:	c1 e0 04             	shl    $0x4,%eax
   1c615:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c61a:	8b 08                	mov    (%eax),%ecx
   1c61c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c620:	89 d0                	mov    %edx,%eax
   1c622:	c1 e0 03             	shl    $0x3,%eax
   1c625:	01 d0                	add    %edx,%eax
   1c627:	c1 e0 04             	shl    $0x4,%eax
   1c62a:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c62f:	8b 18                	mov    (%eax),%ebx
   1c631:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c635:	89 d0                	mov    %edx,%eax
   1c637:	c1 e0 03             	shl    $0x3,%eax
   1c63a:	01 d0                	add    %edx,%eax
   1c63c:	c1 e0 04             	shl    $0x4,%eax
   1c63f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c644:	8b 00                	mov    (%eax),%eax
   1c646:	29 c3                	sub    %eax,%ebx
   1c648:	89 d8                	mov    %ebx,%eax
   1c64a:	83 ec 04             	sub    $0x4,%esp
   1c64d:	51                   	push   %ecx
   1c64e:	50                   	push   %eax
   1c64f:	ff 74 24 14          	pushl  0x14(%esp)
   1c653:	e8 5d db ff ff       	call   1a1b5 <gotoxy>
   1c658:	83 c4 10             	add    $0x10,%esp
						break;
   1c65b:	e9 d5 05 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'E',则第1个参数代表光标向下移动的行数,并回到0列.若参数为0则下移1行.
					case 'E':									// CSI Pn E - 光标下移回0列
						if (!par[0]) par[0]++;
   1c660:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c664:	89 d0                	mov    %edx,%eax
   1c666:	c1 e0 03             	shl    $0x3,%eax
   1c669:	01 d0                	add    %edx,%eax
   1c66b:	c1 e0 04             	shl    $0x4,%eax
   1c66e:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c673:	8b 00                	mov    (%eax),%eax
   1c675:	85 c0                	test   %eax,%eax
   1c677:	75 2d                	jne    1c6a6 <con_write+0xcfe>
   1c679:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c67d:	89 d0                	mov    %edx,%eax
   1c67f:	c1 e0 03             	shl    $0x3,%eax
   1c682:	01 d0                	add    %edx,%eax
   1c684:	c1 e0 04             	shl    $0x4,%eax
   1c687:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c68c:	8b 00                	mov    (%eax),%eax
   1c68e:	8d 48 01             	lea    0x1(%eax),%ecx
   1c691:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c695:	89 d0                	mov    %edx,%eax
   1c697:	c1 e0 03             	shl    $0x3,%eax
   1c69a:	01 d0                	add    %edx,%eax
   1c69c:	c1 e0 04             	shl    $0x4,%eax
   1c69f:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6a4:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y + par[0]);
   1c6a6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6aa:	89 d0                	mov    %edx,%eax
   1c6ac:	c1 e0 03             	shl    $0x3,%eax
   1c6af:	01 d0                	add    %edx,%eax
   1c6b1:	c1 e0 04             	shl    $0x4,%eax
   1c6b4:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c6b9:	8b 08                	mov    (%eax),%ecx
   1c6bb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6bf:	89 d0                	mov    %edx,%eax
   1c6c1:	c1 e0 03             	shl    $0x3,%eax
   1c6c4:	01 d0                	add    %edx,%eax
   1c6c6:	c1 e0 04             	shl    $0x4,%eax
   1c6c9:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6ce:	8b 00                	mov    (%eax),%eax
   1c6d0:	01 c8                	add    %ecx,%eax
   1c6d2:	83 ec 04             	sub    $0x4,%esp
   1c6d5:	50                   	push   %eax
   1c6d6:	6a 00                	push   $0x0
   1c6d8:	ff 74 24 14          	pushl  0x14(%esp)
   1c6dc:	e8 d4 da ff ff       	call   1a1b5 <gotoxy>
   1c6e1:	83 c4 10             	add    $0x10,%esp
						break;
   1c6e4:	e9 4c 05 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'F',则第1个参数代表光标向上移动的行数,并回到0列.若参数为0则上移1行.
					case 'F':									// CSI Pn F - 光标上移回0列.
						if (!par[0]) par[0]++;
   1c6e9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6ed:	89 d0                	mov    %edx,%eax
   1c6ef:	c1 e0 03             	shl    $0x3,%eax
   1c6f2:	01 d0                	add    %edx,%eax
   1c6f4:	c1 e0 04             	shl    $0x4,%eax
   1c6f7:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c6fc:	8b 00                	mov    (%eax),%eax
   1c6fe:	85 c0                	test   %eax,%eax
   1c700:	75 2d                	jne    1c72f <con_write+0xd87>
   1c702:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c706:	89 d0                	mov    %edx,%eax
   1c708:	c1 e0 03             	shl    $0x3,%eax
   1c70b:	01 d0                	add    %edx,%eax
   1c70d:	c1 e0 04             	shl    $0x4,%eax
   1c710:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c715:	8b 00                	mov    (%eax),%eax
   1c717:	8d 48 01             	lea    0x1(%eax),%ecx
   1c71a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c71e:	89 d0                	mov    %edx,%eax
   1c720:	c1 e0 03             	shl    $0x3,%eax
   1c723:	01 d0                	add    %edx,%eax
   1c725:	c1 e0 04             	shl    $0x4,%eax
   1c728:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c72d:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y - par[0]);
   1c72f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c733:	89 d0                	mov    %edx,%eax
   1c735:	c1 e0 03             	shl    $0x3,%eax
   1c738:	01 d0                	add    %edx,%eax
   1c73a:	c1 e0 04             	shl    $0x4,%eax
   1c73d:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1c742:	8b 08                	mov    (%eax),%ecx
   1c744:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c748:	89 d0                	mov    %edx,%eax
   1c74a:	c1 e0 03             	shl    $0x3,%eax
   1c74d:	01 d0                	add    %edx,%eax
   1c74f:	c1 e0 04             	shl    $0x4,%eax
   1c752:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c757:	8b 00                	mov    (%eax),%eax
   1c759:	29 c1                	sub    %eax,%ecx
   1c75b:	89 c8                	mov    %ecx,%eax
   1c75d:	83 ec 04             	sub    $0x4,%esp
   1c760:	50                   	push   %eax
   1c761:	6a 00                	push   $0x0
   1c763:	ff 74 24 14          	pushl  0x14(%esp)
   1c767:	e8 49 da ff ff       	call   1a1b5 <gotoxy>
   1c76c:	83 c4 10             	add    $0x10,%esp
						break;
   1c76f:	e9 c1 04 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'd',则第1个参数代表光标所需在的行号(从0计数).
					case 'd':									// CSI Pn d - 在当前列置行位置
						if (par[0]) par[0]--;
   1c774:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c778:	89 d0                	mov    %edx,%eax
   1c77a:	c1 e0 03             	shl    $0x3,%eax
   1c77d:	01 d0                	add    %edx,%eax
   1c77f:	c1 e0 04             	shl    $0x4,%eax
   1c782:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c787:	8b 00                	mov    (%eax),%eax
   1c789:	85 c0                	test   %eax,%eax
   1c78b:	74 2d                	je     1c7ba <con_write+0xe12>
   1c78d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c791:	89 d0                	mov    %edx,%eax
   1c793:	c1 e0 03             	shl    $0x3,%eax
   1c796:	01 d0                	add    %edx,%eax
   1c798:	c1 e0 04             	shl    $0x4,%eax
   1c79b:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7a0:	8b 00                	mov    (%eax),%eax
   1c7a2:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c7a5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7a9:	89 d0                	mov    %edx,%eax
   1c7ab:	c1 e0 03             	shl    $0x3,%eax
   1c7ae:	01 d0                	add    %edx,%eax
   1c7b0:	c1 e0 04             	shl    $0x4,%eax
   1c7b3:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7b8:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, par[0]);
   1c7ba:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7be:	89 d0                	mov    %edx,%eax
   1c7c0:	c1 e0 03             	shl    $0x3,%eax
   1c7c3:	01 d0                	add    %edx,%eax
   1c7c5:	c1 e0 04             	shl    $0x4,%eax
   1c7c8:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c7cd:	8b 08                	mov    (%eax),%ecx
   1c7cf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7d3:	89 d0                	mov    %edx,%eax
   1c7d5:	c1 e0 03             	shl    $0x3,%eax
   1c7d8:	01 d0                	add    %edx,%eax
   1c7da:	c1 e0 04             	shl    $0x4,%eax
   1c7dd:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1c7e2:	8b 00                	mov    (%eax),%eax
   1c7e4:	83 ec 04             	sub    $0x4,%esp
   1c7e7:	51                   	push   %ecx
   1c7e8:	50                   	push   %eax
   1c7e9:	ff 74 24 14          	pushl  0x14(%esp)
   1c7ed:	e8 c3 d9 ff ff       	call   1a1b5 <gotoxy>
   1c7f2:	83 c4 10             	add    $0x10,%esp
						break;
   1c7f5:	e9 3b 04 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果c是'H'或'f',则第1个参数代表光标移到的行号,第2个参数代表光标移到的列号.
					case 'H': case 'f':							// CSI Pn H - 光标定位.
						if (par[0]) par[0]--;
   1c7fa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7fe:	89 d0                	mov    %edx,%eax
   1c800:	c1 e0 03             	shl    $0x3,%eax
   1c803:	01 d0                	add    %edx,%eax
   1c805:	c1 e0 04             	shl    $0x4,%eax
   1c808:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c80d:	8b 00                	mov    (%eax),%eax
   1c80f:	85 c0                	test   %eax,%eax
   1c811:	74 2d                	je     1c840 <con_write+0xe98>
   1c813:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c817:	89 d0                	mov    %edx,%eax
   1c819:	c1 e0 03             	shl    $0x3,%eax
   1c81c:	01 d0                	add    %edx,%eax
   1c81e:	c1 e0 04             	shl    $0x4,%eax
   1c821:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c826:	8b 00                	mov    (%eax),%eax
   1c828:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c82b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c82f:	89 d0                	mov    %edx,%eax
   1c831:	c1 e0 03             	shl    $0x3,%eax
   1c834:	01 d0                	add    %edx,%eax
   1c836:	c1 e0 04             	shl    $0x4,%eax
   1c839:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c83e:	89 08                	mov    %ecx,(%eax)
						if (par[1]) par[1]--;
   1c840:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c844:	89 d0                	mov    %edx,%eax
   1c846:	c1 e0 03             	shl    $0x3,%eax
   1c849:	01 d0                	add    %edx,%eax
   1c84b:	c1 e0 04             	shl    $0x4,%eax
   1c84e:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c853:	8b 00                	mov    (%eax),%eax
   1c855:	85 c0                	test   %eax,%eax
   1c857:	74 2d                	je     1c886 <con_write+0xede>
   1c859:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c85d:	89 d0                	mov    %edx,%eax
   1c85f:	c1 e0 03             	shl    $0x3,%eax
   1c862:	01 d0                	add    %edx,%eax
   1c864:	c1 e0 04             	shl    $0x4,%eax
   1c867:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c86c:	8b 00                	mov    (%eax),%eax
   1c86e:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c871:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c875:	89 d0                	mov    %edx,%eax
   1c877:	c1 e0 03             	shl    $0x3,%eax
   1c87a:	01 d0                	add    %edx,%eax
   1c87c:	c1 e0 04             	shl    $0x4,%eax
   1c87f:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c884:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[1], par[0]);
   1c886:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c88a:	89 d0                	mov    %edx,%eax
   1c88c:	c1 e0 03             	shl    $0x3,%eax
   1c88f:	01 d0                	add    %edx,%eax
   1c891:	c1 e0 04             	shl    $0x4,%eax
   1c894:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c899:	8b 08                	mov    (%eax),%ecx
   1c89b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c89f:	89 d0                	mov    %edx,%eax
   1c8a1:	c1 e0 03             	shl    $0x3,%eax
   1c8a4:	01 d0                	add    %edx,%eax
   1c8a6:	c1 e0 04             	shl    $0x4,%eax
   1c8a9:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1c8ae:	8b 00                	mov    (%eax),%eax
   1c8b0:	83 ec 04             	sub    $0x4,%esp
   1c8b3:	51                   	push   %ecx
   1c8b4:	50                   	push   %eax
   1c8b5:	ff 74 24 14          	pushl  0x14(%esp)
   1c8b9:	e8 f7 d8 ff ff       	call   1a1b5 <gotoxy>
   1c8be:	83 c4 10             	add    $0x10,%esp
						break;
   1c8c1:	e9 6f 03 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'J',则第1个参数代表以光标所处位置清屏的方式:
					// 序列: 'ESC [ Ps J'(Ps=0删除光标到屏幕底端;Ps=1删除屏幕开始到光标处;Ps=2整屏删除).
					case 'J':									// CSI Pn J - 屏幕擦除字符.
						csi_J(currcons, par[0]);
   1c8c6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8ca:	89 d0                	mov    %edx,%eax
   1c8cc:	c1 e0 03             	shl    $0x3,%eax
   1c8cf:	01 d0                	add    %edx,%eax
   1c8d1:	c1 e0 04             	shl    $0x4,%eax
   1c8d4:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c8d9:	8b 00                	mov    (%eax),%eax
   1c8db:	83 ec 08             	sub    $0x8,%esp
   1c8de:	50                   	push   %eax
   1c8df:	ff 74 24 14          	pushl  0x14(%esp)
   1c8e3:	e8 17 e3 ff ff       	call   1abff <csi_J>
   1c8e8:	83 c4 10             	add    $0x10,%esp
						break;
   1c8eb:	e9 45 03 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'K',则第1个参数代表以光标所在位置对行中字符进行删除处理的方式:
					// 序列: 'ESC [ Ps K'(Ps=0删除到行尾;Ps=1从开始删除;Ps=2整行都删除).
					case 'K':									// CSI Pn K - 行内擦除字符.
						csi_K(currcons,par[0]);
   1c8f0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8f4:	89 d0                	mov    %edx,%eax
   1c8f6:	c1 e0 03             	shl    $0x3,%eax
   1c8f9:	01 d0                	add    %edx,%eax
   1c8fb:	c1 e0 04             	shl    $0x4,%eax
   1c8fe:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c903:	8b 00                	mov    (%eax),%eax
   1c905:	83 ec 08             	sub    $0x8,%esp
   1c908:	50                   	push   %eax
   1c909:	ff 74 24 14          	pushl  0x14(%esp)
   1c90d:	e8 03 e4 ff ff       	call   1ad15 <csi_K>
   1c912:	83 c4 10             	add    $0x10,%esp
						break;
   1c915:	e9 1b 03 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'L',表示在光标位置处插入n行(控制序列 'ESC [ Pn L')
					case 'L':									// CSI Pn L - 插入行.
						csi_L(currcons, par[0]);
   1c91a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c91e:	89 d0                	mov    %edx,%eax
   1c920:	c1 e0 03             	shl    $0x3,%eax
   1c923:	01 d0                	add    %edx,%eax
   1c925:	c1 e0 04             	shl    $0x4,%eax
   1c928:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c92d:	8b 00                	mov    (%eax),%eax
   1c92f:	83 ec 08             	sub    $0x8,%esp
   1c932:	50                   	push   %eax
   1c933:	ff 74 24 14          	pushl  0x14(%esp)
   1c937:	e8 10 ef ff ff       	call   1b84c <csi_L>
   1c93c:	83 c4 10             	add    $0x10,%esp
						break;
   1c93f:	e9 f1 02 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'M',表示在光标位置处删除n行(控制序列 'ESC [ Pn M')
					case 'M':									// 删除行
						csi_M(currcons, par[0]);
   1c944:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c948:	89 d0                	mov    %edx,%eax
   1c94a:	c1 e0 03             	shl    $0x3,%eax
   1c94d:	01 d0                	add    %edx,%eax
   1c94f:	c1 e0 04             	shl    $0x4,%eax
   1c952:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c957:	8b 00                	mov    (%eax),%eax
   1c959:	83 ec 08             	sub    $0x8,%esp
   1c95c:	50                   	push   %eax
   1c95d:	ff 74 24 14          	pushl  0x14(%esp)
   1c961:	e8 6e ef ff ff       	call   1b8d4 <csi_M>
   1c966:	83 c4 10             	add    $0x10,%esp
						break;
   1c969:	e9 c7 02 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'P',表示在光标位置处删除n个字符(控制序列 'ESC [ Pn P')
					case 'P':									// 删除字符.
						csi_P(currcons, par[0]);
   1c96e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c972:	89 d0                	mov    %edx,%eax
   1c974:	c1 e0 03             	shl    $0x3,%eax
   1c977:	01 d0                	add    %edx,%eax
   1c979:	c1 e0 04             	shl    $0x4,%eax
   1c97c:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c981:	8b 00                	mov    (%eax),%eax
   1c983:	83 ec 08             	sub    $0x8,%esp
   1c986:	50                   	push   %eax
   1c987:	ff 74 24 14          	pushl  0x14(%esp)
   1c98b:	e8 00 ef ff ff       	call   1b890 <csi_P>
   1c990:	83 c4 10             	add    $0x10,%esp
						break;
   1c993:	e9 9d 02 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'@',表示在光标位置处插入n个字符(控制序列 'ESC [ Pn @')
					case '@':									// 插入字符.
						csi_at(currcons, par[0]);
   1c998:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c99c:	89 d0                	mov    %edx,%eax
   1c99e:	c1 e0 03             	shl    $0x3,%eax
   1c9a1:	01 d0                	add    %edx,%eax
   1c9a3:	c1 e0 04             	shl    $0x4,%eax
   1c9a6:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c9ab:	8b 00                	mov    (%eax),%eax
   1c9ad:	83 ec 08             	sub    $0x8,%esp
   1c9b0:	50                   	push   %eax
   1c9b1:	ff 74 24 14          	pushl  0x14(%esp)
   1c9b5:	e8 4e ee ff ff       	call   1b808 <csi_at>
   1c9ba:	83 c4 10             	add    $0x10,%esp
						break;
   1c9bd:	e9 73 02 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'm',表示改变光标处字符的显示属性,比如加粗,加下划线,闪烁,反显等.
					// 转义序列: 'ESC [ Pn m'.n=0正常显示;1加粗;4加下划线;7反显;27正常显示等.
					case 'm':									// CSI Ps m - 设置显示字符属性.
						csi_m(currcons);
   1c9c2:	83 ec 0c             	sub    $0xc,%esp
   1c9c5:	ff 74 24 14          	pushl  0x14(%esp)
   1c9c9:	e8 90 e4 ff ff       	call   1ae5e <csi_m>
   1c9ce:	83 c4 10             	add    $0x10,%esp
						break;
   1c9d1:	e9 5f 02 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
   1c9d6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9da:	89 d0                	mov    %edx,%eax
   1c9dc:	c1 e0 03             	shl    $0x3,%eax
   1c9df:	01 d0                	add    %edx,%eax
   1c9e1:	c1 e0 04             	shl    $0x4,%eax
   1c9e4:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1c9e9:	8b 00                	mov    (%eax),%eax
   1c9eb:	85 c0                	test   %eax,%eax
   1c9ed:	74 2d                	je     1ca1c <con_write+0x1074>
   1c9ef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9f3:	89 d0                	mov    %edx,%eax
   1c9f5:	c1 e0 03             	shl    $0x3,%eax
   1c9f8:	01 d0                	add    %edx,%eax
   1c9fa:	c1 e0 04             	shl    $0x4,%eax
   1c9fd:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1ca02:	8b 00                	mov    (%eax),%eax
   1ca04:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ca07:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca0b:	89 d0                	mov    %edx,%eax
   1ca0d:	c1 e0 03             	shl    $0x3,%eax
   1ca10:	01 d0                	add    %edx,%eax
   1ca12:	c1 e0 04             	shl    $0x4,%eax
   1ca15:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1ca1a:	89 08                	mov    %ecx,(%eax)
						if (!par[1]) par[1] = video_num_lines;
   1ca1c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca20:	89 d0                	mov    %edx,%eax
   1ca22:	c1 e0 03             	shl    $0x3,%eax
   1ca25:	01 d0                	add    %edx,%eax
   1ca27:	c1 e0 04             	shl    $0x4,%eax
   1ca2a:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca2f:	8b 00                	mov    (%eax),%eax
   1ca31:	85 c0                	test   %eax,%eax
   1ca33:	75 1b                	jne    1ca50 <con_write+0x10a8>
   1ca35:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1ca3b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca3f:	89 d0                	mov    %edx,%eax
   1ca41:	c1 e0 03             	shl    $0x3,%eax
   1ca44:	01 d0                	add    %edx,%eax
   1ca46:	c1 e0 04             	shl    $0x4,%eax
   1ca49:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca4e:	89 08                	mov    %ecx,(%eax)
						if (par[0] < par[1] &&
   1ca50:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca54:	89 d0                	mov    %edx,%eax
   1ca56:	c1 e0 03             	shl    $0x3,%eax
   1ca59:	01 d0                	add    %edx,%eax
   1ca5b:	c1 e0 04             	shl    $0x4,%eax
   1ca5e:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1ca63:	8b 08                	mov    (%eax),%ecx
   1ca65:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca69:	89 d0                	mov    %edx,%eax
   1ca6b:	c1 e0 03             	shl    $0x3,%eax
   1ca6e:	01 d0                	add    %edx,%eax
   1ca70:	c1 e0 04             	shl    $0x4,%eax
   1ca73:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca78:	8b 00                	mov    (%eax),%eax
   1ca7a:	39 c1                	cmp    %eax,%ecx
   1ca7c:	0f 83 b2 01 00 00    	jae    1cc34 <con_write+0x128c>
						    par[1] <= video_num_lines) {
   1ca82:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca86:	89 d0                	mov    %edx,%eax
   1ca88:	c1 e0 03             	shl    $0x3,%eax
   1ca8b:	01 d0                	add    %edx,%eax
   1ca8d:	c1 e0 04             	shl    $0x4,%eax
   1ca90:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1ca95:	8b 10                	mov    (%eax),%edx
   1ca97:	a1 44 fe 03 00       	mov    0x3fe44,%eax
						if (par[0] < par[1] &&
   1ca9c:	39 c2                	cmp    %eax,%edx
   1ca9e:	0f 87 90 01 00 00    	ja     1cc34 <con_write+0x128c>
							top = par[0];
   1caa4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1caa8:	89 d0                	mov    %edx,%eax
   1caaa:	c1 e0 03             	shl    $0x3,%eax
   1caad:	01 d0                	add    %edx,%eax
   1caaf:	c1 e0 04             	shl    $0x4,%eax
   1cab2:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cab7:	8b 08                	mov    (%eax),%ecx
   1cab9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cabd:	89 d0                	mov    %edx,%eax
   1cabf:	c1 e0 03             	shl    $0x3,%eax
   1cac2:	01 d0                	add    %edx,%eax
   1cac4:	c1 e0 04             	shl    $0x4,%eax
   1cac7:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1cacc:	89 08                	mov    %ecx,(%eax)
							bottom = par[1];
   1cace:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cad2:	89 d0                	mov    %edx,%eax
   1cad4:	c1 e0 03             	shl    $0x3,%eax
   1cad7:	01 d0                	add    %edx,%eax
   1cad9:	c1 e0 04             	shl    $0x4,%eax
   1cadc:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1cae1:	8b 08                	mov    (%eax),%ecx
   1cae3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cae7:	89 d0                	mov    %edx,%eax
   1cae9:	c1 e0 03             	shl    $0x3,%eax
   1caec:	01 d0                	add    %edx,%eax
   1caee:	c1 e0 04             	shl    $0x4,%eax
   1caf1:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1caf6:	89 08                	mov    %ecx,(%eax)
						}
						break;
   1caf8:	e9 37 01 00 00       	jmp    1cc34 <con_write+0x128c>
					// 如果字符c是's',则表示保存当前光标所在位置.
					case 's':									// CSI s - 保存光标位置.
						save_cur(currcons);
   1cafd:	83 ec 0c             	sub    $0xc,%esp
   1cb00:	ff 74 24 14          	pushl  0x14(%esp)
   1cb04:	e8 0f ee ff ff       	call   1b918 <save_cur>
   1cb09:	83 c4 10             	add    $0x10,%esp
						break;
   1cb0c:	e9 24 01 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'u',则表示恢复光标到原保存的位置处.
					case 'u':									// CSI u - 恢复保存的光标位置.
						restore_cur(currcons);
   1cb11:	83 ec 0c             	sub    $0xc,%esp
   1cb14:	ff 74 24 14          	pushl  0x14(%esp)
   1cb18:	e8 51 ee ff ff       	call   1b96e <restore_cur>
   1cb1d:	83 c4 10             	add    $0x10,%esp
						break;
   1cb20:	e9 10 01 00 00       	jmp    1cc35 <con_write+0x128d>
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cb25:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb29:	89 d0                	mov    %edx,%eax
   1cb2b:	c1 e0 03             	shl    $0x3,%eax
   1cb2e:	01 d0                	add    %edx,%eax
   1cb30:	c1 e0 04             	shl    $0x4,%eax
   1cb33:	05 94 fe 03 00       	add    $0x3fe94,%eax
   1cb38:	8b 00                	mov    (%eax),%eax
   1cb3a:	83 f8 01             	cmp    $0x1,%eax
   1cb3d:	0f 86 2f 02 00 00    	jbe    1cd72 <con_write+0x13ca>
						  ((par[1] - 13) == par[0]) &&
   1cb43:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb47:	89 d0                	mov    %edx,%eax
   1cb49:	c1 e0 03             	shl    $0x3,%eax
   1cb4c:	01 d0                	add    %edx,%eax
   1cb4e:	c1 e0 04             	shl    $0x4,%eax
   1cb51:	05 9c fe 03 00       	add    $0x3fe9c,%eax
   1cb56:	8b 00                	mov    (%eax),%eax
   1cb58:	8d 48 f3             	lea    -0xd(%eax),%ecx
   1cb5b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb5f:	89 d0                	mov    %edx,%eax
   1cb61:	c1 e0 03             	shl    $0x3,%eax
   1cb64:	01 d0                	add    %edx,%eax
   1cb66:	c1 e0 04             	shl    $0x4,%eax
   1cb69:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cb6e:	8b 00                	mov    (%eax),%eax
						  if (!((npar >= 2) &&
   1cb70:	39 c1                	cmp    %eax,%ecx
   1cb72:	0f 85 fa 01 00 00    	jne    1cd72 <con_write+0x13ca>
						  ((par[2] - 17) == par[0])))
   1cb78:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb7c:	89 d0                	mov    %edx,%eax
   1cb7e:	c1 e0 03             	shl    $0x3,%eax
   1cb81:	01 d0                	add    %edx,%eax
   1cb83:	c1 e0 04             	shl    $0x4,%eax
   1cb86:	05 a0 fe 03 00       	add    $0x3fea0,%eax
   1cb8b:	8b 00                	mov    (%eax),%eax
   1cb8d:	8d 48 ef             	lea    -0x11(%eax),%ecx
   1cb90:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb94:	89 d0                	mov    %edx,%eax
   1cb96:	c1 e0 03             	shl    $0x3,%eax
   1cb99:	01 d0                	add    %edx,%eax
   1cb9b:	c1 e0 04             	shl    $0x4,%eax
   1cb9e:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cba3:	8b 00                	mov    (%eax),%eax
						  if (!((npar >= 2) &&
   1cba5:	39 c1                	cmp    %eax,%ecx
   1cba7:	0f 85 c5 01 00 00    	jne    1cd72 <con_write+0x13ca>
						    break;
						if ((c == 'l') && (par[0] >= 0) && (par[0] <= 60))
   1cbad:	80 7c 24 07 6c       	cmpb   $0x6c,0x7(%esp)
   1cbb2:	75 44                	jne    1cbf8 <con_write+0x1250>
   1cbb4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbb8:	89 d0                	mov    %edx,%eax
   1cbba:	c1 e0 03             	shl    $0x3,%eax
   1cbbd:	01 d0                	add    %edx,%eax
   1cbbf:	c1 e0 04             	shl    $0x4,%eax
   1cbc2:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cbc7:	8b 00                	mov    (%eax),%eax
   1cbc9:	83 f8 3c             	cmp    $0x3c,%eax
   1cbcc:	77 2a                	ja     1cbf8 <con_write+0x1250>
						{
						  blankinterval = HZ * 60 * par[0];
   1cbce:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbd2:	89 d0                	mov    %edx,%eax
   1cbd4:	c1 e0 03             	shl    $0x3,%eax
   1cbd7:	01 d0                	add    %edx,%eax
   1cbd9:	c1 e0 04             	shl    $0x4,%eax
   1cbdc:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cbe1:	8b 00                	mov    (%eax),%eax
   1cbe3:	69 c0 70 17 00 00    	imul   $0x1770,%eax,%eax
   1cbe9:	a3 24 fe 03 00       	mov    %eax,0x3fe24
						  blankcount = blankinterval;
   1cbee:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1cbf3:	a3 28 fe 03 00       	mov    %eax,0x3fe28
						}
						if (c == 'b')
   1cbf8:	80 7c 24 07 62       	cmpb   $0x62,0x7(%esp)
   1cbfd:	0f 85 6f 01 00 00    	jne    1cd72 <con_write+0x13ca>
						  vc_cons[currcons].vc_bold_attr = par[0];
   1cc03:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc07:	89 d0                	mov    %edx,%eax
   1cc09:	c1 e0 03             	shl    $0x3,%eax
   1cc0c:	01 d0                	add    %edx,%eax
   1cc0e:	c1 e0 04             	shl    $0x4,%eax
   1cc11:	05 98 fe 03 00       	add    $0x3fe98,%eax
   1cc16:	8b 00                	mov    (%eax),%eax
   1cc18:	89 c1                	mov    %eax,%ecx
   1cc1a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc1e:	89 d0                	mov    %edx,%eax
   1cc20:	c1 e0 03             	shl    $0x3,%eax
   1cc23:	01 d0                	add    %edx,%eax
   1cc25:	c1 e0 04             	shl    $0x4,%eax
   1cc28:	05 64 fe 03 00       	add    $0x3fe64,%eax
   1cc2d:	89 08                	mov    %ecx,(%eax)
   1cc2f:	e9 3e 01 00 00       	jmp    1cd72 <con_write+0x13ca>
						break;
   1cc34:	90                   	nop
				}
				break;
   1cc35:	e9 38 01 00 00       	jmp    1cd72 <con_write+0x13ca>
			// ESfunckey:表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			// 状态ESfunckey表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			case ESfunckey:									// 键盘功能键码.
				state = ESnormal;
   1cc3a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc3e:	89 d0                	mov    %edx,%eax
   1cc40:	c1 e0 03             	shl    $0x3,%eax
   1cc43:	01 d0                	add    %edx,%eax
   1cc45:	c1 e0 04             	shl    $0x4,%eax
   1cc48:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cc4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				break;
   1cc53:	e9 1a 01 00 00       	jmp    1cd72 <con_write+0x13ca>
			// ESsetterm:表示处于设备控制字符串序列状态(DCS).此时收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关折行显示方式.
			// 状态ESsetterm表示处于设备控制字符串序列状态(DCS).此时若收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关闭折行显示方式.
			case ESsetterm:  								/* Setterm functions. */
				state = ESnormal;
   1cc58:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc5c:	89 d0                	mov    %edx,%eax
   1cc5e:	c1 e0 03             	shl    $0x3,%eax
   1cc61:	01 d0                	add    %edx,%eax
   1cc63:	c1 e0 04             	shl    $0x4,%eax
   1cc66:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cc6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == 'S') {
   1cc71:	80 7c 24 07 53       	cmpb   $0x53,0x7(%esp)
   1cc76:	0f 85 f6 00 00 00    	jne    1cd72 <con_write+0x13ca>
					def_attr = attr;
   1cc7c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc80:	89 d0                	mov    %edx,%eax
   1cc82:	c1 e0 03             	shl    $0x3,%eax
   1cc85:	01 d0                	add    %edx,%eax
   1cc87:	c1 e0 04             	shl    $0x4,%eax
   1cc8a:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1cc8f:	0f b6 08             	movzbl (%eax),%ecx
   1cc92:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc96:	89 d0                	mov    %edx,%eax
   1cc98:	c1 e0 03             	shl    $0x3,%eax
   1cc9b:	01 d0                	add    %edx,%eax
   1cc9d:	c1 e0 04             	shl    $0x4,%eax
   1cca0:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1cca5:	88 08                	mov    %cl,(%eax)
					video_erase_char = (video_erase_char & 0x0ff) | (def_attr << 8);
   1cca7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccab:	89 d0                	mov    %edx,%eax
   1ccad:	c1 e0 03             	shl    $0x3,%eax
   1ccb0:	01 d0                	add    %edx,%eax
   1ccb2:	c1 e0 04             	shl    $0x4,%eax
   1ccb5:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ccba:	0f b7 00             	movzwl (%eax),%eax
   1ccbd:	0f b6 c8             	movzbl %al,%ecx
   1ccc0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccc4:	89 d0                	mov    %edx,%eax
   1ccc6:	c1 e0 03             	shl    $0x3,%eax
   1ccc9:	01 d0                	add    %edx,%eax
   1cccb:	c1 e0 04             	shl    $0x4,%eax
   1ccce:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1ccd3:	0f b6 00             	movzbl (%eax),%eax
   1ccd6:	0f b6 c0             	movzbl %al,%eax
   1ccd9:	c1 e0 08             	shl    $0x8,%eax
   1ccdc:	09 c8                	or     %ecx,%eax
   1ccde:	89 c1                	mov    %eax,%ecx
   1cce0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cce4:	89 d0                	mov    %edx,%eax
   1cce6:	c1 e0 03             	shl    $0x3,%eax
   1cce9:	01 d0                	add    %edx,%eax
   1cceb:	c1 e0 04             	shl    $0x4,%eax
   1ccee:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ccf3:	66 89 08             	mov    %cx,(%eax)
				} else if (c == 'L')
					; 										/*linewrap on*/
				else if (c == 'l')
					; 										/*linewrap off*/
				break;
   1ccf6:	eb 7a                	jmp    1cd72 <con_write+0x13ca>
			// ESsetgraph:表示收到设置字符转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,
			//            若收到的字符是'B',这选择普通ASCII字符集作为G0和G1的字符集.
			// 状态ESsetgraph表示收到设置字符集转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,若收
			// 到的字符是'B',则选择普通ASCII字符集作为G0和G1的字符集.
			case ESsetgraph:								// 'CSI ( 0'或'CSI ( B' - 选择字符集
				state = ESnormal;
   1ccf8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccfc:	89 d0                	mov    %edx,%eax
   1ccfe:	c1 e0 03             	shl    $0x3,%eax
   1cd01:	01 d0                	add    %edx,%eax
   1cd03:	c1 e0 04             	shl    $0x4,%eax
   1cd06:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cd0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == '0')
   1cd11:	80 7c 24 07 30       	cmpb   $0x30,0x7(%esp)
   1cd16:	75 1d                	jne    1cd35 <con_write+0x138d>
					translate = GRAF_TRANS;
   1cd18:	8b 0d 40 f5 02 00    	mov    0x2f540,%ecx
   1cd1e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd22:	89 d0                	mov    %edx,%eax
   1cd24:	c1 e0 03             	shl    $0x3,%eax
   1cd27:	01 d0                	add    %edx,%eax
   1cd29:	c1 e0 04             	shl    $0x4,%eax
   1cd2c:	05 ec fe 03 00       	add    $0x3feec,%eax
   1cd31:	89 08                	mov    %ecx,(%eax)
   1cd33:	eb 3d                	jmp    1cd72 <con_write+0x13ca>
				else if (c == 'B')
   1cd35:	80 7c 24 07 42       	cmpb   $0x42,0x7(%esp)
   1cd3a:	75 36                	jne    1cd72 <con_write+0x13ca>
					translate = NORM_TRANS;
   1cd3c:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1cd42:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd46:	89 d0                	mov    %edx,%eax
   1cd48:	c1 e0 03             	shl    $0x3,%eax
   1cd4b:	01 d0                	add    %edx,%eax
   1cd4d:	c1 e0 04             	shl    $0x4,%eax
   1cd50:	05 ec fe 03 00       	add    $0x3feec,%eax
   1cd55:	89 08                	mov    %ecx,(%eax)
				break;
   1cd57:	eb 19                	jmp    1cd72 <con_write+0x13ca>
			default:
				state = ESnormal;
   1cd59:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd5d:	89 d0                	mov    %edx,%eax
   1cd5f:	c1 e0 03             	shl    $0x3,%eax
   1cd62:	01 d0                	add    %edx,%eax
   1cd64:	c1 e0 04             	shl    $0x4,%eax
   1cd67:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1cd6c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (nr--) {
   1cd72:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1cd76:	8d 50 ff             	lea    -0x1(%eax),%edx
   1cd79:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1cd7d:	85 c0                	test   %eax,%eax
   1cd7f:	0f 85 7d ec ff ff    	jne    1ba02 <con_write+0x5a>
   1cd85:	eb 01                	jmp    1cd88 <con_write+0x13e0>
			break;
   1cd87:	90                   	nop
        }
    }
	set_cursor(currcons);									// 最后根据上面设置的光标位置,设置显示控制器中光标位置.
   1cd88:	83 ec 0c             	sub    $0xc,%esp
   1cd8b:	ff 74 24 14          	pushl  0x14(%esp)
   1cd8f:	e8 bc e6 ff ff       	call   1b450 <set_cursor>
   1cd94:	83 c4 10             	add    $0x10,%esp
}
   1cd97:	90                   	nop
   1cd98:	83 c4 18             	add    $0x18,%esp
   1cd9b:	5b                   	pop    %ebx
   1cd9c:	c3                   	ret    

0001cd9d <con_init>:
 *
 * 这个子程序初始化控制台中断,其他什么都不做.如果你想让屏幕干净的话,就使用适当的转义字符序列调用tty_write()函数.
 * 读取setup.s程序保存的信息,用以确定当前显示器类型,并且设置所有相关参数.
 */
void con_init(void)
{
   1cd9d:	57                   	push   %edi
   1cd9e:	56                   	push   %esi
   1cd9f:	53                   	push   %ebx
   1cda0:	83 ec 20             	sub    $0x20,%esp
	register unsigned char a;
	char *display_desc = "????";
   1cda3:	c7 44 24 1c 84 50 02 	movl   $0x25084,0x1c(%esp)
   1cdaa:	00 
	char *display_ptr;
	int currcons = 0;								// 当前虚拟控制台号.
   1cdab:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   1cdb2:	00 
	long base, term;
	long video_memory;

	// 初始化屏幕的列数
	video_num_columns = ORIG_VIDEO_COLS;
   1cdb3:	b8 06 00 09 00       	mov    $0x90006,%eax
   1cdb8:	0f b7 00             	movzwl (%eax),%eax
   1cdbb:	66 c1 e8 08          	shr    $0x8,%ax
   1cdbf:	0f b7 c0             	movzwl %ax,%eax
   1cdc2:	a3 34 fe 03 00       	mov    %eax,0x3fe34
	// 屏幕每行的字节数等于屏幕列数乘以2，因为一个显示字节需要一个控制字节
	video_size_row = video_num_columns * 2;
   1cdc7:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1cdcc:	01 c0                	add    %eax,%eax
   1cdce:	a3 40 fe 03 00       	mov    %eax,0x3fe40
	// 初始化屏幕的行数
	video_num_lines = ORIG_VIDEO_LINES;
   1cdd3:	b8 0e 00 09 00       	mov    $0x9000e,%eax
   1cdd8:	0f b7 00             	movzwl (%eax),%eax
   1cddb:	0f b7 c0             	movzwl %ax,%eax
   1cdde:	0f b6 c0             	movzbl %al,%eax
   1cde1:	a3 44 fe 03 00       	mov    %eax,0x3fe44
	// 初始化显示页数
	video_page = ORIG_VIDEO_PAGE;
   1cde6:	b8 04 00 09 00       	mov    $0x90004,%eax
   1cdeb:	0f b7 00             	movzwl (%eax),%eax
   1cdee:	a2 48 fe 03 00       	mov    %al,0x3fe48
	// 设置此时第0个(currcons)显示终端的擦除字符属性及字符
	video_erase_char = 0x0720;
   1cdf3:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cdf7:	89 d0                	mov    %edx,%eax
   1cdf9:	c1 e0 03             	shl    $0x3,%eax
   1cdfc:	01 d0                	add    %edx,%eax
   1cdfe:	c1 e0 04             	shl    $0x4,%eax
   1ce01:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1ce06:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// 初始化黑屏时间计数
	blankcount = blankinterval;
   1ce0b:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1ce10:	a3 28 fe 03 00       	mov    %eax,0x3fe28

	// 然后根据显示模式是单色还是彩色,分别设置所使用的显示内存起始位置以及显示寄存器索引端口号和显示寄存器数据端口号.如果获得的BIOS显示方式等于7,
	// 则表示是单色显示卡.
	if (ORIG_VIDEO_MODE == 7)					/* Is this a monochrome display? */
   1ce15:	b8 06 00 09 00       	mov    $0x90006,%eax
   1ce1a:	0f b7 00             	movzwl (%eax),%eax
   1ce1d:	0f b7 c0             	movzwl %ax,%eax
   1ce20:	0f b6 c0             	movzbl %al,%eax
   1ce23:	83 f8 07             	cmp    $0x7,%eax
   1ce26:	75 68                	jne    1ce90 <con_init+0xf3>
	{
		video_mem_base = 0xb0000;				// 设置单显映像内存起始地址.
   1ce28:	c7 05 38 fe 03 00 00 	movl   $0xb0000,0x3fe38
   1ce2f:	00 0b 00 
		video_port_reg = 0x3b4;					// 设置单显索引寄存器端口.
   1ce32:	66 c7 05 4a fe 03 00 	movw   $0x3b4,0x3fe4a
   1ce39:	b4 03 
		video_port_val = 0x3b5;					// 设置单显数据寄存器端口.
   1ce3b:	66 c7 05 4c fe 03 00 	movw   $0x3b5,0x3fe4c
   1ce42:	b5 03 
		// 0x10,则说明是EGA卡.因此初始显示类型为EGA单色.虽然EGA卡上有较多显示内存,但在单色方式下最多只能利用地址范围在0xb0000~xb8000之间的显示内存.
		// 然后置显示器描述字符串为'EGAm'.
		// 并会在系统初始化期间显示器描述符字符串将显示在屏幕的右上角.
		// 注意,这里使用了bx在调用中断int 0x10前后是否被改变的方法来判断卡的类型.若BL在中断调用后值被改变,表示显示卡支持ah=12h功能调用,是EGA或后推
		// 出来的VGA等类型显示卡.若中断调用返回值末变,表示显示卡不支持这个功能,则说明是一般单色显示卡.
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1ce44:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1ce49:	0f b7 00             	movzwl (%eax),%eax
   1ce4c:	0f b7 c0             	movzwl %ax,%eax
   1ce4f:	0f b6 c0             	movzbl %al,%eax
   1ce52:	83 f8 10             	cmp    $0x10,%eax
   1ce55:	74 1e                	je     1ce75 <con_init+0xd8>
		{
			video_type = VIDEO_TYPE_EGAM;		// 设置显示类型(EGA单色).
   1ce57:	c6 05 30 fe 03 00 20 	movb   $0x20,0x3fe30
			video_mem_term = 0xb8000;			// 设置显示内存末端地址.
   1ce5e:	c7 05 3c fe 03 00 00 	movl   $0xb8000,0x3fe3c
   1ce65:	80 0b 00 
			display_desc = "EGAm";				// 设置显示描述字符串.
   1ce68:	c7 44 24 1c 89 50 02 	movl   $0x25089,0x1c(%esp)
   1ce6f:	00 
   1ce70:	e9 88 00 00 00       	jmp    1cefd <con_init+0x160>
		}
		// 如果BX寄存器的值等于0x10,则说明是单色显示卡MDA,仅有8KB显示内存.
		else
		{
			video_type = VIDEO_TYPE_MDA;		// 设置显示类型(MDA单色).
   1ce75:	c6 05 30 fe 03 00 10 	movb   $0x10,0x3fe30
			video_mem_term = 0xb2000;			// 设置显示内存末端地址.
   1ce7c:	c7 05 3c fe 03 00 00 	movl   $0xb2000,0x3fe3c
   1ce83:	20 0b 00 
			display_desc = "*MDA";				// 设置显示描述字符串.
   1ce86:	c7 44 24 1c 8e 50 02 	movl   $0x2508e,0x1c(%esp)
   1ce8d:	00 
   1ce8e:	eb 6d                	jmp    1cefd <con_init+0x160>
		}
	}
	// 如果显示方式不为7,说明是彩色显示卡.此时文本方式下所用显示内存起始地址为0xb8000;显示控制索引寄存器端口地址为0x3d4;数据寄存器端口地址为0x3d5.
	else										/* If not, it is color. */
	{
		can_do_colour = 1;						// 设置彩色显示标志.
   1ce90:	c7 05 50 fe 03 00 01 	movl   $0x1,0x3fe50
   1ce97:	00 00 00 
		video_mem_base = 0xb8000;				// 显示内存起始地址.
   1ce9a:	c7 05 38 fe 03 00 00 	movl   $0xb8000,0x3fe38
   1cea1:	80 0b 00 
		video_port_reg	= 0x3d4;				// 设置彩色显示索引寄存器端口.
   1cea4:	66 c7 05 4a fe 03 00 	movw   $0x3d4,0x3fe4a
   1ceab:	d4 03 
		video_port_val	= 0x3d5;				// 设置彩色显示数据寄存器端口.
   1cead:	66 c7 05 4c fe 03 00 	movw   $0x3d5,0x3fe4c
   1ceb4:	d5 03 
		// 再判断显示卡类别.如果BX不等于0x10,则说明是EGA显示卡,此时共有32KB显示内存可用(0xb8000~0xc0000).否则说明是CGA显示卡,只能使用8KB显示内存(
		// 0xb8000~0xba000).
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1ceb6:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1cebb:	0f b7 00             	movzwl (%eax),%eax
   1cebe:	0f b7 c0             	movzwl %ax,%eax
   1cec1:	0f b6 c0             	movzbl %al,%eax
   1cec4:	83 f8 10             	cmp    $0x10,%eax
   1cec7:	74 1b                	je     1cee4 <con_init+0x147>
		{
			video_type = VIDEO_TYPE_EGAC;		// 设置显示类型(EGA彩色).
   1cec9:	c6 05 30 fe 03 00 21 	movb   $0x21,0x3fe30
			video_mem_term = 0xc0000;			// 设置显示内存末端地址.
   1ced0:	c7 05 3c fe 03 00 00 	movl   $0xc0000,0x3fe3c
   1ced7:	00 0c 00 
			display_desc = "EGAc";				// 设置显示描述字符串.
   1ceda:	c7 44 24 1c 93 50 02 	movl   $0x25093,0x1c(%esp)
   1cee1:	00 
   1cee2:	eb 19                	jmp    1cefd <con_init+0x160>
		}
		else
		{
			video_type = VIDEO_TYPE_CGA;		// 设置显示类型(CGA).
   1cee4:	c6 05 30 fe 03 00 11 	movb   $0x11,0x3fe30
			video_mem_term = 0xba000;			// 设置显示内存末端地址.
   1ceeb:	c7 05 3c fe 03 00 00 	movl   $0xba000,0x3fe3c
   1cef2:	a0 0b 00 
			display_desc = "*CGA";				// 设置显示描述字符串.
   1cef5:	c7 44 24 1c 98 50 02 	movl   $0x25098,0x1c(%esp)
   1cefc:	00 
	// 现在来计算当前显示卡内存上可以开设的虚拟控制台数量.硬件允许的虚拟控制台数量等于总显示内存量video_memory除以每个虚拟控制台占用的
	// 字节数.每个虚拟控制台占用的显示内存数等于屏幕显示数video_num_lines乘上每行字符占有的字节数video_size_row.
	// 如果硬件允许开设的虚拟控制台数量大于系统既定的数量MAX_CONSOLES,就把虚拟控制台数量设置为MAX_CONSOLES.若这样计算出的虚拟控制台
	// 数量为0,则设置为1.
	// 最后用显示内存数除以判断出的虚拟控制台数即得到每个虚拟控制台占用显示内存字节数.
	video_memory = video_mem_term - video_mem_base;
   1cefd:	8b 15 3c fe 03 00    	mov    0x3fe3c,%edx
   1cf03:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1cf08:	29 c2                	sub    %eax,%edx
   1cf0a:	89 d0                	mov    %edx,%eax
   1cf0c:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 根据实际的显示内存的大小计算显示控制终端的实际数量
	NR_CONSOLES = video_memory / (video_num_lines * video_size_row);
   1cf10:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cf14:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1cf1a:	8b 15 40 fe 03 00    	mov    0x3fe40,%edx
   1cf20:	89 d6                	mov    %edx,%esi
   1cf22:	0f af f1             	imul   %ecx,%esi
   1cf25:	ba 00 00 00 00       	mov    $0x0,%edx
   1cf2a:	f7 f6                	div    %esi
   1cf2c:	a3 20 fe 03 00       	mov    %eax,0x3fe20
	// 显示终端的最大数量是MAX_CONSOLES,设置在tty.h头文件中
	if (NR_CONSOLES > MAX_CONSOLES)
   1cf31:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1cf36:	83 f8 08             	cmp    $0x8,%eax
   1cf39:	7e 0a                	jle    1cf45 <con_init+0x1a8>
		NR_CONSOLES = MAX_CONSOLES;
   1cf3b:	c7 05 20 fe 03 00 08 	movl   $0x8,0x3fe20
   1cf42:	00 00 00 
	// 如果计算出来的显示终端数量为0，则将显示终端数量设置为1
	if (!NR_CONSOLES)
   1cf45:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1cf4a:	85 c0                	test   %eax,%eax
   1cf4c:	75 0a                	jne    1cf58 <con_init+0x1bb>
		NR_CONSOLES = 1;
   1cf4e:	c7 05 20 fe 03 00 01 	movl   $0x1,0x3fe20
   1cf55:	00 00 00 
	video_memory /= NR_CONSOLES;				// 每个虚拟控制台占用显示内存字节数.
   1cf58:	8b 3d 20 fe 03 00    	mov    0x3fe20,%edi
   1cf5e:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cf62:	99                   	cltd   
   1cf63:	f7 ff                	idiv   %edi
   1cf65:	89 44 24 08          	mov    %eax,0x8(%esp)

	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
   1cf69:	8b 15 40 fe 03 00    	mov    0x3fe40,%edx
   1cf6f:	a1 38 fe 03 00       	mov    0x3fe38,%eax
   1cf74:	01 d0                	add    %edx,%eax
   1cf76:	83 e8 08             	sub    $0x8,%eax
   1cf79:	89 44 24 18          	mov    %eax,0x18(%esp)
	while (*display_desc)
   1cf7d:	eb 20                	jmp    1cf9f <con_init+0x202>
	{
		*display_ptr++ = *display_desc++;
   1cf7f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1cf83:	8d 42 01             	lea    0x1(%edx),%eax
   1cf86:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1cf8a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1cf8e:	8d 48 01             	lea    0x1(%eax),%ecx
   1cf91:	89 4c 24 18          	mov    %ecx,0x18(%esp)
   1cf95:	0f b6 12             	movzbl (%edx),%edx
   1cf98:	88 10                	mov    %dl,(%eax)
		display_ptr++;
   1cf9a:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	while (*display_desc)
   1cf9f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1cfa3:	0f b6 00             	movzbl (%eax),%eax
   1cfa6:	84 c0                	test   %al,%al
   1cfa8:	75 d5                	jne    1cf7f <con_init+0x1e2>
	/* 初始化用于滚屏的变量(主要用于EGA/VGA) */

	// 注意,此时当前虚拟控制台号curcons已经被初始化0.因此下面实际上是初始化0号虚拟控制台的结构vc_cons[0]中的所有字段值.下面首先设置0号控制台
	// 的默认滚屏开始位置video_mem_start和默认滚屏末行内存位置,实际上它们也就是0号控制台占用的部分显示内存区域.然后初始化设置0号虚拟控制台的
	// 其它属性和标志值.
	base = origin = video_mem_start = video_mem_base;						// 默认滚屏开始内存位置.
   1cfaa:	8b 0d 38 fe 03 00    	mov    0x3fe38,%ecx
   1cfb0:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfb4:	89 d0                	mov    %edx,%eax
   1cfb6:	c1 e0 03             	shl    $0x3,%eax
   1cfb9:	01 d0                	add    %edx,%eax
   1cfbb:	c1 e0 04             	shl    $0x4,%eax
   1cfbe:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1cfc3:	89 08                	mov    %ecx,(%eax)
   1cfc5:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfc9:	89 d0                	mov    %edx,%eax
   1cfcb:	c1 e0 03             	shl    $0x3,%eax
   1cfce:	01 d0                	add    %edx,%eax
   1cfd0:	c1 e0 04             	shl    $0x4,%eax
   1cfd3:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1cfd8:	8b 08                	mov    (%eax),%ecx
   1cfda:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfde:	89 d0                	mov    %edx,%eax
   1cfe0:	c1 e0 03             	shl    $0x3,%eax
   1cfe3:	01 d0                	add    %edx,%eax
   1cfe5:	c1 e0 04             	shl    $0x4,%eax
   1cfe8:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1cfed:	89 08                	mov    %ecx,(%eax)
   1cfef:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cff3:	89 d0                	mov    %edx,%eax
   1cff5:	c1 e0 03             	shl    $0x3,%eax
   1cff8:	01 d0                	add    %edx,%eax
   1cffa:	c1 e0 04             	shl    $0x4,%eax
   1cffd:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d002:	8b 00                	mov    (%eax),%eax
   1d004:	89 44 24 10          	mov    %eax,0x10(%esp)
	term = video_mem_end = base + video_memory;								// 0号屏幕内存末端位置.
   1d008:	8b 54 24 10          	mov    0x10(%esp),%edx
   1d00c:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d010:	01 d0                	add    %edx,%eax
   1d012:	89 c1                	mov    %eax,%ecx
   1d014:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d018:	89 d0                	mov    %edx,%eax
   1d01a:	c1 e0 03             	shl    $0x3,%eax
   1d01d:	01 d0                	add    %edx,%eax
   1d01f:	c1 e0 04             	shl    $0x4,%eax
   1d022:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1d027:	89 08                	mov    %ecx,(%eax)
   1d029:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d02d:	89 d0                	mov    %edx,%eax
   1d02f:	c1 e0 03             	shl    $0x3,%eax
   1d032:	01 d0                	add    %edx,%eax
   1d034:	c1 e0 04             	shl    $0x4,%eax
   1d037:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1d03c:	8b 00                	mov    (%eax),%eax
   1d03e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	scr_end	= video_mem_start + video_num_lines * video_size_row;			// 滚屏末端位置.
   1d042:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d046:	89 d0                	mov    %edx,%eax
   1d048:	c1 e0 03             	shl    $0x3,%eax
   1d04b:	01 d0                	add    %edx,%eax
   1d04d:	c1 e0 04             	shl    $0x4,%eax
   1d050:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1d055:	8b 10                	mov    (%eax),%edx
   1d057:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1d05d:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1d062:	0f af c1             	imul   %ecx,%eax
   1d065:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d068:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d06c:	89 d0                	mov    %edx,%eax
   1d06e:	c1 e0 03             	shl    $0x3,%eax
   1d071:	01 d0                	add    %edx,%eax
   1d073:	c1 e0 04             	shl    $0x4,%eax
   1d076:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1d07b:	89 08                	mov    %ecx,(%eax)
	top	= 0;																// 初始设置滚动时顶行行号.
   1d07d:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d081:	89 d0                	mov    %edx,%eax
   1d083:	c1 e0 03             	shl    $0x3,%eax
   1d086:	01 d0                	add    %edx,%eax
   1d088:	c1 e0 04             	shl    $0x4,%eax
   1d08b:	05 8c fe 03 00       	add    $0x3fe8c,%eax
   1d090:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	bottom	= video_num_lines;												// 初始设置滚动时底行行号.
   1d096:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1d09c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0a0:	89 d0                	mov    %edx,%eax
   1d0a2:	c1 e0 03             	shl    $0x3,%eax
   1d0a5:	01 d0                	add    %edx,%eax
   1d0a7:	c1 e0 04             	shl    $0x4,%eax
   1d0aa:	05 90 fe 03 00       	add    $0x3fe90,%eax
   1d0af:	89 08                	mov    %ecx,(%eax)
	attr = 0x07;															// 初始设置显示字符属性(黑底白字).
   1d0b1:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0b5:	89 d0                	mov    %edx,%eax
   1d0b7:	c1 e0 03             	shl    $0x3,%eax
   1d0ba:	01 d0                	add    %edx,%eax
   1d0bc:	c1 e0 04             	shl    $0x4,%eax
   1d0bf:	05 62 fe 03 00       	add    $0x3fe62,%eax
   1d0c4:	c6 00 07             	movb   $0x7,(%eax)
	def_attr = 0x07;														// 设置默认显示字符属性.
   1d0c7:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0cb:	89 d0                	mov    %edx,%eax
   1d0cd:	c1 e0 03             	shl    $0x3,%eax
   1d0d0:	01 d0                	add    %edx,%eax
   1d0d2:	c1 e0 04             	shl    $0x4,%eax
   1d0d5:	05 63 fe 03 00       	add    $0x3fe63,%eax
   1d0da:	c6 00 07             	movb   $0x7,(%eax)
	restate = state = ESnormal;												// 初始化转义序列操作的前和下一状态.
   1d0dd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0e1:	89 d0                	mov    %edx,%eax
   1d0e3:	c1 e0 03             	shl    $0x3,%eax
   1d0e6:	01 d0                	add    %edx,%eax
   1d0e8:	c1 e0 04             	shl    $0x4,%eax
   1d0eb:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1d0f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1d0f6:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0fa:	89 d0                	mov    %edx,%eax
   1d0fc:	c1 e0 03             	shl    $0x3,%eax
   1d0ff:	01 d0                	add    %edx,%eax
   1d101:	c1 e0 04             	shl    $0x4,%eax
   1d104:	05 6c fe 03 00       	add    $0x3fe6c,%eax
   1d109:	8b 08                	mov    (%eax),%ecx
   1d10b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d10f:	89 d0                	mov    %edx,%eax
   1d111:	c1 e0 03             	shl    $0x3,%eax
   1d114:	01 d0                	add    %edx,%eax
   1d116:	c1 e0 04             	shl    $0x4,%eax
   1d119:	05 70 fe 03 00       	add    $0x3fe70,%eax
   1d11e:	89 08                	mov    %ecx,(%eax)
	checkin = 0;
   1d120:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d124:	89 d0                	mov    %edx,%eax
   1d126:	c1 e0 03             	shl    $0x3,%eax
   1d129:	01 d0                	add    %edx,%eax
   1d12b:	c1 e0 04             	shl    $0x4,%eax
   1d12e:	05 74 fe 03 00       	add    $0x3fe74,%eax
   1d133:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	ques = 0;																// 收到问号字符标志.
   1d139:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d13d:	89 d0                	mov    %edx,%eax
   1d13f:	c1 e0 03             	shl    $0x3,%eax
   1d142:	01 d0                	add    %edx,%eax
   1d144:	c1 e0 04             	shl    $0x4,%eax
   1d147:	05 68 fe 03 00       	add    $0x3fe68,%eax
   1d14c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	iscolor = 0;															// 彩色显示标志.
   1d152:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d156:	89 d0                	mov    %edx,%eax
   1d158:	c1 e0 03             	shl    $0x3,%eax
   1d15b:	01 d0                	add    %edx,%eax
   1d15d:	c1 e0 04             	shl    $0x4,%eax
   1d160:	05 e8 fe 03 00       	add    $0x3fee8,%eax
   1d165:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	translate = NORM_TRANS;													// 使用的字符集(普通ASCII码表).
   1d16b:	8b 0d 3c f5 02 00    	mov    0x2f53c,%ecx
   1d171:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d175:	89 d0                	mov    %edx,%eax
   1d177:	c1 e0 03             	shl    $0x3,%eax
   1d17a:	01 d0                	add    %edx,%eax
   1d17c:	c1 e0 04             	shl    $0x4,%eax
   1d17f:	05 ec fe 03 00       	add    $0x3feec,%eax
   1d184:	89 08                	mov    %ecx,(%eax)
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).
   1d186:	c7 05 64 fe 03 00 ff 	movl   $0xffffffff,0x3fe64
   1d18d:	ff ff ff 

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
   1d190:	b8 01 00 09 00       	mov    $0x90001,%eax
   1d195:	0f b6 00             	movzbl (%eax),%eax
   1d198:	0f b6 d0             	movzbl %al,%edx
   1d19b:	b8 00 00 09 00       	mov    $0x90000,%eax
   1d1a0:	0f b6 00             	movzbl (%eax),%eax
   1d1a3:	0f b6 c0             	movzbl %al,%eax
   1d1a6:	52                   	push   %edx
   1d1a7:	50                   	push   %eax
   1d1a8:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d1ac:	e8 04 d0 ff ff       	call   1a1b5 <gotoxy>
   1d1b1:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d1b4:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
   1d1bb:	00 
   1d1bc:	e9 e3 00 00 00       	jmp    1d2a4 <con_init+0x507>
		vc_cons[currcons] = vc_cons[0];         							// 复制0号结构的参数.
   1d1c1:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1c5:	89 d0                	mov    %edx,%eax
   1d1c7:	c1 e0 03             	shl    $0x3,%eax
   1d1ca:	01 d0                	add    %edx,%eax
   1d1cc:	c1 e0 04             	shl    $0x4,%eax
   1d1cf:	05 60 fe 03 00       	add    $0x3fe60,%eax
   1d1d4:	89 c2                	mov    %eax,%edx
   1d1d6:	bb 60 fe 03 00       	mov    $0x3fe60,%ebx
   1d1db:	b8 24 00 00 00       	mov    $0x24,%eax
   1d1e0:	89 d7                	mov    %edx,%edi
   1d1e2:	89 de                	mov    %ebx,%esi
   1d1e4:	89 c1                	mov    %eax,%ecx
   1d1e6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		origin = video_mem_start = (base += video_memory);
   1d1e8:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d1ec:	01 44 24 10          	add    %eax,0x10(%esp)
   1d1f0:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1d1f4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1f8:	89 d0                	mov    %edx,%eax
   1d1fa:	c1 e0 03             	shl    $0x3,%eax
   1d1fd:	01 d0                	add    %edx,%eax
   1d1ff:	c1 e0 04             	shl    $0x4,%eax
   1d202:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1d207:	89 08                	mov    %ecx,(%eax)
   1d209:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d20d:	89 d0                	mov    %edx,%eax
   1d20f:	c1 e0 03             	shl    $0x3,%eax
   1d212:	01 d0                	add    %edx,%eax
   1d214:	c1 e0 04             	shl    $0x4,%eax
   1d217:	05 d8 fe 03 00       	add    $0x3fed8,%eax
   1d21c:	8b 08                	mov    (%eax),%ecx
   1d21e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d222:	89 d0                	mov    %edx,%eax
   1d224:	c1 e0 03             	shl    $0x3,%eax
   1d227:	01 d0                	add    %edx,%eax
   1d229:	c1 e0 04             	shl    $0x4,%eax
   1d22c:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d231:	89 08                	mov    %ecx,(%eax)
		scr_end = origin + video_num_lines * video_size_row;
   1d233:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d237:	89 d0                	mov    %edx,%eax
   1d239:	c1 e0 03             	shl    $0x3,%eax
   1d23c:	01 d0                	add    %edx,%eax
   1d23e:	c1 e0 04             	shl    $0x4,%eax
   1d241:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d246:	8b 10                	mov    (%eax),%edx
   1d248:	8b 0d 44 fe 03 00    	mov    0x3fe44,%ecx
   1d24e:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1d253:	0f af c1             	imul   %ecx,%eax
   1d256:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d259:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d25d:	89 d0                	mov    %edx,%eax
   1d25f:	c1 e0 03             	shl    $0x3,%eax
   1d262:	01 d0                	add    %edx,%eax
   1d264:	c1 e0 04             	shl    $0x4,%eax
   1d267:	05 7c fe 03 00       	add    $0x3fe7c,%eax
   1d26c:	89 08                	mov    %ecx,(%eax)
		video_mem_end = (term += video_memory);
   1d26e:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d272:	01 44 24 0c          	add    %eax,0xc(%esp)
   1d276:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1d27a:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d27e:	89 d0                	mov    %edx,%eax
   1d280:	c1 e0 03             	shl    $0x3,%eax
   1d283:	01 d0                	add    %edx,%eax
   1d285:	c1 e0 04             	shl    $0x4,%eax
   1d288:	05 dc fe 03 00       	add    $0x3fedc,%eax
   1d28d:	89 08                	mov    %ecx,(%eax)
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
   1d28f:	6a 00                	push   $0x0
   1d291:	6a 00                	push   $0x0
   1d293:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d297:	e8 19 cf ff ff       	call   1a1b5 <gotoxy>
   1d29c:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d29f:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
   1d2a4:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1d2a9:	39 44 24 14          	cmp    %eax,0x14(%esp)
   1d2ad:	0f 8c 0e ff ff ff    	jl     1d1c1 <con_init+0x424>
	}
	// 最后设置当前前台控制台的屏幕原点(左上角)位置和显示控制器中光标显示位置,并设置键盘中断0x21陷阱门描述符(&keyboard_inierrupt是键盘中断处理过程
	// 地址).然后取消中断控制芯片8259A中对键盘中断的屏蔽,允许响应键盘发出的IRQ1请求信号.最后复位键盘控制器以允许键盘开始正常工作.
	update_screen();														// 更新前台原点来设置光标位置.
   1d2b3:	e8 83 00 00 00       	call   1d33b <update_screen>
	set_trap_gate(0x21, &keyboard_interrupt);								// 参见system.h,设置键盘的系统中断门
   1d2b8:	b9 c0 55 00 00       	mov    $0x55c0,%ecx
   1d2bd:	bb c4 55 00 00       	mov    $0x55c4,%ebx
   1d2c2:	ba d4 d6 01 00       	mov    $0x1d6d4,%edx
   1d2c7:	b8 00 00 08 00       	mov    $0x80000,%eax
   1d2cc:	66 89 d0             	mov    %dx,%ax
   1d2cf:	66 ba 00 8f          	mov    $0x8f00,%dx
   1d2d3:	89 01                	mov    %eax,(%ecx)
   1d2d5:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfd, 0x21);										// 取消对键盘中断的屏蔽,允许IRQ1.
   1d2d7:	b8 21 00 00 00       	mov    $0x21,%eax
   1d2dc:	89 c2                	mov    %eax,%edx
   1d2de:	ec                   	in     (%dx),%al
   1d2df:	eb 00                	jmp    1d2e1 <con_init+0x544>
   1d2e1:	eb 00                	jmp    1d2e3 <con_init+0x546>
   1d2e3:	88 44 24 07          	mov    %al,0x7(%esp)
   1d2e7:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   1d2ec:	0f b6 c0             	movzbl %al,%eax
   1d2ef:	25 fd 00 00 00       	and    $0xfd,%eax
   1d2f4:	ba 21 00 00 00       	mov    $0x21,%edx
   1d2f9:	ee                   	out    %al,(%dx)
   1d2fa:	eb 00                	jmp    1d2fc <con_init+0x55f>
   1d2fc:	eb 00                	jmp    1d2fe <con_init+0x561>
	a = inb_p(0x61);														// 读取键盘端口0x61(8255A端口PB).
   1d2fe:	b8 61 00 00 00       	mov    $0x61,%eax
   1d303:	89 c2                	mov    %eax,%edx
   1d305:	ec                   	in     (%dx),%al
   1d306:	eb 00                	jmp    1d308 <con_init+0x56b>
   1d308:	eb 00                	jmp    1d30a <con_init+0x56d>
   1d30a:	88 44 24 06          	mov    %al,0x6(%esp)
   1d30e:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
   1d313:	89 c3                	mov    %eax,%ebx
	outb_p(a | 0x80, 0x61);													// 设置禁止键盘工作(位7置位).
   1d315:	89 d8                	mov    %ebx,%eax
   1d317:	83 c8 80             	or     $0xffffff80,%eax
   1d31a:	0f b6 c0             	movzbl %al,%eax
   1d31d:	ba 61 00 00 00       	mov    $0x61,%edx
   1d322:	ee                   	out    %al,(%dx)
   1d323:	eb 00                	jmp    1d325 <con_init+0x588>
   1d325:	eb 00                	jmp    1d327 <con_init+0x58a>
	outb_p(a, 0x61);														// 再允许键盘工作,用以复位键盘.
   1d327:	ba 61 00 00 00       	mov    $0x61,%edx
   1d32c:	89 d8                	mov    %ebx,%eax
   1d32e:	ee                   	out    %al,(%dx)
   1d32f:	eb 00                	jmp    1d331 <con_init+0x594>
   1d331:	eb 00                	jmp    1d333 <con_init+0x596>
}
   1d333:	90                   	nop
   1d334:	83 c4 20             	add    $0x20,%esp
   1d337:	5b                   	pop    %ebx
   1d338:	5e                   	pop    %esi
   1d339:	5f                   	pop    %edi
   1d33a:	c3                   	ret    

0001d33b <update_screen>:
// 更新当前控制台.
// 把前台控制台转换为fg_console指定的虚拟控制台.fg_console是设置的前台虚拟控制台号.
// fg_console变量在tty.h头文件中定义，用来启动后默认使用的显示终端
void update_screen(void)
{
	set_origin(fg_console);													// 设置滚屏起始显示内存地址.
   1d33b:	a1 80 22 03 00       	mov    0x32280,%eax
   1d340:	50                   	push   %eax
   1d341:	e8 27 cf ff ff       	call   1a26d <set_origin>
   1d346:	83 c4 04             	add    $0x4,%esp
	set_cursor(fg_console);													// 设置显示控制器中光标显示内存位置.
   1d349:	a1 80 22 03 00       	mov    0x32280,%eax
   1d34e:	50                   	push   %eax
   1d34f:	e8 fc e0 ff ff       	call   1b450 <set_cursor>
   1d354:	83 c4 04             	add    $0x4,%esp
}
   1d357:	90                   	nop
   1d358:	c3                   	ret    

0001d359 <sysbeepstop>:
/* from bsd-net-2: */

// 停止蜂鸣
// 复位8255A PB端口的位1和位0.
void sysbeepstop(void)
{
   1d359:	83 ec 10             	sub    $0x10,%esp
	/* disable counter 2 */		/* 禁止定时器2 */
	outb(inb_p(0x61)&0xFC, 0x61);
   1d35c:	b8 61 00 00 00       	mov    $0x61,%eax
   1d361:	89 c2                	mov    %eax,%edx
   1d363:	ec                   	in     (%dx),%al
   1d364:	eb 00                	jmp    1d366 <sysbeepstop+0xd>
   1d366:	eb 00                	jmp    1d368 <sysbeepstop+0xf>
   1d368:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d36c:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d371:	0f b6 c0             	movzbl %al,%eax
   1d374:	25 fc 00 00 00       	and    $0xfc,%eax
   1d379:	ba 61 00 00 00       	mov    $0x61,%edx
   1d37e:	ee                   	out    %al,(%dx)
}
   1d37f:	90                   	nop
   1d380:	83 c4 10             	add    $0x10,%esp
   1d383:	c3                   	ret    

0001d384 <sysbeep>:

// 开通蜂鸣
// 8255A芯片PB端口的位1用作扬声器的开门信号;位0用作8253定时器2门信号,该定时器的输出脉冲送往扬声器,作为扬声器发声频率.因此要使扬声器
// 发声,需要两步:首先开启PB端口(0x61)位1和位0(置位),然后设置定时器2通道发送一定的定时频率即可.
static void sysbeep(void)
{
   1d384:	83 ec 10             	sub    $0x10,%esp
	/* enable counter 2 */		/* 开启定时器2 */
	outb_p(inb_p(0x61)|3, 0x61);
   1d387:	b8 61 00 00 00       	mov    $0x61,%eax
   1d38c:	89 c2                	mov    %eax,%edx
   1d38e:	ec                   	in     (%dx),%al
   1d38f:	eb 00                	jmp    1d391 <sysbeep+0xd>
   1d391:	eb 00                	jmp    1d393 <sysbeep+0xf>
   1d393:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d397:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d39c:	83 c8 03             	or     $0x3,%eax
   1d39f:	0f b6 c0             	movzbl %al,%eax
   1d3a2:	ba 61 00 00 00       	mov    $0x61,%edx
   1d3a7:	ee                   	out    %al,(%dx)
   1d3a8:	eb 00                	jmp    1d3aa <sysbeep+0x26>
   1d3aa:	eb 00                	jmp    1d3ac <sysbeep+0x28>
	/* set command for counter 2, 2 byte write */	/* 送设置定时器2命令 */
	outb_p(0xB6, 0x43);		// 定时器芯片控制字寄存器端口.
   1d3ac:	b8 b6 00 00 00       	mov    $0xb6,%eax
   1d3b1:	ba 43 00 00 00       	mov    $0x43,%edx
   1d3b6:	ee                   	out    %al,(%dx)
   1d3b7:	eb 00                	jmp    1d3b9 <sysbeep+0x35>
   1d3b9:	eb 00                	jmp    1d3bb <sysbeep+0x37>
	/* send 0x637 for 750 HZ */	/* 设置频率为720Hz,因此送定时值0x637 */
	outb_p(0x37, 0x42);		// 通过2数据端口分别送计数高低字节
   1d3bb:	b8 37 00 00 00       	mov    $0x37,%eax
   1d3c0:	ba 42 00 00 00       	mov    $0x42,%edx
   1d3c5:	ee                   	out    %al,(%dx)
   1d3c6:	eb 00                	jmp    1d3c8 <sysbeep+0x44>
   1d3c8:	eb 00                	jmp    1d3ca <sysbeep+0x46>
	outb(0x06, 0x42);
   1d3ca:	b8 06 00 00 00       	mov    $0x6,%eax
   1d3cf:	ba 42 00 00 00       	mov    $0x42,%edx
   1d3d4:	ee                   	out    %al,(%dx)
	/* 1/8 second */		/* 蜂鸣时间为1/8s */
	beepcount = HZ / 8;
   1d3d5:	c7 05 2c fe 03 00 0c 	movl   $0xc,0x3fe2c
   1d3dc:	00 00 00 
}
   1d3df:	90                   	nop
   1d3e0:	83 c4 10             	add    $0x10,%esp
   1d3e3:	c3                   	ret    

0001d3e4 <do_screendump>:

// 拷贝屏幕
// 把屏幕内容复制到参数指定的用户缓冲区arg中。
// 参数arg有两个用途：一是用于传递控制台号，二是作为用户缓冲区指针。
int do_screendump(int arg)
{
   1d3e4:	83 ec 1c             	sub    $0x1c,%esp
	char *sptr, *buf = (char *)arg;
   1d3e7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1d3eb:	89 44 24 08          	mov    %eax,0x8(%esp)
	int currcons, l;

	// 函数首先验证用户提供的缓冲区容量，若不够则进行适当扩展。然后从其开始处取出控制台号currcons.
	// 在判断控制台号有效后，就把该控制台屏幕的所有内存内容复制到用户缓冲区中。
	verify_area(buf, video_num_columns * video_num_lines);
   1d3ef:	8b 15 34 fe 03 00    	mov    0x3fe34,%edx
   1d3f5:	a1 44 fe 03 00       	mov    0x3fe44,%eax
   1d3fa:	0f af c2             	imul   %edx,%eax
   1d3fd:	83 ec 08             	sub    $0x8,%esp
   1d400:	50                   	push   %eax
   1d401:	ff 74 24 14          	pushl  0x14(%esp)
   1d405:	e8 95 af fe ff       	call   839f <verify_area>
   1d40a:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
   1d40d:	83 ec 0c             	sub    $0xc,%esp
   1d410:	ff 74 24 14          	pushl  0x14(%esp)
   1d414:	e8 74 cd ff ff       	call   1a18d <get_fs_byte>
   1d419:	83 c4 10             	add    $0x10,%esp
   1d41c:	0f b6 c0             	movzbl %al,%eax
   1d41f:	89 04 24             	mov    %eax,(%esp)
	if ((currcons < 1) || (currcons > NR_CONSOLES))
   1d422:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1d426:	7e 0a                	jle    1d432 <do_screendump+0x4e>
   1d428:	a1 20 fe 03 00       	mov    0x3fe20,%eax
   1d42d:	39 04 24             	cmp    %eax,(%esp)
   1d430:	7e 07                	jle    1d439 <do_screendump+0x55>
		return -EIO;
   1d432:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1d437:	eb 6a                	jmp    1d4a3 <do_screendump+0xbf>
	currcons--;
   1d439:	83 2c 24 01          	subl   $0x1,(%esp)
	sptr = (char *) origin;
   1d43d:	8b 14 24             	mov    (%esp),%edx
   1d440:	89 d0                	mov    %edx,%eax
   1d442:	c1 e0 03             	shl    $0x3,%eax
   1d445:	01 d0                	add    %edx,%eax
   1d447:	c1 e0 04             	shl    $0x4,%eax
   1d44a:	05 78 fe 03 00       	add    $0x3fe78,%eax
   1d44f:	8b 00                	mov    (%eax),%eax
   1d451:	89 44 24 0c          	mov    %eax,0xc(%esp)
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d455:	8b 15 44 fe 03 00    	mov    0x3fe44,%edx
   1d45b:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d460:	0f af c2             	imul   %edx,%eax
   1d463:	89 44 24 04          	mov    %eax,0x4(%esp)
   1d467:	eb 2e                	jmp    1d497 <do_screendump+0xb3>
		put_fs_byte(*sptr++, buf++);
   1d469:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d46d:	8d 50 01             	lea    0x1(%eax),%edx
   1d470:	89 54 24 08          	mov    %edx,0x8(%esp)
   1d474:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d478:	8d 4a 01             	lea    0x1(%edx),%ecx
   1d47b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   1d47f:	0f b6 12             	movzbl (%edx),%edx
   1d482:	0f be d2             	movsbl %dl,%edx
   1d485:	83 ec 08             	sub    $0x8,%esp
   1d488:	50                   	push   %eax
   1d489:	52                   	push   %edx
   1d48a:	e8 0c cd ff ff       	call   1a19b <put_fs_byte>
   1d48f:	83 c4 10             	add    $0x10,%esp
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d492:	83 6c 24 04 01       	subl   $0x1,0x4(%esp)
   1d497:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1d49c:	7f cb                	jg     1d469 <do_screendump+0x85>
	return(0);
   1d49e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1d4a3:	83 c4 1c             	add    $0x1c,%esp
   1d4a6:	c3                   	ret    

0001d4a7 <blank_screen>:

// 黑屏处理
// 当用户在blankInterval时间间隔内没有按任何按键时就让屏幕黑屏,以保护屏幕.
void blank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d4a7:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d4ae:	3c 21                	cmp    $0x21,%al
   1d4b0:	74 09                	je     1d4bb <blank_screen+0x14>
   1d4b2:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d4b9:	3c 20                	cmp    $0x20,%al
		return;
	/* blank here. I can't find out how to do it, though */
}
   1d4bb:	c3                   	ret    

0001d4bc <unblank_screen>:

// 恢复黑屏的屏幕
// 当用户按下任何按键时,就恢复处于黑屏状态的屏幕显示内容.
void unblank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d4bc:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d4c3:	3c 21                	cmp    $0x21,%al
   1d4c5:	74 09                	je     1d4d0 <unblank_screen+0x14>
   1d4c7:	0f b6 05 30 fe 03 00 	movzbl 0x3fe30,%eax
   1d4ce:	3c 20                	cmp    $0x20,%al
		return;
	/* unblank here */
}
   1d4d0:	c3                   	ret    

0001d4d1 <console_print>:
// 控制台显示函数
// 该函数仅用于内核显示函数printk()(kernel/printk.c),用于在当前前台控制台上显示内核信息.
// 处理方法是循环取出缓冲区中的字符,并根据字符的特性控制光标移动或直接显示在屏幕上.
// 参数b是null结尾的字符串缓冲区指针。
void console_print(const char * b)
{
   1d4d1:	53                   	push   %ebx
   1d4d2:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d4d5:	a1 80 22 03 00       	mov    0x32280,%eax
   1d4da:	89 44 24 0c          	mov    %eax,0xc(%esp)
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d4de:	e9 5d 01 00 00       	jmp    1d640 <console_print+0x16f>
		// 如果当前字符c是换行符，则对光标执行回车换行操作
		if (c == 10) {
   1d4e3:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1d4e8:	75 1d                	jne    1d507 <console_print+0x36>
			// 光标回到当前行的第0列
			cr(currcons);
   1d4ea:	ff 74 24 0c          	pushl  0xc(%esp)
   1d4ee:	e8 05 d6 ff ff       	call   1aaf8 <cr>
   1d4f3:	83 c4 04             	add    $0x4,%esp
			// 将光标从当前列移动到下一行
			lf(currcons);
   1d4f6:	ff 74 24 0c          	pushl  0xc(%esp)
   1d4fa:	e8 bf d4 ff ff       	call   1a9be <lf>
   1d4ff:	83 c4 04             	add    $0x4,%esp
			continue;
   1d502:	e9 39 01 00 00       	jmp    1d640 <console_print+0x16f>
		}
		// 如果是回车符，就直接执行回车动作。然后去处理下一个字符。
		if (c == 13) {
   1d507:	80 7c 24 0b 0d       	cmpb   $0xd,0xb(%esp)
   1d50c:	75 11                	jne    1d51f <console_print+0x4e>
			cr(currcons);
   1d50e:	ff 74 24 0c          	pushl  0xc(%esp)
   1d512:	e8 e1 d5 ff ff       	call   1aaf8 <cr>
   1d517:	83 c4 04             	add    $0x4,%esp
			continue;
   1d51a:	e9 21 01 00 00       	jmp    1d640 <console_print+0x16f>
		}
		// 在读取了一个不是回车或换行字符后，如果发现当前光标列位置x已经到达屏幕右末端，则让光标折返到下一行开始处。
		// 然后把字符放到光标所处显示内存位置处，即在屏幕上显示出来。再把光标右移一格位置，为显示下一个字符作准备。
		if (x >= video_num_columns) {
   1d51f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d523:	89 d0                	mov    %edx,%eax
   1d525:	c1 e0 03             	shl    $0x3,%eax
   1d528:	01 d0                	add    %edx,%eax
   1d52a:	c1 e0 04             	shl    $0x4,%eax
   1d52d:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d532:	8b 10                	mov    (%eax),%edx
   1d534:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d539:	39 c2                	cmp    %eax,%edx
   1d53b:	72 72                	jb     1d5af <console_print+0xde>
			x -= video_num_columns;
   1d53d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d541:	89 d0                	mov    %edx,%eax
   1d543:	c1 e0 03             	shl    $0x3,%eax
   1d546:	01 d0                	add    %edx,%eax
   1d548:	c1 e0 04             	shl    $0x4,%eax
   1d54b:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d550:	8b 10                	mov    (%eax),%edx
   1d552:	a1 34 fe 03 00       	mov    0x3fe34,%eax
   1d557:	89 d1                	mov    %edx,%ecx
   1d559:	29 c1                	sub    %eax,%ecx
   1d55b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d55f:	89 d0                	mov    %edx,%eax
   1d561:	c1 e0 03             	shl    $0x3,%eax
   1d564:	01 d0                	add    %edx,%eax
   1d566:	c1 e0 04             	shl    $0x4,%eax
   1d569:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d56e:	89 08                	mov    %ecx,(%eax)
			pos -= video_size_row;
   1d570:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d574:	89 d0                	mov    %edx,%eax
   1d576:	c1 e0 03             	shl    $0x3,%eax
   1d579:	01 d0                	add    %edx,%eax
   1d57b:	c1 e0 04             	shl    $0x4,%eax
   1d57e:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d583:	8b 10                	mov    (%eax),%edx
   1d585:	a1 40 fe 03 00       	mov    0x3fe40,%eax
   1d58a:	89 d1                	mov    %edx,%ecx
   1d58c:	29 c1                	sub    %eax,%ecx
   1d58e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d592:	89 d0                	mov    %edx,%eax
   1d594:	c1 e0 03             	shl    $0x3,%eax
   1d597:	01 d0                	add    %edx,%eax
   1d599:	c1 e0 04             	shl    $0x4,%eax
   1d59c:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d5a1:	89 08                	mov    %ecx,(%eax)
			lf(currcons);
   1d5a3:	ff 74 24 0c          	pushl  0xc(%esp)
   1d5a7:	e8 12 d4 ff ff       	call   1a9be <lf>
   1d5ac:	83 c4 04             	add    $0x4,%esp
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
   1d5af:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5b3:	89 d0                	mov    %edx,%eax
   1d5b5:	c1 e0 03             	shl    $0x3,%eax
   1d5b8:	01 d0                	add    %edx,%eax
   1d5ba:	c1 e0 04             	shl    $0x4,%eax
   1d5bd:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d5c2:	8b 00                	mov    (%eax),%eax
   1d5c4:	89 c3                	mov    %eax,%ebx
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
   1d5c6:	0f b6 4c 24 0b       	movzbl 0xb(%esp),%ecx
   1d5cb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5cf:	89 d0                	mov    %edx,%eax
   1d5d1:	c1 e0 03             	shl    $0x3,%eax
   1d5d4:	01 d0                	add    %edx,%eax
   1d5d6:	c1 e0 04             	shl    $0x4,%eax
   1d5d9:	8d 90 62 fe 03 00    	lea    0x3fe62(%eax),%edx
   1d5df:	89 c8                	mov    %ecx,%eax
   1d5e1:	8a 22                	mov    (%edx),%ah
   1d5e3:	66 89 03             	mov    %ax,(%ebx)
			"m" (attr)
			:);
		pos += 2;
   1d5e6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5ea:	89 d0                	mov    %edx,%eax
   1d5ec:	c1 e0 03             	shl    $0x3,%eax
   1d5ef:	01 d0                	add    %edx,%eax
   1d5f1:	c1 e0 04             	shl    $0x4,%eax
   1d5f4:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d5f9:	8b 00                	mov    (%eax),%eax
   1d5fb:	8d 48 02             	lea    0x2(%eax),%ecx
   1d5fe:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d602:	89 d0                	mov    %edx,%eax
   1d604:	c1 e0 03             	shl    $0x3,%eax
   1d607:	01 d0                	add    %edx,%eax
   1d609:	c1 e0 04             	shl    $0x4,%eax
   1d60c:	05 80 fe 03 00       	add    $0x3fe80,%eax
   1d611:	89 08                	mov    %ecx,(%eax)
		x++;
   1d613:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d617:	89 d0                	mov    %edx,%eax
   1d619:	c1 e0 03             	shl    $0x3,%eax
   1d61c:	01 d0                	add    %edx,%eax
   1d61e:	c1 e0 04             	shl    $0x4,%eax
   1d621:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d626:	8b 00                	mov    (%eax),%eax
   1d628:	8d 48 01             	lea    0x1(%eax),%ecx
   1d62b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d62f:	89 d0                	mov    %edx,%eax
   1d631:	c1 e0 03             	shl    $0x3,%eax
   1d634:	01 d0                	add    %edx,%eax
   1d636:	c1 e0 04             	shl    $0x4,%eax
   1d639:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d63e:	89 08                	mov    %ecx,(%eax)
	while (c = *(b++)) {
   1d640:	8b 44 24 18          	mov    0x18(%esp),%eax
   1d644:	8d 50 01             	lea    0x1(%eax),%edx
   1d647:	89 54 24 18          	mov    %edx,0x18(%esp)
   1d64b:	0f b6 00             	movzbl (%eax),%eax
   1d64e:	88 44 24 0b          	mov    %al,0xb(%esp)
   1d652:	80 7c 24 0b 00       	cmpb   $0x0,0xb(%esp)
   1d657:	0f 85 86 fe ff ff    	jne    1d4e3 <console_print+0x12>
	}
	set_cursor(currcons);           							// 最后设置的光标内存位置，设置显示控制器中光标位置。
   1d65d:	ff 74 24 0c          	pushl  0xc(%esp)
   1d661:	e8 ea dd ff ff       	call   1b450 <set_cursor>
   1d666:	83 c4 04             	add    $0x4,%esp
}
   1d669:	90                   	nop
   1d66a:	83 c4 10             	add    $0x10,%esp
   1d66d:	5b                   	pop    %ebx
   1d66e:	c3                   	ret    

0001d66f <del_col>:


void del_col(int i){
   1d66f:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d672:	a1 80 22 03 00       	mov    0x32280,%eax
   1d677:	89 44 24 0c          	mov    %eax,0xc(%esp)
	gotoxy(currcons, x - i, y);
   1d67b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d67f:	89 d0                	mov    %edx,%eax
   1d681:	c1 e0 03             	shl    $0x3,%eax
   1d684:	01 d0                	add    %edx,%eax
   1d686:	c1 e0 04             	shl    $0x4,%eax
   1d689:	05 88 fe 03 00       	add    $0x3fe88,%eax
   1d68e:	8b 08                	mov    (%eax),%ecx
   1d690:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d694:	89 d0                	mov    %edx,%eax
   1d696:	c1 e0 03             	shl    $0x3,%eax
   1d699:	01 d0                	add    %edx,%eax
   1d69b:	c1 e0 04             	shl    $0x4,%eax
   1d69e:	05 84 fe 03 00       	add    $0x3fe84,%eax
   1d6a3:	8b 10                	mov    (%eax),%edx
   1d6a5:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d6a9:	29 c2                	sub    %eax,%edx
   1d6ab:	89 d0                	mov    %edx,%eax
   1d6ad:	51                   	push   %ecx
   1d6ae:	50                   	push   %eax
   1d6af:	ff 74 24 14          	pushl  0x14(%esp)
   1d6b3:	e8 fd ca ff ff       	call   1a1b5 <gotoxy>
   1d6b8:	83 c4 0c             	add    $0xc,%esp
	csi_P(currcons, i);
   1d6bb:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d6bf:	50                   	push   %eax
   1d6c0:	ff 74 24 10          	pushl  0x10(%esp)
   1d6c4:	e8 c7 e1 ff ff       	call   1b890 <csi_P>
   1d6c9:	83 c4 08             	add    $0x8,%esp
}
   1d6cc:	90                   	nop
   1d6cd:	83 c4 10             	add    $0x10,%esp
   1d6d0:	c3                   	ret    

0001d6d1 <mode>:
	...

0001d6d2 <leds>:
   1d6d2:	02                   	.byte 0x2

0001d6d3 <e0>:
	...

0001d6d4 <keyboard_interrupt>:
   1d6d4:	50                   	push   %eax
   1d6d5:	53                   	push   %ebx
   1d6d6:	51                   	push   %ecx
   1d6d7:	52                   	push   %edx
   1d6d8:	1e                   	push   %ds
   1d6d9:	06                   	push   %es
   1d6da:	b8 10 00 00 00       	mov    $0x10,%eax
   1d6df:	8e d8                	mov    %eax,%ds
   1d6e1:	8e c0                	mov    %eax,%es
   1d6e3:	a1 24 fe 03 00       	mov    0x3fe24,%eax
   1d6e8:	a3 28 fe 03 00       	mov    %eax,0x3fe28
   1d6ed:	31 c0                	xor    %eax,%eax
   1d6ef:	e4 60                	in     $0x60,%al
   1d6f1:	3c e0                	cmp    $0xe0,%al
   1d6f3:	74 3d                	je     1d732 <set_e0>
   1d6f5:	3c e1                	cmp    $0xe1,%al
   1d6f7:	74 42                	je     1d73b <set_e1>
   1d6f9:	ff 14 85 b6 da 01 00 	call   *0x1dab6(,%eax,4)
   1d700:	c6 05 d3 d6 01 00 00 	movb   $0x0,0x1d6d3

0001d707 <e0_e1>:
   1d707:	e4 61                	in     $0x61,%al
   1d709:	eb 00                	jmp    1d70b <e0_e1+0x4>
   1d70b:	eb 00                	jmp    1d70d <e0_e1+0x6>
   1d70d:	0c 80                	or     $0x80,%al
   1d70f:	eb 00                	jmp    1d711 <e0_e1+0xa>
   1d711:	eb 00                	jmp    1d713 <e0_e1+0xc>
   1d713:	e6 61                	out    %al,$0x61
   1d715:	eb 00                	jmp    1d717 <e0_e1+0x10>
   1d717:	eb 00                	jmp    1d719 <e0_e1+0x12>
   1d719:	24 7f                	and    $0x7f,%al
   1d71b:	e6 61                	out    %al,$0x61
   1d71d:	b0 20                	mov    $0x20,%al
   1d71f:	e6 20                	out    %al,$0x20
   1d721:	6a 00                	push   $0x0
   1d723:	e8 d3 c3 ff ff       	call   19afb <do_tty_interrupt>
   1d728:	83 c4 04             	add    $0x4,%esp
   1d72b:	07                   	pop    %es
   1d72c:	1f                   	pop    %ds
   1d72d:	5a                   	pop    %edx
   1d72e:	59                   	pop    %ecx
   1d72f:	5b                   	pop    %ebx
   1d730:	58                   	pop    %eax
   1d731:	cf                   	iret   

0001d732 <set_e0>:
   1d732:	c6 05 d3 d6 01 00 01 	movb   $0x1,0x1d6d3
   1d739:	eb cc                	jmp    1d707 <e0_e1>

0001d73b <set_e1>:
   1d73b:	c6 05 d3 d6 01 00 02 	movb   $0x2,0x1d6d3
   1d742:	eb c3                	jmp    1d707 <e0_e1>

0001d744 <put_queue>:
   1d744:	51                   	push   %ecx
   1d745:	52                   	push   %edx
   1d746:	8b 15 24 f5 02 00    	mov    0x2f524,%edx
   1d74c:	8b 4a 04             	mov    0x4(%edx),%ecx
   1d74f:	88 44 0a 10          	mov    %al,0x10(%edx,%ecx,1)
   1d753:	41                   	inc    %ecx
   1d754:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
   1d75a:	3b 4a 08             	cmp    0x8(%edx),%ecx
   1d75d:	74 1b                	je     1d77a <put_queue+0x36>
   1d75f:	0f ac d8 08          	shrd   $0x8,%ebx,%eax
   1d763:	74 05                	je     1d76a <put_queue+0x26>
   1d765:	c1 eb 08             	shr    $0x8,%ebx
   1d768:	eb e5                	jmp    1d74f <put_queue+0xb>
   1d76a:	89 4a 04             	mov    %ecx,0x4(%edx)
   1d76d:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1d770:	85 c9                	test   %ecx,%ecx
   1d772:	74 06                	je     1d77a <put_queue+0x36>
   1d774:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
   1d77a:	5a                   	pop    %edx
   1d77b:	59                   	pop    %ecx
   1d77c:	c3                   	ret    

0001d77d <ctrl>:
   1d77d:	b0 04                	mov    $0x4,%al
   1d77f:	eb 02                	jmp    1d783 <alt+0x2>

0001d781 <alt>:
   1d781:	b0 10                	mov    $0x10,%al
   1d783:	80 3d d3 d6 01 00 00 	cmpb   $0x0,0x1d6d3
   1d78a:	74 02                	je     1d78e <alt+0xd>
   1d78c:	00 c0                	add    %al,%al
   1d78e:	08 05 d1 d6 01 00    	or     %al,0x1d6d1
   1d794:	c3                   	ret    

0001d795 <unctrl>:
   1d795:	b0 04                	mov    $0x4,%al
   1d797:	eb 02                	jmp    1d79b <unalt+0x2>

0001d799 <unalt>:
   1d799:	b0 10                	mov    $0x10,%al
   1d79b:	80 3d d3 d6 01 00 00 	cmpb   $0x0,0x1d6d3
   1d7a2:	74 02                	je     1d7a6 <unalt+0xd>
   1d7a4:	00 c0                	add    %al,%al
   1d7a6:	f6 d0                	not    %al
   1d7a8:	20 05 d1 d6 01 00    	and    %al,0x1d6d1
   1d7ae:	c3                   	ret    

0001d7af <lshift>:
   1d7af:	80 0d d1 d6 01 00 01 	orb    $0x1,0x1d6d1
   1d7b6:	c3                   	ret    

0001d7b7 <unlshift>:
   1d7b7:	80 25 d1 d6 01 00 fe 	andb   $0xfe,0x1d6d1
   1d7be:	c3                   	ret    

0001d7bf <rshift>:
   1d7bf:	80 0d d1 d6 01 00 02 	orb    $0x2,0x1d6d1
   1d7c6:	c3                   	ret    

0001d7c7 <unrshift>:
   1d7c7:	80 25 d1 d6 01 00 fd 	andb   $0xfd,0x1d6d1
   1d7ce:	c3                   	ret    

0001d7cf <caps>:
   1d7cf:	f6 05 d1 d6 01 00 80 	testb  $0x80,0x1d6d1
   1d7d6:	75 43                	jne    1d81b <scroll+0x10>
   1d7d8:	80 35 d2 d6 01 00 04 	xorb   $0x4,0x1d6d2
   1d7df:	80 35 d1 d6 01 00 40 	xorb   $0x40,0x1d6d1
   1d7e6:	80 0d d1 d6 01 00 80 	orb    $0x80,0x1d6d1

0001d7ed <set_leds>:
   1d7ed:	e8 c4 06 00 00       	call   1deb6 <kb_wait>
   1d7f2:	b0 ed                	mov    $0xed,%al
   1d7f4:	e6 60                	out    %al,$0x60
   1d7f6:	e8 bb 06 00 00       	call   1deb6 <kb_wait>
   1d7fb:	a0 d2 d6 01 00       	mov    0x1d6d2,%al
   1d800:	e6 60                	out    %al,$0x60
   1d802:	c3                   	ret    

0001d803 <uncaps>:
   1d803:	80 25 d1 d6 01 00 7f 	andb   $0x7f,0x1d6d1
   1d80a:	c3                   	ret    

0001d80b <scroll>:
   1d80b:	f6 05 d1 d6 01 00 03 	testb  $0x3,0x1d6d1
   1d812:	74 07                	je     1d81b <scroll+0x10>
   1d814:	e8 49 f1 fe ff       	call   c962 <show_mem>
   1d819:	eb 05                	jmp    1d820 <scroll+0x15>
   1d81b:	e8 6d 95 fe ff       	call   6d8d <show_state>
   1d820:	80 35 d2 d6 01 00 01 	xorb   $0x1,0x1d6d2
   1d827:	eb c4                	jmp    1d7ed <set_leds>

0001d829 <num>:
   1d829:	80 35 d2 d6 01 00 02 	xorb   $0x2,0x1d6d2
   1d830:	eb bb                	jmp    1d7ed <set_leds>

0001d832 <cursor>:
   1d832:	2c 47                	sub    $0x47,%al
   1d834:	72 44                	jb     1d87a <cur2+0x28>
   1d836:	3c 0c                	cmp    $0xc,%al
   1d838:	77 40                	ja     1d87a <cur2+0x28>
   1d83a:	75 16                	jne    1d852 <cur2>
   1d83c:	f6 05 d1 d6 01 00 0c 	testb  $0xc,0x1d6d1
   1d843:	74 0d                	je     1d852 <cur2>
   1d845:	f6 05 d1 d6 01 00 30 	testb  $0x30,0x1d6d1
   1d84c:	0f 85 6d 06 00 00    	jne    1debf <reboot>

0001d852 <cur2>:
   1d852:	80 3d d3 d6 01 00 01 	cmpb   $0x1,0x1d6d3
   1d859:	74 20                	je     1d87b <cur>
   1d85b:	f6 05 d2 d6 01 00 02 	testb  $0x2,0x1d6d2
   1d862:	74 17                	je     1d87b <cur>
   1d864:	f6 05 d1 d6 01 00 03 	testb  $0x3,0x1d6d1
   1d86b:	75 0e                	jne    1d87b <cur>
   1d86d:	31 db                	xor    %ebx,%ebx
   1d86f:	8a 80 95 d8 01 00    	mov    0x1d895(%eax),%al
   1d875:	e9 ca fe ff ff       	jmp    1d744 <put_queue>
   1d87a:	c3                   	ret    

0001d87b <cur>:
   1d87b:	8a 80 a2 d8 01 00    	mov    0x1d8a2(%eax),%al
   1d881:	3c 39                	cmp    $0x39,%al
   1d883:	77 02                	ja     1d887 <ok_cur>
   1d885:	b4 7e                	mov    $0x7e,%ah

0001d887 <ok_cur>:
   1d887:	c1 e0 10             	shl    $0x10,%eax
   1d88a:	66 b8 1b 5b          	mov    $0x5b1b,%ax
   1d88e:	31 db                	xor    %ebx,%ebx
   1d890:	e9 af fe ff ff       	jmp    1d744 <put_queue>

0001d895 <num_table>:
   1d895:	37                   	aaa    
   1d896:	38 39                	cmp    %bh,(%ecx)
   1d898:	20 34 35 36 20 31 32 	and    %dh,0x32312036(,%esi,1)
   1d89f:	33 30                	xor    (%eax),%esi
   1d8a1:	2c                   	.byte 0x2c

0001d8a2 <cur_table>:
   1d8a2:	48                   	dec    %eax
   1d8a3:	41                   	inc    %ecx
   1d8a4:	35 20 44 47 43       	xor    $0x43474420,%eax
   1d8a9:	20 59 42             	and    %bl,0x42(%ecx)
   1d8ac:	36 32 33             	xor    %ss:(%ebx),%dh

0001d8af <func>:
   1d8af:	2c 3b                	sub    $0x3b,%al
   1d8b1:	72 31                	jb     1d8e4 <end_func>
   1d8b3:	3c 09                	cmp    $0x9,%al
   1d8b5:	76 0a                	jbe    1d8c1 <ok_func>
   1d8b7:	2c 12                	sub    $0x12,%al
   1d8b9:	3c 0a                	cmp    $0xa,%al
   1d8bb:	72 27                	jb     1d8e4 <end_func>
   1d8bd:	3c 0b                	cmp    $0xb,%al
   1d8bf:	77 23                	ja     1d8e4 <end_func>

0001d8c1 <ok_func>:
   1d8c1:	f6 05 d1 d6 01 00 10 	testb  $0x10,0x1d6d1
   1d8c8:	75 13                	jne    1d8dd <alt_func>
   1d8ca:	83 f9 04             	cmp    $0x4,%ecx
   1d8cd:	7c 15                	jl     1d8e4 <end_func>
   1d8cf:	8b 04 85 e5 d8 01 00 	mov    0x1d8e5(,%eax,4),%eax
   1d8d6:	31 db                	xor    %ebx,%ebx
   1d8d8:	e9 67 fe ff ff       	jmp    1d744 <put_queue>

0001d8dd <alt_func>:
   1d8dd:	50                   	push   %eax
   1d8de:	e8 95 b1 ff ff       	call   18a78 <change_console>
   1d8e3:	58                   	pop    %eax

0001d8e4 <end_func>:
   1d8e4:	c3                   	ret    

0001d8e5 <func_table>:
   1d8e5:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8e8:	41                   	inc    %ecx
   1d8e9:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8ec:	42                   	inc    %edx
   1d8ed:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8f0:	43                   	inc    %ebx
   1d8f1:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8f4:	44                   	inc    %esp
   1d8f5:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8f8:	45                   	inc    %ebp
   1d8f9:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8fc:	46                   	inc    %esi
   1d8fd:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d900:	47                   	inc    %edi
   1d901:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d904:	48                   	dec    %eax
   1d905:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d908:	49                   	dec    %ecx
   1d909:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d90c:	4a                   	dec    %edx
   1d90d:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d910:	4b                   	dec    %ebx
   1d911:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d914:	4c                   	dec    %esp

0001d915 <key_map>:
   1d915:	00 1b                	add    %bl,(%ebx)
   1d917:	31 32                	xor    %esi,(%edx)
   1d919:	33 34 35 36 37 38 39 	xor    0x39383736(,%esi,1),%esi
   1d920:	30 2d 3d 7f 09 71    	xor    %ch,0x71097f3d
   1d926:	77 65                	ja     1d98d <shift_map+0x17>
   1d928:	72 74                	jb     1d99e <shift_map+0x28>
   1d92a:	79 75                	jns    1d9a1 <shift_map+0x2b>
   1d92c:	69 6f 70 5b 5d 0d 00 	imul   $0xd5d5b,0x70(%edi),%ebp
   1d933:	61                   	popa   
   1d934:	73 64                	jae    1d99a <shift_map+0x24>
   1d936:	66 67 68 6a 6b       	addr16 pushw $0x6b6a
   1d93b:	6c                   	insb   (%dx),%es:(%edi)
   1d93c:	3b 27                	cmp    (%edi),%esp
   1d93e:	60                   	pusha  
   1d93f:	00 5c 7a 78          	add    %bl,0x78(%edx,%edi,2)
   1d943:	63 76 62             	arpl   %si,0x62(%esi)
   1d946:	6e                   	outsb  %ds:(%esi),(%dx)
   1d947:	6d                   	insl   (%dx),%es:(%edi)
   1d948:	2c 2e                	sub    $0x2e,%al
   1d94a:	2f                   	das    
   1d94b:	00 2a                	add    %ch,(%edx)
   1d94d:	00 20                	add    %ah,(%eax)
	...
   1d95f:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d964:	00 00                	add    %al,(%eax)
   1d966:	00 00                	add    %al,(%eax)
   1d968:	00 00                	add    %al,(%eax)
   1d96a:	00 3c 00             	add    %bh,(%eax,%eax,1)
	...

0001d976 <shift_map>:
   1d976:	00 1b                	add    %bl,(%ebx)
   1d978:	21 40 23             	and    %eax,0x23(%eax)
   1d97b:	24 25                	and    $0x25,%al
   1d97d:	5e                   	pop    %esi
   1d97e:	26 2a 28             	sub    %es:(%eax),%ch
   1d981:	29 5f 2b             	sub    %ebx,0x2b(%edi)
   1d984:	7f 09                	jg     1d98f <shift_map+0x19>
   1d986:	51                   	push   %ecx
   1d987:	57                   	push   %edi
   1d988:	45                   	inc    %ebp
   1d989:	52                   	push   %edx
   1d98a:	54                   	push   %esp
   1d98b:	59                   	pop    %ecx
   1d98c:	55                   	push   %ebp
   1d98d:	49                   	dec    %ecx
   1d98e:	4f                   	dec    %edi
   1d98f:	50                   	push   %eax
   1d990:	7b 7d                	jnp    1da0f <alt_map+0x38>
   1d992:	0d 00 41 53 44       	or     $0x44534100,%eax
   1d997:	46                   	inc    %esi
   1d998:	47                   	inc    %edi
   1d999:	48                   	dec    %eax
   1d99a:	4a                   	dec    %edx
   1d99b:	4b                   	dec    %ebx
   1d99c:	4c                   	dec    %esp
   1d99d:	3a 22                	cmp    (%edx),%ah
   1d99f:	7e 00                	jle    1d9a1 <shift_map+0x2b>
   1d9a1:	7c 5a                	jl     1d9fd <alt_map+0x26>
   1d9a3:	58                   	pop    %eax
   1d9a4:	43                   	inc    %ebx
   1d9a5:	56                   	push   %esi
   1d9a6:	42                   	inc    %edx
   1d9a7:	4e                   	dec    %esi
   1d9a8:	4d                   	dec    %ebp
   1d9a9:	3c 3e                	cmp    $0x3e,%al
   1d9ab:	3f                   	aas    
   1d9ac:	00 2a                	add    %ch,(%edx)
   1d9ae:	00 20                	add    %ah,(%eax)
	...
   1d9c0:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d9c5:	00 00                	add    %al,(%eax)
   1d9c7:	00 00                	add    %al,(%eax)
   1d9c9:	00 00                	add    %al,(%eax)
   1d9cb:	00 3e                	add    %bh,(%esi)
	...

0001d9d7 <alt_map>:
   1d9d7:	00 00                	add    %al,(%eax)
   1d9d9:	00 40 00             	add    %al,0x0(%eax)
   1d9dc:	24 00                	and    $0x0,%al
   1d9de:	00 7b 5b             	add    %bh,0x5b(%ebx)
   1d9e1:	5d                   	pop    %ebp
   1d9e2:	7d 5c                	jge    1da40 <do_self+0x8>
	...
   1d9f0:	00 00                	add    %al,(%eax)
   1d9f2:	7e 0d                	jle    1da01 <alt_map+0x2a>
	...
   1da2c:	00 7c 00 00          	add    %bh,0x0(%eax,%eax,1)
	...

0001da38 <do_self>:
   1da38:	8d 1d d7 d9 01 00    	lea    0x1d9d7,%ebx
   1da3e:	f6 05 d1 d6 01 00 20 	testb  $0x20,0x1d6d1
   1da45:	75 15                	jne    1da5c <do_self+0x24>
   1da47:	8d 1d 76 d9 01 00    	lea    0x1d976,%ebx
   1da4d:	f6 05 d1 d6 01 00 03 	testb  $0x3,0x1d6d1
   1da54:	75 06                	jne    1da5c <do_self+0x24>
   1da56:	8d 1d 15 d9 01 00    	lea    0x1d915,%ebx
   1da5c:	8a 04 03             	mov    (%ebx,%eax,1),%al
   1da5f:	08 c0                	or     %al,%al
   1da61:	74 3d                	je     1daa0 <none>
   1da63:	f6 05 d1 d6 01 00 4c 	testb  $0x4c,0x1d6d1
   1da6a:	74 0a                	je     1da76 <do_self+0x3e>
   1da6c:	3c 61                	cmp    $0x61,%al
   1da6e:	72 06                	jb     1da76 <do_self+0x3e>
   1da70:	3c 7d                	cmp    $0x7d,%al
   1da72:	77 02                	ja     1da76 <do_self+0x3e>
   1da74:	2c 20                	sub    $0x20,%al
   1da76:	f6 05 d1 d6 01 00 0c 	testb  $0xc,0x1d6d1
   1da7d:	74 0a                	je     1da89 <do_self+0x51>
   1da7f:	3c 40                	cmp    $0x40,%al
   1da81:	72 06                	jb     1da89 <do_self+0x51>
   1da83:	3c 60                	cmp    $0x60,%al
   1da85:	73 02                	jae    1da89 <do_self+0x51>
   1da87:	2c 40                	sub    $0x40,%al
   1da89:	f6 05 d1 d6 01 00 10 	testb  $0x10,0x1d6d1
   1da90:	74 02                	je     1da94 <do_self+0x5c>
   1da92:	0c 80                	or     $0x80,%al
   1da94:	25 ff 00 00 00       	and    $0xff,%eax
   1da99:	31 db                	xor    %ebx,%ebx
   1da9b:	e8 a4 fc ff ff       	call   1d744 <put_queue>

0001daa0 <none>:
   1daa0:	c3                   	ret    

0001daa1 <minus>:
   1daa1:	80 3d d3 d6 01 00 01 	cmpb   $0x1,0x1d6d3
   1daa8:	75 8e                	jne    1da38 <do_self>
   1daaa:	b8 2f 00 00 00       	mov    $0x2f,%eax
   1daaf:	31 db                	xor    %ebx,%ebx
   1dab1:	e9 8e fc ff ff       	jmp    1d744 <put_queue>

0001dab6 <key_table>:
   1dab6:	a0 da 01 00 38       	mov    0x380001da,%al
   1dabb:	da 01                	fiaddl (%ecx)
   1dabd:	00 38                	add    %bh,(%eax)
   1dabf:	da 01                	fiaddl (%ecx)
   1dac1:	00 38                	add    %bh,(%eax)
   1dac3:	da 01                	fiaddl (%ecx)
   1dac5:	00 38                	add    %bh,(%eax)
   1dac7:	da 01                	fiaddl (%ecx)
   1dac9:	00 38                	add    %bh,(%eax)
   1dacb:	da 01                	fiaddl (%ecx)
   1dacd:	00 38                	add    %bh,(%eax)
   1dacf:	da 01                	fiaddl (%ecx)
   1dad1:	00 38                	add    %bh,(%eax)
   1dad3:	da 01                	fiaddl (%ecx)
   1dad5:	00 38                	add    %bh,(%eax)
   1dad7:	da 01                	fiaddl (%ecx)
   1dad9:	00 38                	add    %bh,(%eax)
   1dadb:	da 01                	fiaddl (%ecx)
   1dadd:	00 38                	add    %bh,(%eax)
   1dadf:	da 01                	fiaddl (%ecx)
   1dae1:	00 38                	add    %bh,(%eax)
   1dae3:	da 01                	fiaddl (%ecx)
   1dae5:	00 38                	add    %bh,(%eax)
   1dae7:	da 01                	fiaddl (%ecx)
   1dae9:	00 38                	add    %bh,(%eax)
   1daeb:	da 01                	fiaddl (%ecx)
   1daed:	00 38                	add    %bh,(%eax)
   1daef:	da 01                	fiaddl (%ecx)
   1daf1:	00 38                	add    %bh,(%eax)
   1daf3:	da 01                	fiaddl (%ecx)
   1daf5:	00 38                	add    %bh,(%eax)
   1daf7:	da 01                	fiaddl (%ecx)
   1daf9:	00 38                	add    %bh,(%eax)
   1dafb:	da 01                	fiaddl (%ecx)
   1dafd:	00 38                	add    %bh,(%eax)
   1daff:	da 01                	fiaddl (%ecx)
   1db01:	00 38                	add    %bh,(%eax)
   1db03:	da 01                	fiaddl (%ecx)
   1db05:	00 38                	add    %bh,(%eax)
   1db07:	da 01                	fiaddl (%ecx)
   1db09:	00 38                	add    %bh,(%eax)
   1db0b:	da 01                	fiaddl (%ecx)
   1db0d:	00 38                	add    %bh,(%eax)
   1db0f:	da 01                	fiaddl (%ecx)
   1db11:	00 38                	add    %bh,(%eax)
   1db13:	da 01                	fiaddl (%ecx)
   1db15:	00 38                	add    %bh,(%eax)
   1db17:	da 01                	fiaddl (%ecx)
   1db19:	00 38                	add    %bh,(%eax)
   1db1b:	da 01                	fiaddl (%ecx)
   1db1d:	00 38                	add    %bh,(%eax)
   1db1f:	da 01                	fiaddl (%ecx)
   1db21:	00 38                	add    %bh,(%eax)
   1db23:	da 01                	fiaddl (%ecx)
   1db25:	00 38                	add    %bh,(%eax)
   1db27:	da 01                	fiaddl (%ecx)
   1db29:	00 7d d7             	add    %bh,-0x29(%ebp)
   1db2c:	01 00                	add    %eax,(%eax)
   1db2e:	38 da                	cmp    %bl,%dl
   1db30:	01 00                	add    %eax,(%eax)
   1db32:	38 da                	cmp    %bl,%dl
   1db34:	01 00                	add    %eax,(%eax)
   1db36:	38 da                	cmp    %bl,%dl
   1db38:	01 00                	add    %eax,(%eax)
   1db3a:	38 da                	cmp    %bl,%dl
   1db3c:	01 00                	add    %eax,(%eax)
   1db3e:	38 da                	cmp    %bl,%dl
   1db40:	01 00                	add    %eax,(%eax)
   1db42:	38 da                	cmp    %bl,%dl
   1db44:	01 00                	add    %eax,(%eax)
   1db46:	38 da                	cmp    %bl,%dl
   1db48:	01 00                	add    %eax,(%eax)
   1db4a:	38 da                	cmp    %bl,%dl
   1db4c:	01 00                	add    %eax,(%eax)
   1db4e:	38 da                	cmp    %bl,%dl
   1db50:	01 00                	add    %eax,(%eax)
   1db52:	38 da                	cmp    %bl,%dl
   1db54:	01 00                	add    %eax,(%eax)
   1db56:	38 da                	cmp    %bl,%dl
   1db58:	01 00                	add    %eax,(%eax)
   1db5a:	38 da                	cmp    %bl,%dl
   1db5c:	01 00                	add    %eax,(%eax)
   1db5e:	af                   	scas   %es:(%edi),%eax
   1db5f:	d7                   	xlat   %ds:(%ebx)
   1db60:	01 00                	add    %eax,(%eax)
   1db62:	38 da                	cmp    %bl,%dl
   1db64:	01 00                	add    %eax,(%eax)
   1db66:	38 da                	cmp    %bl,%dl
   1db68:	01 00                	add    %eax,(%eax)
   1db6a:	38 da                	cmp    %bl,%dl
   1db6c:	01 00                	add    %eax,(%eax)
   1db6e:	38 da                	cmp    %bl,%dl
   1db70:	01 00                	add    %eax,(%eax)
   1db72:	38 da                	cmp    %bl,%dl
   1db74:	01 00                	add    %eax,(%eax)
   1db76:	38 da                	cmp    %bl,%dl
   1db78:	01 00                	add    %eax,(%eax)
   1db7a:	38 da                	cmp    %bl,%dl
   1db7c:	01 00                	add    %eax,(%eax)
   1db7e:	38 da                	cmp    %bl,%dl
   1db80:	01 00                	add    %eax,(%eax)
   1db82:	38 da                	cmp    %bl,%dl
   1db84:	01 00                	add    %eax,(%eax)
   1db86:	38 da                	cmp    %bl,%dl
   1db88:	01 00                	add    %eax,(%eax)
   1db8a:	a1 da 01 00 bf       	mov    0xbf0001da,%eax
   1db8f:	d7                   	xlat   %ds:(%ebx)
   1db90:	01 00                	add    %eax,(%eax)
   1db92:	38 da                	cmp    %bl,%dl
   1db94:	01 00                	add    %eax,(%eax)
   1db96:	81 d7 01 00 38 da    	adc    $0xda380001,%edi
   1db9c:	01 00                	add    %eax,(%eax)
   1db9e:	cf                   	iret   
   1db9f:	d7                   	xlat   %ds:(%ebx)
   1dba0:	01 00                	add    %eax,(%eax)
   1dba2:	af                   	scas   %es:(%edi),%eax
   1dba3:	d8 01                	fadds  (%ecx)
   1dba5:	00 af d8 01 00 af    	add    %ch,-0x50fffe28(%edi)
   1dbab:	d8 01                	fadds  (%ecx)
   1dbad:	00 af d8 01 00 af    	add    %ch,-0x50fffe28(%edi)
   1dbb3:	d8 01                	fadds  (%ecx)
   1dbb5:	00 af d8 01 00 af    	add    %ch,-0x50fffe28(%edi)
   1dbbb:	d8 01                	fadds  (%ecx)
   1dbbd:	00 af d8 01 00 af    	add    %ch,-0x50fffe28(%edi)
   1dbc3:	d8 01                	fadds  (%ecx)
   1dbc5:	00 af d8 01 00 29    	add    %ch,0x290001d8(%edi)
   1dbcb:	d8 01                	fadds  (%ecx)
   1dbcd:	00 0b                	add    %cl,(%ebx)
   1dbcf:	d8 01                	fadds  (%ecx)
   1dbd1:	00 32                	add    %dh,(%edx)
   1dbd3:	d8 01                	fadds  (%ecx)
   1dbd5:	00 32                	add    %dh,(%edx)
   1dbd7:	d8 01                	fadds  (%ecx)
   1dbd9:	00 32                	add    %dh,(%edx)
   1dbdb:	d8 01                	fadds  (%ecx)
   1dbdd:	00 38                	add    %bh,(%eax)
   1dbdf:	da 01                	fiaddl (%ecx)
   1dbe1:	00 32                	add    %dh,(%edx)
   1dbe3:	d8 01                	fadds  (%ecx)
   1dbe5:	00 32                	add    %dh,(%edx)
   1dbe7:	d8 01                	fadds  (%ecx)
   1dbe9:	00 32                	add    %dh,(%edx)
   1dbeb:	d8 01                	fadds  (%ecx)
   1dbed:	00 38                	add    %bh,(%eax)
   1dbef:	da 01                	fiaddl (%ecx)
   1dbf1:	00 32                	add    %dh,(%edx)
   1dbf3:	d8 01                	fadds  (%ecx)
   1dbf5:	00 32                	add    %dh,(%edx)
   1dbf7:	d8 01                	fadds  (%ecx)
   1dbf9:	00 32                	add    %dh,(%edx)
   1dbfb:	d8 01                	fadds  (%ecx)
   1dbfd:	00 32                	add    %dh,(%edx)
   1dbff:	d8 01                	fadds  (%ecx)
   1dc01:	00 32                	add    %dh,(%edx)
   1dc03:	d8 01                	fadds  (%ecx)
   1dc05:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc0b:	da 01                	fiaddl (%ecx)
   1dc0d:	00 38                	add    %bh,(%eax)
   1dc0f:	da 01                	fiaddl (%ecx)
   1dc11:	00 af d8 01 00 af    	add    %ch,-0x50fffe28(%edi)
   1dc17:	d8 01                	fadds  (%ecx)
   1dc19:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc1f:	da 01                	fiaddl (%ecx)
   1dc21:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc27:	da 01                	fiaddl (%ecx)
   1dc29:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc2f:	da 01                	fiaddl (%ecx)
   1dc31:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc37:	da 01                	fiaddl (%ecx)
   1dc39:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc3f:	da 01                	fiaddl (%ecx)
   1dc41:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc47:	da 01                	fiaddl (%ecx)
   1dc49:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc4f:	da 01                	fiaddl (%ecx)
   1dc51:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc57:	da 01                	fiaddl (%ecx)
   1dc59:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc5f:	da 01                	fiaddl (%ecx)
   1dc61:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc67:	da 01                	fiaddl (%ecx)
   1dc69:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc6f:	da 01                	fiaddl (%ecx)
   1dc71:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc77:	da 01                	fiaddl (%ecx)
   1dc79:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc7f:	da 01                	fiaddl (%ecx)
   1dc81:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc87:	da 01                	fiaddl (%ecx)
   1dc89:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc8f:	da 01                	fiaddl (%ecx)
   1dc91:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc97:	da 01                	fiaddl (%ecx)
   1dc99:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dc9f:	da 01                	fiaddl (%ecx)
   1dca1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dca7:	da 01                	fiaddl (%ecx)
   1dca9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcaf:	da 01                	fiaddl (%ecx)
   1dcb1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcb7:	da 01                	fiaddl (%ecx)
   1dcb9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcbf:	da 01                	fiaddl (%ecx)
   1dcc1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcc7:	da 01                	fiaddl (%ecx)
   1dcc9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dccf:	da 01                	fiaddl (%ecx)
   1dcd1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcd7:	da 01                	fiaddl (%ecx)
   1dcd9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcdf:	da 01                	fiaddl (%ecx)
   1dce1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dce7:	da 01                	fiaddl (%ecx)
   1dce9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcef:	da 01                	fiaddl (%ecx)
   1dcf1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcf7:	da 01                	fiaddl (%ecx)
   1dcf9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dcff:	da 01                	fiaddl (%ecx)
   1dd01:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd07:	da 01                	fiaddl (%ecx)
   1dd09:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd0f:	da 01                	fiaddl (%ecx)
   1dd11:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd17:	da 01                	fiaddl (%ecx)
   1dd19:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd1f:	da 01                	fiaddl (%ecx)
   1dd21:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd27:	da 01                	fiaddl (%ecx)
   1dd29:	00 95 d7 01 00 a0    	add    %dl,-0x5ffffe29(%ebp)
   1dd2f:	da 01                	fiaddl (%ecx)
   1dd31:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd37:	da 01                	fiaddl (%ecx)
   1dd39:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd3f:	da 01                	fiaddl (%ecx)
   1dd41:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd47:	da 01                	fiaddl (%ecx)
   1dd49:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd4f:	da 01                	fiaddl (%ecx)
   1dd51:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd57:	da 01                	fiaddl (%ecx)
   1dd59:	00 a0 da 01 00 b7    	add    %ah,-0x48fffe26(%eax)
   1dd5f:	d7                   	xlat   %ds:(%ebx)
   1dd60:	01 00                	add    %eax,(%eax)
   1dd62:	a0 da 01 00 a0       	mov    0xa00001da,%al
   1dd67:	da 01                	fiaddl (%ecx)
   1dd69:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd6f:	da 01                	fiaddl (%ecx)
   1dd71:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd77:	da 01                	fiaddl (%ecx)
   1dd79:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd7f:	da 01                	fiaddl (%ecx)
   1dd81:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dd87:	da 01                	fiaddl (%ecx)
   1dd89:	00 a0 da 01 00 c7    	add    %ah,-0x38fffe26(%eax)
   1dd8f:	d7                   	xlat   %ds:(%ebx)
   1dd90:	01 00                	add    %eax,(%eax)
   1dd92:	a0 da 01 00 99       	mov    0x990001da,%al
   1dd97:	d7                   	xlat   %ds:(%ebx)
   1dd98:	01 00                	add    %eax,(%eax)
   1dd9a:	a0 da 01 00 03       	mov    0x30001da,%al
   1dd9f:	d8 01                	fadds  (%ecx)
   1dda1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dda7:	da 01                	fiaddl (%ecx)
   1dda9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddaf:	da 01                	fiaddl (%ecx)
   1ddb1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddb7:	da 01                	fiaddl (%ecx)
   1ddb9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddbf:	da 01                	fiaddl (%ecx)
   1ddc1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddc7:	da 01                	fiaddl (%ecx)
   1ddc9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddcf:	da 01                	fiaddl (%ecx)
   1ddd1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddd7:	da 01                	fiaddl (%ecx)
   1ddd9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dddf:	da 01                	fiaddl (%ecx)
   1dde1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dde7:	da 01                	fiaddl (%ecx)
   1dde9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddef:	da 01                	fiaddl (%ecx)
   1ddf1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddf7:	da 01                	fiaddl (%ecx)
   1ddf9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1ddff:	da 01                	fiaddl (%ecx)
   1de01:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de07:	da 01                	fiaddl (%ecx)
   1de09:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de0f:	da 01                	fiaddl (%ecx)
   1de11:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de17:	da 01                	fiaddl (%ecx)
   1de19:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de1f:	da 01                	fiaddl (%ecx)
   1de21:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de27:	da 01                	fiaddl (%ecx)
   1de29:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de2f:	da 01                	fiaddl (%ecx)
   1de31:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de37:	da 01                	fiaddl (%ecx)
   1de39:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de3f:	da 01                	fiaddl (%ecx)
   1de41:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de47:	da 01                	fiaddl (%ecx)
   1de49:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de4f:	da 01                	fiaddl (%ecx)
   1de51:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de57:	da 01                	fiaddl (%ecx)
   1de59:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de5f:	da 01                	fiaddl (%ecx)
   1de61:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de67:	da 01                	fiaddl (%ecx)
   1de69:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de6f:	da 01                	fiaddl (%ecx)
   1de71:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de77:	da 01                	fiaddl (%ecx)
   1de79:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de7f:	da 01                	fiaddl (%ecx)
   1de81:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de87:	da 01                	fiaddl (%ecx)
   1de89:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de8f:	da 01                	fiaddl (%ecx)
   1de91:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de97:	da 01                	fiaddl (%ecx)
   1de99:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1de9f:	da 01                	fiaddl (%ecx)
   1dea1:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1dea7:	da 01                	fiaddl (%ecx)
   1dea9:	00 a0 da 01 00 a0    	add    %ah,-0x5ffffe26(%eax)
   1deaf:	da 01                	fiaddl (%ecx)
   1deb1:	00                   	.byte 0x0
   1deb2:	a0                   	.byte 0xa0
   1deb3:	da 01                	fiaddl (%ecx)
	...

0001deb6 <kb_wait>:
   1deb6:	50                   	push   %eax
   1deb7:	e4 64                	in     $0x64,%al
   1deb9:	a8 02                	test   $0x2,%al
   1debb:	75 fa                	jne    1deb7 <kb_wait+0x1>
   1debd:	58                   	pop    %eax
   1debe:	c3                   	ret    

0001debf <reboot>:
   1debf:	e8 f2 ff ff ff       	call   1deb6 <kb_wait>
   1dec4:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
   1decb:	34 12 
   1decd:	b0 fc                	mov    $0xfc,%al
   1decf:	e6 64                	out    %al,$0x64

0001ded1 <die>:
   1ded1:	eb fe                	jmp    1ded1 <die>

0001ded3 <init>:
// 初始化串行端口。
// 设置指定串行端口的传输波特率（2400bps）并允许除了写保持寄存器空以外所有中断源。另外，在输出2字节的波特率因子时，须
// 首先设置线路控制寄存器的DLAB位（位7）。
// 参数：port是串行端口基地址，串口1 - 0x3F8；串口2 - 0x2F8。
static void init(int port)
{
   1ded3:	83 ec 10             	sub    $0x10,%esp
	outb_p(0x80, port + 3);										/* set DLAB of line control reg */
   1ded6:	8b 44 24 14          	mov    0x14(%esp),%eax
   1deda:	8d 50 03             	lea    0x3(%eax),%edx
   1dedd:	b8 80 00 00 00       	mov    $0x80,%eax
   1dee2:	ee                   	out    %al,(%dx)
   1dee3:	eb 00                	jmp    1dee5 <init+0x12>
   1dee5:	eb 00                	jmp    1dee7 <init+0x14>
	outb_p(0x30, port);											/* LS of divisor (48 -> 2400 bps */
   1dee7:	b8 30 00 00 00       	mov    $0x30,%eax
   1deec:	8b 54 24 14          	mov    0x14(%esp),%edx
   1def0:	ee                   	out    %al,(%dx)
   1def1:	eb 00                	jmp    1def3 <init+0x20>
   1def3:	eb 00                	jmp    1def5 <init+0x22>
	outb_p(0x00, port + 1);										/* MS of divisor */
   1def5:	8b 44 24 14          	mov    0x14(%esp),%eax
   1def9:	8d 50 01             	lea    0x1(%eax),%edx
   1defc:	b8 00 00 00 00       	mov    $0x0,%eax
   1df01:	ee                   	out    %al,(%dx)
   1df02:	eb 00                	jmp    1df04 <init+0x31>
   1df04:	eb 00                	jmp    1df06 <init+0x33>
	outb_p(0x03, port + 3);										/* reset DLAB */
   1df06:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df0a:	8d 50 03             	lea    0x3(%eax),%edx
   1df0d:	b8 03 00 00 00       	mov    $0x3,%eax
   1df12:	ee                   	out    %al,(%dx)
   1df13:	eb 00                	jmp    1df15 <init+0x42>
   1df15:	eb 00                	jmp    1df17 <init+0x44>
	outb_p(0x0b, port + 4);										/* set DTR,RTS, OUT_2 */
   1df17:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df1b:	8d 50 04             	lea    0x4(%eax),%edx
   1df1e:	b8 0b 00 00 00       	mov    $0xb,%eax
   1df23:	ee                   	out    %al,(%dx)
   1df24:	eb 00                	jmp    1df26 <init+0x53>
   1df26:	eb 00                	jmp    1df28 <init+0x55>
	outb_p(0x0d, port + 1);										/* enable all intrs but writes */
   1df28:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df2c:	8d 50 01             	lea    0x1(%eax),%edx
   1df2f:	b8 0d 00 00 00       	mov    $0xd,%eax
   1df34:	ee                   	out    %al,(%dx)
   1df35:	eb 00                	jmp    1df37 <init+0x64>
   1df37:	eb 00                	jmp    1df39 <init+0x66>
	(void)inb(port);											/* read data port to reset things (?) */
   1df39:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df3d:	89 c2                	mov    %eax,%edx
   1df3f:	ec                   	in     (%dx),%al
   1df40:	88 44 24 0f          	mov    %al,0xf(%esp)
}
   1df44:	90                   	nop
   1df45:	83 c4 10             	add    $0x10,%esp
   1df48:	c3                   	ret    

0001df49 <rs_init>:

// 初始化串行中断程序和串行接口。
// 中断描述符表IDT中的门描述符设置宏set_intr_gate()在include/asm/system.h中实现。
void rs_init(void)
{
   1df49:	53                   	push   %ebx
   1df4a:	83 ec 10             	sub    $0x10,%esp
	// 下面两句用于设置两个串行口的中断门描述符。rs1_interrupt是口串1的中断处理过程指针。
	// 串口1使用的中断是int 0x24，串口2的是int 0x23。
	set_intr_gate(0x24, rs1_interrupt);      					// 设置串行口1的中断向量（IRQ4信号）。
   1df4d:	b9 d8 55 00 00       	mov    $0x55d8,%ecx
   1df52:	bb dc 55 00 00       	mov    $0x55dc,%ebx
   1df57:	ba 28 e0 01 00       	mov    $0x1e028,%edx
   1df5c:	b8 00 00 08 00       	mov    $0x80000,%eax
   1df61:	66 89 d0             	mov    %dx,%ax
   1df64:	66 ba 00 8e          	mov    $0x8e00,%dx
   1df68:	89 01                	mov    %eax,(%ecx)
   1df6a:	89 13                	mov    %edx,(%ebx)
	set_intr_gate(0x23, rs2_interrupt);      					// 设置串行口2的中断向量（IRQ3信号）。
   1df6c:	b9 d0 55 00 00       	mov    $0x55d0,%ecx
   1df71:	bb d4 55 00 00       	mov    $0x55d4,%ebx
   1df76:	ba 30 e0 01 00       	mov    $0x1e030,%edx
   1df7b:	b8 00 00 08 00       	mov    $0x80000,%eax
   1df80:	66 89 d0             	mov    %dx,%ax
   1df83:	66 ba 00 8e          	mov    $0x8e00,%dx
   1df87:	89 01                	mov    %eax,(%ecx)
   1df89:	89 13                	mov    %edx,(%ebx)
	init(tty_table[64].read_q->data);       					// 初始化串行口1（.data是端口基地址）。
   1df8b:	a1 54 38 04 00       	mov    0x43854,%eax
   1df90:	8b 00                	mov    (%eax),%eax
   1df92:	50                   	push   %eax
   1df93:	e8 3b ff ff ff       	call   1ded3 <init>
   1df98:	83 c4 04             	add    $0x4,%esp
	init(tty_table[65].read_q->data);       					// 初始化串行口2.
   1df9b:	a1 94 38 04 00       	mov    0x43894,%eax
   1dfa0:	8b 00                	mov    (%eax),%eax
   1dfa2:	50                   	push   %eax
   1dfa3:	e8 2b ff ff ff       	call   1ded3 <init>
   1dfa8:	83 c4 04             	add    $0x4,%esp
	outb(inb_p(0x21) & 0xE7, 0x21);            					// 允许主8259A响应IRQ3、IRQ4中断请求。
   1dfab:	b8 21 00 00 00       	mov    $0x21,%eax
   1dfb0:	89 c2                	mov    %eax,%edx
   1dfb2:	ec                   	in     (%dx),%al
   1dfb3:	eb 00                	jmp    1dfb5 <rs_init+0x6c>
   1dfb5:	eb 00                	jmp    1dfb7 <rs_init+0x6e>
   1dfb7:	88 44 24 0f          	mov    %al,0xf(%esp)
   1dfbb:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1dfc0:	0f b6 c0             	movzbl %al,%eax
   1dfc3:	25 e7 00 00 00       	and    $0xe7,%eax
   1dfc8:	ba 21 00 00 00       	mov    $0x21,%edx
   1dfcd:	ee                   	out    %al,(%dx)
}
   1dfce:	90                   	nop
   1dfcf:	83 c4 10             	add    $0x10,%esp
   1dfd2:	5b                   	pop    %ebx
   1dfd3:	c3                   	ret    

0001dfd4 <rs_write>:
// 串行数据发送输出。
// 该函数实际上只是开启发送保持寄存器已空中断标志。此后当发送保持寄存器空时，UART就会产生中断请求。而在该串行中断
// 处理过程中，程序会取出写队列尾指针处的字符，并输出到发送保持寄存器中。一旦UART把该字符发送出去，发送保持寄存器
// 中断允许标志复位掉，从而再次禁止发送保持寄存器空引发中断请求。此次“循环”发送操作也随之结束。
void rs_write(struct tty_struct * tty)
{
   1dfd4:	83 ec 10             	sub    $0x10,%esp
	// 如果写队列不空，则首先从0x3f9（或0x2f9）读取中断允许寄存器内容，添上发送保持寄存器中断允许标志（位1）后，再写
	// 回该寄存器。这样，当发送保持寄存器空时UART就能够因期望获得欲发送的字符而引发中断。write_q.data中是串行端口基
	// 地址。
	cli();
   1dfd7:	fa                   	cli    
	if (!EMPTY(tty->write_q))
   1dfd8:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dfdc:	8b 40 38             	mov    0x38(%eax),%eax
   1dfdf:	8b 50 04             	mov    0x4(%eax),%edx
   1dfe2:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dfe6:	8b 40 38             	mov    0x38(%eax),%eax
   1dfe9:	8b 40 08             	mov    0x8(%eax),%eax
   1dfec:	39 c2                	cmp    %eax,%edx
   1dfee:	74 2f                	je     1e01f <rs_write+0x4b>
		outb(inb_p(tty->write_q->data + 1) | 0x02, tty->write_q->data + 1);
   1dff0:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dff4:	8b 40 38             	mov    0x38(%eax),%eax
   1dff7:	8b 00                	mov    (%eax),%eax
   1dff9:	83 c0 01             	add    $0x1,%eax
   1dffc:	89 c2                	mov    %eax,%edx
   1dffe:	ec                   	in     (%dx),%al
   1dfff:	eb 00                	jmp    1e001 <rs_write+0x2d>
   1e001:	eb 00                	jmp    1e003 <rs_write+0x2f>
   1e003:	88 44 24 0f          	mov    %al,0xf(%esp)
   1e007:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1e00c:	83 c8 02             	or     $0x2,%eax
   1e00f:	0f b6 c0             	movzbl %al,%eax
   1e012:	8b 54 24 14          	mov    0x14(%esp),%edx
   1e016:	8b 52 38             	mov    0x38(%edx),%edx
   1e019:	8b 12                	mov    (%edx),%edx
   1e01b:	83 c2 01             	add    $0x1,%edx
   1e01e:	ee                   	out    %al,(%dx)
	sti();
   1e01f:	fb                   	sti    
}
   1e020:	90                   	nop
   1e021:	83 c4 10             	add    $0x10,%esp
   1e024:	c3                   	ret    
   1e025:	66 90                	xchg   %ax,%ax
   1e027:	90                   	nop

0001e028 <rs1_interrupt>:
   1e028:	68 2c f5 02 00       	push   $0x2f52c
   1e02d:	eb 06                	jmp    1e035 <rs_int>
   1e02f:	90                   	nop

0001e030 <rs2_interrupt>:
   1e030:	68 34 f5 02 00       	push   $0x2f534

0001e035 <rs_int>:
   1e035:	52                   	push   %edx
   1e036:	51                   	push   %ecx
   1e037:	53                   	push   %ebx
   1e038:	50                   	push   %eax
   1e039:	06                   	push   %es
   1e03a:	1e                   	push   %ds
   1e03b:	6a 10                	push   $0x10
   1e03d:	1f                   	pop    %ds
   1e03e:	6a 10                	push   $0x10
   1e040:	07                   	pop    %es
   1e041:	8b 54 24 18          	mov    0x18(%esp),%edx
   1e045:	8b 12                	mov    (%edx),%edx
   1e047:	8b 12                	mov    (%edx),%edx
   1e049:	83 c2 02             	add    $0x2,%edx

0001e04c <rep_int>:
   1e04c:	31 c0                	xor    %eax,%eax
   1e04e:	ec                   	in     (%dx),%al
   1e04f:	a8 01                	test   $0x1,%al
   1e051:	75 16                	jne    1e069 <end>
   1e053:	3c 06                	cmp    $0x6,%al
   1e055:	77 12                	ja     1e069 <end>
   1e057:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   1e05b:	52                   	push   %edx
   1e05c:	83 ea 02             	sub    $0x2,%edx
   1e05f:	ff 14 45 77 e0 01 00 	call   *0x1e077(,%eax,2)
   1e066:	5a                   	pop    %edx
   1e067:	eb e3                	jmp    1e04c <rep_int>

0001e069 <end>:
   1e069:	b0 20                	mov    $0x20,%al
   1e06b:	e6 20                	out    %al,$0x20
   1e06d:	1f                   	pop    %ds
   1e06e:	07                   	pop    %es
   1e06f:	58                   	pop    %eax
   1e070:	5b                   	pop    %ebx
   1e071:	59                   	pop    %ecx
   1e072:	5a                   	pop    %edx
   1e073:	83 c4 04             	add    $0x4,%esp
   1e076:	cf                   	iret   

0001e077 <jmp_table>:
   1e077:	88 e0                	mov    %ah,%al
   1e079:	01 00                	add    %eax,(%eax)
   1e07b:	cc                   	int3   
   1e07c:	e0 01                	loopne 1e07f <jmp_table+0x8>
   1e07e:	00 98 e0 01 00 90    	add    %bl,-0x6ffffe20(%eax)
   1e084:	e0 01                	loopne 1e087 <jmp_table+0x10>
   1e086:	00                   	.byte 0x0
   1e087:	90                   	nop

0001e088 <modem_status>:
   1e088:	83 c2 06             	add    $0x6,%edx
   1e08b:	ec                   	in     (%dx),%al
   1e08c:	c3                   	ret    
   1e08d:	8d 76 00             	lea    0x0(%esi),%esi

0001e090 <line_status>:
   1e090:	83 c2 05             	add    $0x5,%edx
   1e093:	ec                   	in     (%dx),%al
   1e094:	c3                   	ret    
   1e095:	8d 76 00             	lea    0x0(%esi),%esi

0001e098 <read_char>:
   1e098:	ec                   	in     (%dx),%al
   1e099:	89 ca                	mov    %ecx,%edx
   1e09b:	81 ea 24 f5 02 00    	sub    $0x2f524,%edx
   1e0a1:	c1 ea 03             	shr    $0x3,%edx
   1e0a4:	8b 09                	mov    (%ecx),%ecx
   1e0a6:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e0a9:	88 44 19 10          	mov    %al,0x10(%ecx,%ebx,1)
   1e0ad:	43                   	inc    %ebx
   1e0ae:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e0b4:	3b 59 08             	cmp    0x8(%ecx),%ebx
   1e0b7:	74 03                	je     1e0bc <read_char+0x24>
   1e0b9:	89 59 04             	mov    %ebx,0x4(%ecx)
   1e0bc:	83 c2 3f             	add    $0x3f,%edx
   1e0bf:	52                   	push   %edx
   1e0c0:	e8 36 ba ff ff       	call   19afb <do_tty_interrupt>
   1e0c5:	83 c4 04             	add    $0x4,%esp
   1e0c8:	c3                   	ret    
   1e0c9:	8d 76 00             	lea    0x0(%esi),%esi

0001e0cc <write_char>:
   1e0cc:	8b 49 04             	mov    0x4(%ecx),%ecx
   1e0cf:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e0d2:	2b 59 08             	sub    0x8(%ecx),%ebx
   1e0d5:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e0db:	74 2f                	je     1e10c <write_buffer_empty>
   1e0dd:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
   1e0e3:	77 0d                	ja     1e0f2 <write_char+0x26>
   1e0e5:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e0e8:	85 db                	test   %ebx,%ebx
   1e0ea:	74 06                	je     1e0f2 <write_char+0x26>
   1e0ec:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e0f2:	8b 59 08             	mov    0x8(%ecx),%ebx
   1e0f5:	8a 44 19 10          	mov    0x10(%ecx,%ebx,1),%al
   1e0f9:	ee                   	out    %al,(%dx)
   1e0fa:	43                   	inc    %ebx
   1e0fb:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e101:	89 59 08             	mov    %ebx,0x8(%ecx)
   1e104:	3b 59 04             	cmp    0x4(%ecx),%ebx
   1e107:	74 03                	je     1e10c <write_buffer_empty>
   1e109:	c3                   	ret    
   1e10a:	66 90                	xchg   %ax,%ax

0001e10c <write_buffer_empty>:
   1e10c:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e10f:	85 db                	test   %ebx,%ebx
   1e111:	74 06                	je     1e119 <write_buffer_empty+0xd>
   1e113:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e119:	42                   	inc    %edx
   1e11a:	ec                   	in     (%dx),%al
   1e11b:	eb 00                	jmp    1e11d <write_buffer_empty+0x11>
   1e11d:	eb 00                	jmp    1e11f <write_buffer_empty+0x13>
   1e11f:	24 0d                	and    $0xd,%al
   1e121:	ee                   	out    %al,(%dx)
   1e122:	c3                   	ret    

0001e123 <get_fs_byte>:
{
   1e123:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1e124:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e128:	64 8a 00             	mov    %fs:(%eax),%al
   1e12b:	89 c3                	mov    %eax,%ebx
	return _v;
   1e12d:	89 d8                	mov    %ebx,%eax
}
   1e12f:	5b                   	pop    %ebx
   1e130:	c3                   	ret    

0001e131 <get_fs_long>:
{
   1e131:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1e134:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e138:	64 8b 00             	mov    %fs:(%eax),%eax
   1e13b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1e13f:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1e143:	83 c4 10             	add    $0x10,%esp
   1e146:	c3                   	ret    

0001e147 <put_fs_byte>:
{
   1e147:	83 ec 04             	sub    $0x4,%esp
   1e14a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e14e:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e151:	0f b6 04 24          	movzbl (%esp),%eax
   1e155:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e159:	64 88 02             	mov    %al,%fs:(%edx)
}
   1e15c:	90                   	nop
   1e15d:	83 c4 04             	add    $0x4,%esp
   1e160:	c3                   	ret    

0001e161 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e161:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e165:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e169:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1e16c:	90                   	nop
   1e16d:	c3                   	ret    

0001e16e <change_speed>:
// 修改传输波特率。
// 参数：tty - 终端对应的tty数据结构。
// 在除数锁存标志DLAB置位情况下，通过端口0x3f8和0x3f9向UART分别写入波特率因子低字节和高字节。写完后再复位DLAB
// 位。对于串口2,这两个端口分别是0x2f8和0x2f9。
static void change_speed(struct tty_struct * tty)
{
   1e16e:	83 ec 10             	sub    $0x10,%esp

	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
   1e171:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e175:	8b 40 34             	mov    0x34(%eax),%eax
   1e178:	8b 00                	mov    (%eax),%eax
   1e17a:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
   1e17f:	66 83 7c 24 0e 00    	cmpw   $0x0,0xe(%esp)
   1e185:	74 66                	je     1e1ed <change_speed+0x7f>
		return;
	quot = quotient[tty->termios.c_cflag & CBAUD];
   1e187:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e18b:	8b 40 08             	mov    0x8(%eax),%eax
   1e18e:	83 e0 0f             	and    $0xf,%eax
   1e191:	0f b7 84 00 60 f5 02 	movzwl 0x2f560(%eax,%eax,1),%eax
   1e198:	00 
   1e199:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	// 接着把波特率因子quot写入串行端口对应UART芯片的波特率因子锁存器中。在写之前我们先要把线路控制寄存器LCR的除数锁存
	// 访问位DLAB（位7）置1。然后把16位的波特率因子低、高字节分别写入端口0x3f8、0x3f9（分别对应波特率因子低、高字节
	// 锁存器）。最后再复位LCR的DLAB标志位。
	cli();
   1e19e:	fa                   	cli    
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
   1e19f:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e1a4:	8d 50 03             	lea    0x3(%eax),%edx
   1e1a7:	b8 80 00 00 00       	mov    $0x80,%eax
   1e1ac:	ee                   	out    %al,(%dx)
   1e1ad:	eb 00                	jmp    1e1af <change_speed+0x41>
   1e1af:	eb 00                	jmp    1e1b1 <change_speed+0x43>
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
   1e1b1:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e1b6:	0f b6 c0             	movzbl %al,%eax
   1e1b9:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e1be:	ee                   	out    %al,(%dx)
   1e1bf:	eb 00                	jmp    1e1c1 <change_speed+0x53>
   1e1c1:	eb 00                	jmp    1e1c3 <change_speed+0x55>
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
   1e1c3:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e1c8:	66 c1 e8 08          	shr    $0x8,%ax
   1e1cc:	0f b7 c0             	movzwl %ax,%eax
   1e1cf:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e1d4:	83 c2 01             	add    $0x1,%edx
   1e1d7:	ee                   	out    %al,(%dx)
   1e1d8:	eb 00                	jmp    1e1da <change_speed+0x6c>
   1e1da:	eb 00                	jmp    1e1dc <change_speed+0x6e>
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
   1e1dc:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e1e1:	8d 50 03             	lea    0x3(%eax),%edx
   1e1e4:	b8 03 00 00 00       	mov    $0x3,%eax
   1e1e9:	ee                   	out    %al,(%dx)
	sti();
   1e1ea:	fb                   	sti    
   1e1eb:	eb 01                	jmp    1e1ee <change_speed+0x80>
		return;
   1e1ed:	90                   	nop
}
   1e1ee:	83 c4 10             	add    $0x10,%esp
   1e1f1:	c3                   	ret    

0001e1f2 <flush>:
// 刷新tty缓冲队列。
// 参数：queue - 指定的缓冲队列指针。
// 令缓冲队列的头指针等于尾指针，从而达到清空缓冲区的目的。
static void flush(struct tty_queue * queue)
{
	cli();
   1e1f2:	fa                   	cli    
	queue->head = queue->tail;
   1e1f3:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e1f7:	8b 50 08             	mov    0x8(%eax),%edx
   1e1fa:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e1fe:	89 50 04             	mov    %edx,0x4(%eax)
	sti();
   1e201:	fb                   	sti    
}
   1e202:	90                   	nop
   1e203:	c3                   	ret    

0001e204 <wait_until_sent>:

// 等待字符发送出去。
static void wait_until_sent(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e204:	90                   	nop
   1e205:	c3                   	ret    

0001e206 <send_break>:

// 发送BREAK控制符。
static void send_break(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e206:	90                   	nop
   1e207:	c3                   	ret    

0001e208 <get_termios>:

// 取终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 存放termios结构的用户缓冲区。
static int get_termios(struct tty_struct * tty, struct termios * termios)
{
   1e208:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
   1e20b:	83 ec 08             	sub    $0x8,%esp
   1e20e:	6a 24                	push   $0x24
   1e210:	ff 74 24 30          	pushl  0x30(%esp)
   1e214:	e8 86 a1 fe ff       	call   839f <verify_area>
   1e219:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e21c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e223:	00 
   1e224:	eb 2c                	jmp    1e252 <get_termios+0x4a>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
   1e226:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e22a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e22e:	01 c2                	add    %eax,%edx
   1e230:	8b 4c 24 20          	mov    0x20(%esp),%ecx
   1e234:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e238:	01 c8                	add    %ecx,%eax
   1e23a:	0f b6 00             	movzbl (%eax),%eax
   1e23d:	0f be c0             	movsbl %al,%eax
   1e240:	83 ec 08             	sub    $0x8,%esp
   1e243:	52                   	push   %edx
   1e244:	50                   	push   %eax
   1e245:	e8 fd fe ff ff       	call   1e147 <put_fs_byte>
   1e24a:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e24d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e252:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e256:	83 f8 23             	cmp    $0x23,%eax
   1e259:	76 cb                	jbe    1e226 <get_termios+0x1e>
	return 0;
   1e25b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e260:	83 c4 1c             	add    $0x1c,%esp
   1e263:	c3                   	ret    

0001e264 <set_termios>:

// 设置终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 用户数据区termios结构指针。
static int set_termios(struct tty_struct * tty, struct termios * termios,
			int channel)
{
   1e264:	83 ec 1c             	sub    $0x1c,%esp
     * 如果试图设置终端的状态但此时终端不在前台，那么我们就需要发送一个SIGTTOU
     * 信号。如果该信号被进程屏蔽或者忽略了，就直接执行本次操作。POSIX 7.2 */
	// 如果当前进程使用的tty终端的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前进程试图修改不受控制的终端
	// 的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程暂时停止执行，让我们先修改termios
	// 结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会儿再执行本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e267:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e26c:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e272:	39 44 24 28          	cmp    %eax,0x28(%esp)
   1e276:	75 42                	jne    1e2ba <set_termios+0x56>
   1e278:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e27c:	8b 50 24             	mov    0x24(%eax),%edx
   1e27f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e284:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e28a:	39 c2                	cmp    %eax,%edx
   1e28c:	74 2c                	je     1e2ba <set_termios+0x56>
		retsig = tty_signal(SIGTTOU, tty);
   1e28e:	83 ec 08             	sub    $0x8,%esp
   1e291:	ff 74 24 28          	pushl  0x28(%esp)
   1e295:	6a 16                	push   $0x16
   1e297:	e8 94 b0 ff ff       	call   19330 <tty_signal>
   1e29c:	83 c4 10             	add    $0x10,%esp
   1e29f:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e2a3:	81 7c 24 08 00 fe ff 	cmpl   $0xfffffe00,0x8(%esp)
   1e2aa:	ff 
   1e2ab:	74 07                	je     1e2b4 <set_termios+0x50>
   1e2ad:	83 7c 24 08 fc       	cmpl   $0xfffffffc,0x8(%esp)
   1e2b2:	75 06                	jne    1e2ba <set_termios+0x56>
			return retsig;
   1e2b4:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e2b8:	eb 52                	jmp    1e30c <set_termios+0xa8>
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e2ba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e2c1:	00 
   1e2c2:	eb 2b                	jmp    1e2ef <set_termios+0x8b>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
   1e2c4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e2c8:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e2cc:	01 d0                	add    %edx,%eax
   1e2ce:	83 ec 0c             	sub    $0xc,%esp
   1e2d1:	50                   	push   %eax
   1e2d2:	e8 4c fe ff ff       	call   1e123 <get_fs_byte>
   1e2d7:	83 c4 10             	add    $0x10,%esp
   1e2da:	89 c1                	mov    %eax,%ecx
   1e2dc:	8b 54 24 20          	mov    0x20(%esp),%edx
   1e2e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e2e4:	01 d0                	add    %edx,%eax
   1e2e6:	89 ca                	mov    %ecx,%edx
   1e2e8:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e2ea:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e2ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e2f3:	83 f8 23             	cmp    $0x23,%eax
   1e2f6:	76 cc                	jbe    1e2c4 <set_termios+0x60>
	change_speed(tty);
   1e2f8:	83 ec 0c             	sub    $0xc,%esp
   1e2fb:	ff 74 24 2c          	pushl  0x2c(%esp)
   1e2ff:	e8 6a fe ff ff       	call   1e16e <change_speed>
   1e304:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e307:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e30c:	83 c4 1c             	add    $0x1c,%esp
   1e30f:	c3                   	ret    

0001e310 <get_termio>:

// 读取termio结构中的信息。
// 参数：tty - 指定终端的tty结构指针；termio - 保存termio结构信息的用户缓冲区。
static int get_termio(struct tty_struct * tty, struct termio * termio)
{
   1e310:	83 ec 2c             	sub    $0x2c,%esp
	struct termio tmp_termio;

	// 首先验证用户的缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后将termios结构的信息复制到临时termio结构中，
	// 这两个结构基本相同，输入、输出、控制和本地标志集数据类型不同。前者的是long，而后者的是short。因此先复制到临时
	// termio结构中目的是为了进行数据类型转换。
	verify_area(termio, sizeof (*termio));
   1e313:	83 ec 08             	sub    $0x8,%esp
   1e316:	6a 12                	push   $0x12
   1e318:	ff 74 24 40          	pushl  0x40(%esp)
   1e31c:	e8 7e a0 fe ff       	call   839f <verify_area>
   1e321:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_iflag = tty->termios.c_iflag;
   1e324:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e328:	8b 00                	mov    (%eax),%eax
   1e32a:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	tmp_termio.c_oflag = tty->termios.c_oflag;
   1e32f:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e333:	8b 40 04             	mov    0x4(%eax),%eax
   1e336:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp_termio.c_cflag = tty->termios.c_cflag;
   1e33b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e33f:	8b 40 08             	mov    0x8(%eax),%eax
   1e342:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp_termio.c_lflag = tty->termios.c_lflag;
   1e347:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e34b:	8b 40 0c             	mov    0xc(%eax),%eax
   1e34e:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp_termio.c_line = tty->termios.c_line;
   1e353:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e357:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   1e35b:	88 44 24 12          	mov    %al,0x12(%esp)
	for(i = 0 ; i < NCC ; i++)
   1e35f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e366:	00 
   1e367:	eb 21                	jmp    1e38a <get_termio+0x7a>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
   1e369:	8b 54 24 30          	mov    0x30(%esp),%edx
   1e36d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e371:	01 d0                	add    %edx,%eax
   1e373:	83 c0 11             	add    $0x11,%eax
   1e376:	0f b6 00             	movzbl (%eax),%eax
   1e379:	8d 4c 24 13          	lea    0x13(%esp),%ecx
   1e37d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e381:	01 ca                	add    %ecx,%edx
   1e383:	88 02                	mov    %al,(%edx)
	for(i = 0 ; i < NCC ; i++)
   1e385:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e38a:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e38f:	7e d8                	jle    1e369 <get_termio+0x59>
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e391:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e398:	00 
   1e399:	eb 2c                	jmp    1e3c7 <get_termio+0xb7>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
   1e39b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e39f:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e3a3:	01 c2                	add    %eax,%edx
   1e3a5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e3a9:	8d 4c 24 0a          	lea    0xa(%esp),%ecx
   1e3ad:	01 c8                	add    %ecx,%eax
   1e3af:	0f b6 00             	movzbl (%eax),%eax
   1e3b2:	0f be c0             	movsbl %al,%eax
   1e3b5:	83 ec 08             	sub    $0x8,%esp
   1e3b8:	52                   	push   %edx
   1e3b9:	50                   	push   %eax
   1e3ba:	e8 88 fd ff ff       	call   1e147 <put_fs_byte>
   1e3bf:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e3c2:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e3c7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e3cb:	83 f8 11             	cmp    $0x11,%eax
   1e3ce:	76 cb                	jbe    1e39b <get_termio+0x8b>
	return 0;
   1e3d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e3d5:	83 c4 2c             	add    $0x2c,%esp
   1e3d8:	c3                   	ret    

0001e3d9 <set_termio>:
// 设置终端termio结构信息。
// 参数：tty - 指定终端的tty结构指针；termio - 用户数据区中termio结构。
// 将用户缓冲区termio的信息复制到终端的termios结构中。返回0。
static int set_termio(struct tty_struct * tty, struct termio * termio,
			int channel)
{
   1e3d9:	83 ec 2c             	sub    $0x2c,%esp

	// 与set_termios()一样，如果进程使用的终端的进程组号的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前
	// 进程试图修改不受控制的终端的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程先暂
	// 时停止执行，以让我们先修改termios结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会再执行
	// 本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e3dc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e3e1:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e3e7:	39 44 24 38          	cmp    %eax,0x38(%esp)
   1e3eb:	75 45                	jne    1e432 <set_termio+0x59>
   1e3ed:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3f1:	8b 50 24             	mov    0x24(%eax),%edx
   1e3f4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e3f9:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e3ff:	39 c2                	cmp    %eax,%edx
   1e401:	74 2f                	je     1e432 <set_termio+0x59>
		retsig = tty_signal(SIGTTOU, tty);
   1e403:	83 ec 08             	sub    $0x8,%esp
   1e406:	ff 74 24 38          	pushl  0x38(%esp)
   1e40a:	6a 16                	push   $0x16
   1e40c:	e8 1f af ff ff       	call   19330 <tty_signal>
   1e411:	83 c4 10             	add    $0x10,%esp
   1e414:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e418:	81 7c 24 18 00 fe ff 	cmpl   $0xfffffe00,0x18(%esp)
   1e41f:	ff 
   1e420:	74 07                	je     1e429 <set_termio+0x50>
   1e422:	83 7c 24 18 fc       	cmpl   $0xfffffffc,0x18(%esp)
   1e427:	75 09                	jne    1e432 <set_termio+0x59>
			return retsig;
   1e429:	8b 44 24 18          	mov    0x18(%esp),%eax
   1e42d:	e9 c9 00 00 00       	jmp    1e4fb <set_termio+0x122>
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e432:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e439:	00 
   1e43a:	eb 2b                	jmp    1e467 <set_termio+0x8e>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
   1e43c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e440:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e444:	01 d0                	add    %edx,%eax
   1e446:	83 ec 0c             	sub    $0xc,%esp
   1e449:	50                   	push   %eax
   1e44a:	e8 d4 fc ff ff       	call   1e123 <get_fs_byte>
   1e44f:	83 c4 10             	add    $0x10,%esp
   1e452:	89 c1                	mov    %eax,%ecx
   1e454:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e458:	8d 54 24 06          	lea    0x6(%esp),%edx
   1e45c:	01 d0                	add    %edx,%eax
   1e45e:	89 ca                	mov    %ecx,%edx
   1e460:	88 10                	mov    %dl,(%eax)
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e462:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e467:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e46b:	83 f8 11             	cmp    $0x11,%eax
   1e46e:	76 cc                	jbe    1e43c <set_termio+0x63>
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
   1e470:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e474:	0f b7 54 24 06       	movzwl 0x6(%esp),%edx
   1e479:	66 89 10             	mov    %dx,(%eax)
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
   1e47c:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e480:	8d 50 04             	lea    0x4(%eax),%edx
   1e483:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
   1e488:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
   1e48b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e48f:	8d 50 08             	lea    0x8(%eax),%edx
   1e492:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1e497:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
   1e49a:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e49e:	8d 50 0c             	lea    0xc(%eax),%edx
   1e4a1:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e4a6:	66 89 02             	mov    %ax,(%edx)
	tty->termios.c_line = tmp_termio.c_line;
   1e4a9:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
   1e4ae:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e4b2:	88 50 10             	mov    %dl,0x10(%eax)
	for(i = 0 ; i < NCC ; i++)
   1e4b5:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e4bc:	00 
   1e4bd:	eb 21                	jmp    1e4e0 <set_termio+0x107>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
   1e4bf:	8d 54 24 0f          	lea    0xf(%esp),%edx
   1e4c3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e4c7:	01 d0                	add    %edx,%eax
   1e4c9:	0f b6 00             	movzbl (%eax),%eax
   1e4cc:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1e4d0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e4d4:	01 ca                	add    %ecx,%edx
   1e4d6:	83 c2 11             	add    $0x11,%edx
   1e4d9:	88 02                	mov    %al,(%edx)
	for(i = 0 ; i < NCC ; i++)
   1e4db:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e4e0:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e4e5:	7e d8                	jle    1e4bf <set_termio+0xe6>
	// 最后因为用户有可能已修改了终端串行口传输波特率，所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改
	// 串行UART芯片内的传输波特率，并返回0。
	change_speed(tty);
   1e4e7:	83 ec 0c             	sub    $0xc,%esp
   1e4ea:	ff 74 24 3c          	pushl  0x3c(%esp)
   1e4ee:	e8 7b fc ff ff       	call   1e16e <change_speed>
   1e4f3:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e4f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e4fb:	83 c4 2c             	add    $0x2c,%esp
   1e4fe:	c3                   	ret    

0001e4ff <tty_ioctl>:

// tty终端设备输入输出控制函数。
// 参数：dev - 设备号；cmd - ioctl命令；arg - 操作参数指针。
// 该函数首先根据参数给出的设备号找出对应终端的tty结构，然后根据控制命令cmd分别进行处理。
int tty_ioctl(int dev, int cmd, int arg)
{
   1e4ff:	83 ec 1c             	sub    $0x1c,%esp
	int	pgrp;

	// 首先根据设备号取得tty子设备号，从而取得终端的tty结构。若主设备号是5（控制终端），则进程的tty字段即是tty子设备
	// 号。此时如果进程的tty子设备号是负数，表明该进程没有控制终端，即不能发出该ioctl调用，于是显示出错信息并停机。如果
	// 主设备号不是5而是4,我们就可以从设备号中取出子设备号。子设备号可以是0（控制台终端）、1（串口1终端）、2（串口2终端）。
	if (MAJOR(dev) == 5) {
   1e502:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e506:	c1 e8 08             	shr    $0x8,%eax
   1e509:	83 f8 05             	cmp    $0x5,%eax
   1e50c:	75 28                	jne    1e536 <tty_ioctl+0x37>
		dev = current->tty;
   1e50e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e513:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e519:	89 44 24 20          	mov    %eax,0x20(%esp)
		if (dev < 0)
   1e51d:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e522:	79 1a                	jns    1e53e <tty_ioctl+0x3f>
			panic("tty_ioctl: dev<0");
   1e524:	83 ec 0c             	sub    $0xc,%esp
   1e527:	68 a0 50 02 00       	push   $0x250a0
   1e52c:	e8 d6 a6 fe ff       	call   8c07 <panic>
   1e531:	83 c4 10             	add    $0x10,%esp
   1e534:	eb 08                	jmp    1e53e <tty_ioctl+0x3f>
	} else
		dev = MINOR(dev);
   1e536:	81 64 24 20 ff 00 00 	andl   $0xff,0x20(%esp)
   1e53d:	00 
	// ioctl命令cmd进行分别处理。144行后半部分用于根据子设备号dev在tty_table[]表中选择对应的tty结构。如果dev = 0，表示
	// 正在使用前台终端，因此直接使用终端号fg_console作为tty_table[]项索引取tty结构。如果dev大于0,那么就要分两种情况考虑：
	// 1、dev是虚拟终端号；2、dev是串行终端号或者伪终端号。对于虚拟终端其tty结构在tty_table[]中索引项是dev-1（0--63）。
	// 对于其他类型终端，则它们的tty结构索引项就是dev。例如，如果dev = 64，表示是一个串行终端1,则其tty结构就是tty_table[dev]
	// 如果dev = 1，则对应终端的tty结构是tty_table[0]。
	tty = tty_table + (dev ? ((dev < 64)? dev - 1 : dev) : fg_console);
   1e53e:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e543:	74 26                	je     1e56b <tty_ioctl+0x6c>
   1e545:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   1e54a:	7f 11                	jg     1e55d <tty_ioctl+0x5e>
   1e54c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e550:	83 e8 01             	sub    $0x1,%eax
   1e553:	c1 e0 06             	shl    $0x6,%eax
   1e556:	05 20 28 04 00       	add    $0x42820,%eax
   1e55b:	eb 1b                	jmp    1e578 <tty_ioctl+0x79>
   1e55d:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e561:	c1 e0 06             	shl    $0x6,%eax
   1e564:	05 20 28 04 00       	add    $0x42820,%eax
   1e569:	eb 0d                	jmp    1e578 <tty_ioctl+0x79>
   1e56b:	a1 80 22 03 00       	mov    0x32280,%eax
   1e570:	c1 e0 06             	shl    $0x6,%eax
   1e573:	05 20 28 04 00       	add    $0x42820,%eax
   1e578:	89 44 24 0c          	mov    %eax,0xc(%esp)
	switch (cmd) {
   1e57c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e580:	2d 01 54 00 00       	sub    $0x5401,%eax
   1e585:	83 f8 1a             	cmp    $0x1a,%eax
   1e588:	0f 87 4f 04 00 00    	ja     1e9dd <tty_ioctl+0x4de>
   1e58e:	8b 04 85 b4 50 02 00 	mov    0x250b4(,%eax,4),%eax
   1e595:	ff e0                	jmp    *%eax
		// 取相应终端termios结构信息。此时参数arg是用户缓冲区指针。
		case TCGETS:
			return get_termios(tty, (struct termios *) arg);
   1e597:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e59b:	83 ec 08             	sub    $0x8,%esp
   1e59e:	50                   	push   %eax
   1e59f:	ff 74 24 18          	pushl  0x18(%esp)
   1e5a3:	e8 60 fc ff ff       	call   1e208 <get_termios>
   1e5a8:	83 c4 10             	add    $0x10,%esp
   1e5ab:	e9 32 04 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 在设置termios结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termios
		// 结构的操作。
		case TCSETSF:
			flush(tty->read_q); 							/* fallthrough */
   1e5b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e5b4:	8b 40 34             	mov    0x34(%eax),%eax
   1e5b7:	83 ec 0c             	sub    $0xc,%esp
   1e5ba:	50                   	push   %eax
   1e5bb:	e8 32 fc ff ff       	call   1e1f2 <flush>
   1e5c0:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETSW:
			wait_until_sent(tty); 							/* fallthrough */
   1e5c3:	83 ec 0c             	sub    $0xc,%esp
   1e5c6:	ff 74 24 18          	pushl  0x18(%esp)
   1e5ca:	e8 35 fc ff ff       	call   1e204 <wait_until_sent>
   1e5cf:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termios结构信息。此时参数arg是保存termios结构的用户缓冲区指针。
		case TCSETS:
			return set_termios(tty,(struct termios *) arg, dev);
   1e5d2:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e5d6:	83 ec 04             	sub    $0x4,%esp
   1e5d9:	ff 74 24 24          	pushl  0x24(%esp)
   1e5dd:	50                   	push   %eax
   1e5de:	ff 74 24 18          	pushl  0x18(%esp)
   1e5e2:	e8 7d fc ff ff       	call   1e264 <set_termios>
   1e5e7:	83 c4 10             	add    $0x10,%esp
   1e5ea:	e9 f3 03 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 取相应终端termio结构中的信息。此时参数arg是用户缓冲区指针。
		case TCGETA:
			return get_termio(tty,(struct termio *) arg);
   1e5ef:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e5f3:	83 ec 08             	sub    $0x8,%esp
   1e5f6:	50                   	push   %eax
   1e5f7:	ff 74 24 18          	pushl  0x18(%esp)
   1e5fb:	e8 10 fd ff ff       	call   1e310 <get_termio>
   1e600:	83 c4 10             	add    $0x10,%esp
   1e603:	e9 da 03 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 在设置termio结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termio
		// 结构的操作。
		case TCSETAF:
			flush(tty->read_q); 							/* fallthrough */
   1e608:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e60c:	8b 40 34             	mov    0x34(%eax),%eax
   1e60f:	83 ec 0c             	sub    $0xc,%esp
   1e612:	50                   	push   %eax
   1e613:	e8 da fb ff ff       	call   1e1f2 <flush>
   1e618:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETAW:
			wait_until_sent(tty); 							/* fallthrough */
   1e61b:	83 ec 0c             	sub    $0xc,%esp
   1e61e:	ff 74 24 18          	pushl  0x18(%esp)
   1e622:	e8 dd fb ff ff       	call   1e204 <wait_until_sent>
   1e627:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termio结构信息。此时参数arg是保存termio结构的用户缓冲区指针。
		case TCSETA:
			return set_termio(tty,(struct termio *) arg, dev);
   1e62a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e62e:	83 ec 04             	sub    $0x4,%esp
   1e631:	ff 74 24 24          	pushl  0x24(%esp)
   1e635:	50                   	push   %eax
   1e636:	ff 74 24 18          	pushl  0x18(%esp)
   1e63a:	e8 9a fd ff ff       	call   1e3d9 <set_termio>
   1e63f:	83 c4 10             	add    $0x10,%esp
   1e642:	e9 9b 03 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 如果参数arg值是0，则等待输出队列处理完毕（空），并发送一个break。
		case TCSBRK:
			if (!arg) {
   1e647:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e64c:	75 1e                	jne    1e66c <tty_ioctl+0x16d>
				wait_until_sent(tty);
   1e64e:	83 ec 0c             	sub    $0xc,%esp
   1e651:	ff 74 24 18          	pushl  0x18(%esp)
   1e655:	e8 aa fb ff ff       	call   1e204 <wait_until_sent>
   1e65a:	83 c4 10             	add    $0x10,%esp
				send_break(tty);
   1e65d:	83 ec 0c             	sub    $0xc,%esp
   1e660:	ff 74 24 18          	pushl  0x18(%esp)
   1e664:	e8 9d fb ff ff       	call   1e206 <send_break>
   1e669:	83 c4 10             	add    $0x10,%esp
			}
			return 0;
   1e66c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e671:	e9 6c 03 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 开始/停止流控制。如果参数arg是TCOOFF（Terminal Control Output OFF），则挂起输出；如果是TCOON，则恢复挂起的输出。在挂
		// 起或恢复输出同时需要把写队列中的字符输出，以加快用户交互响应速度。如果arg是TCIOFF（Terminal Control Input ON），则挂起
		// 输入；如果是TCION，则重新开启挂起的输入。
		case TCXONC:
			switch (arg) {
   1e676:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e67a:	83 f8 01             	cmp    $0x1,%eax
   1e67d:	74 49                	je     1e6c8 <tty_ioctl+0x1c9>
   1e67f:	83 f8 01             	cmp    $0x1,%eax
   1e682:	7f 09                	jg     1e68d <tty_ioctl+0x18e>
   1e684:	85 c0                	test   %eax,%eax
   1e686:	74 18                	je     1e6a0 <tty_ioctl+0x1a1>
   1e688:	e9 03 01 00 00       	jmp    1e790 <tty_ioctl+0x291>
   1e68d:	83 f8 02             	cmp    $0x2,%eax
   1e690:	74 5e                	je     1e6f0 <tty_ioctl+0x1f1>
   1e692:	83 f8 03             	cmp    $0x3,%eax
   1e695:	0f 84 a5 00 00 00    	je     1e740 <tty_ioctl+0x241>
   1e69b:	e9 f0 00 00 00       	jmp    1e790 <tty_ioctl+0x291>
			case TCOOFF:
				tty->stopped = 1;       					// 停止终端输出。
   1e6a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6a4:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);        					// 写缓冲队列输出。
   1e6ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6af:	8b 40 30             	mov    0x30(%eax),%eax
   1e6b2:	83 ec 0c             	sub    $0xc,%esp
   1e6b5:	ff 74 24 18          	pushl  0x18(%esp)
   1e6b9:	ff d0                	call   *%eax
   1e6bb:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e6be:	b8 00 00 00 00       	mov    $0x0,%eax
   1e6c3:	e9 1a 03 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			case TCOON:
				tty->stopped = 0;       					// 恢复终端输出。
   1e6c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6cc:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   1e6d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6d7:	8b 40 30             	mov    0x30(%eax),%eax
   1e6da:	83 ec 0c             	sub    $0xc,%esp
   1e6dd:	ff 74 24 18          	pushl  0x18(%esp)
   1e6e1:	ff d0                	call   *%eax
   1e6e3:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e6e6:	b8 00 00 00 00       	mov    $0x0,%eax
   1e6eb:	e9 f2 02 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			// 如果参数arg是TCIOFF，表示要求终端停止输入，于是我们往终端写队列放入STOP字符。当终端收到该字符时就会暂停输入。如果参数是
			// TCION，表示发送一个START字符，让终端恢复传输。STOP_CHAR(tty)字义为((tty)->termios.c_cc[VSTOP])，即取终端termios
			// 结构控制字符数组对应项值。若内核定义了_POSIX_VDISABLE(\0)，那么当某一项等于_POSIX_VDISABLE的值时，表示禁止使用相应的
			// 特殊字符。因此这里直接判断该值是否为0来确定要不要把停止控制字符放入终端写队列中。以下同。
			case TCIOFF:
				if (STOP_CHAR(tty))
   1e6f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6f4:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1e6f8:	84 c0                	test   %al,%al
   1e6fa:	74 3a                	je     1e736 <tty_ioctl+0x237>
					PUTCH(STOP_CHAR(tty), tty->write_q);
   1e6fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e700:	0f b6 48 1a          	movzbl 0x1a(%eax),%ecx
   1e704:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e708:	8b 50 38             	mov    0x38(%eax),%edx
   1e70b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e70f:	8b 40 38             	mov    0x38(%eax),%eax
   1e712:	8b 40 04             	mov    0x4(%eax),%eax
   1e715:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e719:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e71d:	8b 40 38             	mov    0x38(%eax),%eax
   1e720:	8b 40 04             	mov    0x4(%eax),%eax
   1e723:	8d 50 01             	lea    0x1(%eax),%edx
   1e726:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e72a:	8b 40 38             	mov    0x38(%eax),%eax
   1e72d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e733:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e736:	b8 00 00 00 00       	mov    $0x0,%eax
   1e73b:	e9 a2 02 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			case TCION:
				if (START_CHAR(tty))
   1e740:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e744:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1e748:	84 c0                	test   %al,%al
   1e74a:	74 3a                	je     1e786 <tty_ioctl+0x287>
					PUTCH(START_CHAR(tty), tty->write_q);
   1e74c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e750:	0f b6 48 19          	movzbl 0x19(%eax),%ecx
   1e754:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e758:	8b 50 38             	mov    0x38(%eax),%edx
   1e75b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e75f:	8b 40 38             	mov    0x38(%eax),%eax
   1e762:	8b 40 04             	mov    0x4(%eax),%eax
   1e765:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e769:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e76d:	8b 40 38             	mov    0x38(%eax),%eax
   1e770:	8b 40 04             	mov    0x4(%eax),%eax
   1e773:	8d 50 01             	lea    0x1(%eax),%edx
   1e776:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e77a:	8b 40 38             	mov    0x38(%eax),%eax
   1e77d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e783:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e786:	b8 00 00 00 00       	mov    $0x0,%eax
   1e78b:	e9 52 02 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			}
			return -EINVAL; 								/* not implemented */
   1e790:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e795:	e9 48 02 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 刷新已写输出但还没有发送、或已接收但还没有读的数据。如果参数arg是0，则刷新（清空）输入队列；如果是1，则刷新输出队列；如果
		// 2，则刷新输入和输出队列。
		case TCFLSH:
			if (arg == 0)
   1e79a:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e79f:	75 15                	jne    1e7b6 <tty_ioctl+0x2b7>
				flush(tty->read_q);
   1e7a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7a5:	8b 40 34             	mov    0x34(%eax),%eax
   1e7a8:	83 ec 0c             	sub    $0xc,%esp
   1e7ab:	50                   	push   %eax
   1e7ac:	e8 41 fa ff ff       	call   1e1f2 <flush>
   1e7b1:	83 c4 10             	add    $0x10,%esp
   1e7b4:	eb 55                	jmp    1e80b <tty_ioctl+0x30c>
			else if (arg == 1)
   1e7b6:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e7bb:	75 15                	jne    1e7d2 <tty_ioctl+0x2d3>
				flush(tty->write_q);
   1e7bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7c1:	8b 40 38             	mov    0x38(%eax),%eax
   1e7c4:	83 ec 0c             	sub    $0xc,%esp
   1e7c7:	50                   	push   %eax
   1e7c8:	e8 25 fa ff ff       	call   1e1f2 <flush>
   1e7cd:	83 c4 10             	add    $0x10,%esp
   1e7d0:	eb 39                	jmp    1e80b <tty_ioctl+0x30c>
			else if (arg == 2) {
   1e7d2:	83 7c 24 28 02       	cmpl   $0x2,0x28(%esp)
   1e7d7:	75 28                	jne    1e801 <tty_ioctl+0x302>
				flush(tty->read_q);
   1e7d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7dd:	8b 40 34             	mov    0x34(%eax),%eax
   1e7e0:	83 ec 0c             	sub    $0xc,%esp
   1e7e3:	50                   	push   %eax
   1e7e4:	e8 09 fa ff ff       	call   1e1f2 <flush>
   1e7e9:	83 c4 10             	add    $0x10,%esp
				flush(tty->write_q);
   1e7ec:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7f0:	8b 40 38             	mov    0x38(%eax),%eax
   1e7f3:	83 ec 0c             	sub    $0xc,%esp
   1e7f6:	50                   	push   %eax
   1e7f7:	e8 f6 f9 ff ff       	call   1e1f2 <flush>
   1e7fc:	83 c4 10             	add    $0x10,%esp
   1e7ff:	eb 0a                	jmp    1e80b <tty_ioctl+0x30c>
			} else
				return -EINVAL;
   1e801:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e806:	e9 d7 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			return 0;
   1e80b:	b8 00 00 00 00       	mov    $0x0,%eax
   1e810:	e9 cd 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置终端串行线路专用模式。
		case TIOCEXCL:
			return -EINVAL; 							/* not implemented */   /* 未实现 */
   1e815:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e81a:	e9 c3 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 复位终端串行线路专用模式。
		case TIOCNXCL:
			return -EINVAL; 							/* not implemented */
   1e81f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e824:	e9 b9 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置tty为控制终端。（TIOCNOTTY - 不要控制终端）。
		case TIOCSCTTY:
			return -EINVAL; 							/* set controlling term NI */
   1e829:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e82e:	e9 af 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 读取终端进程组号（即读取前台进程组号）。首先验证用户缓冲区长度，然后复制终端tty的pgrp字段到用户缓冲区。此时参数arg是用户
		// 缓冲区指针。
		case TIOCGPGRP:
			verify_area((void *) arg, 4);            	// 实现库函数tcgetpgrp()。
   1e833:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e837:	83 ec 08             	sub    $0x8,%esp
   1e83a:	6a 04                	push   $0x4
   1e83c:	50                   	push   %eax
   1e83d:	e8 5d 9b fe ff       	call   839f <verify_area>
   1e842:	83 c4 10             	add    $0x10,%esp
			put_fs_long(tty->pgrp, (unsigned long *) arg);
   1e845:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e849:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e84d:	8b 52 24             	mov    0x24(%edx),%edx
   1e850:	83 ec 08             	sub    $0x8,%esp
   1e853:	50                   	push   %eax
   1e854:	52                   	push   %edx
   1e855:	e8 07 f9 ff ff       	call   1e161 <put_fs_long>
   1e85a:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e85d:	b8 00 00 00 00       	mov    $0x0,%eax
   1e862:	e9 7b 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e867:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e86c:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e872:	85 c0                	test   %eax,%eax
   1e874:	78 27                	js     1e89d <tty_ioctl+0x39e>
			    (current->tty != dev) ||
   1e876:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e87b:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
			if ((current->tty < 0) ||
   1e881:	39 44 24 20          	cmp    %eax,0x20(%esp)
   1e885:	75 16                	jne    1e89d <tty_ioctl+0x39e>
			    (tty->session != current->session))
   1e887:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e88b:	8b 50 28             	mov    0x28(%eax),%edx
   1e88e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e893:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
			    (current->tty != dev) ||
   1e899:	39 c2                	cmp    %eax,%edx
   1e89b:	74 0a                	je     1e8a7 <tty_ioctl+0x3a8>
				return -ENOTTY;
   1e89d:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1e8a2:	e9 3b 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			// 然后我们就从用户缓冲区中取得欲设置的进程号，并对该组号的有效性进行验证。如果组号pgrp小于0,则返回无效组号错误信息；如果pgrp
			// 的会话号与当前进程的不同，则返回许可错误信息。否则我们可以设置终端进程组号为pgrp。此时pgrp成为前台进程组。
			pgrp = get_fs_long((unsigned long *) arg);
   1e8a7:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8ab:	83 ec 0c             	sub    $0xc,%esp
   1e8ae:	50                   	push   %eax
   1e8af:	e8 7d f8 ff ff       	call   1e131 <get_fs_long>
   1e8b4:	83 c4 10             	add    $0x10,%esp
   1e8b7:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (pgrp < 0)
   1e8bb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1e8c0:	79 0a                	jns    1e8cc <tty_ioctl+0x3cd>
				return -EINVAL;
   1e8c2:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e8c7:	e9 16 01 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			if (session_of_pgrp(pgrp) != current->session)
   1e8cc:	83 ec 0c             	sub    $0xc,%esp
   1e8cf:	ff 74 24 14          	pushl  0x14(%esp)
   1e8d3:	e8 eb c1 fe ff       	call   aac3 <session_of_pgrp>
   1e8d8:	83 c4 10             	add    $0x10,%esp
   1e8db:	89 c2                	mov    %eax,%edx
   1e8dd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1e8e2:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
   1e8e8:	39 c2                	cmp    %eax,%edx
   1e8ea:	74 0a                	je     1e8f6 <tty_ioctl+0x3f7>
				return -EPERM;
   1e8ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1e8f1:	e9 ec 00 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
			tty->pgrp = pgrp;
   1e8f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e8fa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e8fe:	89 50 24             	mov    %edx,0x24(%eax)
			return 0;
   1e901:	b8 00 00 00 00       	mov    $0x0,%eax
   1e906:	e9 d7 00 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 返回输出队列中还未送出的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCOUTQ:
			verify_area((void *) arg, 4);
   1e90b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e90f:	83 ec 08             	sub    $0x8,%esp
   1e912:	6a 04                	push   $0x4
   1e914:	50                   	push   %eax
   1e915:	e8 85 9a fe ff       	call   839f <verify_area>
   1e91a:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->write_q), (unsigned long *) arg);
   1e91d:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e921:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e925:	8b 52 38             	mov    0x38(%edx),%edx
   1e928:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e92b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e92f:	8b 52 38             	mov    0x38(%edx),%edx
   1e932:	8b 52 08             	mov    0x8(%edx),%edx
   1e935:	29 d1                	sub    %edx,%ecx
   1e937:	89 ca                	mov    %ecx,%edx
   1e939:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e93f:	83 ec 08             	sub    $0x8,%esp
   1e942:	50                   	push   %eax
   1e943:	52                   	push   %edx
   1e944:	e8 18 f8 ff ff       	call   1e161 <put_fs_long>
   1e949:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e94c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e951:	e9 8c 00 00 00       	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 返回输入队列中还未读取的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCINQ:
			verify_area((void *) arg, 4);
   1e956:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e95a:	83 ec 08             	sub    $0x8,%esp
   1e95d:	6a 04                	push   $0x4
   1e95f:	50                   	push   %eax
   1e960:	e8 3a 9a fe ff       	call   839f <verify_area>
   1e965:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->secondary),
   1e968:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e96c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e970:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e973:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e976:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e97a:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e97d:	8b 52 08             	mov    0x8(%edx),%edx
   1e980:	29 d1                	sub    %edx,%ecx
   1e982:	89 ca                	mov    %ecx,%edx
   1e984:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e98a:	83 ec 08             	sub    $0x8,%esp
   1e98d:	50                   	push   %eax
   1e98e:	52                   	push   %edx
   1e98f:	e8 cd f7 ff ff       	call   1e161 <put_fs_long>
   1e994:	83 c4 10             	add    $0x10,%esp
				(unsigned long *) arg);
			return 0;
   1e997:	b8 00 00 00 00       	mov    $0x0,%eax
   1e99c:	eb 44                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 模拟终端输入操作。该命令以一个指向字符的指针作为参数，并假设该字符是在终端上键入的。用户终须在该控制终端上具有超级
		// 用户权限或具有读许可权限。
		case TIOCSTI:
			return -EINVAL; 							/* not implemented */
   1e99e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9a3:	eb 3d                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 读取终端设备窗口大小信息（参见termios.h中的winsize结构）。
		case TIOCGWINSZ:
			return -EINVAL; 							/* not implemented */
   1e9a5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9aa:	eb 36                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置终端设备窗口大小信息（参见winsize结构）。
		case TIOCSWINSZ:
			return -EINVAL; 							/* not implemented */
   1e9ac:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9b1:	eb 2f                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 返回MODEM状态控制引线的当前状态位标志集（参见termios.h）。
		case TIOCMGET:
			return -EINVAL; 							/* not implemented */
   1e9b3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9b8:	eb 28                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置单个modem状态控制引线的状态（true或false）。
		case TIOCMBIS:
			return -EINVAL; 							/* not implemented */
   1e9ba:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9bf:	eb 21                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 复位ujwhMODEM状态控制引线的状态。
		case TIOCMBIC:
			return -EINVAL; 							/* not implemented */
   1e9c1:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9c6:	eb 1a                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置MODEM状态引线的状态。如果某一位置位，则modem对应的状态引线将为有效。
		case TIOCMSET:
			return -EINVAL; 							/* not implemented */
   1e9c8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9cd:	eb 13                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 读取软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCGSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e9cf:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9d4:	eb 0c                	jmp    1e9e2 <tty_ioctl+0x4e3>
		// 设置软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCSSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e9d6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e9db:	eb 05                	jmp    1e9e2 <tty_ioctl+0x4e3>
		default:
			return -EINVAL;
   1e9dd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
        }
}
   1e9e2:	83 c4 1c             	add    $0x1c,%esp
   1e9e5:	c3                   	ret    

0001e9e6 <pty_copy>:
#include <asm/io.h>

// 伪终端写函数。
// 参数：from - 源伪终端结构；to - 目的伪终端结构。
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
   1e9e6:	83 ec 1c             	sub    $0x1c,%esp
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1e9e9:	e9 e9 00 00 00       	jmp    1ead7 <pty_copy+0xf1>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
   1e9ee:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9f2:	8b 40 34             	mov    0x34(%eax),%eax
   1e9f5:	8b 50 08             	mov    0x8(%eax),%edx
   1e9f8:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9fc:	8b 40 34             	mov    0x34(%eax),%eax
   1e9ff:	8b 40 04             	mov    0x4(%eax),%eax
   1ea02:	29 c2                	sub    %eax,%edx
   1ea04:	89 d0                	mov    %edx,%eax
   1ea06:	83 e8 01             	sub    $0x1,%eax
   1ea09:	25 ff 03 00 00       	and    $0x3ff,%eax
   1ea0e:	85 c0                	test   %eax,%eax
   1ea10:	75 3c                	jne    1ea4e <pty_copy+0x68>
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
   1ea12:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea16:	8b 40 3c             	mov    0x3c(%eax),%eax
   1ea19:	8b 50 08             	mov    0x8(%eax),%edx
   1ea1c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea20:	8b 40 3c             	mov    0x3c(%eax),%eax
   1ea23:	8b 40 04             	mov    0x4(%eax),%eax
   1ea26:	29 c2                	sub    %eax,%edx
   1ea28:	89 d0                	mov    %edx,%eax
   1ea2a:	83 e8 01             	sub    $0x1,%eax
   1ea2d:	25 ff 03 00 00       	and    $0x3ff,%eax
   1ea32:	85 c0                	test   %eax,%eax
   1ea34:	0f 84 c6 00 00 00    	je     1eb00 <pty_copy+0x11a>
				break;
			copy_to_cooked(to);     						// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1ea3a:	83 ec 0c             	sub    $0xc,%esp
   1ea3d:	ff 74 24 30          	pushl  0x30(%esp)
   1ea41:	e8 77 a1 ff ff       	call   18bbd <copy_to_cooked>
   1ea46:	83 c4 10             	add    $0x10,%esp
			continue;
   1ea49:	e9 89 00 00 00       	jmp    1ead7 <pty_copy+0xf1>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
   1ea4e:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea52:	8b 50 38             	mov    0x38(%eax),%edx
   1ea55:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea59:	8b 40 38             	mov    0x38(%eax),%eax
   1ea5c:	8b 40 08             	mov    0x8(%eax),%eax
   1ea5f:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1ea64:	88 44 24 0f          	mov    %al,0xf(%esp)
   1ea68:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea6c:	8b 40 38             	mov    0x38(%eax),%eax
   1ea6f:	8b 40 08             	mov    0x8(%eax),%eax
   1ea72:	8d 50 01             	lea    0x1(%eax),%edx
   1ea75:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea79:	8b 40 38             	mov    0x38(%eax),%eax
   1ea7c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea82:	89 50 08             	mov    %edx,0x8(%eax)
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
   1ea85:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea89:	8b 50 34             	mov    0x34(%eax),%edx
   1ea8c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea90:	8b 40 34             	mov    0x34(%eax),%eax
   1ea93:	8b 40 04             	mov    0x4(%eax),%eax
   1ea96:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1ea9b:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1ea9f:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eaa3:	8b 40 34             	mov    0x34(%eax),%eax
   1eaa6:	8b 40 04             	mov    0x4(%eax),%eax
   1eaa9:	8d 50 01             	lea    0x1(%eax),%edx
   1eaac:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eab0:	8b 40 34             	mov    0x34(%eax),%eax
   1eab3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1eab9:	89 50 04             	mov    %edx,0x4(%eax)
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
   1eabc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1eac1:	8b 50 0c             	mov    0xc(%eax),%edx
   1eac4:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1eac9:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1eacf:	f7 d0                	not    %eax
   1ead1:	21 d0                	and    %edx,%eax
   1ead3:	85 c0                	test   %eax,%eax
   1ead5:	75 2c                	jne    1eb03 <pty_copy+0x11d>
	while (!from->stopped && !EMPTY(from->write_q)) {
   1ead7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eadb:	8b 40 2c             	mov    0x2c(%eax),%eax
   1eade:	85 c0                	test   %eax,%eax
   1eae0:	75 22                	jne    1eb04 <pty_copy+0x11e>
   1eae2:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eae6:	8b 40 38             	mov    0x38(%eax),%eax
   1eae9:	8b 50 04             	mov    0x4(%eax),%edx
   1eaec:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eaf0:	8b 40 38             	mov    0x38(%eax),%eax
   1eaf3:	8b 40 08             	mov    0x8(%eax),%eax
   1eaf6:	39 c2                	cmp    %eax,%edx
   1eaf8:	0f 85 f0 fe ff ff    	jne    1e9ee <pty_copy+0x8>
   1eafe:	eb 04                	jmp    1eb04 <pty_copy+0x11e>
				break;
   1eb00:	90                   	nop
   1eb01:	eb 01                	jmp    1eb04 <pty_copy+0x11e>
			break;
   1eb03:	90                   	nop
	}
	copy_to_cooked(to);     								// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1eb04:	83 ec 0c             	sub    $0xc,%esp
   1eb07:	ff 74 24 30          	pushl  0x30(%esp)
   1eb0b:	e8 ad a0 ff ff       	call   18bbd <copy_to_cooked>
   1eb10:	83 c4 10             	add    $0x10,%esp
	wake_up(&from->write_q->proc_list);     				// 唤醒等待源终端写队列的进程，如果有。
   1eb13:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb17:	8b 40 38             	mov    0x38(%eax),%eax
   1eb1a:	83 c0 0c             	add    $0xc,%eax
   1eb1d:	83 ec 0c             	sub    $0xc,%esp
   1eb20:	50                   	push   %eax
   1eb21:	e8 27 86 fe ff       	call   714d <wake_up>
   1eb26:	83 c4 10             	add    $0x10,%esp
}
   1eb29:	90                   	nop
   1eb2a:	83 c4 1c             	add    $0x1c,%esp
   1eb2d:	c3                   	ret    

0001eb2e <mpty_write>:
 * 这个函数被调用时，tty_write函数已经把一些字符放到写队列write_queue中。它将复制这些输入到它的从伪终端的
 * 输出队列中。
 */
// 主伪终端写函数。
void mpty_write(struct tty_struct * tty)
{
   1eb2e:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1eb31:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb35:	ba 20 28 04 00       	mov    $0x42820,%edx
   1eb3a:	29 d0                	sub    %edx,%eax
   1eb3c:	c1 f8 06             	sar    $0x6,%eax
   1eb3f:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
   1eb43:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eb47:	c1 f8 06             	sar    $0x6,%eax
   1eb4a:	83 f8 02             	cmp    $0x2,%eax
   1eb4d:	74 12                	je     1eb61 <mpty_write+0x33>
		printk("bad mpty\n\r");
   1eb4f:	83 ec 0c             	sub    $0xc,%esp
   1eb52:	68 20 51 02 00       	push   $0x25120
   1eb57:	e8 ea a0 fe ff       	call   8c46 <printk>
   1eb5c:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
}
   1eb5f:	eb 19                	jmp    1eb7a <mpty_write+0x4c>
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
   1eb61:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb65:	05 00 10 00 00       	add    $0x1000,%eax
   1eb6a:	83 ec 08             	sub    $0x8,%esp
   1eb6d:	50                   	push   %eax
   1eb6e:	ff 74 24 2c          	pushl  0x2c(%esp)
   1eb72:	e8 6f fe ff ff       	call   1e9e6 <pty_copy>
   1eb77:	83 c4 10             	add    $0x10,%esp
}
   1eb7a:	90                   	nop
   1eb7b:	83 c4 1c             	add    $0x1c,%esp
   1eb7e:	c3                   	ret    

0001eb7f <spty_write>:

// 从伪终端写函数。
void spty_write(struct tty_struct * tty)
{
   1eb7f:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1eb82:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb86:	ba 20 28 04 00       	mov    $0x42820,%edx
   1eb8b:	29 d0                	sub    %edx,%eax
   1eb8d:	c1 f8 06             	sar    $0x6,%eax
   1eb90:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
   1eb94:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eb98:	c1 f8 06             	sar    $0x6,%eax
   1eb9b:	83 f8 03             	cmp    $0x3,%eax
   1eb9e:	74 12                	je     1ebb2 <spty_write+0x33>
		printk("bad spty\n\r");
   1eba0:	83 ec 0c             	sub    $0xc,%esp
   1eba3:	68 2b 51 02 00       	push   $0x2512b
   1eba8:	e8 99 a0 fe ff       	call   8c46 <printk>
   1ebad:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
}
   1ebb0:	eb 19                	jmp    1ebcb <spty_write+0x4c>
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
   1ebb2:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ebb6:	2d 00 10 00 00       	sub    $0x1000,%eax
   1ebbb:	83 ec 08             	sub    $0x8,%esp
   1ebbe:	50                   	push   %eax
   1ebbf:	ff 74 24 2c          	pushl  0x2c(%esp)
   1ebc3:	e8 1e fe ff ff       	call   1e9e6 <pty_copy>
   1ebc8:	83 c4 10             	add    $0x10,%esp
}
   1ebcb:	90                   	nop
   1ebcc:	83 c4 1c             	add    $0x1c,%esp
   1ebcf:	c3                   	ret    

0001ebd0 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   1ebd0:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1ebd3:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ebd7:	64 66 8b 00          	mov    %fs:(%eax),%ax
   1ebdb:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1ebe0:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1ebe5:	83 c4 10             	add    $0x10,%esp
   1ebe8:	c3                   	ret    

0001ebe9 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1ebe9:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1ebec:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ebf0:	64 8b 00             	mov    %fs:(%eax),%eax
   1ebf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1ebf7:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1ebfb:	83 c4 10             	add    $0x10,%esp
   1ebfe:	c3                   	ret    

0001ebff <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   1ebff:	83 ec 04             	sub    $0x4,%esp
   1ec02:	8b 44 24 08          	mov    0x8(%esp),%eax
   1ec06:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ec0a:	0f b7 04 24          	movzwl (%esp),%eax
   1ec0e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ec12:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   1ec16:	90                   	nop
   1ec17:	83 c4 04             	add    $0x4,%esp
   1ec1a:	c3                   	ret    

0001ec1b <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ec1b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1ec1f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ec23:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1ec26:	90                   	nop
   1ec27:	c3                   	ret    

0001ec28 <do_emu>:
// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有则对状态字中忙标志B进行设置。然后把指令指针
// 保存起来，并取出代码指针EIP处的2字节浮点指令代码code。接着分析代码code，并根据其含义进行处理。针对不同代码类型值，Linus
// 使用了几个不同的switch程序块进行仿真处理。
// 参数是info结构指针。
static void do_emu(struct info * info)
{
   1ec28:	53                   	push   %ebx
   1ec29:	83 ec 28             	sub    $0x28,%esp
	char * address;

// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有就设置状态字中忙标志B（位15），否则复位B标
// 志。然后我们把指令指针保存起来。再看看执行本函数的代码是不是用户代码。如是不是，即调用者的代码段选择符不等于0x0f，则
// 说明内核中有代码使用了浮点指令。于是在显示出浮点指令处的CS、EIP值和信息“内核中需要数学仿真”后停机。
	if (I387.cwd & I387.swd & 0x3f)
   1ec2c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec31:	8b 90 18 04 00 00    	mov    0x418(%eax),%edx
   1ec37:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec3c:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1ec42:	21 d0                	and    %edx,%eax
   1ec44:	83 e0 3f             	and    $0x3f,%eax
   1ec47:	85 c0                	test   %eax,%eax
   1ec49:	74 1b                	je     1ec66 <do_emu+0x3e>
		I387.swd |= 0x8000;             // 设置忙标志B。
   1ec4b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec50:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1ec56:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec5b:	80 ce 80             	or     $0x80,%dh
   1ec5e:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
   1ec64:	eb 1c                	jmp    1ec82 <do_emu+0x5a>
	else
		I387.swd &= 0x7fff;             // 清忙标志B。
   1ec66:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec6b:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1ec71:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ec76:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
   1ec7c:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	ORIG_EIP = EIP;                         // 保存浮点指令指针。
   1ec82:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec86:	8b 50 38             	mov    0x38(%eax),%edx
   1ec89:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec8d:	89 50 04             	mov    %edx,0x4(%eax)
/* 0x0007 means user code space */
	if (CS != 0x000F) {                     // 不是用户代码则停机。
   1ec90:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec94:	83 c0 3c             	add    $0x3c,%eax
   1ec97:	0f b7 00             	movzwl (%eax),%eax
   1ec9a:	66 83 f8 0f          	cmp    $0xf,%ax
   1ec9e:	74 36                	je     1ecd6 <do_emu+0xae>
		printk("math_emulate: %04x:%08x\n\r",CS,EIP);
   1eca0:	8b 44 24 30          	mov    0x30(%esp),%eax
   1eca4:	8b 50 38             	mov    0x38(%eax),%edx
   1eca7:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecab:	83 c0 3c             	add    $0x3c,%eax
   1ecae:	0f b7 00             	movzwl (%eax),%eax
   1ecb1:	0f b7 c0             	movzwl %ax,%eax
   1ecb4:	83 ec 04             	sub    $0x4,%esp
   1ecb7:	52                   	push   %edx
   1ecb8:	50                   	push   %eax
   1ecb9:	68 38 51 02 00       	push   $0x25138
   1ecbe:	e8 83 9f fe ff       	call   8c46 <printk>
   1ecc3:	83 c4 10             	add    $0x10,%esp
		panic("Math emulation needed in kernel");
   1ecc6:	83 ec 0c             	sub    $0xc,%esp
   1ecc9:	68 54 51 02 00       	push   $0x25154
   1ecce:	e8 34 9f fe ff       	call   8c07 <panic>
   1ecd3:	83 c4 10             	add    $0x10,%esp
// 然后我们取出代码指针EIP处的2字节浮点指令代码code。由于Inter CPU存储数据时是“小头”（Little endian）在前的，此时取出
// 的代码正好与指令第1、第2字节顺序颠倒。因此我们需要交换一下code中两个字节的顺序。然后再屏蔽掉第1个代码字节中的ESC位（二
// 进制11011）。接着把浮点指令指针EIP保存到TSS段i387结构中的fip字段中，而CS保存到fcs字段中，同时把略微处理过的浮点指令
// 代码code放到fcs字段的高16位中。保存这些值是为了在出现仿真的处理器异常时程序可以像使用真实的协处理器一样进行处理。最后
// 让EIP指向随后的浮点指令或操作数。
	code = get_fs_word((unsigned short *) EIP);     // 取2字节的浮点指令或操作数。
   1ecd6:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecda:	8b 40 38             	mov    0x38(%eax),%eax
   1ecdd:	83 ec 0c             	sub    $0xc,%esp
   1ece0:	50                   	push   %eax
   1ece1:	e8 ea fe ff ff       	call   1ebd0 <get_fs_word>
   1ece6:	83 c4 10             	add    $0x10,%esp
   1ece9:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	bswapw(code);                                   // 交换高低字节。
   1ecee:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ecf3:	86 c4                	xchg   %al,%ah
   1ecf5:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	code &= 0x7ff;                                  // 屏蔽代码中的ESC码。
   1ecfa:	66 81 64 24 1e ff 07 	andw   $0x7ff,0x1e(%esp)
	I387.fip = EIP;                                 // 保存指令指针。
   1ed01:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ed06:	8b 54 24 30          	mov    0x30(%esp),%edx
   1ed0a:	8b 52 38             	mov    0x38(%edx),%edx
   1ed0d:	89 90 24 04 00 00    	mov    %edx,0x424(%eax)
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
   1ed13:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed17:	83 c0 3c             	add    $0x3c,%eax
   1ed1a:	8b 15 a0 f1 02 00    	mov    0x2f1a0,%edx
   1ed20:	81 c2 28 04 00 00    	add    $0x428,%edx
   1ed26:	0f b7 00             	movzwl (%eax),%eax
   1ed29:	66 89 02             	mov    %ax,(%edx)
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
   1ed2c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1ed31:	05 28 04 00 00       	add    $0x428,%eax
   1ed36:	8d 50 02             	lea    0x2(%eax),%edx
   1ed39:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ed3e:	66 89 02             	mov    %ax,(%edx)
	EIP += 2;                                       // 指令指针指向下一个字节。
   1ed41:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed45:	8b 40 38             	mov    0x38(%eax),%eax
   1ed48:	8d 50 02             	lea    0x2(%eax),%edx
   1ed4b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed4f:	89 50 38             	mov    %edx,0x38(%eax)
        switch (code) {
   1ed52:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ed57:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ed5c:	0f 84 a6 02 00 00    	je     1f008 <do_emu+0x3e0>
   1ed62:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ed67:	0f 8f 97 00 00 00    	jg     1ee04 <do_emu+0x1dc>
   1ed6d:	3d e3 01 00 00       	cmp    $0x1e3,%eax
   1ed72:	7f 48                	jg     1edbc <do_emu+0x194>
   1ed74:	3d e2 01 00 00       	cmp    $0x1e2,%eax
   1ed79:	0f 8d 8c 01 00 00    	jge    1ef0b <do_emu+0x2e3>
   1ed7f:	3d d7 01 00 00       	cmp    $0x1d7,%eax
   1ed84:	7f 1b                	jg     1eda1 <do_emu+0x179>
   1ed86:	3d d1 01 00 00       	cmp    $0x1d1,%eax
   1ed8b:	0f 8d 2b 01 00 00    	jge    1eebc <do_emu+0x294>
   1ed91:	3d d0 01 00 00       	cmp    $0x1d0,%eax
   1ed96:	0f 84 e4 1b 00 00    	je     20980 <do_emu+0x1d58>
   1ed9c:	e9 51 04 00 00       	jmp    1f1f2 <do_emu+0x5ca>
   1eda1:	3d e0 01 00 00       	cmp    $0x1e0,%eax
   1eda6:	0f 84 21 01 00 00    	je     1eecd <do_emu+0x2a5>
   1edac:	3d e1 01 00 00       	cmp    $0x1e1,%eax
   1edb1:	0f 84 35 01 00 00    	je     1eeec <do_emu+0x2c4>
   1edb7:	e9 36 04 00 00       	jmp    1f1f2 <do_emu+0x5ca>
   1edbc:	3d e7 01 00 00       	cmp    $0x1e7,%eax
   1edc1:	7f 26                	jg     1ede9 <do_emu+0x1c1>
   1edc3:	3d e6 01 00 00       	cmp    $0x1e6,%eax
   1edc8:	0f 8d 8d 01 00 00    	jge    1ef5b <do_emu+0x333>
   1edce:	3d e4 01 00 00       	cmp    $0x1e4,%eax
   1edd3:	0f 84 43 01 00 00    	je     1ef1c <do_emu+0x2f4>
   1edd9:	3d e5 01 00 00       	cmp    $0x1e5,%eax
   1edde:	0f 84 56 01 00 00    	je     1ef3a <do_emu+0x312>
   1ede4:	e9 09 04 00 00       	jmp    1f1f2 <do_emu+0x5ca>
   1ede9:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1edee:	0f 84 ac 01 00 00    	je     1efa0 <do_emu+0x378>
   1edf4:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1edf9:	0f 8f d5 01 00 00    	jg     1efd4 <do_emu+0x3ac>
   1edff:	e9 68 01 00 00       	jmp    1ef6c <do_emu+0x344>
   1ee04:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1ee09:	0f 84 06 03 00 00    	je     1f115 <do_emu+0x4ed>
   1ee0f:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1ee14:	7f 48                	jg     1ee5e <do_emu+0x236>
   1ee16:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1ee1b:	0f 84 83 02 00 00    	je     1f0a4 <do_emu+0x47c>
   1ee21:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1ee26:	7f 1b                	jg     1ee43 <do_emu+0x21b>
   1ee28:	3d ec 01 00 00       	cmp    $0x1ec,%eax
   1ee2d:	0f 84 09 02 00 00    	je     1f03c <do_emu+0x414>
   1ee33:	3d ed 01 00 00       	cmp    $0x1ed,%eax
   1ee38:	0f 84 32 02 00 00    	je     1f070 <do_emu+0x448>
   1ee3e:	e9 af 03 00 00       	jmp    1f1f2 <do_emu+0x5ca>
   1ee43:	3d ef 01 00 00       	cmp    $0x1ef,%eax
   1ee48:	0f 84 8a 02 00 00    	je     1f0d8 <do_emu+0x4b0>
   1ee4e:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1ee53:	0f 8f 99 03 00 00    	jg     1f1f2 <do_emu+0x5ca>
   1ee59:	e9 8b 02 00 00       	jmp    1f0e9 <do_emu+0x4c1>
   1ee5e:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1ee63:	0f 84 05 03 00 00    	je     1f16e <do_emu+0x546>
   1ee69:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1ee6e:	7f 26                	jg     1ee96 <do_emu+0x26e>
   1ee70:	3d d0 03 00 00       	cmp    $0x3d0,%eax
   1ee75:	0f 8c 77 03 00 00    	jl     1f1f2 <do_emu+0x5ca>
   1ee7b:	3d d1 03 00 00       	cmp    $0x3d1,%eax
   1ee80:	0f 8e fd 1a 00 00    	jle    20983 <do_emu+0x1d5b>
   1ee86:	3d e2 03 00 00       	cmp    $0x3e2,%eax
   1ee8b:	0f 84 bc 02 00 00    	je     1f14d <do_emu+0x525>
   1ee91:	e9 5c 03 00 00       	jmp    1f1f2 <do_emu+0x5ca>
   1ee96:	3d d9 06 00 00       	cmp    $0x6d9,%eax
   1ee9b:	0f 84 ff 02 00 00    	je     1f1a0 <do_emu+0x578>
   1eea1:	3d e0 07 00 00       	cmp    $0x7e0,%eax
   1eea6:	0f 84 2c 03 00 00    	je     1f1d8 <do_emu+0x5b0>
   1eeac:	3d e4 03 00 00       	cmp    $0x3e4,%eax
   1eeb1:	0f 84 cf 1a 00 00    	je     20986 <do_emu+0x1d5e>
   1eeb7:	e9 36 03 00 00       	jmp    1f1f2 <do_emu+0x5ca>
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
		case 0x1d1: case 0x1d2: case 0x1d3:     // 无效指令代码。必信号，退出。
		case 0x1d4: case 0x1d5: case 0x1d6: case 0x1d7:
			math_abort(info,1<<(SIGILL-1));
   1eebc:	83 ec 08             	sub    $0x8,%esp
   1eebf:	6a 08                	push   $0x8
   1eec1:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eec5:	e8 26 1b 00 00       	call   209f0 <__math_abort>
   1eeca:	83 c4 10             	add    $0x10,%esp
		case 0x1e0:                     // FCHS - 改变ST符号位。即ST = -ST。
			ST(0).exponent ^= 0x8000;
   1eecd:	83 ec 0c             	sub    $0xc,%esp
   1eed0:	6a 00                	push   $0x0
   1eed2:	e8 78 1c 00 00       	call   20b4f <__st>
   1eed7:	83 c4 10             	add    $0x10,%esp
   1eeda:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1eede:	66 81 f2 00 80       	xor    $0x8000,%dx
   1eee3:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1eee7:	e9 9b 1a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1e1:                     // FABS - 取绝对值。即ST = |ST|。
			ST(0).exponent &= 0x7fff;
   1eeec:	83 ec 0c             	sub    $0xc,%esp
   1eeef:	6a 00                	push   $0x0
   1eef1:	e8 59 1c 00 00       	call   20b4f <__st>
   1eef6:	83 c4 10             	add    $0x10,%esp
   1eef9:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1eefd:	66 81 e2 ff 7f       	and    $0x7fff,%dx
   1ef02:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ef06:	e9 7c 1a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1e2: case 0x1e3:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1ef0b:	83 ec 08             	sub    $0x8,%esp
   1ef0e:	6a 08                	push   $0x8
   1ef10:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ef14:	e8 d7 1a 00 00       	call   209f0 <__math_abort>
   1ef19:	83 c4 10             	add    $0x10,%esp
		case 0x1e4:                     // FTST - 测试TS，同时设置状态字中Cn。
			ftst(PST(0));
   1ef1c:	83 ec 0c             	sub    $0xc,%esp
   1ef1f:	6a 00                	push   $0x0
   1ef21:	e8 29 1c 00 00       	call   20b4f <__st>
   1ef26:	83 c4 10             	add    $0x10,%esp
   1ef29:	83 ec 0c             	sub    $0xc,%esp
   1ef2c:	50                   	push   %eax
   1ef2d:	e8 5a 30 00 00       	call   21f8c <ftst>
   1ef32:	83 c4 10             	add    $0x10,%esp
			return;
   1ef35:	e9 4d 1a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1e5:                     // FXAM - 检查TS值，同时修改状态字中Cn。
			printk("fxam not implemented\n\r");     // 未实现。发信号退出。
   1ef3a:	83 ec 0c             	sub    $0xc,%esp
   1ef3d:	68 74 51 02 00       	push   $0x25174
   1ef42:	e8 ff 9c fe ff       	call   8c46 <printk>
   1ef47:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1ef4a:	83 ec 08             	sub    $0x8,%esp
   1ef4d:	6a 08                	push   $0x8
   1ef4f:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ef53:	e8 98 1a 00 00       	call   209f0 <__math_abort>
   1ef58:	83 c4 10             	add    $0x10,%esp
		case 0x1e6: case 0x1e7:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1ef5b:	83 ec 08             	sub    $0x8,%esp
   1ef5e:	6a 08                	push   $0x8
   1ef60:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ef64:	e8 87 1a 00 00       	call   209f0 <__math_abort>
   1ef69:	83 c4 10             	add    $0x10,%esp
		case 0x1e8:                     // FLD1 - 加载常数1.0到累加器ST。
			fpush();
   1ef6c:	e8 1a 1b 00 00       	call   20a8b <fpush>
			ST(0) = CONST1;
   1ef71:	83 ec 0c             	sub    $0xc,%esp
   1ef74:	6a 00                	push   $0x0
   1ef76:	e8 d4 1b 00 00       	call   20b4f <__st>
   1ef7b:	83 c4 10             	add    $0x10,%esp
   1ef7e:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1ef83:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1ef89:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1ef8f:	66 c7 40 06 00 80    	movw   $0x8000,0x6(%eax)
   1ef95:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1ef9b:	e9 e7 19 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1e9:                     // FLDL2T - 加载常数Log2(10)到累加器ST。
			fpush();
   1efa0:	e8 e6 1a 00 00       	call   20a8b <fpush>
			ST(0) = CONSTL2T;
   1efa5:	83 ec 0c             	sub    $0xc,%esp
   1efa8:	6a 00                	push   $0x0
   1efaa:	e8 a0 1b 00 00       	call   20b4f <__st>
   1efaf:	83 c4 10             	add    $0x10,%esp
   1efb2:	66 c7 00 fe 8a       	movw   $0x8afe,(%eax)
   1efb7:	66 c7 40 02 1b cd    	movw   $0xcd1b,0x2(%eax)
   1efbd:	66 c7 40 04 4b 78    	movw   $0x784b,0x4(%eax)
   1efc3:	66 c7 40 06 9a d4    	movw   $0xd49a,0x6(%eax)
   1efc9:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1efcf:	e9 b3 19 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1ea:                     // FLDL2E - 加载常数Log2(e)到累加器ST。
			fpush();
   1efd4:	e8 b2 1a 00 00       	call   20a8b <fpush>
			ST(0) = CONSTL2E;
   1efd9:	83 ec 0c             	sub    $0xc,%esp
   1efdc:	6a 00                	push   $0x0
   1efde:	e8 6c 1b 00 00       	call   20b4f <__st>
   1efe3:	83 c4 10             	add    $0x10,%esp
   1efe6:	66 c7 00 bc f0       	movw   $0xf0bc,(%eax)
   1efeb:	66 c7 40 02 17 5c    	movw   $0x5c17,0x2(%eax)
   1eff1:	66 c7 40 04 29 3b    	movw   $0x3b29,0x4(%eax)
   1eff7:	66 c7 40 06 aa b8    	movw   $0xb8aa,0x6(%eax)
   1effd:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1f003:	e9 7f 19 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1eb:                     // FLDPI - 加载常数Pi到累加器ST。
			fpush();
   1f008:	e8 7e 1a 00 00       	call   20a8b <fpush>
			ST(0) = CONSTPI;
   1f00d:	83 ec 0c             	sub    $0xc,%esp
   1f010:	6a 00                	push   $0x0
   1f012:	e8 38 1b 00 00       	call   20b4f <__st>
   1f017:	83 c4 10             	add    $0x10,%esp
   1f01a:	66 c7 00 35 c2       	movw   $0xc235,(%eax)
   1f01f:	66 c7 40 02 68 21    	movw   $0x2168,0x2(%eax)
   1f025:	66 c7 40 04 a2 da    	movw   $0xdaa2,0x4(%eax)
   1f02b:	66 c7 40 06 0f c9    	movw   $0xc90f,0x6(%eax)
   1f031:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1f037:	e9 4b 19 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1ec:                     // FLDLG2 - 加载常数Log10(2)到累加器ST。
			fpush();
   1f03c:	e8 4a 1a 00 00       	call   20a8b <fpush>
			ST(0) = CONSTLG2;
   1f041:	83 ec 0c             	sub    $0xc,%esp
   1f044:	6a 00                	push   $0x0
   1f046:	e8 04 1b 00 00       	call   20b4f <__st>
   1f04b:	83 c4 10             	add    $0x10,%esp
   1f04e:	66 c7 00 99 f7       	movw   $0xf799,(%eax)
   1f053:	66 c7 40 02 cf fb    	movw   $0xfbcf,0x2(%eax)
   1f059:	66 c7 40 04 84 9a    	movw   $0x9a84,0x4(%eax)
   1f05f:	66 c7 40 06 20 9a    	movw   $0x9a20,0x6(%eax)
   1f065:	66 c7 40 08 fd 3f    	movw   $0x3ffd,0x8(%eax)
			return;
   1f06b:	e9 17 19 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1ed:                     // FLDLN2 - 加载常数Loge(2)到累加器ST。
			fpush();
   1f070:	e8 16 1a 00 00       	call   20a8b <fpush>
			ST(0) = CONSTLN2;
   1f075:	83 ec 0c             	sub    $0xc,%esp
   1f078:	6a 00                	push   $0x0
   1f07a:	e8 d0 1a 00 00       	call   20b4f <__st>
   1f07f:	83 c4 10             	add    $0x10,%esp
   1f082:	66 c7 00 ac 79       	movw   $0x79ac,(%eax)
   1f087:	66 c7 40 02 cf d1    	movw   $0xd1cf,0x2(%eax)
   1f08d:	66 c7 40 04 f7 17    	movw   $0x17f7,0x4(%eax)
   1f093:	66 c7 40 06 72 b1    	movw   $0xb172,0x6(%eax)
   1f099:	66 c7 40 08 fe 3f    	movw   $0x3ffe,0x8(%eax)
			return;
   1f09f:	e9 e3 18 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1ee:                     // FLDZ - 加载常数0.0到累加器ST。
			fpush();
   1f0a4:	e8 e2 19 00 00       	call   20a8b <fpush>
			ST(0) = CONSTZ;
   1f0a9:	83 ec 0c             	sub    $0xc,%esp
   1f0ac:	6a 00                	push   $0x0
   1f0ae:	e8 9c 1a 00 00       	call   20b4f <__st>
   1f0b3:	83 c4 10             	add    $0x10,%esp
   1f0b6:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1f0bb:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1f0c1:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1f0c7:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
   1f0cd:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
			return;
   1f0d3:	e9 af 18 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1ef:                     // 无效和未实现仿真指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1f0d8:	83 ec 08             	sub    $0x8,%esp
   1f0db:	6a 08                	push   $0x8
   1f0dd:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f0e1:	e8 0a 19 00 00       	call   209f0 <__math_abort>
   1f0e6:	83 c4 10             	add    $0x10,%esp
		case 0x1f0: case 0x1f1: case 0x1f2: case 0x1f3:
		case 0x1f4: case 0x1f5: case 0x1f6: case 0x1f7:
		case 0x1f8: case 0x1f9: case 0x1fa: case 0x1fb:
		case 0x1fc: case 0x1fd: case 0x1fe: case 0x1ff:
			printk("%04x fxxx not implemented\n\r",code + 0xc800);
   1f0e9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f0ee:	05 00 c8 00 00       	add    $0xc800,%eax
   1f0f3:	83 ec 08             	sub    $0x8,%esp
   1f0f6:	50                   	push   %eax
   1f0f7:	68 8b 51 02 00       	push   $0x2518b
   1f0fc:	e8 45 9b fe ff       	call   8c46 <printk>
   1f101:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1f104:	83 ec 08             	sub    $0x8,%esp
   1f107:	6a 08                	push   $0x8
   1f109:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f10d:	e8 de 18 00 00       	call   209f0 <__math_abort>
   1f112:	83 c4 10             	add    $0x10,%esp
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
   1f115:	83 ec 0c             	sub    $0xc,%esp
   1f118:	6a 00                	push   $0x0
   1f11a:	e8 30 1a 00 00       	call   20b4f <__st>
   1f11f:	83 c4 10             	add    $0x10,%esp
   1f122:	89 c3                	mov    %eax,%ebx
   1f124:	83 ec 0c             	sub    $0xc,%esp
   1f127:	6a 01                	push   $0x1
   1f129:	e8 21 1a 00 00       	call   20b4f <__st>
   1f12e:	83 c4 10             	add    $0x10,%esp
   1f131:	83 ec 08             	sub    $0x8,%esp
   1f134:	53                   	push   %ebx
   1f135:	50                   	push   %eax
   1f136:	e8 46 2f 00 00       	call   22081 <fucom>
   1f13b:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f13e:	e8 da 18 00 00       	call   20a1d <fpop>
   1f143:	e8 d5 18 00 00       	call   20a1d <fpop>
			return;
   1f148:	e9 3a 18 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
		case 0x3e2:                     // FCLEX - 清状态字中异常标志。
			I387.swd &= 0x7f00;
   1f14d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f152:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1f158:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f15d:	81 e2 00 7f 00 00    	and    $0x7f00,%edx
   1f163:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
			return;
   1f169:	e9 19 18 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x3e3:                     // FINIT - 初始化协处理器。
			I387.cwd = 0x037f;
   1f16e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f173:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   1f17a:	03 00 00 
			I387.swd = 0x0000;
   1f17d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f182:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   1f189:	00 00 00 
			I387.twd = 0x0000;
   1f18c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f191:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   1f198:	00 00 00 
			return;
   1f19b:	e9 e7 17 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x3e4:                     // FNOP - 对80387。
			return;
		case 0x6d9:                     // FCOMPP - ST(i)与ST比较，出栈操作两次。
			fcom(PST(1),PST(0));
   1f1a0:	83 ec 0c             	sub    $0xc,%esp
   1f1a3:	6a 00                	push   $0x0
   1f1a5:	e8 a5 19 00 00       	call   20b4f <__st>
   1f1aa:	83 c4 10             	add    $0x10,%esp
   1f1ad:	89 c3                	mov    %eax,%ebx
   1f1af:	83 ec 0c             	sub    $0xc,%esp
   1f1b2:	6a 01                	push   $0x1
   1f1b4:	e8 96 19 00 00       	call   20b4f <__st>
   1f1b9:	83 c4 10             	add    $0x10,%esp
   1f1bc:	83 ec 08             	sub    $0x8,%esp
   1f1bf:	53                   	push   %ebx
   1f1c0:	50                   	push   %eax
   1f1c1:	e8 64 2e 00 00       	call   2202a <fcom>
   1f1c6:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f1c9:	e8 4f 18 00 00       	call   20a1d <fpop>
   1f1ce:	e8 4a 18 00 00       	call   20a1d <fpop>
			return;
   1f1d3:	e9 af 17 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x7e0:                     // FSTSW AX - 保存当前状态字到AX寄存器中。
			*(short *) &EAX = I387.swd;
   1f1d8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   1f1dd:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   1f1e3:	8b 44 24 30          	mov    0x30(%esp),%eax
   1f1e7:	83 c0 18             	add    $0x18,%eax
   1f1ea:	66 89 10             	mov    %dx,(%eax)
			return;
   1f1ed:	e9 95 17 00 00       	jmp    20987 <do_emu+0x1d5f>
	}
// 下面开始处理第2字节最后3位是REG的指令。即11011,XXXXXXXX，REG形式的代码。
	switch (code >> 3) {
   1f1f2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f1f7:	66 c1 e8 03          	shr    $0x3,%ax
   1f1fb:	0f b7 c0             	movzwl %ax,%eax
   1f1fe:	83 e8 18             	sub    $0x18,%eax
   1f201:	3d e3 00 00 00       	cmp    $0xe3,%eax
   1f206:	0f 87 c3 0d 00 00    	ja     1ffcf <do_emu+0x13a7>
   1f20c:	8b 04 85 14 52 02 00 	mov    0x25214(,%eax,4),%eax
   1f213:	ff e0                	jmp    *%eax
		case 0x18:                      // FADD ST, ST(i)。
			fadd(PST(0),PST(code & 7),&tmp);
   1f215:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f21a:	83 e0 07             	and    $0x7,%eax
   1f21d:	83 ec 0c             	sub    $0xc,%esp
   1f220:	50                   	push   %eax
   1f221:	e8 29 19 00 00       	call   20b4f <__st>
   1f226:	83 c4 10             	add    $0x10,%esp
   1f229:	89 c3                	mov    %eax,%ebx
   1f22b:	83 ec 0c             	sub    $0xc,%esp
   1f22e:	6a 00                	push   $0x0
   1f230:	e8 1a 19 00 00       	call   20b4f <__st>
   1f235:	83 c4 10             	add    $0x10,%esp
   1f238:	89 c2                	mov    %eax,%edx
   1f23a:	83 ec 04             	sub    $0x4,%esp
   1f23d:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f241:	50                   	push   %eax
   1f242:	53                   	push   %ebx
   1f243:	52                   	push   %edx
   1f244:	e8 09 26 00 00       	call   21852 <fadd>
   1f249:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f24c:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f250:	83 ec 0c             	sub    $0xc,%esp
   1f253:	6a 00                	push   $0x0
   1f255:	e8 f5 18 00 00       	call   20b4f <__st>
   1f25a:	83 c4 10             	add    $0x10,%esp
   1f25d:	89 c1                	mov    %eax,%ecx
   1f25f:	8b 03                	mov    (%ebx),%eax
   1f261:	8b 53 04             	mov    0x4(%ebx),%edx
   1f264:	89 01                	mov    %eax,(%ecx)
   1f266:	89 51 04             	mov    %edx,0x4(%ecx)
   1f269:	83 ec 0c             	sub    $0xc,%esp
   1f26c:	6a 00                	push   $0x0
   1f26e:	e8 dc 18 00 00       	call   20b4f <__st>
   1f273:	83 c4 10             	add    $0x10,%esp
   1f276:	89 c2                	mov    %eax,%edx
   1f278:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f27d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f281:	e9 01 17 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x19:                      // FMUL ST, ST(i)。
			fmul(PST(0),PST(code & 7),&tmp);
   1f286:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f28b:	83 e0 07             	and    $0x7,%eax
   1f28e:	83 ec 0c             	sub    $0xc,%esp
   1f291:	50                   	push   %eax
   1f292:	e8 b8 18 00 00       	call   20b4f <__st>
   1f297:	83 c4 10             	add    $0x10,%esp
   1f29a:	89 c3                	mov    %eax,%ebx
   1f29c:	83 ec 0c             	sub    $0xc,%esp
   1f29f:	6a 00                	push   $0x0
   1f2a1:	e8 a9 18 00 00       	call   20b4f <__st>
   1f2a6:	83 c4 10             	add    $0x10,%esp
   1f2a9:	89 c2                	mov    %eax,%edx
   1f2ab:	83 ec 04             	sub    $0x4,%esp
   1f2ae:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f2b2:	50                   	push   %eax
   1f2b3:	53                   	push   %ebx
   1f2b4:	52                   	push   %edx
   1f2b5:	e8 62 27 00 00       	call   21a1c <fmul>
   1f2ba:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f2bd:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f2c1:	83 ec 0c             	sub    $0xc,%esp
   1f2c4:	6a 00                	push   $0x0
   1f2c6:	e8 84 18 00 00       	call   20b4f <__st>
   1f2cb:	83 c4 10             	add    $0x10,%esp
   1f2ce:	89 c1                	mov    %eax,%ecx
   1f2d0:	8b 03                	mov    (%ebx),%eax
   1f2d2:	8b 53 04             	mov    0x4(%ebx),%edx
   1f2d5:	89 01                	mov    %eax,(%ecx)
   1f2d7:	89 51 04             	mov    %edx,0x4(%ecx)
   1f2da:	83 ec 0c             	sub    $0xc,%esp
   1f2dd:	6a 00                	push   $0x0
   1f2df:	e8 6b 18 00 00       	call   20b4f <__st>
   1f2e4:	83 c4 10             	add    $0x10,%esp
   1f2e7:	89 c2                	mov    %eax,%edx
   1f2e9:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f2ee:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f2f2:	e9 90 16 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1a:                      // FCOM ST(i)。
			fcom(PST(code & 7),&tmp);
   1f2f7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f2fc:	83 e0 07             	and    $0x7,%eax
   1f2ff:	83 ec 0c             	sub    $0xc,%esp
   1f302:	50                   	push   %eax
   1f303:	e8 47 18 00 00       	call   20b4f <__st>
   1f308:	83 c4 10             	add    $0x10,%esp
   1f30b:	89 c2                	mov    %eax,%edx
   1f30d:	83 ec 08             	sub    $0x8,%esp
   1f310:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f314:	50                   	push   %eax
   1f315:	52                   	push   %edx
   1f316:	e8 0f 2d 00 00       	call   2202a <fcom>
   1f31b:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f31e:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f322:	83 ec 0c             	sub    $0xc,%esp
   1f325:	6a 00                	push   $0x0
   1f327:	e8 23 18 00 00       	call   20b4f <__st>
   1f32c:	83 c4 10             	add    $0x10,%esp
   1f32f:	89 c1                	mov    %eax,%ecx
   1f331:	8b 03                	mov    (%ebx),%eax
   1f333:	8b 53 04             	mov    0x4(%ebx),%edx
   1f336:	89 01                	mov    %eax,(%ecx)
   1f338:	89 51 04             	mov    %edx,0x4(%ecx)
   1f33b:	83 ec 0c             	sub    $0xc,%esp
   1f33e:	6a 00                	push   $0x0
   1f340:	e8 0a 18 00 00       	call   20b4f <__st>
   1f345:	83 c4 10             	add    $0x10,%esp
   1f348:	89 c2                	mov    %eax,%edx
   1f34a:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f34f:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f353:	e9 2f 16 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),&tmp);
   1f358:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f35d:	83 e0 07             	and    $0x7,%eax
   1f360:	83 ec 0c             	sub    $0xc,%esp
   1f363:	50                   	push   %eax
   1f364:	e8 e6 17 00 00       	call   20b4f <__st>
   1f369:	83 c4 10             	add    $0x10,%esp
   1f36c:	89 c2                	mov    %eax,%edx
   1f36e:	83 ec 08             	sub    $0x8,%esp
   1f371:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f375:	50                   	push   %eax
   1f376:	52                   	push   %edx
   1f377:	e8 ae 2c 00 00       	call   2202a <fcom>
   1f37c:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f37f:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f383:	83 ec 0c             	sub    $0xc,%esp
   1f386:	6a 00                	push   $0x0
   1f388:	e8 c2 17 00 00       	call   20b4f <__st>
   1f38d:	83 c4 10             	add    $0x10,%esp
   1f390:	89 c1                	mov    %eax,%ecx
   1f392:	8b 03                	mov    (%ebx),%eax
   1f394:	8b 53 04             	mov    0x4(%ebx),%edx
   1f397:	89 01                	mov    %eax,(%ecx)
   1f399:	89 51 04             	mov    %edx,0x4(%ecx)
   1f39c:	83 ec 0c             	sub    $0xc,%esp
   1f39f:	6a 00                	push   $0x0
   1f3a1:	e8 a9 17 00 00       	call   20b4f <__st>
   1f3a6:	83 c4 10             	add    $0x10,%esp
   1f3a9:	89 c2                	mov    %eax,%edx
   1f3ab:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f3b0:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1f3b4:	e8 64 16 00 00       	call   20a1d <fpop>
			return;
   1f3b9:	e9 c9 15 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1c:                      // FSUB ST, ST(i)。
			real_to_real(&ST(code & 7),&tmp);
   1f3be:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f3c3:	83 e0 07             	and    $0x7,%eax
   1f3c6:	83 ec 0c             	sub    $0xc,%esp
   1f3c9:	50                   	push   %eax
   1f3ca:	e8 80 17 00 00       	call   20b4f <__st>
   1f3cf:	83 c4 10             	add    $0x10,%esp
   1f3d2:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1f3d6:	8b 50 04             	mov    0x4(%eax),%edx
   1f3d9:	8b 00                	mov    (%eax),%eax
   1f3db:	89 01                	mov    %eax,(%ecx)
   1f3dd:	89 51 04             	mov    %edx,0x4(%ecx)
   1f3e0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f3e5:	83 e0 07             	and    $0x7,%eax
   1f3e8:	83 ec 0c             	sub    $0xc,%esp
   1f3eb:	50                   	push   %eax
   1f3ec:	e8 5e 17 00 00       	call   20b4f <__st>
   1f3f1:	83 c4 10             	add    $0x10,%esp
   1f3f4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f3f8:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f3fd:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f402:	66 35 00 80          	xor    $0x8000,%ax
   1f406:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(0),&tmp,&tmp);
   1f40b:	83 ec 0c             	sub    $0xc,%esp
   1f40e:	6a 00                	push   $0x0
   1f410:	e8 3a 17 00 00       	call   20b4f <__st>
   1f415:	83 c4 10             	add    $0x10,%esp
   1f418:	89 c2                	mov    %eax,%edx
   1f41a:	83 ec 04             	sub    $0x4,%esp
   1f41d:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f421:	50                   	push   %eax
   1f422:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f426:	50                   	push   %eax
   1f427:	52                   	push   %edx
   1f428:	e8 25 24 00 00       	call   21852 <fadd>
   1f42d:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f430:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f434:	83 ec 0c             	sub    $0xc,%esp
   1f437:	6a 00                	push   $0x0
   1f439:	e8 11 17 00 00       	call   20b4f <__st>
   1f43e:	83 c4 10             	add    $0x10,%esp
   1f441:	89 c1                	mov    %eax,%ecx
   1f443:	8b 03                	mov    (%ebx),%eax
   1f445:	8b 53 04             	mov    0x4(%ebx),%edx
   1f448:	89 01                	mov    %eax,(%ecx)
   1f44a:	89 51 04             	mov    %edx,0x4(%ecx)
   1f44d:	83 ec 0c             	sub    $0xc,%esp
   1f450:	6a 00                	push   $0x0
   1f452:	e8 f8 16 00 00       	call   20b4f <__st>
   1f457:	83 c4 10             	add    $0x10,%esp
   1f45a:	89 c2                	mov    %eax,%edx
   1f45c:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f461:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f465:	e9 1d 15 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1d:                      // FSUBR ST, ST(i)。
			ST(0).exponent ^= 0x8000;
   1f46a:	83 ec 0c             	sub    $0xc,%esp
   1f46d:	6a 00                	push   $0x0
   1f46f:	e8 db 16 00 00       	call   20b4f <__st>
   1f474:	83 c4 10             	add    $0x10,%esp
   1f477:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f47b:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f480:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f484:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f489:	83 e0 07             	and    $0x7,%eax
   1f48c:	83 ec 0c             	sub    $0xc,%esp
   1f48f:	50                   	push   %eax
   1f490:	e8 ba 16 00 00       	call   20b4f <__st>
   1f495:	83 c4 10             	add    $0x10,%esp
   1f498:	89 c3                	mov    %eax,%ebx
   1f49a:	83 ec 0c             	sub    $0xc,%esp
   1f49d:	6a 00                	push   $0x0
   1f49f:	e8 ab 16 00 00       	call   20b4f <__st>
   1f4a4:	83 c4 10             	add    $0x10,%esp
   1f4a7:	89 c2                	mov    %eax,%edx
   1f4a9:	83 ec 04             	sub    $0x4,%esp
   1f4ac:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f4b0:	50                   	push   %eax
   1f4b1:	53                   	push   %ebx
   1f4b2:	52                   	push   %edx
   1f4b3:	e8 9a 23 00 00       	call   21852 <fadd>
   1f4b8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f4bb:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f4bf:	83 ec 0c             	sub    $0xc,%esp
   1f4c2:	6a 00                	push   $0x0
   1f4c4:	e8 86 16 00 00       	call   20b4f <__st>
   1f4c9:	83 c4 10             	add    $0x10,%esp
   1f4cc:	89 c1                	mov    %eax,%ecx
   1f4ce:	8b 03                	mov    (%ebx),%eax
   1f4d0:	8b 53 04             	mov    0x4(%ebx),%edx
   1f4d3:	89 01                	mov    %eax,(%ecx)
   1f4d5:	89 51 04             	mov    %edx,0x4(%ecx)
   1f4d8:	83 ec 0c             	sub    $0xc,%esp
   1f4db:	6a 00                	push   $0x0
   1f4dd:	e8 6d 16 00 00       	call   20b4f <__st>
   1f4e2:	83 c4 10             	add    $0x10,%esp
   1f4e5:	89 c2                	mov    %eax,%edx
   1f4e7:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f4ec:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f4f0:	e9 92 14 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1e:                      // FDIV ST, ST(i)。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f4f5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f4fa:	83 e0 07             	and    $0x7,%eax
   1f4fd:	83 ec 0c             	sub    $0xc,%esp
   1f500:	50                   	push   %eax
   1f501:	e8 49 16 00 00       	call   20b4f <__st>
   1f506:	83 c4 10             	add    $0x10,%esp
   1f509:	89 c3                	mov    %eax,%ebx
   1f50b:	83 ec 0c             	sub    $0xc,%esp
   1f50e:	6a 00                	push   $0x0
   1f510:	e8 3a 16 00 00       	call   20b4f <__st>
   1f515:	83 c4 10             	add    $0x10,%esp
   1f518:	89 c2                	mov    %eax,%edx
   1f51a:	83 ec 04             	sub    $0x4,%esp
   1f51d:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f521:	50                   	push   %eax
   1f522:	53                   	push   %ebx
   1f523:	52                   	push   %edx
   1f524:	e8 80 27 00 00       	call   21ca9 <fdiv>
   1f529:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f52c:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f530:	83 ec 0c             	sub    $0xc,%esp
   1f533:	6a 00                	push   $0x0
   1f535:	e8 15 16 00 00       	call   20b4f <__st>
   1f53a:	83 c4 10             	add    $0x10,%esp
   1f53d:	89 c1                	mov    %eax,%ecx
   1f53f:	8b 03                	mov    (%ebx),%eax
   1f541:	8b 53 04             	mov    0x4(%ebx),%edx
   1f544:	89 01                	mov    %eax,(%ecx)
   1f546:	89 51 04             	mov    %edx,0x4(%ecx)
   1f549:	83 ec 0c             	sub    $0xc,%esp
   1f54c:	6a 00                	push   $0x0
   1f54e:	e8 fc 15 00 00       	call   20b4f <__st>
   1f553:	83 c4 10             	add    $0x10,%esp
   1f556:	89 c2                	mov    %eax,%edx
   1f558:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f55d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f561:	e9 21 14 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x1f:                      // FDIVR ST, ST(i)。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f566:	83 ec 0c             	sub    $0xc,%esp
   1f569:	6a 00                	push   $0x0
   1f56b:	e8 df 15 00 00       	call   20b4f <__st>
   1f570:	83 c4 10             	add    $0x10,%esp
   1f573:	89 c3                	mov    %eax,%ebx
   1f575:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f57a:	83 e0 07             	and    $0x7,%eax
   1f57d:	83 ec 0c             	sub    $0xc,%esp
   1f580:	50                   	push   %eax
   1f581:	e8 c9 15 00 00       	call   20b4f <__st>
   1f586:	83 c4 10             	add    $0x10,%esp
   1f589:	89 c2                	mov    %eax,%edx
   1f58b:	83 ec 04             	sub    $0x4,%esp
   1f58e:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f592:	50                   	push   %eax
   1f593:	53                   	push   %ebx
   1f594:	52                   	push   %edx
   1f595:	e8 0f 27 00 00       	call   21ca9 <fdiv>
   1f59a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f59d:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f5a1:	83 ec 0c             	sub    $0xc,%esp
   1f5a4:	6a 00                	push   $0x0
   1f5a6:	e8 a4 15 00 00       	call   20b4f <__st>
   1f5ab:	83 c4 10             	add    $0x10,%esp
   1f5ae:	89 c1                	mov    %eax,%ecx
   1f5b0:	8b 03                	mov    (%ebx),%eax
   1f5b2:	8b 53 04             	mov    0x4(%ebx),%edx
   1f5b5:	89 01                	mov    %eax,(%ecx)
   1f5b7:	89 51 04             	mov    %edx,0x4(%ecx)
   1f5ba:	83 ec 0c             	sub    $0xc,%esp
   1f5bd:	6a 00                	push   $0x0
   1f5bf:	e8 8b 15 00 00       	call   20b4f <__st>
   1f5c4:	83 c4 10             	add    $0x10,%esp
   1f5c7:	89 c2                	mov    %eax,%edx
   1f5c9:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f5ce:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f5d2:	e9 b0 13 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x38:                      // FLD ST(i)。
			fpush();
   1f5d7:	e8 af 14 00 00       	call   20a8b <fpush>
			ST(0) = ST((code & 7)+1);
   1f5dc:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f5e1:	83 e0 07             	and    $0x7,%eax
   1f5e4:	83 c0 01             	add    $0x1,%eax
   1f5e7:	83 ec 0c             	sub    $0xc,%esp
   1f5ea:	50                   	push   %eax
   1f5eb:	e8 5f 15 00 00       	call   20b4f <__st>
   1f5f0:	83 c4 10             	add    $0x10,%esp
   1f5f3:	89 c3                	mov    %eax,%ebx
   1f5f5:	83 ec 0c             	sub    $0xc,%esp
   1f5f8:	6a 00                	push   $0x0
   1f5fa:	e8 50 15 00 00       	call   20b4f <__st>
   1f5ff:	83 c4 10             	add    $0x10,%esp
   1f602:	8b 13                	mov    (%ebx),%edx
   1f604:	89 10                	mov    %edx,(%eax)
   1f606:	8b 53 04             	mov    0x4(%ebx),%edx
   1f609:	89 50 04             	mov    %edx,0x4(%eax)
   1f60c:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1f610:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1f614:	e9 6e 13 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x39:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1f619:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f61e:	83 e0 07             	and    $0x7,%eax
   1f621:	83 ec 0c             	sub    $0xc,%esp
   1f624:	50                   	push   %eax
   1f625:	e8 25 15 00 00       	call   20b4f <__st>
   1f62a:	83 c4 10             	add    $0x10,%esp
   1f62d:	89 c3                	mov    %eax,%ebx
   1f62f:	83 ec 0c             	sub    $0xc,%esp
   1f632:	6a 00                	push   $0x0
   1f634:	e8 16 15 00 00       	call   20b4f <__st>
   1f639:	83 c4 10             	add    $0x10,%esp
   1f63c:	83 ec 08             	sub    $0x8,%esp
   1f63f:	53                   	push   %ebx
   1f640:	50                   	push   %eax
   1f641:	e8 b3 14 00 00       	call   20af9 <fxchg>
   1f646:	83 c4 10             	add    $0x10,%esp
			return;
   1f649:	e9 39 13 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x3b:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1f64e:	83 ec 0c             	sub    $0xc,%esp
   1f651:	6a 00                	push   $0x0
   1f653:	e8 f7 14 00 00       	call   20b4f <__st>
   1f658:	83 c4 10             	add    $0x10,%esp
   1f65b:	89 c3                	mov    %eax,%ebx
   1f65d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f662:	83 e0 07             	and    $0x7,%eax
   1f665:	83 ec 0c             	sub    $0xc,%esp
   1f668:	50                   	push   %eax
   1f669:	e8 e1 14 00 00       	call   20b4f <__st>
   1f66e:	83 c4 10             	add    $0x10,%esp
   1f671:	8b 13                	mov    (%ebx),%edx
   1f673:	89 10                	mov    %edx,(%eax)
   1f675:	8b 53 04             	mov    0x4(%ebx),%edx
   1f678:	89 50 04             	mov    %edx,0x4(%eax)
   1f67b:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1f67f:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1f683:	e8 95 13 00 00       	call   20a1d <fpop>
			return;
   1f688:	e9 fa 12 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x98:                      // FADD ST(i)， ST。
			fadd(PST(0),PST(code & 7),&tmp);
   1f68d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f692:	83 e0 07             	and    $0x7,%eax
   1f695:	83 ec 0c             	sub    $0xc,%esp
   1f698:	50                   	push   %eax
   1f699:	e8 b1 14 00 00       	call   20b4f <__st>
   1f69e:	83 c4 10             	add    $0x10,%esp
   1f6a1:	89 c3                	mov    %eax,%ebx
   1f6a3:	83 ec 0c             	sub    $0xc,%esp
   1f6a6:	6a 00                	push   $0x0
   1f6a8:	e8 a2 14 00 00       	call   20b4f <__st>
   1f6ad:	83 c4 10             	add    $0x10,%esp
   1f6b0:	89 c2                	mov    %eax,%edx
   1f6b2:	83 ec 04             	sub    $0x4,%esp
   1f6b5:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f6b9:	50                   	push   %eax
   1f6ba:	53                   	push   %ebx
   1f6bb:	52                   	push   %edx
   1f6bc:	e8 91 21 00 00       	call   21852 <fadd>
   1f6c1:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f6c4:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f6c8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6cd:	83 e0 07             	and    $0x7,%eax
   1f6d0:	83 ec 0c             	sub    $0xc,%esp
   1f6d3:	50                   	push   %eax
   1f6d4:	e8 76 14 00 00       	call   20b4f <__st>
   1f6d9:	83 c4 10             	add    $0x10,%esp
   1f6dc:	89 c1                	mov    %eax,%ecx
   1f6de:	8b 03                	mov    (%ebx),%eax
   1f6e0:	8b 53 04             	mov    0x4(%ebx),%edx
   1f6e3:	89 01                	mov    %eax,(%ecx)
   1f6e5:	89 51 04             	mov    %edx,0x4(%ecx)
   1f6e8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6ed:	83 e0 07             	and    $0x7,%eax
   1f6f0:	83 ec 0c             	sub    $0xc,%esp
   1f6f3:	50                   	push   %eax
   1f6f4:	e8 56 14 00 00       	call   20b4f <__st>
   1f6f9:	83 c4 10             	add    $0x10,%esp
   1f6fc:	89 c2                	mov    %eax,%edx
   1f6fe:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f703:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f707:	e9 7b 12 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x99:                      // FMUL ST(i)， ST。
			fmul(PST(0),PST(code & 7),&tmp);
   1f70c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f711:	83 e0 07             	and    $0x7,%eax
   1f714:	83 ec 0c             	sub    $0xc,%esp
   1f717:	50                   	push   %eax
   1f718:	e8 32 14 00 00       	call   20b4f <__st>
   1f71d:	83 c4 10             	add    $0x10,%esp
   1f720:	89 c3                	mov    %eax,%ebx
   1f722:	83 ec 0c             	sub    $0xc,%esp
   1f725:	6a 00                	push   $0x0
   1f727:	e8 23 14 00 00       	call   20b4f <__st>
   1f72c:	83 c4 10             	add    $0x10,%esp
   1f72f:	89 c2                	mov    %eax,%edx
   1f731:	83 ec 04             	sub    $0x4,%esp
   1f734:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f738:	50                   	push   %eax
   1f739:	53                   	push   %ebx
   1f73a:	52                   	push   %edx
   1f73b:	e8 dc 22 00 00       	call   21a1c <fmul>
   1f740:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f743:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f747:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f74c:	83 e0 07             	and    $0x7,%eax
   1f74f:	83 ec 0c             	sub    $0xc,%esp
   1f752:	50                   	push   %eax
   1f753:	e8 f7 13 00 00       	call   20b4f <__st>
   1f758:	83 c4 10             	add    $0x10,%esp
   1f75b:	89 c1                	mov    %eax,%ecx
   1f75d:	8b 03                	mov    (%ebx),%eax
   1f75f:	8b 53 04             	mov    0x4(%ebx),%edx
   1f762:	89 01                	mov    %eax,(%ecx)
   1f764:	89 51 04             	mov    %edx,0x4(%ecx)
   1f767:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f76c:	83 e0 07             	and    $0x7,%eax
   1f76f:	83 ec 0c             	sub    $0xc,%esp
   1f772:	50                   	push   %eax
   1f773:	e8 d7 13 00 00       	call   20b4f <__st>
   1f778:	83 c4 10             	add    $0x10,%esp
   1f77b:	89 c2                	mov    %eax,%edx
   1f77d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f782:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f786:	e9 fc 11 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9a:                      // FCOM ST(i)。
			fcom(PST(code & 7),PST(0));
   1f78b:	83 ec 0c             	sub    $0xc,%esp
   1f78e:	6a 00                	push   $0x0
   1f790:	e8 ba 13 00 00       	call   20b4f <__st>
   1f795:	83 c4 10             	add    $0x10,%esp
   1f798:	89 c3                	mov    %eax,%ebx
   1f79a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f79f:	83 e0 07             	and    $0x7,%eax
   1f7a2:	83 ec 0c             	sub    $0xc,%esp
   1f7a5:	50                   	push   %eax
   1f7a6:	e8 a4 13 00 00       	call   20b4f <__st>
   1f7ab:	83 c4 10             	add    $0x10,%esp
   1f7ae:	83 ec 08             	sub    $0x8,%esp
   1f7b1:	53                   	push   %ebx
   1f7b2:	50                   	push   %eax
   1f7b3:	e8 72 28 00 00       	call   2202a <fcom>
   1f7b8:	83 c4 10             	add    $0x10,%esp
			return;
   1f7bb:	e9 c7 11 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1f7c0:	83 ec 0c             	sub    $0xc,%esp
   1f7c3:	6a 00                	push   $0x0
   1f7c5:	e8 85 13 00 00       	call   20b4f <__st>
   1f7ca:	83 c4 10             	add    $0x10,%esp
   1f7cd:	89 c3                	mov    %eax,%ebx
   1f7cf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7d4:	83 e0 07             	and    $0x7,%eax
   1f7d7:	83 ec 0c             	sub    $0xc,%esp
   1f7da:	50                   	push   %eax
   1f7db:	e8 6f 13 00 00       	call   20b4f <__st>
   1f7e0:	83 c4 10             	add    $0x10,%esp
   1f7e3:	83 ec 08             	sub    $0x8,%esp
   1f7e6:	53                   	push   %ebx
   1f7e7:	50                   	push   %eax
   1f7e8:	e8 3d 28 00 00       	call   2202a <fcom>
   1f7ed:	83 c4 10             	add    $0x10,%esp
			fpop();
   1f7f0:	e8 28 12 00 00       	call   20a1d <fpop>
			return;			
   1f7f5:	e9 8d 11 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9c:                      // FSUBR ST(i), ST。
			ST(code & 7).exponent ^= 0x8000;
   1f7fa:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7ff:	83 e0 07             	and    $0x7,%eax
   1f802:	83 ec 0c             	sub    $0xc,%esp
   1f805:	50                   	push   %eax
   1f806:	e8 44 13 00 00       	call   20b4f <__st>
   1f80b:	83 c4 10             	add    $0x10,%esp
   1f80e:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f812:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f817:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f81b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f820:	83 e0 07             	and    $0x7,%eax
   1f823:	83 ec 0c             	sub    $0xc,%esp
   1f826:	50                   	push   %eax
   1f827:	e8 23 13 00 00       	call   20b4f <__st>
   1f82c:	83 c4 10             	add    $0x10,%esp
   1f82f:	89 c3                	mov    %eax,%ebx
   1f831:	83 ec 0c             	sub    $0xc,%esp
   1f834:	6a 00                	push   $0x0
   1f836:	e8 14 13 00 00       	call   20b4f <__st>
   1f83b:	83 c4 10             	add    $0x10,%esp
   1f83e:	89 c2                	mov    %eax,%edx
   1f840:	83 ec 04             	sub    $0x4,%esp
   1f843:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f847:	50                   	push   %eax
   1f848:	53                   	push   %ebx
   1f849:	52                   	push   %edx
   1f84a:	e8 03 20 00 00       	call   21852 <fadd>
   1f84f:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f852:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f856:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f85b:	83 e0 07             	and    $0x7,%eax
   1f85e:	83 ec 0c             	sub    $0xc,%esp
   1f861:	50                   	push   %eax
   1f862:	e8 e8 12 00 00       	call   20b4f <__st>
   1f867:	83 c4 10             	add    $0x10,%esp
   1f86a:	89 c1                	mov    %eax,%ecx
   1f86c:	8b 03                	mov    (%ebx),%eax
   1f86e:	8b 53 04             	mov    0x4(%ebx),%edx
   1f871:	89 01                	mov    %eax,(%ecx)
   1f873:	89 51 04             	mov    %edx,0x4(%ecx)
   1f876:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f87b:	83 e0 07             	and    $0x7,%eax
   1f87e:	83 ec 0c             	sub    $0xc,%esp
   1f881:	50                   	push   %eax
   1f882:	e8 c8 12 00 00       	call   20b4f <__st>
   1f887:	83 c4 10             	add    $0x10,%esp
   1f88a:	89 c2                	mov    %eax,%edx
   1f88c:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f891:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f895:	e9 ed 10 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9d:                      // FSUB ST(i), ST。
			real_to_real(&ST(0),&tmp);
   1f89a:	83 ec 0c             	sub    $0xc,%esp
   1f89d:	6a 00                	push   $0x0
   1f89f:	e8 ab 12 00 00       	call   20b4f <__st>
   1f8a4:	83 c4 10             	add    $0x10,%esp
   1f8a7:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1f8ab:	8b 50 04             	mov    0x4(%eax),%edx
   1f8ae:	8b 00                	mov    (%eax),%eax
   1f8b0:	89 01                	mov    %eax,(%ecx)
   1f8b2:	89 51 04             	mov    %edx,0x4(%ecx)
   1f8b5:	83 ec 0c             	sub    $0xc,%esp
   1f8b8:	6a 00                	push   $0x0
   1f8ba:	e8 90 12 00 00       	call   20b4f <__st>
   1f8bf:	83 c4 10             	add    $0x10,%esp
   1f8c2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f8c6:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f8cb:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f8d0:	66 35 00 80          	xor    $0x8000,%ax
   1f8d4:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1f8d9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8de:	83 e0 07             	and    $0x7,%eax
   1f8e1:	83 ec 0c             	sub    $0xc,%esp
   1f8e4:	50                   	push   %eax
   1f8e5:	e8 65 12 00 00       	call   20b4f <__st>
   1f8ea:	83 c4 10             	add    $0x10,%esp
   1f8ed:	89 c2                	mov    %eax,%edx
   1f8ef:	83 ec 04             	sub    $0x4,%esp
   1f8f2:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f8f6:	50                   	push   %eax
   1f8f7:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f8fb:	50                   	push   %eax
   1f8fc:	52                   	push   %edx
   1f8fd:	e8 50 1f 00 00       	call   21852 <fadd>
   1f902:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f905:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f909:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f90e:	83 e0 07             	and    $0x7,%eax
   1f911:	83 ec 0c             	sub    $0xc,%esp
   1f914:	50                   	push   %eax
   1f915:	e8 35 12 00 00       	call   20b4f <__st>
   1f91a:	83 c4 10             	add    $0x10,%esp
   1f91d:	89 c1                	mov    %eax,%ecx
   1f91f:	8b 03                	mov    (%ebx),%eax
   1f921:	8b 53 04             	mov    0x4(%ebx),%edx
   1f924:	89 01                	mov    %eax,(%ecx)
   1f926:	89 51 04             	mov    %edx,0x4(%ecx)
   1f929:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f92e:	83 e0 07             	and    $0x7,%eax
   1f931:	83 ec 0c             	sub    $0xc,%esp
   1f934:	50                   	push   %eax
   1f935:	e8 15 12 00 00       	call   20b4f <__st>
   1f93a:	83 c4 10             	add    $0x10,%esp
   1f93d:	89 c2                	mov    %eax,%edx
   1f93f:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f944:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f948:	e9 3a 10 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9e:                      // FDIVR ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f94d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f952:	83 e0 07             	and    $0x7,%eax
   1f955:	83 ec 0c             	sub    $0xc,%esp
   1f958:	50                   	push   %eax
   1f959:	e8 f1 11 00 00       	call   20b4f <__st>
   1f95e:	83 c4 10             	add    $0x10,%esp
   1f961:	89 c3                	mov    %eax,%ebx
   1f963:	83 ec 0c             	sub    $0xc,%esp
   1f966:	6a 00                	push   $0x0
   1f968:	e8 e2 11 00 00       	call   20b4f <__st>
   1f96d:	83 c4 10             	add    $0x10,%esp
   1f970:	89 c2                	mov    %eax,%edx
   1f972:	83 ec 04             	sub    $0x4,%esp
   1f975:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f979:	50                   	push   %eax
   1f97a:	53                   	push   %ebx
   1f97b:	52                   	push   %edx
   1f97c:	e8 28 23 00 00       	call   21ca9 <fdiv>
   1f981:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f984:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f988:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f98d:	83 e0 07             	and    $0x7,%eax
   1f990:	83 ec 0c             	sub    $0xc,%esp
   1f993:	50                   	push   %eax
   1f994:	e8 b6 11 00 00       	call   20b4f <__st>
   1f999:	83 c4 10             	add    $0x10,%esp
   1f99c:	89 c1                	mov    %eax,%ecx
   1f99e:	8b 03                	mov    (%ebx),%eax
   1f9a0:	8b 53 04             	mov    0x4(%ebx),%edx
   1f9a3:	89 01                	mov    %eax,(%ecx)
   1f9a5:	89 51 04             	mov    %edx,0x4(%ecx)
   1f9a8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9ad:	83 e0 07             	and    $0x7,%eax
   1f9b0:	83 ec 0c             	sub    $0xc,%esp
   1f9b3:	50                   	push   %eax
   1f9b4:	e8 96 11 00 00       	call   20b4f <__st>
   1f9b9:	83 c4 10             	add    $0x10,%esp
   1f9bc:	89 c2                	mov    %eax,%edx
   1f9be:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f9c3:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f9c7:	e9 bb 0f 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x9f:                      // FDIV ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f9cc:	83 ec 0c             	sub    $0xc,%esp
   1f9cf:	6a 00                	push   $0x0
   1f9d1:	e8 79 11 00 00       	call   20b4f <__st>
   1f9d6:	83 c4 10             	add    $0x10,%esp
   1f9d9:	89 c3                	mov    %eax,%ebx
   1f9db:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9e0:	83 e0 07             	and    $0x7,%eax
   1f9e3:	83 ec 0c             	sub    $0xc,%esp
   1f9e6:	50                   	push   %eax
   1f9e7:	e8 63 11 00 00       	call   20b4f <__st>
   1f9ec:	83 c4 10             	add    $0x10,%esp
   1f9ef:	89 c2                	mov    %eax,%edx
   1f9f1:	83 ec 04             	sub    $0x4,%esp
   1f9f4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f9f8:	50                   	push   %eax
   1f9f9:	53                   	push   %ebx
   1f9fa:	52                   	push   %edx
   1f9fb:	e8 a9 22 00 00       	call   21ca9 <fdiv>
   1fa00:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fa03:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fa07:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa0c:	83 e0 07             	and    $0x7,%eax
   1fa0f:	83 ec 0c             	sub    $0xc,%esp
   1fa12:	50                   	push   %eax
   1fa13:	e8 37 11 00 00       	call   20b4f <__st>
   1fa18:	83 c4 10             	add    $0x10,%esp
   1fa1b:	89 c1                	mov    %eax,%ecx
   1fa1d:	8b 03                	mov    (%ebx),%eax
   1fa1f:	8b 53 04             	mov    0x4(%ebx),%edx
   1fa22:	89 01                	mov    %eax,(%ecx)
   1fa24:	89 51 04             	mov    %edx,0x4(%ecx)
   1fa27:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa2c:	83 e0 07             	and    $0x7,%eax
   1fa2f:	83 ec 0c             	sub    $0xc,%esp
   1fa32:	50                   	push   %eax
   1fa33:	e8 17 11 00 00       	call   20b4f <__st>
   1fa38:	83 c4 10             	add    $0x10,%esp
   1fa3b:	89 c2                	mov    %eax,%edx
   1fa3d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fa42:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1fa46:	e9 3c 0f 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xb8:                      // FFREE ST(i), ST。未实现。
			printk("ffree not implemented\n\r");
   1fa4b:	83 ec 0c             	sub    $0xc,%esp
   1fa4e:	68 a7 51 02 00       	push   $0x251a7
   1fa53:	e8 ee 91 fe ff       	call   8c46 <printk>
   1fa58:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1fa5b:	83 ec 08             	sub    $0x8,%esp
   1fa5e:	6a 08                	push   $0x8
   1fa60:	ff 74 24 3c          	pushl  0x3c(%esp)
   1fa64:	e8 87 0f 00 00       	call   209f0 <__math_abort>
   1fa69:	83 c4 10             	add    $0x10,%esp
		case 0xb9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1fa6c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa71:	83 e0 07             	and    $0x7,%eax
   1fa74:	83 ec 0c             	sub    $0xc,%esp
   1fa77:	50                   	push   %eax
   1fa78:	e8 d2 10 00 00       	call   20b4f <__st>
   1fa7d:	83 c4 10             	add    $0x10,%esp
   1fa80:	89 c3                	mov    %eax,%ebx
   1fa82:	83 ec 0c             	sub    $0xc,%esp
   1fa85:	6a 00                	push   $0x0
   1fa87:	e8 c3 10 00 00       	call   20b4f <__st>
   1fa8c:	83 c4 10             	add    $0x10,%esp
   1fa8f:	83 ec 08             	sub    $0x8,%esp
   1fa92:	53                   	push   %ebx
   1fa93:	50                   	push   %eax
   1fa94:	e8 60 10 00 00       	call   20af9 <fxchg>
   1fa99:	83 c4 10             	add    $0x10,%esp
			return;
   1fa9c:	e9 e6 0e 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xba:                      // FST ST(i)。
			ST(code & 7) = ST(0);
   1faa1:	83 ec 0c             	sub    $0xc,%esp
   1faa4:	6a 00                	push   $0x0
   1faa6:	e8 a4 10 00 00       	call   20b4f <__st>
   1faab:	83 c4 10             	add    $0x10,%esp
   1faae:	89 c3                	mov    %eax,%ebx
   1fab0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fab5:	83 e0 07             	and    $0x7,%eax
   1fab8:	83 ec 0c             	sub    $0xc,%esp
   1fabb:	50                   	push   %eax
   1fabc:	e8 8e 10 00 00       	call   20b4f <__st>
   1fac1:	83 c4 10             	add    $0x10,%esp
   1fac4:	8b 13                	mov    (%ebx),%edx
   1fac6:	89 10                	mov    %edx,(%eax)
   1fac8:	8b 53 04             	mov    0x4(%ebx),%edx
   1facb:	89 50 04             	mov    %edx,0x4(%eax)
   1face:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1fad2:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1fad6:	e9 ac 0e 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xbb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1fadb:	83 ec 0c             	sub    $0xc,%esp
   1fade:	6a 00                	push   $0x0
   1fae0:	e8 6a 10 00 00       	call   20b4f <__st>
   1fae5:	83 c4 10             	add    $0x10,%esp
   1fae8:	89 c3                	mov    %eax,%ebx
   1faea:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1faef:	83 e0 07             	and    $0x7,%eax
   1faf2:	83 ec 0c             	sub    $0xc,%esp
   1faf5:	50                   	push   %eax
   1faf6:	e8 54 10 00 00       	call   20b4f <__st>
   1fafb:	83 c4 10             	add    $0x10,%esp
   1fafe:	8b 13                	mov    (%ebx),%edx
   1fb00:	89 10                	mov    %edx,(%eax)
   1fb02:	8b 53 04             	mov    0x4(%ebx),%edx
   1fb05:	89 50 04             	mov    %edx,0x4(%eax)
   1fb08:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1fb0c:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1fb10:	e8 08 0f 00 00       	call   20a1d <fpop>
			return;
   1fb15:	e9 6d 0e 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xbc:                      // FUCOM ST(i)。
			fucom(PST(code & 7),PST(0));
   1fb1a:	83 ec 0c             	sub    $0xc,%esp
   1fb1d:	6a 00                	push   $0x0
   1fb1f:	e8 2b 10 00 00       	call   20b4f <__st>
   1fb24:	83 c4 10             	add    $0x10,%esp
   1fb27:	89 c3                	mov    %eax,%ebx
   1fb29:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb2e:	83 e0 07             	and    $0x7,%eax
   1fb31:	83 ec 0c             	sub    $0xc,%esp
   1fb34:	50                   	push   %eax
   1fb35:	e8 15 10 00 00       	call   20b4f <__st>
   1fb3a:	83 c4 10             	add    $0x10,%esp
   1fb3d:	83 ec 08             	sub    $0x8,%esp
   1fb40:	53                   	push   %ebx
   1fb41:	50                   	push   %eax
   1fb42:	e8 3a 25 00 00       	call   22081 <fucom>
   1fb47:	83 c4 10             	add    $0x10,%esp
			return;
   1fb4a:	e9 38 0e 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xbd:                      // FUCOMP ST(i)。
			fucom(PST(code & 7),PST(0));
   1fb4f:	83 ec 0c             	sub    $0xc,%esp
   1fb52:	6a 00                	push   $0x0
   1fb54:	e8 f6 0f 00 00       	call   20b4f <__st>
   1fb59:	83 c4 10             	add    $0x10,%esp
   1fb5c:	89 c3                	mov    %eax,%ebx
   1fb5e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb63:	83 e0 07             	and    $0x7,%eax
   1fb66:	83 ec 0c             	sub    $0xc,%esp
   1fb69:	50                   	push   %eax
   1fb6a:	e8 e0 0f 00 00       	call   20b4f <__st>
   1fb6f:	83 c4 10             	add    $0x10,%esp
   1fb72:	83 ec 08             	sub    $0x8,%esp
   1fb75:	53                   	push   %ebx
   1fb76:	50                   	push   %eax
   1fb77:	e8 05 25 00 00       	call   22081 <fucom>
   1fb7c:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fb7f:	e8 99 0e 00 00       	call   20a1d <fpop>
			return;
   1fb84:	e9 fe 0d 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xd8:                      // FADDP ST(i), ST。
			fadd(PST(code & 7),PST(0),&tmp);
   1fb89:	83 ec 0c             	sub    $0xc,%esp
   1fb8c:	6a 00                	push   $0x0
   1fb8e:	e8 bc 0f 00 00       	call   20b4f <__st>
   1fb93:	83 c4 10             	add    $0x10,%esp
   1fb96:	89 c3                	mov    %eax,%ebx
   1fb98:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb9d:	83 e0 07             	and    $0x7,%eax
   1fba0:	83 ec 0c             	sub    $0xc,%esp
   1fba3:	50                   	push   %eax
   1fba4:	e8 a6 0f 00 00       	call   20b4f <__st>
   1fba9:	83 c4 10             	add    $0x10,%esp
   1fbac:	89 c2                	mov    %eax,%edx
   1fbae:	83 ec 04             	sub    $0x4,%esp
   1fbb1:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fbb5:	50                   	push   %eax
   1fbb6:	53                   	push   %ebx
   1fbb7:	52                   	push   %edx
   1fbb8:	e8 95 1c 00 00       	call   21852 <fadd>
   1fbbd:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fbc0:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fbc4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbc9:	83 e0 07             	and    $0x7,%eax
   1fbcc:	83 ec 0c             	sub    $0xc,%esp
   1fbcf:	50                   	push   %eax
   1fbd0:	e8 7a 0f 00 00       	call   20b4f <__st>
   1fbd5:	83 c4 10             	add    $0x10,%esp
   1fbd8:	89 c1                	mov    %eax,%ecx
   1fbda:	8b 03                	mov    (%ebx),%eax
   1fbdc:	8b 53 04             	mov    0x4(%ebx),%edx
   1fbdf:	89 01                	mov    %eax,(%ecx)
   1fbe1:	89 51 04             	mov    %edx,0x4(%ecx)
   1fbe4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbe9:	83 e0 07             	and    $0x7,%eax
   1fbec:	83 ec 0c             	sub    $0xc,%esp
   1fbef:	50                   	push   %eax
   1fbf0:	e8 5a 0f 00 00       	call   20b4f <__st>
   1fbf5:	83 c4 10             	add    $0x10,%esp
   1fbf8:	89 c2                	mov    %eax,%edx
   1fbfa:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fbff:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fc03:	e8 15 0e 00 00       	call   20a1d <fpop>
			return;
   1fc08:	e9 7a 0d 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xd9:                      // FMULP ST(i), ST。
			fmul(PST(code & 7),PST(0),&tmp);
   1fc0d:	83 ec 0c             	sub    $0xc,%esp
   1fc10:	6a 00                	push   $0x0
   1fc12:	e8 38 0f 00 00       	call   20b4f <__st>
   1fc17:	83 c4 10             	add    $0x10,%esp
   1fc1a:	89 c3                	mov    %eax,%ebx
   1fc1c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc21:	83 e0 07             	and    $0x7,%eax
   1fc24:	83 ec 0c             	sub    $0xc,%esp
   1fc27:	50                   	push   %eax
   1fc28:	e8 22 0f 00 00       	call   20b4f <__st>
   1fc2d:	83 c4 10             	add    $0x10,%esp
   1fc30:	89 c2                	mov    %eax,%edx
   1fc32:	83 ec 04             	sub    $0x4,%esp
   1fc35:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fc39:	50                   	push   %eax
   1fc3a:	53                   	push   %ebx
   1fc3b:	52                   	push   %edx
   1fc3c:	e8 db 1d 00 00       	call   21a1c <fmul>
   1fc41:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fc44:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fc48:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc4d:	83 e0 07             	and    $0x7,%eax
   1fc50:	83 ec 0c             	sub    $0xc,%esp
   1fc53:	50                   	push   %eax
   1fc54:	e8 f6 0e 00 00       	call   20b4f <__st>
   1fc59:	83 c4 10             	add    $0x10,%esp
   1fc5c:	89 c1                	mov    %eax,%ecx
   1fc5e:	8b 03                	mov    (%ebx),%eax
   1fc60:	8b 53 04             	mov    0x4(%ebx),%edx
   1fc63:	89 01                	mov    %eax,(%ecx)
   1fc65:	89 51 04             	mov    %edx,0x4(%ecx)
   1fc68:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc6d:	83 e0 07             	and    $0x7,%eax
   1fc70:	83 ec 0c             	sub    $0xc,%esp
   1fc73:	50                   	push   %eax
   1fc74:	e8 d6 0e 00 00       	call   20b4f <__st>
   1fc79:	83 c4 10             	add    $0x10,%esp
   1fc7c:	89 c2                	mov    %eax,%edx
   1fc7e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fc83:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fc87:	e8 91 0d 00 00       	call   20a1d <fpop>
			return;
   1fc8c:	e9 f6 0c 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xda:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1fc91:	83 ec 0c             	sub    $0xc,%esp
   1fc94:	6a 00                	push   $0x0
   1fc96:	e8 b4 0e 00 00       	call   20b4f <__st>
   1fc9b:	83 c4 10             	add    $0x10,%esp
   1fc9e:	89 c3                	mov    %eax,%ebx
   1fca0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fca5:	83 e0 07             	and    $0x7,%eax
   1fca8:	83 ec 0c             	sub    $0xc,%esp
   1fcab:	50                   	push   %eax
   1fcac:	e8 9e 0e 00 00       	call   20b4f <__st>
   1fcb1:	83 c4 10             	add    $0x10,%esp
   1fcb4:	83 ec 08             	sub    $0x8,%esp
   1fcb7:	53                   	push   %ebx
   1fcb8:	50                   	push   %eax
   1fcb9:	e8 6c 23 00 00       	call   2202a <fcom>
   1fcbe:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fcc1:	e8 57 0d 00 00       	call   20a1d <fpop>
			return;
   1fcc6:	e9 bc 0c 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xdc:                      // FSUBRP ST(i)。
			ST(code & 7).exponent ^= 0x8000;
   1fccb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcd0:	83 e0 07             	and    $0x7,%eax
   1fcd3:	83 ec 0c             	sub    $0xc,%esp
   1fcd6:	50                   	push   %eax
   1fcd7:	e8 73 0e 00 00       	call   20b4f <__st>
   1fcdc:	83 c4 10             	add    $0x10,%esp
   1fcdf:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1fce3:	66 81 f2 00 80       	xor    $0x8000,%dx
   1fce8:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1fcec:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcf1:	83 e0 07             	and    $0x7,%eax
   1fcf4:	83 ec 0c             	sub    $0xc,%esp
   1fcf7:	50                   	push   %eax
   1fcf8:	e8 52 0e 00 00       	call   20b4f <__st>
   1fcfd:	83 c4 10             	add    $0x10,%esp
   1fd00:	89 c3                	mov    %eax,%ebx
   1fd02:	83 ec 0c             	sub    $0xc,%esp
   1fd05:	6a 00                	push   $0x0
   1fd07:	e8 43 0e 00 00       	call   20b4f <__st>
   1fd0c:	83 c4 10             	add    $0x10,%esp
   1fd0f:	89 c2                	mov    %eax,%edx
   1fd11:	83 ec 04             	sub    $0x4,%esp
   1fd14:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fd18:	50                   	push   %eax
   1fd19:	53                   	push   %ebx
   1fd1a:	52                   	push   %edx
   1fd1b:	e8 32 1b 00 00       	call   21852 <fadd>
   1fd20:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fd23:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fd27:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd2c:	83 e0 07             	and    $0x7,%eax
   1fd2f:	83 ec 0c             	sub    $0xc,%esp
   1fd32:	50                   	push   %eax
   1fd33:	e8 17 0e 00 00       	call   20b4f <__st>
   1fd38:	83 c4 10             	add    $0x10,%esp
   1fd3b:	89 c1                	mov    %eax,%ecx
   1fd3d:	8b 03                	mov    (%ebx),%eax
   1fd3f:	8b 53 04             	mov    0x4(%ebx),%edx
   1fd42:	89 01                	mov    %eax,(%ecx)
   1fd44:	89 51 04             	mov    %edx,0x4(%ecx)
   1fd47:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd4c:	83 e0 07             	and    $0x7,%eax
   1fd4f:	83 ec 0c             	sub    $0xc,%esp
   1fd52:	50                   	push   %eax
   1fd53:	e8 f7 0d 00 00       	call   20b4f <__st>
   1fd58:	83 c4 10             	add    $0x10,%esp
   1fd5b:	89 c2                	mov    %eax,%edx
   1fd5d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fd62:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fd66:	e8 b2 0c 00 00       	call   20a1d <fpop>
			return;
   1fd6b:	e9 17 0c 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xdd:                      // FSUBP ST(I), ST。
			real_to_real(&ST(0),&tmp);
   1fd70:	83 ec 0c             	sub    $0xc,%esp
   1fd73:	6a 00                	push   $0x0
   1fd75:	e8 d5 0d 00 00       	call   20b4f <__st>
   1fd7a:	83 c4 10             	add    $0x10,%esp
   1fd7d:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   1fd81:	8b 50 04             	mov    0x4(%eax),%edx
   1fd84:	8b 00                	mov    (%eax),%eax
   1fd86:	89 01                	mov    %eax,(%ecx)
   1fd88:	89 51 04             	mov    %edx,0x4(%ecx)
   1fd8b:	83 ec 0c             	sub    $0xc,%esp
   1fd8e:	6a 00                	push   $0x0
   1fd90:	e8 ba 0d 00 00       	call   20b4f <__st>
   1fd95:	83 c4 10             	add    $0x10,%esp
   1fd98:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fd9c:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1fda1:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fda6:	66 35 00 80          	xor    $0x8000,%ax
   1fdaa:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1fdaf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdb4:	83 e0 07             	and    $0x7,%eax
   1fdb7:	83 ec 0c             	sub    $0xc,%esp
   1fdba:	50                   	push   %eax
   1fdbb:	e8 8f 0d 00 00       	call   20b4f <__st>
   1fdc0:	83 c4 10             	add    $0x10,%esp
   1fdc3:	89 c2                	mov    %eax,%edx
   1fdc5:	83 ec 04             	sub    $0x4,%esp
   1fdc8:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fdcc:	50                   	push   %eax
   1fdcd:	8d 44 24 14          	lea    0x14(%esp),%eax
   1fdd1:	50                   	push   %eax
   1fdd2:	52                   	push   %edx
   1fdd3:	e8 7a 1a 00 00       	call   21852 <fadd>
   1fdd8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fddb:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fddf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fde4:	83 e0 07             	and    $0x7,%eax
   1fde7:	83 ec 0c             	sub    $0xc,%esp
   1fdea:	50                   	push   %eax
   1fdeb:	e8 5f 0d 00 00       	call   20b4f <__st>
   1fdf0:	83 c4 10             	add    $0x10,%esp
   1fdf3:	89 c1                	mov    %eax,%ecx
   1fdf5:	8b 03                	mov    (%ebx),%eax
   1fdf7:	8b 53 04             	mov    0x4(%ebx),%edx
   1fdfa:	89 01                	mov    %eax,(%ecx)
   1fdfc:	89 51 04             	mov    %edx,0x4(%ecx)
   1fdff:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe04:	83 e0 07             	and    $0x7,%eax
   1fe07:	83 ec 0c             	sub    $0xc,%esp
   1fe0a:	50                   	push   %eax
   1fe0b:	e8 3f 0d 00 00       	call   20b4f <__st>
   1fe10:	83 c4 10             	add    $0x10,%esp
   1fe13:	89 c2                	mov    %eax,%edx
   1fe15:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fe1a:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fe1e:	e8 fa 0b 00 00       	call   20a1d <fpop>
			return;
   1fe23:	e9 5f 0b 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xde:                      // FDIVRP ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1fe28:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe2d:	83 e0 07             	and    $0x7,%eax
   1fe30:	83 ec 0c             	sub    $0xc,%esp
   1fe33:	50                   	push   %eax
   1fe34:	e8 16 0d 00 00       	call   20b4f <__st>
   1fe39:	83 c4 10             	add    $0x10,%esp
   1fe3c:	89 c3                	mov    %eax,%ebx
   1fe3e:	83 ec 0c             	sub    $0xc,%esp
   1fe41:	6a 00                	push   $0x0
   1fe43:	e8 07 0d 00 00       	call   20b4f <__st>
   1fe48:	83 c4 10             	add    $0x10,%esp
   1fe4b:	89 c2                	mov    %eax,%edx
   1fe4d:	83 ec 04             	sub    $0x4,%esp
   1fe50:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fe54:	50                   	push   %eax
   1fe55:	53                   	push   %ebx
   1fe56:	52                   	push   %edx
   1fe57:	e8 4d 1e 00 00       	call   21ca9 <fdiv>
   1fe5c:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fe5f:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fe63:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe68:	83 e0 07             	and    $0x7,%eax
   1fe6b:	83 ec 0c             	sub    $0xc,%esp
   1fe6e:	50                   	push   %eax
   1fe6f:	e8 db 0c 00 00       	call   20b4f <__st>
   1fe74:	83 c4 10             	add    $0x10,%esp
   1fe77:	89 c1                	mov    %eax,%ecx
   1fe79:	8b 03                	mov    (%ebx),%eax
   1fe7b:	8b 53 04             	mov    0x4(%ebx),%edx
   1fe7e:	89 01                	mov    %eax,(%ecx)
   1fe80:	89 51 04             	mov    %edx,0x4(%ecx)
   1fe83:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe88:	83 e0 07             	and    $0x7,%eax
   1fe8b:	83 ec 0c             	sub    $0xc,%esp
   1fe8e:	50                   	push   %eax
   1fe8f:	e8 bb 0c 00 00       	call   20b4f <__st>
   1fe94:	83 c4 10             	add    $0x10,%esp
   1fe97:	89 c2                	mov    %eax,%edx
   1fe99:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fe9e:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fea2:	e8 76 0b 00 00       	call   20a1d <fpop>
			return;
   1fea7:	e9 db 0a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xdf:                      // FDIVP ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1feac:	83 ec 0c             	sub    $0xc,%esp
   1feaf:	6a 00                	push   $0x0
   1feb1:	e8 99 0c 00 00       	call   20b4f <__st>
   1feb6:	83 c4 10             	add    $0x10,%esp
   1feb9:	89 c3                	mov    %eax,%ebx
   1febb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fec0:	83 e0 07             	and    $0x7,%eax
   1fec3:	83 ec 0c             	sub    $0xc,%esp
   1fec6:	50                   	push   %eax
   1fec7:	e8 83 0c 00 00       	call   20b4f <__st>
   1fecc:	83 c4 10             	add    $0x10,%esp
   1fecf:	89 c2                	mov    %eax,%edx
   1fed1:	83 ec 04             	sub    $0x4,%esp
   1fed4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fed8:	50                   	push   %eax
   1fed9:	53                   	push   %ebx
   1feda:	52                   	push   %edx
   1fedb:	e8 c9 1d 00 00       	call   21ca9 <fdiv>
   1fee0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fee3:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fee7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1feec:	83 e0 07             	and    $0x7,%eax
   1feef:	83 ec 0c             	sub    $0xc,%esp
   1fef2:	50                   	push   %eax
   1fef3:	e8 57 0c 00 00       	call   20b4f <__st>
   1fef8:	83 c4 10             	add    $0x10,%esp
   1fefb:	89 c1                	mov    %eax,%ecx
   1fefd:	8b 03                	mov    (%ebx),%eax
   1feff:	8b 53 04             	mov    0x4(%ebx),%edx
   1ff02:	89 01                	mov    %eax,(%ecx)
   1ff04:	89 51 04             	mov    %edx,0x4(%ecx)
   1ff07:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff0c:	83 e0 07             	and    $0x7,%eax
   1ff0f:	83 ec 0c             	sub    $0xc,%esp
   1ff12:	50                   	push   %eax
   1ff13:	e8 37 0c 00 00       	call   20b4f <__st>
   1ff18:	83 c4 10             	add    $0x10,%esp
   1ff1b:	89 c2                	mov    %eax,%edx
   1ff1d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1ff22:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1ff26:	e8 f2 0a 00 00       	call   20a1d <fpop>
			return;
   1ff2b:	e9 57 0a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xf8:                      // FFREE ST(i)。未实现。
			printk("ffree not implemented\n\r");
   1ff30:	83 ec 0c             	sub    $0xc,%esp
   1ff33:	68 a7 51 02 00       	push   $0x251a7
   1ff38:	e8 09 8d fe ff       	call   8c46 <printk>
   1ff3d:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1ff40:	83 ec 08             	sub    $0x8,%esp
   1ff43:	6a 08                	push   $0x8
   1ff45:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ff49:	e8 a2 0a 00 00       	call   209f0 <__math_abort>
   1ff4e:	83 c4 10             	add    $0x10,%esp
			fpop();
   1ff51:	e8 c7 0a 00 00       	call   20a1d <fpop>
			return;
   1ff56:	e9 2c 0a 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xf9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1ff5b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff60:	83 e0 07             	and    $0x7,%eax
   1ff63:	83 ec 0c             	sub    $0xc,%esp
   1ff66:	50                   	push   %eax
   1ff67:	e8 e3 0b 00 00       	call   20b4f <__st>
   1ff6c:	83 c4 10             	add    $0x10,%esp
   1ff6f:	89 c3                	mov    %eax,%ebx
   1ff71:	83 ec 0c             	sub    $0xc,%esp
   1ff74:	6a 00                	push   $0x0
   1ff76:	e8 d4 0b 00 00       	call   20b4f <__st>
   1ff7b:	83 c4 10             	add    $0x10,%esp
   1ff7e:	83 ec 08             	sub    $0x8,%esp
   1ff81:	53                   	push   %ebx
   1ff82:	50                   	push   %eax
   1ff83:	e8 71 0b 00 00       	call   20af9 <fxchg>
   1ff88:	83 c4 10             	add    $0x10,%esp
			return;
   1ff8b:	e9 f7 09 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xfa:                      // FSTP ST(i)。
		case 0xfb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1ff90:	83 ec 0c             	sub    $0xc,%esp
   1ff93:	6a 00                	push   $0x0
   1ff95:	e8 b5 0b 00 00       	call   20b4f <__st>
   1ff9a:	83 c4 10             	add    $0x10,%esp
   1ff9d:	89 c3                	mov    %eax,%ebx
   1ff9f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ffa4:	83 e0 07             	and    $0x7,%eax
   1ffa7:	83 ec 0c             	sub    $0xc,%esp
   1ffaa:	50                   	push   %eax
   1ffab:	e8 9f 0b 00 00       	call   20b4f <__st>
   1ffb0:	83 c4 10             	add    $0x10,%esp
   1ffb3:	8b 13                	mov    (%ebx),%edx
   1ffb5:	89 10                	mov    %edx,(%eax)
   1ffb7:	8b 53 04             	mov    0x4(%ebx),%edx
   1ffba:	89 50 04             	mov    %edx,0x4(%eax)
   1ffbd:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
   1ffc1:	66 89 50 08          	mov    %dx,0x8(%eax)
			fpop();
   1ffc5:	e8 53 0a 00 00       	call   20a1d <fpop>
			return;
   1ffca:	e9 b8 09 00 00       	jmp    20987 <do_emu+0x1d5f>
	}
// 处理第2个字节位7--6是MOD、位2--0是R/M的指令，即11011,XXX，MOD，XXX，R/M形式的代码。MOD在各子程序中处理，因此这里首先
// 让代码与上0xe7（0b11100111）屏蔽掉MOD。
	switch ((code>>3) & 0xe7) {
   1ffcf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ffd4:	66 c1 e8 03          	shr    $0x3,%ax
   1ffd8:	0f b7 c0             	movzwl %ax,%eax
   1ffdb:	25 e7 00 00 00       	and    $0xe7,%eax
   1ffe0:	83 e8 22             	sub    $0x22,%eax
   1ffe3:	3d c5 00 00 00       	cmp    $0xc5,%eax
   1ffe8:	0f 87 a2 05 00 00    	ja     20590 <do_emu+0x1968>
   1ffee:	8b 04 85 a4 55 02 00 	mov    0x255a4(,%eax,4),%eax
   1fff5:	ff e0                	jmp    *%eax
		case 0x22:
//			put_short_real(PST(0),info,code);
                    panic("kernel/math/math_emulate.c->do_emu(),394");
   1fff7:	83 ec 0c             	sub    $0xc,%esp
   1fffa:	68 c0 51 02 00       	push   $0x251c0
   1ffff:	e8 03 8c fe ff       	call   8c07 <panic>
   20004:	83 c4 10             	add    $0x10,%esp
			return;
   20007:	e9 7b 09 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x23:                      // FSTP - 保存单精度实数（短实数）。
			put_short_real(PST(0),info,code);
   2000c:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20011:	83 ec 0c             	sub    $0xc,%esp
   20014:	6a 00                	push   $0x0
   20016:	e8 34 0b 00 00       	call   20b4f <__st>
   2001b:	83 c4 10             	add    $0x10,%esp
   2001e:	83 ec 04             	sub    $0x4,%esp
   20021:	53                   	push   %ebx
   20022:	ff 74 24 38          	pushl  0x38(%esp)
   20026:	50                   	push   %eax
   20027:	e8 dc 12 00 00       	call   21308 <put_short_real>
   2002c:	83 c4 10             	add    $0x10,%esp
			fpop();
   2002f:	e8 e9 09 00 00       	call   20a1d <fpop>
			return;
   20034:	e9 4e 09 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
   20039:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2003e:	83 ec 08             	sub    $0x8,%esp
   20041:	50                   	push   %eax
   20042:	ff 74 24 3c          	pushl  0x3c(%esp)
   20046:	e8 b2 0c 00 00       	call   20cfd <ea>
   2004b:	83 c4 10             	add    $0x10,%esp
   2004e:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   20052:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20059:	eb 3c                	jmp    20097 <do_emu+0x146f>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
   2005b:	83 ec 0c             	sub    $0xc,%esp
   2005e:	ff 74 24 24          	pushl  0x24(%esp)
   20062:	e8 82 eb ff ff       	call   1ebe9 <get_fs_long>
   20067:	83 c4 10             	add    $0x10,%esp
   2006a:	89 c1                	mov    %eax,%ecx
				((long *) & I387)[code] =
   2006c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20071:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   20077:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2007c:	c1 e0 02             	shl    $0x2,%eax
   2007f:	01 d0                	add    %edx,%eax
				   get_fs_long((unsigned long *) address);
   20081:	89 ca                	mov    %ecx,%edx
				((long *) & I387)[code] =
   20083:	89 10                	mov    %edx,(%eax)
				address += 4;
   20085:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   2008a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2008f:	83 c0 01             	add    $0x1,%eax
   20092:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   20097:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   2009d:	76 bc                	jbe    2005b <do_emu+0x1433>
			}
			return;
   2009f:	e9 e3 08 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
   200a4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200a9:	83 ec 08             	sub    $0x8,%esp
   200ac:	50                   	push   %eax
   200ad:	ff 74 24 3c          	pushl  0x3c(%esp)
   200b1:	e8 47 0c 00 00       	call   20cfd <ea>
   200b6:	83 c4 10             	add    $0x10,%esp
   200b9:	89 44 24 18          	mov    %eax,0x18(%esp)
			*(unsigned short *) &I387.cwd =
   200bd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   200c2:	8d 98 18 04 00 00    	lea    0x418(%eax),%ebx
				get_fs_word((unsigned short *) address);
   200c8:	83 ec 0c             	sub    $0xc,%esp
   200cb:	ff 74 24 24          	pushl  0x24(%esp)
   200cf:	e8 fc ea ff ff       	call   1ebd0 <get_fs_word>
   200d4:	83 c4 10             	add    $0x10,%esp
			*(unsigned short *) &I387.cwd =
   200d7:	66 89 03             	mov    %ax,(%ebx)
			return;
   200da:	e9 a8 08 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
   200df:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200e4:	83 ec 08             	sub    $0x8,%esp
   200e7:	50                   	push   %eax
   200e8:	ff 74 24 3c          	pushl  0x3c(%esp)
   200ec:	e8 0c 0c 00 00       	call   20cfd <ea>
   200f1:	83 c4 10             	add    $0x10,%esp
   200f4:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,28);
   200f8:	83 ec 08             	sub    $0x8,%esp
   200fb:	6a 1c                	push   $0x1c
   200fd:	ff 74 24 24          	pushl  0x24(%esp)
   20101:	e8 99 82 fe ff       	call   839f <verify_area>
   20106:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 7 ; code++) {
   20109:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20110:	eb 39                	jmp    2014b <do_emu+0x1523>
				put_fs_long( ((long *) & I387)[code],
   20112:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20117:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2011d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20122:	c1 e0 02             	shl    $0x2,%eax
   20125:	01 d0                	add    %edx,%eax
   20127:	8b 00                	mov    (%eax),%eax
   20129:	83 ec 08             	sub    $0x8,%esp
   2012c:	ff 74 24 20          	pushl  0x20(%esp)
   20130:	50                   	push   %eax
   20131:	e8 e5 ea ff ff       	call   1ec1b <put_fs_long>
   20136:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   20139:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   2013e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20143:	83 c0 01             	add    $0x1,%eax
   20146:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   2014b:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   20151:	76 bf                	jbe    20112 <do_emu+0x14ea>
			}
			return;
   20153:	e9 2f 08 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x27:                      // FSTCW - 存储控制字。
			address = ea(info,code);
   20158:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2015d:	83 ec 08             	sub    $0x8,%esp
   20160:	50                   	push   %eax
   20161:	ff 74 24 3c          	pushl  0x3c(%esp)
   20165:	e8 93 0b 00 00       	call   20cfd <ea>
   2016a:	83 c4 10             	add    $0x10,%esp
   2016d:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   20171:	83 ec 08             	sub    $0x8,%esp
   20174:	6a 02                	push   $0x2
   20176:	ff 74 24 24          	pushl  0x24(%esp)
   2017a:	e8 20 82 fe ff       	call   839f <verify_area>
   2017f:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.cwd,(short *) address);
   20182:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20187:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2018d:	98                   	cwtl   
   2018e:	83 ec 08             	sub    $0x8,%esp
   20191:	ff 74 24 20          	pushl  0x20(%esp)
   20195:	50                   	push   %eax
   20196:	e8 64 ea ff ff       	call   1ebff <put_fs_word>
   2019b:	83 c4 10             	add    $0x10,%esp
			return;
   2019e:	e9 e4 07 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x62:                      // FIST - 存储短整形数。
			put_long_int(PST(0),info,code);
   201a3:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   201a8:	83 ec 0c             	sub    $0xc,%esp
   201ab:	6a 00                	push   $0x0
   201ad:	e8 9d 09 00 00       	call   20b4f <__st>
   201b2:	83 c4 10             	add    $0x10,%esp
   201b5:	83 ec 04             	sub    $0x4,%esp
   201b8:	53                   	push   %ebx
   201b9:	ff 74 24 38          	pushl  0x38(%esp)
   201bd:	50                   	push   %eax
   201be:	e8 24 13 00 00       	call   214e7 <put_long_int>
   201c3:	83 c4 10             	add    $0x10,%esp
			return;
   201c6:	e9 bc 07 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x63:                      // FISTP - 存储短整型数。
			put_long_int(PST(0),info,code);
   201cb:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   201d0:	83 ec 0c             	sub    $0xc,%esp
   201d3:	6a 00                	push   $0x0
   201d5:	e8 75 09 00 00       	call   20b4f <__st>
   201da:	83 c4 10             	add    $0x10,%esp
   201dd:	83 ec 04             	sub    $0x4,%esp
   201e0:	53                   	push   %ebx
   201e1:	ff 74 24 38          	pushl  0x38(%esp)
   201e5:	50                   	push   %eax
   201e6:	e8 fc 12 00 00       	call   214e7 <put_long_int>
   201eb:	83 c4 10             	add    $0x10,%esp
			fpop();
   201ee:	e8 2a 08 00 00       	call   20a1d <fpop>
			return;
   201f3:	e9 8f 07 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x65:                      // FLD - 加载扩展（临时）实数。
			fpush();
   201f8:	e8 8e 08 00 00       	call   20a8b <fpush>
			get_temp_real(&tmp,info,code);
   201fd:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20202:	83 ec 04             	sub    $0x4,%esp
   20205:	50                   	push   %eax
   20206:	ff 74 24 38          	pushl  0x38(%esp)
   2020a:	8d 44 24 18          	lea    0x18(%esp),%eax
   2020e:	50                   	push   %eax
   2020f:	e8 b1 0d 00 00       	call   20fc5 <get_temp_real>
   20214:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20217:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   2021b:	83 ec 0c             	sub    $0xc,%esp
   2021e:	6a 00                	push   $0x0
   20220:	e8 2a 09 00 00       	call   20b4f <__st>
   20225:	83 c4 10             	add    $0x10,%esp
   20228:	89 c1                	mov    %eax,%ecx
   2022a:	8b 03                	mov    (%ebx),%eax
   2022c:	8b 53 04             	mov    0x4(%ebx),%edx
   2022f:	89 01                	mov    %eax,(%ecx)
   20231:	89 51 04             	mov    %edx,0x4(%ecx)
   20234:	83 ec 0c             	sub    $0xc,%esp
   20237:	6a 00                	push   $0x0
   20239:	e8 11 09 00 00       	call   20b4f <__st>
   2023e:	83 c4 10             	add    $0x10,%esp
   20241:	89 c2                	mov    %eax,%edx
   20243:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20248:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2024c:	e9 36 07 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0x67:                      // FSTP - 储存扩展实数。
			put_temp_real(PST(0),info,code);
   20251:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20256:	83 ec 0c             	sub    $0xc,%esp
   20259:	6a 00                	push   $0x0
   2025b:	e8 ef 08 00 00       	call   20b4f <__st>
   20260:	83 c4 10             	add    $0x10,%esp
   20263:	83 ec 04             	sub    $0x4,%esp
   20266:	53                   	push   %ebx
   20267:	ff 74 24 38          	pushl  0x38(%esp)
   2026b:	50                   	push   %eax
   2026c:	e8 75 11 00 00       	call   213e6 <put_temp_real>
   20271:	83 c4 10             	add    $0x10,%esp
			fpop();
   20274:	e8 a4 07 00 00       	call   20a1d <fpop>
			return;
   20279:	e9 09 07 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xa2:                      // FST - 储存双精度实数。
			put_long_real(PST(0),info,code);
   2027e:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20283:	83 ec 0c             	sub    $0xc,%esp
   20286:	6a 00                	push   $0x0
   20288:	e8 c2 08 00 00       	call   20b4f <__st>
   2028d:	83 c4 10             	add    $0x10,%esp
   20290:	83 ec 04             	sub    $0x4,%esp
   20293:	53                   	push   %ebx
   20294:	ff 74 24 38          	pushl  0x38(%esp)
   20298:	50                   	push   %eax
   20299:	e8 cd 10 00 00       	call   2136b <put_long_real>
   2029e:	83 c4 10             	add    $0x10,%esp
			return;
   202a1:	e9 e1 06 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xa3:                      // FSTP - 存储双精度实数。
			put_long_real(PST(0),info,code);
   202a6:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   202ab:	83 ec 0c             	sub    $0xc,%esp
   202ae:	6a 00                	push   $0x0
   202b0:	e8 9a 08 00 00       	call   20b4f <__st>
   202b5:	83 c4 10             	add    $0x10,%esp
   202b8:	83 ec 04             	sub    $0x4,%esp
   202bb:	53                   	push   %ebx
   202bc:	ff 74 24 38          	pushl  0x38(%esp)
   202c0:	50                   	push   %eax
   202c1:	e8 a5 10 00 00       	call   2136b <put_long_real>
   202c6:	83 c4 10             	add    $0x10,%esp
			fpop();
   202c9:	e8 4f 07 00 00       	call   20a1d <fpop>
			return;
   202ce:	e9 b4 06 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
   202d3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202d8:	83 ec 08             	sub    $0x8,%esp
   202db:	50                   	push   %eax
   202dc:	ff 74 24 3c          	pushl  0x3c(%esp)
   202e0:	e8 18 0a 00 00       	call   20cfd <ea>
   202e5:	83 c4 10             	add    $0x10,%esp
   202e8:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   202ec:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   202f3:	eb 3c                	jmp    20331 <do_emu+0x1709>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
   202f5:	83 ec 0c             	sub    $0xc,%esp
   202f8:	ff 74 24 24          	pushl  0x24(%esp)
   202fc:	e8 e8 e8 ff ff       	call   1ebe9 <get_fs_long>
   20301:	83 c4 10             	add    $0x10,%esp
   20304:	89 c1                	mov    %eax,%ecx
				((long *) & I387)[code] =
   20306:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2030b:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   20311:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20316:	c1 e0 02             	shl    $0x2,%eax
   20319:	01 d0                	add    %edx,%eax
				   get_fs_long((unsigned long *) address);
   2031b:	89 ca                	mov    %ecx,%edx
				((long *) & I387)[code] =
   2031d:	89 10                	mov    %edx,(%eax)
				address += 4;
   2031f:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   20324:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20329:	83 c0 01             	add    $0x1,%eax
   2032c:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   20331:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   20337:	76 bc                	jbe    202f5 <do_emu+0x16cd>
			}
			return;
   20339:	e9 49 06 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
   2033e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20343:	83 ec 08             	sub    $0x8,%esp
   20346:	50                   	push   %eax
   20347:	ff 74 24 3c          	pushl  0x3c(%esp)
   2034b:	e8 ad 09 00 00       	call   20cfd <ea>
   20350:	83 c4 10             	add    $0x10,%esp
   20353:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,108);
   20357:	83 ec 08             	sub    $0x8,%esp
   2035a:	6a 6c                	push   $0x6c
   2035c:	ff 74 24 24          	pushl  0x24(%esp)
   20360:	e8 3a 80 fe ff       	call   839f <verify_area>
   20365:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 27 ; code++) {
   20368:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   2036f:	eb 39                	jmp    203aa <do_emu+0x1782>
				put_fs_long( ((long *) & I387)[code],
   20371:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20376:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2037c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20381:	c1 e0 02             	shl    $0x2,%eax
   20384:	01 d0                	add    %edx,%eax
   20386:	8b 00                	mov    (%eax),%eax
   20388:	83 ec 08             	sub    $0x8,%esp
   2038b:	ff 74 24 20          	pushl  0x20(%esp)
   2038f:	50                   	push   %eax
   20390:	e8 86 e8 ff ff       	call   1ec1b <put_fs_long>
   20395:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   20398:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   2039d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   203a2:	83 c0 01             	add    $0x1,%eax
   203a5:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   203aa:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   203b0:	76 bf                	jbe    20371 <do_emu+0x1749>
			}
			I387.cwd = 0x037f;
   203b2:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   203b7:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   203be:	03 00 00 
			I387.swd = 0x0000;
   203c1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   203c6:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   203cd:	00 00 00 
			I387.twd = 0x0000;
   203d0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   203d5:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   203dc:	00 00 00 
			return;
   203df:	e9 a3 05 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xa7:                      // FSTSW - 保存状态状态字。
			address = ea(info,code);
   203e4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   203e9:	83 ec 08             	sub    $0x8,%esp
   203ec:	50                   	push   %eax
   203ed:	ff 74 24 3c          	pushl  0x3c(%esp)
   203f1:	e8 07 09 00 00       	call   20cfd <ea>
   203f6:	83 c4 10             	add    $0x10,%esp
   203f9:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   203fd:	83 ec 08             	sub    $0x8,%esp
   20400:	6a 02                	push   $0x2
   20402:	ff 74 24 24          	pushl  0x24(%esp)
   20406:	e8 94 7f fe ff       	call   839f <verify_area>
   2040b:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.swd,(short *) address);
   2040e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20413:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20419:	98                   	cwtl   
   2041a:	83 ec 08             	sub    $0x8,%esp
   2041d:	ff 74 24 20          	pushl  0x20(%esp)
   20421:	50                   	push   %eax
   20422:	e8 d8 e7 ff ff       	call   1ebff <put_fs_word>
   20427:	83 c4 10             	add    $0x10,%esp
			return;
   2042a:	e9 58 05 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe2:                      // FIST - 保存短整型数。
			put_short_int(PST(0),info,code);
   2042f:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20434:	83 ec 0c             	sub    $0xc,%esp
   20437:	6a 00                	push   $0x0
   20439:	e8 11 07 00 00       	call   20b4f <__st>
   2043e:	83 c4 10             	add    $0x10,%esp
   20441:	83 ec 04             	sub    $0x4,%esp
   20444:	53                   	push   %ebx
   20445:	ff 74 24 38          	pushl  0x38(%esp)
   20449:	50                   	push   %eax
   2044a:	e8 20 10 00 00       	call   2146f <put_short_int>
   2044f:	83 c4 10             	add    $0x10,%esp
			return;
   20452:	e9 30 05 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe3:                      // FISTP - 保存短整型数。
			put_short_int(PST(0),info,code);
   20457:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2045c:	83 ec 0c             	sub    $0xc,%esp
   2045f:	6a 00                	push   $0x0
   20461:	e8 e9 06 00 00       	call   20b4f <__st>
   20466:	83 c4 10             	add    $0x10,%esp
   20469:	83 ec 04             	sub    $0x4,%esp
   2046c:	53                   	push   %ebx
   2046d:	ff 74 24 38          	pushl  0x38(%esp)
   20471:	50                   	push   %eax
   20472:	e8 f8 0f 00 00       	call   2146f <put_short_int>
   20477:	83 c4 10             	add    $0x10,%esp
			fpop();
   2047a:	e8 9e 05 00 00       	call   20a1d <fpop>
			return;
   2047f:	e9 03 05 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe4:                      // FBLD - 加载BCD类型数。
			fpush();
   20484:	e8 02 06 00 00       	call   20a8b <fpush>
			get_BCD(&tmp,info,code);
   20489:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2048e:	83 ec 04             	sub    $0x4,%esp
   20491:	50                   	push   %eax
   20492:	ff 74 24 38          	pushl  0x38(%esp)
   20496:	8d 44 24 18          	lea    0x18(%esp),%eax
   2049a:	50                   	push   %eax
   2049b:	e8 33 0d 00 00       	call   211d3 <get_BCD>
   204a0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   204a3:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   204a7:	83 ec 0c             	sub    $0xc,%esp
   204aa:	6a 00                	push   $0x0
   204ac:	e8 9e 06 00 00       	call   20b4f <__st>
   204b1:	83 c4 10             	add    $0x10,%esp
   204b4:	89 c1                	mov    %eax,%ecx
   204b6:	8b 03                	mov    (%ebx),%eax
   204b8:	8b 53 04             	mov    0x4(%ebx),%edx
   204bb:	89 01                	mov    %eax,(%ecx)
   204bd:	89 51 04             	mov    %edx,0x4(%ecx)
   204c0:	83 ec 0c             	sub    $0xc,%esp
   204c3:	6a 00                	push   $0x0
   204c5:	e8 85 06 00 00       	call   20b4f <__st>
   204ca:	83 c4 10             	add    $0x10,%esp
   204cd:	89 c2                	mov    %eax,%edx
   204cf:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   204d4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   204d8:	e9 aa 04 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe5:                      // FILD - 加载长整型数。
			fpush();
   204dd:	e8 a9 05 00 00       	call   20a8b <fpush>
			get_longlong_int(&tmp,info,code);
   204e2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   204e7:	83 ec 04             	sub    $0x4,%esp
   204ea:	50                   	push   %eax
   204eb:	ff 74 24 38          	pushl  0x38(%esp)
   204ef:	8d 44 24 18          	lea    0x18(%esp),%eax
   204f3:	50                   	push   %eax
   204f4:	e8 3f 0c 00 00       	call   21138 <get_longlong_int>
   204f9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   204fc:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20500:	83 ec 0c             	sub    $0xc,%esp
   20503:	6a 00                	push   $0x0
   20505:	e8 45 06 00 00       	call   20b4f <__st>
   2050a:	83 c4 10             	add    $0x10,%esp
   2050d:	89 c1                	mov    %eax,%ecx
   2050f:	8b 03                	mov    (%ebx),%eax
   20511:	8b 53 04             	mov    0x4(%ebx),%edx
   20514:	89 01                	mov    %eax,(%ecx)
   20516:	89 51 04             	mov    %edx,0x4(%ecx)
   20519:	83 ec 0c             	sub    $0xc,%esp
   2051c:	6a 00                	push   $0x0
   2051e:	e8 2c 06 00 00       	call   20b4f <__st>
   20523:	83 c4 10             	add    $0x10,%esp
   20526:	89 c2                	mov    %eax,%edx
   20528:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2052d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20531:	e9 51 04 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe6:                      // FBSTP - 保存BCD类型数。
			put_BCD(PST(0),info,code);
   20536:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2053b:	83 ec 0c             	sub    $0xc,%esp
   2053e:	6a 00                	push   $0x0
   20540:	e8 0a 06 00 00       	call   20b4f <__st>
   20545:	83 c4 10             	add    $0x10,%esp
   20548:	83 ec 04             	sub    $0x4,%esp
   2054b:	53                   	push   %ebx
   2054c:	ff 74 24 38          	pushl  0x38(%esp)
   20550:	50                   	push   %eax
   20551:	e8 a7 10 00 00       	call   215fd <put_BCD>
   20556:	83 c4 10             	add    $0x10,%esp
			fpop();
   20559:	e8 bf 04 00 00       	call   20a1d <fpop>
			return;
   2055e:	e9 24 04 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 0xe7:                      // BISTP - 保存长整型数。
			put_longlong_int(PST(0),info,code);
   20563:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20568:	83 ec 0c             	sub    $0xc,%esp
   2056b:	6a 00                	push   $0x0
   2056d:	e8 dd 05 00 00       	call   20b4f <__st>
   20572:	83 c4 10             	add    $0x10,%esp
   20575:	83 ec 04             	sub    $0x4,%esp
   20578:	53                   	push   %ebx
   20579:	ff 74 24 38          	pushl  0x38(%esp)
   2057d:	50                   	push   %eax
   2057e:	e8 db 0f 00 00       	call   2155e <put_longlong_int>
   20583:	83 c4 10             	add    $0x10,%esp
			fpop();
   20586:	e8 92 04 00 00       	call   20a1d <fpop>
			return;
   2058b:	e9 f7 03 00 00       	jmp    20987 <do_emu+0x1d5f>
	}
// 下面处理第2类浮点指令。首先根据指令代码的位10--9的MF值取指定类型的数，然后根据OPA和OPB的组合值进行分别处理。即处理11011，
// MF，000,XXX，R/M形式的指令代码。
	switch (code >> 9) {
   20590:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20595:	66 c1 e8 09          	shr    $0x9,%ax
   20599:	0f b7 c0             	movzwl %ax,%eax
   2059c:	83 f8 01             	cmp    $0x1,%eax
   2059f:	74 33                	je     205d4 <do_emu+0x19ac>
   205a1:	83 f8 01             	cmp    $0x1,%eax
   205a4:	7f 06                	jg     205ac <do_emu+0x1984>
   205a6:	85 c0                	test   %eax,%eax
   205a8:	74 0e                	je     205b8 <do_emu+0x1990>
   205aa:	eb 7a                	jmp    20626 <do_emu+0x19fe>
   205ac:	83 f8 02             	cmp    $0x2,%eax
   205af:	74 3f                	je     205f0 <do_emu+0x19c8>
   205b1:	83 f8 04             	cmp    $0x4,%eax
   205b4:	74 56                	je     2060c <do_emu+0x19e4>
   205b6:	eb 6e                	jmp    20626 <do_emu+0x19fe>
		case 0:                 // MF = 00，短实数（32位整数）。
			get_short_real(&tmp,info,code);
   205b8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205bd:	83 ec 04             	sub    $0x4,%esp
   205c0:	50                   	push   %eax
   205c1:	ff 74 24 38          	pushl  0x38(%esp)
   205c5:	8d 44 24 18          	lea    0x18(%esp),%eax
   205c9:	50                   	push   %eax
   205ca:	e8 3d 09 00 00       	call   20f0c <get_short_real>
   205cf:	83 c4 10             	add    $0x10,%esp
			break;
   205d2:	eb 52                	jmp    20626 <do_emu+0x19fe>
		case 1:                 // MF = 01，短整数（32位整数）。
			get_long_int(&tmp,info,code);
   205d4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205d9:	83 ec 04             	sub    $0x4,%esp
   205dc:	50                   	push   %eax
   205dd:	ff 74 24 38          	pushl  0x38(%esp)
   205e1:	8d 44 24 18          	lea    0x18(%esp),%eax
   205e5:	50                   	push   %eax
   205e6:	e8 d1 0a 00 00       	call   210bc <get_long_int>
   205eb:	83 c4 10             	add    $0x10,%esp
			break;
   205ee:	eb 36                	jmp    20626 <do_emu+0x19fe>
		case 2:                 // MF = 10，长实数（64位实数）。
			get_long_real(&tmp,info,code);
   205f0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205f5:	83 ec 04             	sub    $0x4,%esp
   205f8:	50                   	push   %eax
   205f9:	ff 74 24 38          	pushl  0x38(%esp)
   205fd:	8d 44 24 18          	lea    0x18(%esp),%eax
   20601:	50                   	push   %eax
   20602:	e8 56 09 00 00       	call   20f5d <get_long_real>
   20607:	83 c4 10             	add    $0x10,%esp
			break;
   2060a:	eb 1a                	jmp    20626 <do_emu+0x19fe>
		case 4:                 // MF = 11，长整数（64位整数）！应该是case 3。
			get_short_int(&tmp,info,code);
   2060c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20611:	83 ec 04             	sub    $0x4,%esp
   20614:	50                   	push   %eax
   20615:	ff 74 24 38          	pushl  0x38(%esp)
   20619:	8d 44 24 18          	lea    0x18(%esp),%eax
   2061d:	50                   	push   %eax
   2061e:	e8 1c 0a 00 00       	call   2103f <get_short_int>
   20623:	83 c4 10             	add    $0x10,%esp
	}
	switch ((code>>3) & 0x27) {
   20626:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2062b:	66 c1 e8 03          	shr    $0x3,%ax
   2062f:	0f b7 c0             	movzwl %ax,%eax
   20632:	83 e0 27             	and    $0x27,%eax
   20635:	83 f8 07             	cmp    $0x7,%eax
   20638:	0f 87 b6 02 00 00    	ja     208f4 <do_emu+0x1ccc>
   2063e:	8b 04 85 bc 58 02 00 	mov    0x258bc(,%eax,4),%eax
   20645:	ff e0                	jmp    *%eax
		case 0:                 // FADD。
			fadd(&tmp,PST(0),&tmp);
   20647:	83 ec 0c             	sub    $0xc,%esp
   2064a:	6a 00                	push   $0x0
   2064c:	e8 fe 04 00 00       	call   20b4f <__st>
   20651:	83 c4 10             	add    $0x10,%esp
   20654:	89 c2                	mov    %eax,%edx
   20656:	83 ec 04             	sub    $0x4,%esp
   20659:	8d 44 24 10          	lea    0x10(%esp),%eax
   2065d:	50                   	push   %eax
   2065e:	52                   	push   %edx
   2065f:	8d 44 24 18          	lea    0x18(%esp),%eax
   20663:	50                   	push   %eax
   20664:	e8 e9 11 00 00       	call   21852 <fadd>
   20669:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2066c:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20670:	83 ec 0c             	sub    $0xc,%esp
   20673:	6a 00                	push   $0x0
   20675:	e8 d5 04 00 00       	call   20b4f <__st>
   2067a:	83 c4 10             	add    $0x10,%esp
   2067d:	89 c1                	mov    %eax,%ecx
   2067f:	8b 03                	mov    (%ebx),%eax
   20681:	8b 53 04             	mov    0x4(%ebx),%edx
   20684:	89 01                	mov    %eax,(%ecx)
   20686:	89 51 04             	mov    %edx,0x4(%ecx)
   20689:	83 ec 0c             	sub    $0xc,%esp
   2068c:	6a 00                	push   $0x0
   2068e:	e8 bc 04 00 00       	call   20b4f <__st>
   20693:	83 c4 10             	add    $0x10,%esp
   20696:	89 c2                	mov    %eax,%edx
   20698:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2069d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   206a1:	e9 e1 02 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 1:                 // FMUL。
			fmul(&tmp,PST(0),&tmp);
   206a6:	83 ec 0c             	sub    $0xc,%esp
   206a9:	6a 00                	push   $0x0
   206ab:	e8 9f 04 00 00       	call   20b4f <__st>
   206b0:	83 c4 10             	add    $0x10,%esp
   206b3:	89 c2                	mov    %eax,%edx
   206b5:	83 ec 04             	sub    $0x4,%esp
   206b8:	8d 44 24 10          	lea    0x10(%esp),%eax
   206bc:	50                   	push   %eax
   206bd:	52                   	push   %edx
   206be:	8d 44 24 18          	lea    0x18(%esp),%eax
   206c2:	50                   	push   %eax
   206c3:	e8 54 13 00 00       	call   21a1c <fmul>
   206c8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   206cb:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   206cf:	83 ec 0c             	sub    $0xc,%esp
   206d2:	6a 00                	push   $0x0
   206d4:	e8 76 04 00 00       	call   20b4f <__st>
   206d9:	83 c4 10             	add    $0x10,%esp
   206dc:	89 c1                	mov    %eax,%ecx
   206de:	8b 03                	mov    (%ebx),%eax
   206e0:	8b 53 04             	mov    0x4(%ebx),%edx
   206e3:	89 01                	mov    %eax,(%ecx)
   206e5:	89 51 04             	mov    %edx,0x4(%ecx)
   206e8:	83 ec 0c             	sub    $0xc,%esp
   206eb:	6a 00                	push   $0x0
   206ed:	e8 5d 04 00 00       	call   20b4f <__st>
   206f2:	83 c4 10             	add    $0x10,%esp
   206f5:	89 c2                	mov    %eax,%edx
   206f7:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   206fc:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20700:	e9 82 02 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 2:                 // FCOM。
			fcom(&tmp,PST(0));
   20705:	83 ec 0c             	sub    $0xc,%esp
   20708:	6a 00                	push   $0x0
   2070a:	e8 40 04 00 00       	call   20b4f <__st>
   2070f:	83 c4 10             	add    $0x10,%esp
   20712:	83 ec 08             	sub    $0x8,%esp
   20715:	50                   	push   %eax
   20716:	8d 44 24 18          	lea    0x18(%esp),%eax
   2071a:	50                   	push   %eax
   2071b:	e8 0a 19 00 00       	call   2202a <fcom>
   20720:	83 c4 10             	add    $0x10,%esp
			return;
   20723:	e9 5f 02 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 3:                 // FCOMP。
			fcom(&tmp,PST(0));
   20728:	83 ec 0c             	sub    $0xc,%esp
   2072b:	6a 00                	push   $0x0
   2072d:	e8 1d 04 00 00       	call   20b4f <__st>
   20732:	83 c4 10             	add    $0x10,%esp
   20735:	83 ec 08             	sub    $0x8,%esp
   20738:	50                   	push   %eax
   20739:	8d 44 24 18          	lea    0x18(%esp),%eax
   2073d:	50                   	push   %eax
   2073e:	e8 e7 18 00 00       	call   2202a <fcom>
   20743:	83 c4 10             	add    $0x10,%esp
			fpop();
   20746:	e8 d2 02 00 00       	call   20a1d <fpop>
			return;
   2074b:	e9 37 02 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 4:                 // FSUB。
			tmp.exponent ^= 0x8000;
   20750:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20755:	66 35 00 80          	xor    $0x8000,%ax
   20759:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(&tmp,PST(0),&tmp);
   2075e:	83 ec 0c             	sub    $0xc,%esp
   20761:	6a 00                	push   $0x0
   20763:	e8 e7 03 00 00       	call   20b4f <__st>
   20768:	83 c4 10             	add    $0x10,%esp
   2076b:	89 c2                	mov    %eax,%edx
   2076d:	83 ec 04             	sub    $0x4,%esp
   20770:	8d 44 24 10          	lea    0x10(%esp),%eax
   20774:	50                   	push   %eax
   20775:	52                   	push   %edx
   20776:	8d 44 24 18          	lea    0x18(%esp),%eax
   2077a:	50                   	push   %eax
   2077b:	e8 d2 10 00 00       	call   21852 <fadd>
   20780:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20783:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20787:	83 ec 0c             	sub    $0xc,%esp
   2078a:	6a 00                	push   $0x0
   2078c:	e8 be 03 00 00       	call   20b4f <__st>
   20791:	83 c4 10             	add    $0x10,%esp
   20794:	89 c1                	mov    %eax,%ecx
   20796:	8b 03                	mov    (%ebx),%eax
   20798:	8b 53 04             	mov    0x4(%ebx),%edx
   2079b:	89 01                	mov    %eax,(%ecx)
   2079d:	89 51 04             	mov    %edx,0x4(%ecx)
   207a0:	83 ec 0c             	sub    $0xc,%esp
   207a3:	6a 00                	push   $0x0
   207a5:	e8 a5 03 00 00       	call   20b4f <__st>
   207aa:	83 c4 10             	add    $0x10,%esp
   207ad:	89 c2                	mov    %eax,%edx
   207af:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   207b4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   207b8:	e9 ca 01 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 5:                 // FSUBR。
			ST(0).exponent ^= 0x8000;
   207bd:	83 ec 0c             	sub    $0xc,%esp
   207c0:	6a 00                	push   $0x0
   207c2:	e8 88 03 00 00       	call   20b4f <__st>
   207c7:	83 c4 10             	add    $0x10,%esp
   207ca:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   207ce:	66 81 f2 00 80       	xor    $0x8000,%dx
   207d3:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(&tmp,PST(0),&tmp);
   207d7:	83 ec 0c             	sub    $0xc,%esp
   207da:	6a 00                	push   $0x0
   207dc:	e8 6e 03 00 00       	call   20b4f <__st>
   207e1:	83 c4 10             	add    $0x10,%esp
   207e4:	89 c2                	mov    %eax,%edx
   207e6:	83 ec 04             	sub    $0x4,%esp
   207e9:	8d 44 24 10          	lea    0x10(%esp),%eax
   207ed:	50                   	push   %eax
   207ee:	52                   	push   %edx
   207ef:	8d 44 24 18          	lea    0x18(%esp),%eax
   207f3:	50                   	push   %eax
   207f4:	e8 59 10 00 00       	call   21852 <fadd>
   207f9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   207fc:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   20800:	83 ec 0c             	sub    $0xc,%esp
   20803:	6a 00                	push   $0x0
   20805:	e8 45 03 00 00       	call   20b4f <__st>
   2080a:	83 c4 10             	add    $0x10,%esp
   2080d:	89 c1                	mov    %eax,%ecx
   2080f:	8b 03                	mov    (%ebx),%eax
   20811:	8b 53 04             	mov    0x4(%ebx),%edx
   20814:	89 01                	mov    %eax,(%ecx)
   20816:	89 51 04             	mov    %edx,0x4(%ecx)
   20819:	83 ec 0c             	sub    $0xc,%esp
   2081c:	6a 00                	push   $0x0
   2081e:	e8 2c 03 00 00       	call   20b4f <__st>
   20823:	83 c4 10             	add    $0x10,%esp
   20826:	89 c2                	mov    %eax,%edx
   20828:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2082d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20831:	e9 51 01 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 6:                 // FDIV。
			fdiv(PST(0),&tmp,&tmp);
   20836:	83 ec 0c             	sub    $0xc,%esp
   20839:	6a 00                	push   $0x0
   2083b:	e8 0f 03 00 00       	call   20b4f <__st>
   20840:	83 c4 10             	add    $0x10,%esp
   20843:	89 c2                	mov    %eax,%edx
   20845:	83 ec 04             	sub    $0x4,%esp
   20848:	8d 44 24 10          	lea    0x10(%esp),%eax
   2084c:	50                   	push   %eax
   2084d:	8d 44 24 14          	lea    0x14(%esp),%eax
   20851:	50                   	push   %eax
   20852:	52                   	push   %edx
   20853:	e8 51 14 00 00       	call   21ca9 <fdiv>
   20858:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2085b:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   2085f:	83 ec 0c             	sub    $0xc,%esp
   20862:	6a 00                	push   $0x0
   20864:	e8 e6 02 00 00       	call   20b4f <__st>
   20869:	83 c4 10             	add    $0x10,%esp
   2086c:	89 c1                	mov    %eax,%ecx
   2086e:	8b 03                	mov    (%ebx),%eax
   20870:	8b 53 04             	mov    0x4(%ebx),%edx
   20873:	89 01                	mov    %eax,(%ecx)
   20875:	89 51 04             	mov    %edx,0x4(%ecx)
   20878:	83 ec 0c             	sub    $0xc,%esp
   2087b:	6a 00                	push   $0x0
   2087d:	e8 cd 02 00 00       	call   20b4f <__st>
   20882:	83 c4 10             	add    $0x10,%esp
   20885:	89 c2                	mov    %eax,%edx
   20887:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2088c:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20890:	e9 f2 00 00 00       	jmp    20987 <do_emu+0x1d5f>
		case 7:                 // FDIVR。
			fdiv(&tmp,PST(0),&tmp);
   20895:	83 ec 0c             	sub    $0xc,%esp
   20898:	6a 00                	push   $0x0
   2089a:	e8 b0 02 00 00       	call   20b4f <__st>
   2089f:	83 c4 10             	add    $0x10,%esp
   208a2:	89 c2                	mov    %eax,%edx
   208a4:	83 ec 04             	sub    $0x4,%esp
   208a7:	8d 44 24 10          	lea    0x10(%esp),%eax
   208ab:	50                   	push   %eax
   208ac:	52                   	push   %edx
   208ad:	8d 44 24 18          	lea    0x18(%esp),%eax
   208b1:	50                   	push   %eax
   208b2:	e8 f2 13 00 00       	call   21ca9 <fdiv>
   208b7:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   208ba:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   208be:	83 ec 0c             	sub    $0xc,%esp
   208c1:	6a 00                	push   $0x0
   208c3:	e8 87 02 00 00       	call   20b4f <__st>
   208c8:	83 c4 10             	add    $0x10,%esp
   208cb:	89 c1                	mov    %eax,%ecx
   208cd:	8b 03                	mov    (%ebx),%eax
   208cf:	8b 53 04             	mov    0x4(%ebx),%edx
   208d2:	89 01                	mov    %eax,(%ecx)
   208d4:	89 51 04             	mov    %edx,0x4(%ecx)
   208d7:	83 ec 0c             	sub    $0xc,%esp
   208da:	6a 00                	push   $0x0
   208dc:	e8 6e 02 00 00       	call   20b4f <__st>
   208e1:	83 c4 10             	add    $0x10,%esp
   208e4:	89 c2                	mov    %eax,%edx
   208e6:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   208eb:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   208ef:	e9 93 00 00 00       	jmp    20987 <do_emu+0x1d5f>
	}
// 处理形如11011,XX,1,XX，000,R/M的指令代码。
	if ((code & 0x138) == 0x100) {
   208f4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   208f9:	25 38 01 00 00       	and    $0x138,%eax
   208fe:	3d 00 01 00 00       	cmp    $0x100,%eax
   20903:	75 3c                	jne    20941 <do_emu+0x1d19>
			fpush();
   20905:	e8 81 01 00 00       	call   20a8b <fpush>
			real_to_real(&tmp,&ST(0));
   2090a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   2090e:	83 ec 0c             	sub    $0xc,%esp
   20911:	6a 00                	push   $0x0
   20913:	e8 37 02 00 00       	call   20b4f <__st>
   20918:	83 c4 10             	add    $0x10,%esp
   2091b:	89 c1                	mov    %eax,%ecx
   2091d:	8b 03                	mov    (%ebx),%eax
   2091f:	8b 53 04             	mov    0x4(%ebx),%edx
   20922:	89 01                	mov    %eax,(%ecx)
   20924:	89 51 04             	mov    %edx,0x4(%ecx)
   20927:	83 ec 0c             	sub    $0xc,%esp
   2092a:	6a 00                	push   $0x0
   2092c:	e8 1e 02 00 00       	call   20b4f <__st>
   20931:	83 c4 10             	add    $0x10,%esp
   20934:	89 c2                	mov    %eax,%edx
   20936:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2093b:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2093f:	eb 46                	jmp    20987 <do_emu+0x1d5f>
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
   20941:	0f b7 4c 24 1e       	movzwl 0x1e(%esp),%ecx
   20946:	8b 44 24 30          	mov    0x30(%esp),%eax
   2094a:	8b 50 38             	mov    0x38(%eax),%edx
   2094d:	8b 44 24 30          	mov    0x30(%esp),%eax
   20951:	83 c0 3c             	add    $0x3c,%eax
   20954:	0f b7 00             	movzwl (%eax),%eax
   20957:	0f b7 c0             	movzwl %ax,%eax
   2095a:	51                   	push   %ecx
   2095b:	52                   	push   %edx
   2095c:	50                   	push   %eax
   2095d:	68 ec 51 02 00       	push   $0x251ec
   20962:	e8 df 82 fe ff       	call   8c46 <printk>
   20967:	83 c4 10             	add    $0x10,%esp
	math_abort(info,1<<(SIGFPE-1));
   2096a:	83 ec 08             	sub    $0x8,%esp
   2096d:	68 80 00 00 00       	push   $0x80
   20972:	ff 74 24 3c          	pushl  0x3c(%esp)
   20976:	e8 75 00 00 00       	call   209f0 <__math_abort>
   2097b:	83 c4 10             	add    $0x10,%esp
   2097e:	eb 07                	jmp    20987 <do_emu+0x1d5f>
			return;
   20980:	90                   	nop
   20981:	eb 04                	jmp    20987 <do_emu+0x1d5f>
			return;
   20983:	90                   	nop
   20984:	eb 01                	jmp    20987 <do_emu+0x1d5f>
			return;
   20986:	90                   	nop
}
   20987:	83 c4 28             	add    $0x28,%esp
   2098a:	5b                   	pop    %ebx
   2098b:	c3                   	ret    

0002098c <math_emulate>:
// CPU异常中断int 7调用的80387仿真接口函数。
// 若当前进程没有使用过协处理器，就设置使用协处理器标志used_math，然后初始化80387的控制字、状态字和特征字。最后使用中断
// int 7调用本函数的返回地址指针作为参数调用浮点指令仿真主函数do_emu()。
// 参数____false是_orig_eip。
void math_emulate(long ___false)
{
   2098c:	83 ec 0c             	sub    $0xc,%esp
	if (!current->used_math) {
   2098f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20994:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
   2099b:	66 85 c0             	test   %ax,%ax
   2099e:	75 3b                	jne    209db <math_emulate+0x4f>
		current->used_math = 1;
   209a0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209a5:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
   209ac:	01 00 
		I387.cwd = 0x037f;
   209ae:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209b3:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   209ba:	03 00 00 
		I387.swd = 0x0000;
   209bd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209c2:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   209c9:	00 00 00 
		I387.twd = 0x0000;
   209cc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   209d1:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   209d8:	00 00 00 
	}
/* &___false points to info->___orig_eip, so subtract 1 to get info */
	do_emu((struct info *) ((&___false) - 1));
   209db:	8d 44 24 0c          	lea    0xc(%esp),%eax
   209df:	83 ec 0c             	sub    $0xc,%esp
   209e2:	50                   	push   %eax
   209e3:	e8 40 e2 ff ff       	call   1ec28 <do_emu>
   209e8:	83 c4 10             	add    $0x10,%esp
}
   209eb:	90                   	nop
   209ec:	83 c4 0c             	add    $0xc,%esp
   209ef:	c3                   	ret    

000209f0 <__math_abort>:
// 终止仿真操作。
// 当处理到无效指令代码或者未实现的指令代码时，该函数首先恢复程序的原EIP，并发送指定信号给当前进程。最后将栈指针指向中断
// int 7处理过程调用本函数的返回地址，直接返回到中断处理过程中。
void __math_abort(struct info * info, unsigned int signal)
{
	EIP = ORIG_EIP;
   209f0:	8b 44 24 04          	mov    0x4(%esp),%eax
   209f4:	8b 50 04             	mov    0x4(%eax),%edx
   209f7:	8b 44 24 04          	mov    0x4(%esp),%eax
   209fb:	89 50 38             	mov    %edx,0x38(%eax)
	current->signal |= signal;
   209fe:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a03:	8b 40 0c             	mov    0xc(%eax),%eax
   20a06:	0b 44 24 08          	or     0x8(%esp),%eax
   20a0a:	89 c2                	mov    %eax,%edx
   20a0c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a11:	89 50 0c             	mov    %edx,0xc(%eax)
	__asm__("movl %0,%%esp ; ret"::"g" ((long) info));
   20a14:	8b 44 24 04          	mov    0x4(%esp),%eax
   20a18:	89 c4                	mov    %eax,%esp
   20a1a:	c3                   	ret    
}
   20a1b:	90                   	nop
   20a1c:	c3                   	ret    

00020a1d <fpop>:

// 累加器栈弹出操作。
// 将状态字TOP字段值加1，并以7取模。
static void fpop(void)
{
   20a1d:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20a20:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a25:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a2b:	80 e4 c7             	and    $0xc7,%ah
   20a2e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00000800;
   20a32:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a37:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20a3d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a42:	81 c2 00 08 00 00    	add    $0x800,%edx
   20a48:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20a4e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a53:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20a59:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a5e:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20a64:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20a6a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a6f:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a75:	0b 44 24 0c          	or     0xc(%esp),%eax
   20a79:	89 c2                	mov    %eax,%edx
   20a7b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a80:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20a86:	90                   	nop
   20a87:	83 c4 10             	add    $0x10,%esp
   20a8a:	c3                   	ret    

00020a8b <fpush>:

// 累加器栈入栈操作。
// 将状态字TOP字段减1（即加7），并以7取模。
static void fpush(void)
{
   20a8b:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20a8e:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20a93:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a99:	80 e4 c7             	and    $0xc7,%ah
   20a9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00003800;
   20aa0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20aa5:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20aab:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20ab0:	81 c2 00 38 00 00    	add    $0x3800,%edx
   20ab6:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20abc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20ac1:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   20ac7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20acc:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20ad2:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20ad8:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20add:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20ae3:	0b 44 24 0c          	or     0xc(%esp),%eax
   20ae7:	89 c2                	mov    %eax,%edx
   20ae9:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20aee:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20af4:	90                   	nop
   20af5:	83 c4 10             	add    $0x10,%esp
   20af8:	c3                   	ret    

00020af9 <fxchg>:

// 交换两个累加器的值。
static void fxchg(temp_real_unaligned * a, temp_real_unaligned * b)
{
   20af9:	83 ec 10             	sub    $0x10,%esp
	temp_real_unaligned c;

	c = *a;
   20afc:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b00:	8b 10                	mov    (%eax),%edx
   20b02:	89 54 24 06          	mov    %edx,0x6(%esp)
   20b06:	8b 50 04             	mov    0x4(%eax),%edx
   20b09:	89 54 24 0a          	mov    %edx,0xa(%esp)
   20b0d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   20b11:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	*a = *b;
   20b16:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b1a:	8b 54 24 18          	mov    0x18(%esp),%edx
   20b1e:	8b 0a                	mov    (%edx),%ecx
   20b20:	89 08                	mov    %ecx,(%eax)
   20b22:	8b 4a 04             	mov    0x4(%edx),%ecx
   20b25:	89 48 04             	mov    %ecx,0x4(%eax)
   20b28:	0f b7 52 08          	movzwl 0x8(%edx),%edx
   20b2c:	66 89 50 08          	mov    %dx,0x8(%eax)
	*b = c;
   20b30:	8b 44 24 18          	mov    0x18(%esp),%eax
   20b34:	8b 54 24 06          	mov    0x6(%esp),%edx
   20b38:	89 10                	mov    %edx,(%eax)
   20b3a:	8b 54 24 0a          	mov    0xa(%esp),%edx
   20b3e:	89 50 04             	mov    %edx,0x4(%eax)
   20b41:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   20b46:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20b4a:	90                   	nop
   20b4b:	83 c4 10             	add    $0x10,%esp
   20b4e:	c3                   	ret    

00020b4f <__st>:

// 取ST(i)的内存指针。
// 取状态字中TOP字段值。加上指定的物理数据寄存器号并取模，最后返回ST(i)对应的指针。
static temp_real_unaligned * __st(int i)
{
	i += I387.swd >> 11;            // 取状态字中TOP字段值。
   20b4f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20b54:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20b5a:	c1 f8 0b             	sar    $0xb,%eax
   20b5d:	01 44 24 04          	add    %eax,0x4(%esp)
	i &= 7;
   20b61:	83 64 24 04 07       	andl   $0x7,0x4(%esp)
	return (temp_real_unaligned *) (i*10 + (char *)(I387.st_space));
   20b66:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20b6b:	8d 88 34 04 00 00    	lea    0x434(%eax),%ecx
   20b71:	8b 54 24 04          	mov    0x4(%esp),%edx
   20b75:	89 d0                	mov    %edx,%eax
   20b77:	c1 e0 02             	shl    $0x2,%eax
   20b7a:	01 d0                	add    %edx,%eax
   20b7c:	01 c0                	add    %eax,%eax
   20b7e:	01 c8                	add    %ecx,%eax
   20b80:	c3                   	ret    

00020b81 <math_error>:
// 协处理器错误中断int 16调用的处理函数。
// 当协处理器检测到自己发生错误时，就会通过ERROR引脚通知CPU。下面代码用于处理协处理器发出的出错信号。并跳转去执行math_error()
// 返回后将跳转到标号ret_from_sys_call处继续执行。
void math_error(void)
{
	__asm__("fnclex");              // 让80387清除状态字中所有异常标志位和忙位。
   20b81:	db e2                	fnclex 
	if (last_task_used_math)        // 若使用了协处理器，则设置协处理器出错信号。
   20b83:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b88:	85 c0                	test   %eax,%eax
   20b8a:	74 13                	je     20b9f <math_error+0x1e>
		last_task_used_math->signal |= 1<<(SIGFPE-1);
   20b8c:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b91:	8b 50 0c             	mov    0xc(%eax),%edx
   20b94:	a1 0c fb 02 00       	mov    0x2fb0c,%eax
   20b99:	80 ca 80             	or     $0x80,%dl
   20b9c:	89 50 0c             	mov    %edx,0xc(%eax)
}
   20b9f:	90                   	nop
   20ba0:	c3                   	ret    

00020ba1 <get_fs_byte>:
{
   20ba1:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20ba2:	8b 44 24 08          	mov    0x8(%esp),%eax
   20ba6:	64 8a 00             	mov    %fs:(%eax),%al
   20ba9:	89 c3                	mov    %eax,%ebx
	return _v;
   20bab:	89 d8                	mov    %ebx,%eax
}
   20bad:	5b                   	pop    %ebx
   20bae:	c3                   	ret    

00020baf <get_fs_long>:
{
   20baf:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20bb2:	8b 44 24 14          	mov    0x14(%esp),%eax
   20bb6:	64 8b 00             	mov    %fs:(%eax),%eax
   20bb9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20bbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20bc1:	83 c4 10             	add    $0x10,%esp
   20bc4:	c3                   	ret    

00020bc5 <sib>:
// 取info结构中指定位置处寄存器内容。
#define REG(x) (*(long *)(__regoffset[(x)]+(char *) info))

// 求2字节寻址模式中第2操作数指示字节SIB（Scale, Index, Base）的值。
static char * sib(struct info * info, int mod)
{
   20bc5:	83 ec 10             	sub    $0x10,%esp
	unsigned char ss,index,base;
	long offset = 0;
   20bc8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20bcf:	00 

// 首先从用户代码段中取得SIB字节，然后取出各个字段位值。
	base = get_fs_byte((char *) EIP);
   20bd0:	8b 44 24 14          	mov    0x14(%esp),%eax
   20bd4:	8b 40 38             	mov    0x38(%eax),%eax
   20bd7:	50                   	push   %eax
   20bd8:	e8 c4 ff ff ff       	call   20ba1 <get_fs_byte>
   20bdd:	83 c4 04             	add    $0x4,%esp
   20be0:	88 44 24 0b          	mov    %al,0xb(%esp)
	EIP++;
   20be4:	8b 44 24 14          	mov    0x14(%esp),%eax
   20be8:	8b 40 38             	mov    0x38(%eax),%eax
   20beb:	8d 50 01             	lea    0x1(%eax),%edx
   20bee:	8b 44 24 14          	mov    0x14(%esp),%eax
   20bf2:	89 50 38             	mov    %edx,0x38(%eax)
	ss = base >> 6;                 // 比例因子大小ss。
   20bf5:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20bfa:	c0 e8 06             	shr    $0x6,%al
   20bfd:	88 44 24 0a          	mov    %al,0xa(%esp)
	index = (base >> 3) & 7;        // 索引值索引代号index。
   20c01:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20c06:	c0 e8 03             	shr    $0x3,%al
   20c09:	83 e0 07             	and    $0x7,%eax
   20c0c:	88 44 24 09          	mov    %al,0x9(%esp)
	base &= 7;                      // 基地址代号base。
   20c10:	80 64 24 0b 07       	andb   $0x7,0xb(%esp)
// 如果索引代号为0b100，表示无索引偏移值。否则索引偏移值offset=对应寄存器内容×比例因子。
	if (index == 4)
   20c15:	80 7c 24 09 04       	cmpb   $0x4,0x9(%esp)
   20c1a:	75 0a                	jne    20c26 <sib+0x61>
		offset = 0;
   20c1c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20c23:	00 
   20c24:	eb 1a                	jmp    20c40 <sib+0x7b>
	else
		offset = REG(index);
   20c26:	0f b6 44 24 09       	movzbl 0x9(%esp),%eax
   20c2b:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20c32:	89 c2                	mov    %eax,%edx
   20c34:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c38:	01 d0                	add    %edx,%eax
   20c3a:	8b 00                	mov    (%eax),%eax
   20c3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	offset <<= ss;
   20c40:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
   20c45:	89 c1                	mov    %eax,%ecx
   20c47:	d3 64 24 0c          	shll   %cl,0xc(%esp)
// 如果上一MODRM字节中的MOD不为零，或者Base不等于0b101，则表示有偏移值在base指定的寄存器中。因此偏移offset需要再加上base
// 对应寄存器中的内容。
	if (mod || base != 5)
   20c4b:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   20c50:	75 07                	jne    20c59 <sib+0x94>
   20c52:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20c57:	74 1a                	je     20c73 <sib+0xae>
		offset += REG(base);
   20c59:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20c5e:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20c65:	89 c2                	mov    %eax,%edx
   20c67:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c6b:	01 d0                	add    %edx,%eax
   20c6d:	8b 00                	mov    (%eax),%eax
   20c6f:	01 44 24 0c          	add    %eax,0xc(%esp)
// 如果MOD=1，则表示偏移值为1字节。否则，若MOD=2，或者base=0b101，则偏移值为4字节。
	if (mod == 1) {
   20c73:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   20c78:	75 2a                	jne    20ca4 <sib+0xdf>
		offset += (signed char) get_fs_byte((char *) EIP);
   20c7a:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c7e:	8b 40 38             	mov    0x38(%eax),%eax
   20c81:	50                   	push   %eax
   20c82:	e8 1a ff ff ff       	call   20ba1 <get_fs_byte>
   20c87:	83 c4 04             	add    $0x4,%esp
   20c8a:	0f be c0             	movsbl %al,%eax
   20c8d:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP++;
   20c91:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c95:	8b 40 38             	mov    0x38(%eax),%eax
   20c98:	8d 50 01             	lea    0x1(%eax),%edx
   20c9b:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c9f:	89 50 38             	mov    %edx,0x38(%eax)
   20ca2:	eb 33                	jmp    20cd7 <sib+0x112>
	} else if (mod == 2 || base == 5) {
   20ca4:	83 7c 24 18 02       	cmpl   $0x2,0x18(%esp)
   20ca9:	74 07                	je     20cb2 <sib+0xed>
   20cab:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20cb0:	75 25                	jne    20cd7 <sib+0x112>
		offset += (signed) get_fs_long((unsigned long *) EIP);
   20cb2:	8b 44 24 14          	mov    0x14(%esp),%eax
   20cb6:	8b 40 38             	mov    0x38(%eax),%eax
   20cb9:	50                   	push   %eax
   20cba:	e8 f0 fe ff ff       	call   20baf <get_fs_long>
   20cbf:	83 c4 04             	add    $0x4,%esp
   20cc2:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP += 4;
   20cc6:	8b 44 24 14          	mov    0x14(%esp),%eax
   20cca:	8b 40 38             	mov    0x38(%eax),%eax
   20ccd:	8d 50 04             	lea    0x4(%eax),%edx
   20cd0:	8b 44 24 14          	mov    0x14(%esp),%eax
   20cd4:	89 50 38             	mov    %edx,0x38(%eax)
	}
// 最后保存并返回偏移值。
	I387.foo = offset;
   20cd7:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20cdc:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20ce0:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20ce6:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20ceb:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20cf2:	00 00 00 
	return (char *) offset;
   20cf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20cf9:	83 c4 10             	add    $0x10,%esp
   20cfc:	c3                   	ret    

00020cfd <ea>:

// 根据指令中寻址模式字节计算有效地址值。
char * ea(struct info * info, unsigned short code)
{
   20cfd:	83 ec 2c             	sub    $0x2c,%esp
   20d00:	8b 44 24 34          	mov    0x34(%esp),%eax
   20d04:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char mod,rm;
	long * tmp = &EAX;
   20d09:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d0d:	83 c0 18             	add    $0x18,%eax
   20d10:	89 44 24 18          	mov    %eax,0x18(%esp)
	int offset = 0;
   20d14:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20d1b:	00 

// 首先取代码中的MOD字段和R/M字段值。如果MOD=0b11，表示是单字节指令，没有偏移字段。如果R/M字段=0b100，并且MOD不为0b11，
// 表示是2字节地址模式寻址，因此调用sib()求出偏移值并返回即可。
	mod = (code >> 6) & 3;          // MOD字段。
   20d1c:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20d21:	66 c1 e8 06          	shr    $0x6,%ax
   20d25:	83 e0 03             	and    $0x3,%eax
   20d28:	88 44 24 17          	mov    %al,0x17(%esp)
	rm = code & 7;                  // R/M字段。
   20d2c:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20d31:	83 e0 07             	and    $0x7,%eax
   20d34:	88 44 24 16          	mov    %al,0x16(%esp)
	if (rm == 4 && mod != 3)
   20d38:	80 7c 24 16 04       	cmpb   $0x4,0x16(%esp)
   20d3d:	75 1e                	jne    20d5d <ea+0x60>
   20d3f:	80 7c 24 17 03       	cmpb   $0x3,0x17(%esp)
   20d44:	74 17                	je     20d5d <ea+0x60>
		return sib(info,mod);
   20d46:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20d4b:	50                   	push   %eax
   20d4c:	ff 74 24 34          	pushl  0x34(%esp)
   20d50:	e8 70 fe ff ff       	call   20bc5 <sib>
   20d55:	83 c4 08             	add    $0x8,%esp
   20d58:	e9 2b 01 00 00       	jmp    20e88 <ea+0x18b>
// 如果R/M字段为0b101，并且MOD为0，表示是单字节地址模式编码且后随32字节偏移值。于是取出用户代码中4字节偏移值，保存并返回
// 之。
	if (rm == 5 && !mod) {
   20d5d:	80 7c 24 16 05       	cmpb   $0x5,0x16(%esp)
   20d62:	75 53                	jne    20db7 <ea+0xba>
   20d64:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
   20d69:	75 4c                	jne    20db7 <ea+0xba>
		offset = get_fs_long((unsigned long *) EIP);
   20d6b:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d6f:	8b 40 38             	mov    0x38(%eax),%eax
   20d72:	50                   	push   %eax
   20d73:	e8 37 fe ff ff       	call   20baf <get_fs_long>
   20d78:	83 c4 04             	add    $0x4,%esp
   20d7b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		EIP += 4;
   20d7f:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d83:	8b 40 38             	mov    0x38(%eax),%eax
   20d86:	8d 50 04             	lea    0x4(%eax),%edx
   20d89:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d8d:	89 50 38             	mov    %edx,0x38(%eax)
		I387.foo = offset;
   20d90:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20d95:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20d99:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
		I387.fos = 0x17;
   20d9f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20da4:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20dab:	00 00 00 
		return (char *) offset;
   20dae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20db2:	e9 d1 00 00 00       	jmp    20e88 <ea+0x18b>
	}
// 对于其余情况，则根据MOD进行处理。首先取出R/M代码对应寄存器内容的值作为指针tmp。对于MOD=0，无偏移值。对于MOD=1，代码后
// 随1字节偏移值。对于MOD=2，代码后有4字节偏移值。最后保存并返回有效地址值。
	tmp = & REG(rm);
   20db7:	0f b6 44 24 16       	movzbl 0x16(%esp),%eax
   20dbc:	8b 04 85 80 f5 02 00 	mov    0x2f580(,%eax,4),%eax
   20dc3:	89 c2                	mov    %eax,%edx
   20dc5:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dc9:	01 d0                	add    %edx,%eax
   20dcb:	89 44 24 18          	mov    %eax,0x18(%esp)
	switch (mod) {
   20dcf:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20dd4:	83 f8 01             	cmp    $0x1,%eax
   20dd7:	74 21                	je     20dfa <ea+0xfd>
   20dd9:	83 f8 01             	cmp    $0x1,%eax
   20ddc:	7f 06                	jg     20de4 <ea+0xe7>
   20dde:	85 c0                	test   %eax,%eax
   20de0:	74 0e                	je     20df0 <ea+0xf3>
   20de2:	eb 78                	jmp    20e5c <ea+0x15f>
   20de4:	83 f8 02             	cmp    $0x2,%eax
   20de7:	74 3b                	je     20e24 <ea+0x127>
   20de9:	83 f8 03             	cmp    $0x3,%eax
   20dec:	74 5d                	je     20e4b <ea+0x14e>
   20dee:	eb 6c                	jmp    20e5c <ea+0x15f>
		case 0: offset = 0; break;
   20df0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20df7:	00 
   20df8:	eb 62                	jmp    20e5c <ea+0x15f>
		case 1:
			offset = (signed char) get_fs_byte((char *) EIP);
   20dfa:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dfe:	8b 40 38             	mov    0x38(%eax),%eax
   20e01:	50                   	push   %eax
   20e02:	e8 9a fd ff ff       	call   20ba1 <get_fs_byte>
   20e07:	83 c4 04             	add    $0x4,%esp
   20e0a:	0f be c0             	movsbl %al,%eax
   20e0d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP++;
   20e11:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e15:	8b 40 38             	mov    0x38(%eax),%eax
   20e18:	8d 50 01             	lea    0x1(%eax),%edx
   20e1b:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e1f:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20e22:	eb 38                	jmp    20e5c <ea+0x15f>
		case 2:
			offset = (signed) get_fs_long((unsigned long *) EIP);
   20e24:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e28:	8b 40 38             	mov    0x38(%eax),%eax
   20e2b:	50                   	push   %eax
   20e2c:	e8 7e fd ff ff       	call   20baf <get_fs_long>
   20e31:	83 c4 04             	add    $0x4,%esp
   20e34:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP += 4;
   20e38:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e3c:	8b 40 38             	mov    0x38(%eax),%eax
   20e3f:	8d 50 04             	lea    0x4(%eax),%edx
   20e42:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e46:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20e49:	eb 11                	jmp    20e5c <ea+0x15f>
		case 3:
			math_abort(info,1<<(SIGILL-1));
   20e4b:	83 ec 08             	sub    $0x8,%esp
   20e4e:	6a 08                	push   $0x8
   20e50:	ff 74 24 3c          	pushl  0x3c(%esp)
   20e54:	e8 97 fb ff ff       	call   209f0 <__math_abort>
   20e59:	83 c4 10             	add    $0x10,%esp
	}
	I387.foo = offset;
   20e5c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20e61:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20e65:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20e6b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   20e70:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20e77:	00 00 00 
	return offset + (char *) *tmp;
   20e7a:	8b 44 24 18          	mov    0x18(%esp),%eax
   20e7e:	8b 00                	mov    (%eax),%eax
   20e80:	89 c2                	mov    %eax,%edx
   20e82:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20e86:	01 d0                	add    %edx,%eax
}
   20e88:	83 c4 2c             	add    $0x2c,%esp
   20e8b:	c3                   	ret    

00020e8c <get_fs_byte>:
{
   20e8c:	53                   	push   %ebx
	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e8d:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e91:	64 8a 00             	mov    %fs:(%eax),%al
   20e94:	89 c3                	mov    %eax,%ebx
	return _v;
   20e96:	89 d8                	mov    %ebx,%eax
}
   20e98:	5b                   	pop    %ebx
   20e99:	c3                   	ret    

00020e9a <get_fs_word>:
{
   20e9a:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e9d:	8b 44 24 14          	mov    0x14(%esp),%eax
   20ea1:	64 66 8b 00          	mov    %fs:(%eax),%ax
   20ea5:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   20eaa:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   20eaf:	83 c4 10             	add    $0x10,%esp
   20eb2:	c3                   	ret    

00020eb3 <get_fs_long>:
{
   20eb3:	83 ec 10             	sub    $0x10,%esp
	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20eb6:	8b 44 24 14          	mov    0x14(%esp),%eax
   20eba:	64 8b 00             	mov    %fs:(%eax),%eax
   20ebd:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20ec1:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20ec5:	83 c4 10             	add    $0x10,%esp
   20ec8:	c3                   	ret    

00020ec9 <put_fs_byte>:
{
   20ec9:	83 ec 04             	sub    $0x4,%esp
   20ecc:	8b 44 24 08          	mov    0x8(%esp),%eax
   20ed0:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   20ed3:	0f b6 04 24          	movzbl (%esp),%eax
   20ed7:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20edb:	64 88 02             	mov    %al,%fs:(%edx)
}
   20ede:	90                   	nop
   20edf:	83 c4 04             	add    $0x4,%esp
   20ee2:	c3                   	ret    

00020ee3 <put_fs_word>:
{
   20ee3:	83 ec 04             	sub    $0x4,%esp
   20ee6:	8b 44 24 08          	mov    0x8(%esp),%eax
   20eea:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   20eee:	0f b7 04 24          	movzwl (%esp),%eax
   20ef2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20ef6:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   20efa:	90                   	nop
   20efb:	83 c4 04             	add    $0x4,%esp
   20efe:	c3                   	ret    

00020eff <put_fs_long>:
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   20eff:	8b 44 24 04          	mov    0x4(%esp),%eax
   20f03:	8b 54 24 08          	mov    0x8(%esp),%edx
   20f07:	64 89 02             	mov    %eax,%fs:(%edx)
}
   20f0a:	90                   	nop
   20f0b:	c3                   	ret    

00020f0c <get_short_real>:
// 根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短实数所在有效地址（math/ea.c），然后从用户
// 数据区读取相应实数值。最后把用户短实数转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f0c:	83 ec 2c             	sub    $0x2c,%esp
   20f0f:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f13:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 计算有效地址。
   20f18:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f1d:	83 ec 08             	sub    $0x8,%esp
   20f20:	50                   	push   %eax
   20f21:	ff 74 24 40          	pushl  0x40(%esp)
   20f25:	e8 d3 fd ff ff       	call   20cfd <ea>
   20f2a:	83 c4 10             	add    $0x10,%esp
   20f2d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	sr = get_fs_long((unsigned long *) addr);       // 取用户数据区中的值。
   20f31:	83 ec 0c             	sub    $0xc,%esp
   20f34:	ff 74 24 28          	pushl  0x28(%esp)
   20f38:	e8 76 ff ff ff       	call   20eb3 <get_fs_long>
   20f3d:	83 c4 10             	add    $0x10,%esp
   20f40:	89 44 24 18          	mov    %eax,0x18(%esp)
	short_to_temp(&sr,tmp);                         // 转换成临时实数格式。
   20f44:	83 ec 08             	sub    $0x8,%esp
   20f47:	ff 74 24 38          	pushl  0x38(%esp)
   20f4b:	8d 44 24 24          	lea    0x24(%esp),%eax
   20f4f:	50                   	push   %eax
   20f50:	e8 47 11 00 00       	call   2209c <short_to_temp>
   20f55:	83 c4 10             	add    $0x10,%esp
}
   20f58:	90                   	nop
   20f59:	83 c4 2c             	add    $0x2c,%esp
   20f5c:	c3                   	ret    

00020f5d <get_long_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长实数所在有效地址（math/ec.c），然后从
// 用户数据区读取相应实数值。最后把用户实数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f5d:	83 ec 2c             	sub    $0x2c,%esp
   20f60:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f64:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取指令中的有效地址。
   20f69:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f6e:	83 ec 08             	sub    $0x8,%esp
   20f71:	50                   	push   %eax
   20f72:	ff 74 24 40          	pushl  0x40(%esp)
   20f76:	e8 82 fd ff ff       	call   20cfd <ea>
   20f7b:	83 c4 10             	add    $0x10,%esp
   20f7e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	lr.a = get_fs_long((unsigned long *) addr);     // 取长8字节实数。
   20f82:	83 ec 0c             	sub    $0xc,%esp
   20f85:	ff 74 24 28          	pushl  0x28(%esp)
   20f89:	e8 25 ff ff ff       	call   20eb3 <get_fs_long>
   20f8e:	83 c4 10             	add    $0x10,%esp
   20f91:	89 44 24 14          	mov    %eax,0x14(%esp)
	lr.b = get_fs_long(1 + (unsigned long *) addr); // 转换成临时实数格式。
   20f95:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20f99:	83 c0 04             	add    $0x4,%eax
   20f9c:	83 ec 0c             	sub    $0xc,%esp
   20f9f:	50                   	push   %eax
   20fa0:	e8 0e ff ff ff       	call   20eb3 <get_fs_long>
   20fa5:	83 c4 10             	add    $0x10,%esp
   20fa8:	89 44 24 18          	mov    %eax,0x18(%esp)
	long_to_temp(&lr,tmp);
   20fac:	83 ec 08             	sub    $0x8,%esp
   20faf:	ff 74 24 38          	pushl  0x38(%esp)
   20fb3:	8d 44 24 20          	lea    0x20(%esp),%eax
   20fb7:	50                   	push   %eax
   20fb8:	e8 82 11 00 00       	call   2213f <long_to_temp>
   20fbd:	83 c4 10             	add    $0x10,%esp
}
   20fc0:	90                   	nop
   20fc1:	83 c4 2c             	add    $0x2c,%esp
   20fc4:	c3                   	ret    

00020fc5 <get_temp_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得临时实数所在有效地址（math/ea.c），然后
// 从用户数据区读取相应临时实数值。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_temp_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20fc5:	83 ec 2c             	sub    $0x2c,%esp
   20fc8:	8b 44 24 38          	mov    0x38(%esp),%eax
   20fcc:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);           // 取指令中的有效地址值。
   20fd1:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20fd6:	83 ec 08             	sub    $0x8,%esp
   20fd9:	50                   	push   %eax
   20fda:	ff 74 24 40          	pushl  0x40(%esp)
   20fde:	e8 1a fd ff ff       	call   20cfd <ea>
   20fe3:	83 c4 10             	add    $0x10,%esp
   20fe6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp->a = get_fs_long((unsigned long *) addr);
   20fea:	83 ec 0c             	sub    $0xc,%esp
   20fed:	ff 74 24 28          	pushl  0x28(%esp)
   20ff1:	e8 bd fe ff ff       	call   20eb3 <get_fs_long>
   20ff6:	83 c4 10             	add    $0x10,%esp
   20ff9:	89 c2                	mov    %eax,%edx
   20ffb:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fff:	89 10                	mov    %edx,(%eax)
	tmp->b = get_fs_long(1 + (unsigned long *) addr);
   21001:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21005:	83 c0 04             	add    $0x4,%eax
   21008:	83 ec 0c             	sub    $0xc,%esp
   2100b:	50                   	push   %eax
   2100c:	e8 a2 fe ff ff       	call   20eb3 <get_fs_long>
   21011:	83 c4 10             	add    $0x10,%esp
   21014:	89 c2                	mov    %eax,%edx
   21016:	8b 44 24 30          	mov    0x30(%esp),%eax
   2101a:	89 50 04             	mov    %edx,0x4(%eax)
	tmp->exponent = get_fs_word(4 + (unsigned short *) addr);
   2101d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21021:	83 c0 08             	add    $0x8,%eax
   21024:	83 ec 0c             	sub    $0xc,%esp
   21027:	50                   	push   %eax
   21028:	e8 6d fe ff ff       	call   20e9a <get_fs_word>
   2102d:	83 c4 10             	add    $0x10,%esp
   21030:	89 c2                	mov    %eax,%edx
   21032:	8b 44 24 30          	mov    0x30(%esp),%eax
   21036:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   2103a:	90                   	nop
   2103b:	83 c4 2c             	add    $0x2c,%esp
   2103e:	c3                   	ret    

0002103f <get_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短整数所在有效地址（math/ea.c）
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   2103f:	83 ec 2c             	sub    $0x2c,%esp
   21042:	8b 44 24 38          	mov    0x38(%esp),%eax
   21046:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   2104b:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21050:	83 ec 08             	sub    $0x8,%esp
   21053:	50                   	push   %eax
   21054:	ff 74 24 40          	pushl  0x40(%esp)
   21058:	e8 a0 fc ff ff       	call   20cfd <ea>
   2105d:	83 c4 10             	add    $0x10,%esp
   21060:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = (signed short) get_fs_word((unsigned short *) addr);
   21064:	83 ec 0c             	sub    $0xc,%esp
   21067:	ff 74 24 28          	pushl  0x28(%esp)
   2106b:	e8 2a fe ff ff       	call   20e9a <get_fs_word>
   21070:	83 c4 10             	add    $0x10,%esp
   21073:	98                   	cwtl   
   21074:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   21078:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   2107f:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   21080:	8b 44 24 10          	mov    0x10(%esp),%eax
   21084:	c1 e8 1f             	shr    $0x1f,%eax
   21087:	0f b6 c0             	movzbl %al,%eax
   2108a:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   2108f:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21094:	66 85 c0             	test   %ax,%ax
   21097:	74 0a                	je     210a3 <get_short_int+0x64>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   21099:	8b 44 24 10          	mov    0x10(%esp),%eax
   2109d:	f7 d8                	neg    %eax
   2109f:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   210a3:	83 ec 08             	sub    $0x8,%esp
   210a6:	ff 74 24 38          	pushl  0x38(%esp)
   210aa:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   210ae:	50                   	push   %eax
   210af:	e8 35 16 00 00       	call   226e9 <int_to_real>
   210b4:	83 c4 10             	add    $0x10,%esp
}
   210b7:	90                   	nop
   210b8:	83 c4 2c             	add    $0x2c,%esp
   210bb:	c3                   	ret    

000210bc <get_long_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长整数所在有效地址（math/ea.c），然后从
// 用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   210bc:	83 ec 2c             	sub    $0x2c,%esp
   210bf:	8b 44 24 38          	mov    0x38(%esp),%eax
   210c3:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   210c8:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   210cd:	83 ec 08             	sub    $0x8,%esp
   210d0:	50                   	push   %eax
   210d1:	ff 74 24 40          	pushl  0x40(%esp)
   210d5:	e8 23 fc ff ff       	call   20cfd <ea>
   210da:	83 c4 10             	add    $0x10,%esp
   210dd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);
   210e1:	83 ec 0c             	sub    $0xc,%esp
   210e4:	ff 74 24 28          	pushl  0x28(%esp)
   210e8:	e8 c6 fd ff ff       	call   20eb3 <get_fs_long>
   210ed:	83 c4 10             	add    $0x10,%esp
   210f0:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   210f4:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   210fb:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   210fc:	8b 44 24 10          	mov    0x10(%esp),%eax
   21100:	c1 e8 1f             	shr    $0x1f,%eax
   21103:	0f b6 c0             	movzbl %al,%eax
   21106:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   2110b:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21110:	66 85 c0             	test   %ax,%ax
   21113:	74 0a                	je     2111f <get_long_int+0x63>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   21115:	8b 44 24 10          	mov    0x10(%esp),%eax
   21119:	f7 d8                	neg    %eax
   2111b:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   2111f:	83 ec 08             	sub    $0x8,%esp
   21122:	ff 74 24 38          	pushl  0x38(%esp)
   21126:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2112a:	50                   	push   %eax
   2112b:	e8 b9 15 00 00       	call   226e9 <int_to_real>
   21130:	83 c4 10             	add    $0x10,%esp
}
   21133:	90                   	nop
   21134:	83 c4 2c             	add    $0x2c,%esp
   21137:	c3                   	ret    

00021138 <get_longlong_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得64位长整数所有有效地址（math/ea.c），
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后再把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_longlong_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   21138:	83 ec 2c             	sub    $0x2c,%esp
   2113b:	8b 44 24 38          	mov    0x38(%esp),%eax
   2113f:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取指令中的有效地址值。
   21144:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21149:	83 ec 08             	sub    $0x8,%esp
   2114c:	50                   	push   %eax
   2114d:	ff 74 24 40          	pushl  0x40(%esp)
   21151:	e8 a7 fb ff ff       	call   20cfd <ea>
   21156:	83 c4 10             	add    $0x10,%esp
   21159:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
   2115d:	83 ec 0c             	sub    $0xc,%esp
   21160:	ff 74 24 28          	pushl  0x28(%esp)
   21164:	e8 4a fd ff ff       	call   20eb3 <get_fs_long>
   21169:	83 c4 10             	add    $0x10,%esp
   2116c:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = get_fs_long(1 + (unsigned long *) addr);
   21170:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21174:	83 c0 04             	add    $0x4,%eax
   21177:	83 ec 0c             	sub    $0xc,%esp
   2117a:	50                   	push   %eax
   2117b:	e8 33 fd ff ff       	call   20eb3 <get_fs_long>
   21180:	83 c4 10             	add    $0x10,%esp
   21183:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
   21187:	8b 44 24 14          	mov    0x14(%esp),%eax
   2118b:	c1 e8 1f             	shr    $0x1f,%eax
   2118e:	0f b6 c0             	movzbl %al,%eax
   21191:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   21196:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   2119b:	66 85 c0             	test   %ax,%ax
   2119e:	74 1a                	je     211ba <get_longlong_int+0x82>
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   211a0:	8b 54 24 10          	mov    0x10(%esp),%edx
   211a4:	8b 44 24 14          	mov    0x14(%esp),%eax
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
   211a8:	f7 d2                	not    %edx
   211aa:	f7 d0                	not    %eax
   211ac:	83 c2 01             	add    $0x1,%edx
   211af:	83 d0 00             	adc    $0x0,%eax
   211b2:	89 54 24 10          	mov    %edx,0x10(%esp)
   211b6:	89 44 24 14          	mov    %eax,0x14(%esp)
	int_to_real(&ti,tmp);                           // 把临时整数转换成临时实数格式。
   211ba:	83 ec 08             	sub    $0x8,%esp
   211bd:	ff 74 24 38          	pushl  0x38(%esp)
   211c1:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   211c5:	50                   	push   %eax
   211c6:	e8 1e 15 00 00       	call   226e9 <int_to_real>
   211cb:	83 c4 10             	add    $0x10,%esp
}
   211ce:	90                   	nop
   211cf:	83 c4 2c             	add    $0x2c,%esp
   211d2:	c3                   	ret    

000211d3 <get_BCD>:
// 取用户内存中的BCD码数值并转换成临时实数格式。
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得BCD码所在有效地址（math/ea.c），
// 然后从用户数据区读取10字节相应BCD码值（其中1字节用于符号），同时转换成临时整数形式。最后把临时整数值转换成临时实数。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_BCD(temp_real * tmp, struct info * info, unsigned short code)
{
   211d3:	53                   	push   %ebx
   211d4:	83 ec 38             	sub    $0x38,%esp
   211d7:	8b 44 24 48          	mov    0x48(%esp),%eax
   211db:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char c;

// 取得BCD码数值所在内存有效地址。然后从最后1个BCD码字节（最高有效位）开始处理。
// 先取得BCD码数值的符号位，并设置临时整数的符号位。然后把9字节的BCD码值转换成临时整数格式，最后把临时整数值转换成临时
// 实数。
	addr = ea(info,code);                   // 取有效地址。
   211e0:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   211e5:	83 ec 08             	sub    $0x8,%esp
   211e8:	50                   	push   %eax
   211e9:	ff 74 24 50          	pushl  0x50(%esp)
   211ed:	e8 0b fb ff ff       	call   20cfd <ea>
   211f2:	83 c4 10             	add    $0x10,%esp
   211f5:	89 44 24 28          	mov    %eax,0x28(%esp)
	addr += 9;                              // 指向最后一个（第10个）字节。
   211f9:	83 44 24 28 09       	addl   $0x9,0x28(%esp)
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
   211fe:	8b 44 24 28          	mov    0x28(%esp),%eax
   21202:	8d 50 ff             	lea    -0x1(%eax),%edx
   21205:	89 54 24 28          	mov    %edx,0x28(%esp)
   21209:	83 ec 0c             	sub    $0xc,%esp
   2120c:	50                   	push   %eax
   2120d:	e8 7a fc ff ff       	call   20e8c <get_fs_byte>
   21212:	83 c4 10             	add    $0x10,%esp
   21215:	0f b6 c0             	movzbl %al,%eax
   21218:	66 25 80 00          	and    $0x80,%ax
   2121c:	66 89 44 24 20       	mov    %ax,0x20(%esp)
	i.a = i.b = 0;
   21221:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21228:	00 
   21229:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2122d:	89 44 24 18          	mov    %eax,0x18(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   21231:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21238:	00 
   21239:	e9 a5 00 00 00       	jmp    212e3 <get_BCD+0x110>
		c = get_fs_byte(addr--);
   2123e:	8b 44 24 28          	mov    0x28(%esp),%eax
   21242:	8d 50 ff             	lea    -0x1(%eax),%edx
   21245:	89 54 24 28          	mov    %edx,0x28(%esp)
   21249:	83 ec 0c             	sub    $0xc,%esp
   2124c:	50                   	push   %eax
   2124d:	e8 3a fc ff ff       	call   20e8c <get_fs_byte>
   21252:	83 c4 10             	add    $0x10,%esp
   21255:	88 44 24 27          	mov    %al,0x27(%esp)
		MUL10(i.a, i.b);
   21259:	8b 44 24 18          	mov    0x18(%esp),%eax
   2125d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21261:	01 c0                	add    %eax,%eax
   21263:	11 d2                	adc    %edx,%edx
   21265:	89 c1                	mov    %eax,%ecx
   21267:	89 d3                	mov    %edx,%ebx
   21269:	01 c0                	add    %eax,%eax
   2126b:	11 d2                	adc    %edx,%edx
   2126d:	01 c0                	add    %eax,%eax
   2126f:	11 d2                	adc    %edx,%edx
   21271:	01 c8                	add    %ecx,%eax
   21273:	11 da                	adc    %ebx,%edx
   21275:	89 44 24 18          	mov    %eax,0x18(%esp)
   21279:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c>>4), i.a, i.b);
   2127d:	8b 54 24 18          	mov    0x18(%esp),%edx
   21281:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21285:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   2128a:	c0 e9 04             	shr    $0x4,%cl
   2128d:	0f b6 c9             	movzbl %cl,%ecx
   21290:	01 ca                	add    %ecx,%edx
   21292:	83 d0 00             	adc    $0x0,%eax
   21295:	89 54 24 18          	mov    %edx,0x18(%esp)
   21299:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		MUL10(i.a, i.b);
   2129d:	8b 44 24 18          	mov    0x18(%esp),%eax
   212a1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   212a5:	01 c0                	add    %eax,%eax
   212a7:	11 d2                	adc    %edx,%edx
   212a9:	89 c1                	mov    %eax,%ecx
   212ab:	89 d3                	mov    %edx,%ebx
   212ad:	01 c0                	add    %eax,%eax
   212af:	11 d2                	adc    %edx,%edx
   212b1:	01 c0                	add    %eax,%eax
   212b3:	11 d2                	adc    %edx,%edx
   212b5:	01 c8                	add    %ecx,%eax
   212b7:	11 da                	adc    %ebx,%edx
   212b9:	89 44 24 18          	mov    %eax,0x18(%esp)
   212bd:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c&0xf), i.a, i.b);
   212c1:	8b 54 24 18          	mov    0x18(%esp),%edx
   212c5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   212c9:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   212ce:	83 e1 0f             	and    $0xf,%ecx
   212d1:	01 ca                	add    %ecx,%edx
   212d3:	83 d0 00             	adc    $0x0,%eax
   212d6:	89 54 24 18          	mov    %edx,0x18(%esp)
   212da:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   212de:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   212e3:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   212e8:	0f 8e 50 ff ff ff    	jle    2123e <get_BCD+0x6b>
	}
	int_to_real(&i,tmp);                    // 转换成临时实数格式。
   212ee:	83 ec 08             	sub    $0x8,%esp
   212f1:	ff 74 24 48          	pushl  0x48(%esp)
   212f5:	8d 44 24 24          	lea    0x24(%esp),%eax
   212f9:	50                   	push   %eax
   212fa:	e8 ea 13 00 00       	call   226e9 <int_to_real>
   212ff:	83 c4 10             	add    $0x10,%esp
}
   21302:	90                   	nop
   21303:	83 c4 38             	add    $0x38,%esp
   21306:	5b                   	pop    %ebx
   21307:	c3                   	ret    

00021308 <put_short_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时实
// 数格式的结果转换成短实数格式并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21308:	83 ec 2c             	sub    $0x2c,%esp
   2130b:	8b 44 24 38          	mov    0x38(%esp),%eax
   2130f:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 取有效地址。
   21314:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21319:	83 ec 08             	sub    $0x8,%esp
   2131c:	50                   	push   %eax
   2131d:	ff 74 24 40          	pushl  0x40(%esp)
   21321:	e8 d7 f9 ff ff       	call   20cfd <ea>
   21326:	83 c4 10             	add    $0x10,%esp
   21329:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,4);                            // 为保存结果验证或分配内存。
   2132d:	83 ec 08             	sub    $0x8,%esp
   21330:	6a 04                	push   $0x4
   21332:	ff 74 24 28          	pushl  0x28(%esp)
   21336:	e8 64 70 fe ff       	call   839f <verify_area>
   2133b:	83 c4 10             	add    $0x10,%esp
	temp_to_short(tmp,&sr);                         // 结果转换成短实数格式。
   2133e:	83 ec 08             	sub    $0x8,%esp
   21341:	8d 44 24 20          	lea    0x20(%esp),%eax
   21345:	50                   	push   %eax
   21346:	ff 74 24 3c          	pushl  0x3c(%esp)
   2134a:	e8 b7 0e 00 00       	call   22206 <temp_to_short>
   2134f:	83 c4 10             	add    $0x10,%esp
	put_fs_long(sr,(unsigned long *) addr);         // 存储数据到用户内存区。
   21352:	8b 44 24 18          	mov    0x18(%esp),%eax
   21356:	83 ec 08             	sub    $0x8,%esp
   21359:	ff 74 24 24          	pushl  0x24(%esp)
   2135d:	50                   	push   %eax
   2135e:	e8 9c fb ff ff       	call   20eff <put_fs_long>
   21363:	83 c4 10             	add    $0x10,%esp
}
   21366:	90                   	nop
   21367:	83 c4 2c             	add    $0x2c,%esp
   2136a:	c3                   	ret    

0002136b <put_long_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成长实数格式，并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2136b:	83 ec 2c             	sub    $0x2c,%esp
   2136e:	8b 44 24 38          	mov    0x38(%esp),%eax
   21372:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取有效地址。
   21377:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2137c:	83 ec 08             	sub    $0x8,%esp
   2137f:	50                   	push   %eax
   21380:	ff 74 24 40          	pushl  0x40(%esp)
   21384:	e8 74 f9 ff ff       	call   20cfd <ea>
   21389:	83 c4 10             	add    $0x10,%esp
   2138c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,8);                            // 为保存结果验证或分配内存。
   21390:	83 ec 08             	sub    $0x8,%esp
   21393:	6a 08                	push   $0x8
   21395:	ff 74 24 28          	pushl  0x28(%esp)
   21399:	e8 01 70 fe ff       	call   839f <verify_area>
   2139e:	83 c4 10             	add    $0x10,%esp
	temp_to_long(tmp,&lr);                          // 结果转换成长实数格式。
   213a1:	83 ec 08             	sub    $0x8,%esp
   213a4:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   213a8:	50                   	push   %eax
   213a9:	ff 74 24 3c          	pushl  0x3c(%esp)
   213ad:	e8 85 0f 00 00       	call   22337 <temp_to_long>
   213b2:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.a, (unsigned long *) addr);      // 存储数据到用户内存区。
   213b5:	8b 44 24 14          	mov    0x14(%esp),%eax
   213b9:	83 ec 08             	sub    $0x8,%esp
   213bc:	ff 74 24 24          	pushl  0x24(%esp)
   213c0:	50                   	push   %eax
   213c1:	e8 39 fb ff ff       	call   20eff <put_fs_long>
   213c6:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.b, 1 + (unsigned long *) addr);
   213c9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   213cd:	83 c0 04             	add    $0x4,%eax
   213d0:	8b 54 24 18          	mov    0x18(%esp),%edx
   213d4:	83 ec 08             	sub    $0x8,%esp
   213d7:	50                   	push   %eax
   213d8:	52                   	push   %edx
   213d9:	e8 21 fb ff ff       	call   20eff <put_fs_long>
   213de:	83 c4 10             	add    $0x10,%esp
}
   213e1:	90                   	nop
   213e2:	83 c4 2c             	add    $0x2c,%esp
   213e5:	c3                   	ret    

000213e6 <put_temp_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_temp_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   213e6:	83 ec 2c             	sub    $0x2c,%esp
   213e9:	8b 44 24 38          	mov    0x38(%esp),%eax
   213ed:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);                           // 取有效地址。
   213f2:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   213f7:	83 ec 08             	sub    $0x8,%esp
   213fa:	50                   	push   %eax
   213fb:	ff 74 24 40          	pushl  0x40(%esp)
   213ff:	e8 f9 f8 ff ff       	call   20cfd <ea>
   21404:	83 c4 10             	add    $0x10,%esp
   21407:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,10);                           // 为保存结果验证或分配内存。
   2140b:	83 ec 08             	sub    $0x8,%esp
   2140e:	6a 0a                	push   $0xa
   21410:	ff 74 24 28          	pushl  0x28(%esp)
   21414:	e8 86 6f fe ff       	call   839f <verify_area>
   21419:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->a, (unsigned long *) addr);    // 存储数据到用户内存区。
   2141c:	8b 44 24 30          	mov    0x30(%esp),%eax
   21420:	8b 00                	mov    (%eax),%eax
   21422:	83 ec 08             	sub    $0x8,%esp
   21425:	ff 74 24 24          	pushl  0x24(%esp)
   21429:	50                   	push   %eax
   2142a:	e8 d0 fa ff ff       	call   20eff <put_fs_long>
   2142f:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->b, 1 + (unsigned long *) addr);
   21432:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21436:	8d 50 04             	lea    0x4(%eax),%edx
   21439:	8b 44 24 30          	mov    0x30(%esp),%eax
   2143d:	8b 40 04             	mov    0x4(%eax),%eax
   21440:	83 ec 08             	sub    $0x8,%esp
   21443:	52                   	push   %edx
   21444:	50                   	push   %eax
   21445:	e8 b5 fa ff ff       	call   20eff <put_fs_long>
   2144a:	83 c4 10             	add    $0x10,%esp
	put_fs_word(tmp->exponent, 4 + (short *) addr);
   2144d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21451:	8d 50 08             	lea    0x8(%eax),%edx
   21454:	8b 44 24 30          	mov    0x30(%esp),%eax
   21458:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2145c:	98                   	cwtl   
   2145d:	83 ec 08             	sub    $0x8,%esp
   21460:	52                   	push   %edx
   21461:	50                   	push   %eax
   21462:	e8 7c fa ff ff       	call   20ee3 <put_fs_word>
   21467:	83 c4 10             	add    $0x10,%esp
}
   2146a:	90                   	nop
   2146b:	83 c4 2c             	add    $0x2c,%esp
   2146e:	c3                   	ret    

0002146f <put_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2146f:	83 ec 2c             	sub    $0x2c,%esp
   21472:	8b 44 24 38          	mov    0x38(%esp),%eax
   21476:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   2147b:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21480:	83 ec 08             	sub    $0x8,%esp
   21483:	50                   	push   %eax
   21484:	ff 74 24 40          	pushl  0x40(%esp)
   21488:	e8 70 f8 ff ff       	call   20cfd <ea>
   2148d:	83 c4 10             	add    $0x10,%esp
   21490:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   21494:	83 ec 08             	sub    $0x8,%esp
   21497:	8d 44 24 18          	lea    0x18(%esp),%eax
   2149b:	50                   	push   %eax
   2149c:	ff 74 24 3c          	pushl  0x3c(%esp)
   214a0:	e8 39 10 00 00       	call   224de <real_to_int>
   214a5:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,2);            // 验证或分配存储内存。
   214a8:	83 ec 08             	sub    $0x8,%esp
   214ab:	6a 02                	push   $0x2
   214ad:	ff 74 24 28          	pushl  0x28(%esp)
   214b1:	e8 e9 6e fe ff       	call   839f <verify_area>
   214b6:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若有符号位，则取负数值。
   214b9:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   214be:	66 85 c0             	test   %ax,%ax
   214c1:	74 0a                	je     214cd <put_short_int+0x5e>
		ti.a = -ti.a;
   214c3:	8b 44 24 10          	mov    0x10(%esp),%eax
   214c7:	f7 d8                	neg    %eax
   214c9:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_word(ti.a,(short *) addr);       // 存储到用户数据区中。
   214cd:	8b 44 24 10          	mov    0x10(%esp),%eax
   214d1:	98                   	cwtl   
   214d2:	83 ec 08             	sub    $0x8,%esp
   214d5:	ff 74 24 24          	pushl  0x24(%esp)
   214d9:	50                   	push   %eax
   214da:	e8 04 fa ff ff       	call   20ee3 <put_fs_word>
   214df:	83 c4 10             	add    $0x10,%esp
}
   214e2:	90                   	nop
   214e3:	83 c4 2c             	add    $0x2c,%esp
   214e6:	c3                   	ret    

000214e7 <put_long_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   214e7:	83 ec 2c             	sub    $0x2c,%esp
   214ea:	8b 44 24 38          	mov    0x38(%esp),%eax
   214ee:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取有效地址值。
   214f3:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   214f8:	83 ec 08             	sub    $0x8,%esp
   214fb:	50                   	push   %eax
   214fc:	ff 74 24 40          	pushl  0x40(%esp)
   21500:	e8 f8 f7 ff ff       	call   20cfd <ea>
   21505:	83 c4 10             	add    $0x10,%esp
   21508:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);                           // 转换成临时整数格式。
   2150c:	83 ec 08             	sub    $0x8,%esp
   2150f:	8d 44 24 18          	lea    0x18(%esp),%eax
   21513:	50                   	push   %eax
   21514:	ff 74 24 3c          	pushl  0x3c(%esp)
   21518:	e8 c1 0f 00 00       	call   224de <real_to_int>
   2151d:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,4);                            // 验证或分配存储内存。
   21520:	83 ec 08             	sub    $0x8,%esp
   21523:	6a 04                	push   $0x4
   21525:	ff 74 24 28          	pushl  0x28(%esp)
   21529:	e8 71 6e fe ff       	call   839f <verify_area>
   2152e:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                                    // 若有符号位，则取负数值。
   21531:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21536:	66 85 c0             	test   %ax,%ax
   21539:	74 0a                	je     21545 <put_long_int+0x5e>
		ti.a = -ti.a;
   2153b:	8b 44 24 10          	mov    0x10(%esp),%eax
   2153f:	f7 d8                	neg    %eax
   21541:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   21545:	8b 44 24 10          	mov    0x10(%esp),%eax
   21549:	83 ec 08             	sub    $0x8,%esp
   2154c:	ff 74 24 24          	pushl  0x24(%esp)
   21550:	50                   	push   %eax
   21551:	e8 a9 f9 ff ff       	call   20eff <put_fs_long>
   21556:	83 c4 10             	add    $0x10,%esp
}
   21559:	90                   	nop
   2155a:	83 c4 2c             	add    $0x2c,%esp
   2155d:	c3                   	ret    

0002155e <put_longlong_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_longlong_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2155e:	83 ec 2c             	sub    $0x2c,%esp
   21561:	8b 44 24 38          	mov    0x38(%esp),%eax
   21565:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   2156a:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2156f:	83 ec 08             	sub    $0x8,%esp
   21572:	50                   	push   %eax
   21573:	ff 74 24 40          	pushl  0x40(%esp)
   21577:	e8 81 f7 ff ff       	call   20cfd <ea>
   2157c:	83 c4 10             	add    $0x10,%esp
   2157f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   21583:	83 ec 08             	sub    $0x8,%esp
   21586:	8d 44 24 18          	lea    0x18(%esp),%eax
   2158a:	50                   	push   %eax
   2158b:	ff 74 24 3c          	pushl  0x3c(%esp)
   2158f:	e8 4a 0f 00 00       	call   224de <real_to_int>
   21594:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,8);            // 验证存储区域。
   21597:	83 ec 08             	sub    $0x8,%esp
   2159a:	6a 08                	push   $0x8
   2159c:	ff 74 24 28          	pushl  0x28(%esp)
   215a0:	e8 fa 6d fe ff       	call   839f <verify_area>
   215a5:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若是负数，则取反加1。
   215a8:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   215ad:	66 85 c0             	test   %ax,%ax
   215b0:	74 1a                	je     215cc <put_longlong_int+0x6e>
		__asm__("notl %0 ; notl %1\n\t"
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   215b2:	8b 54 24 10          	mov    0x10(%esp),%edx
   215b6:	8b 44 24 14          	mov    0x14(%esp),%eax
		__asm__("notl %0 ; notl %1\n\t"
   215ba:	f7 d2                	not    %edx
   215bc:	f7 d0                	not    %eax
   215be:	83 c2 01             	add    $0x1,%edx
   215c1:	83 d0 00             	adc    $0x0,%eax
   215c4:	89 54 24 10          	mov    %edx,0x10(%esp)
   215c8:	89 44 24 14          	mov    %eax,0x14(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   215cc:	8b 44 24 10          	mov    0x10(%esp),%eax
   215d0:	83 ec 08             	sub    $0x8,%esp
   215d3:	ff 74 24 24          	pushl  0x24(%esp)
   215d7:	50                   	push   %eax
   215d8:	e8 22 f9 ff ff       	call   20eff <put_fs_long>
   215dd:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ti.b,1 + (unsigned long *) addr);
   215e0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   215e4:	83 c0 04             	add    $0x4,%eax
   215e7:	8b 54 24 14          	mov    0x14(%esp),%edx
   215eb:	83 ec 08             	sub    $0x8,%esp
   215ee:	50                   	push   %eax
   215ef:	52                   	push   %edx
   215f0:	e8 0a f9 ff ff       	call   20eff <put_fs_long>
   215f5:	83 c4 10             	add    $0x10,%esp
}
   215f8:	90                   	nop
   215f9:	83 c4 2c             	add    $0x2c,%esp
   215fc:	c3                   	ret    

000215fd <put_BCD>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，并验证保
// 存10字节BCD码的用户空间。然后把临时实数格式的结果转换成BCD码格式的数据并保存到用户内存中。如果是负数则设置最高存储字
// 节的最高有效位。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_BCD(const temp_real * tmp,struct info * info, unsigned short code)
{
   215fd:	53                   	push   %ebx
   215fe:	83 ec 38             	sub    $0x38,%esp
   21601:	8b 44 24 48          	mov    0x48(%esp),%eax
   21605:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	int k,rem;
	char * addr;
	temp_int i;
	unsigned char c;

	addr = ea(info,code);                   // 取有效地址。
   2160a:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2160f:	83 ec 08             	sub    $0x8,%esp
   21612:	50                   	push   %eax
   21613:	ff 74 24 50          	pushl  0x50(%esp)
   21617:	e8 e1 f6 ff ff       	call   20cfd <ea>
   2161c:	83 c4 10             	add    $0x10,%esp
   2161f:	89 44 24 28          	mov    %eax,0x28(%esp)
	verify_area(addr,10);                   // 验证存储空间容量。
   21623:	83 ec 08             	sub    $0x8,%esp
   21626:	6a 0a                	push   $0xa
   21628:	ff 74 24 34          	pushl  0x34(%esp)
   2162c:	e8 6e 6d fe ff       	call   839f <verify_area>
   21631:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
   21634:	83 ec 08             	sub    $0x8,%esp
   21637:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2163b:	50                   	push   %eax
   2163c:	ff 74 24 4c          	pushl  0x4c(%esp)
   21640:	e8 99 0e 00 00       	call   224de <real_to_int>
   21645:	83 c4 10             	add    $0x10,%esp
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
   21648:	0f b7 44 24 1c       	movzwl 0x1c(%esp),%eax
   2164d:	66 85 c0             	test   %ax,%ax
   21650:	74 17                	je     21669 <put_BCD+0x6c>
		put_fs_byte(0x80, addr+9);
   21652:	8b 44 24 28          	mov    0x28(%esp),%eax
   21656:	83 c0 09             	add    $0x9,%eax
   21659:	83 ec 08             	sub    $0x8,%esp
   2165c:	50                   	push   %eax
   2165d:	6a 80                	push   $0xffffff80
   2165f:	e8 65 f8 ff ff       	call   20ec9 <put_fs_byte>
   21664:	83 c4 10             	add    $0x10,%esp
   21667:	eb 15                	jmp    2167e <put_BCD+0x81>
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
   21669:	8b 44 24 28          	mov    0x28(%esp),%eax
   2166d:	83 c0 09             	add    $0x9,%eax
   21670:	83 ec 08             	sub    $0x8,%esp
   21673:	50                   	push   %eax
   21674:	6a 00                	push   $0x0
   21676:	e8 4e f8 ff ff       	call   20ec9 <put_fs_byte>
   2167b:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   2167e:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21685:	00 
   21686:	eb 7e                	jmp    21706 <put_BCD+0x109>
		DIV10(i.a,i.b,rem);
   21688:	8b 44 24 18          	mov    0x18(%esp),%eax
   2168c:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   21690:	ba 00 00 00 00       	mov    $0x0,%edx
   21695:	b9 0a 00 00 00       	mov    $0xa,%ecx
   2169a:	f7 f1                	div    %ecx
   2169c:	93                   	xchg   %eax,%ebx
   2169d:	f7 f1                	div    %ecx
   2169f:	89 54 24 24          	mov    %edx,0x24(%esp)
   216a3:	89 44 24 14          	mov    %eax,0x14(%esp)
   216a7:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c = rem;
   216ab:	8b 44 24 24          	mov    0x24(%esp),%eax
   216af:	88 44 24 23          	mov    %al,0x23(%esp)
		DIV10(i.a,i.b,rem);
   216b3:	8b 44 24 18          	mov    0x18(%esp),%eax
   216b7:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   216bb:	ba 00 00 00 00       	mov    $0x0,%edx
   216c0:	b9 0a 00 00 00       	mov    $0xa,%ecx
   216c5:	f7 f1                	div    %ecx
   216c7:	93                   	xchg   %eax,%ebx
   216c8:	f7 f1                	div    %ecx
   216ca:	89 54 24 24          	mov    %edx,0x24(%esp)
   216ce:	89 44 24 14          	mov    %eax,0x14(%esp)
   216d2:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c += rem<<4;
   216d6:	8b 44 24 24          	mov    0x24(%esp),%eax
   216da:	c1 e0 04             	shl    $0x4,%eax
   216dd:	00 44 24 23          	add    %al,0x23(%esp)
		put_fs_byte(c,addr++);
   216e1:	8b 44 24 28          	mov    0x28(%esp),%eax
   216e5:	8d 50 01             	lea    0x1(%eax),%edx
   216e8:	89 54 24 28          	mov    %edx,0x28(%esp)
   216ec:	0f b6 54 24 23       	movzbl 0x23(%esp),%edx
   216f1:	0f be d2             	movsbl %dl,%edx
   216f4:	83 ec 08             	sub    $0x8,%esp
   216f7:	50                   	push   %eax
   216f8:	52                   	push   %edx
   216f9:	e8 cb f7 ff ff       	call   20ec9 <put_fs_byte>
   216fe:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   21701:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   21706:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   2170b:	0f 8e 77 ff ff ff    	jle    21688 <put_BCD+0x8b>
	}
   21711:	90                   	nop
   21712:	83 c4 38             	add    $0x38,%esp
   21715:	5b                   	pop    %ebx
   21716:	c3                   	ret    

00021717 <signify>:
{
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
   21717:	8b 44 24 04          	mov    0x4(%esp),%eax
   2171b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2171f:	83 c0 02             	add    $0x2,%eax
   21722:	89 c2                	mov    %eax,%edx
   21724:	8b 44 24 04          	mov    0x4(%esp),%eax
   21728:	66 89 50 08          	mov    %dx,0x8(%eax)
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
   2172c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21730:	8b 10                	mov    (%eax),%edx
   21732:	8b 44 24 04          	mov    0x4(%esp),%eax
   21736:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
   21739:	0f ac c2 02          	shrd   $0x2,%eax,%edx
   2173d:	c1 e8 02             	shr    $0x2,%eax
   21740:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21744:	89 11                	mov    %edx,(%ecx)
   21746:	8b 54 24 04          	mov    0x4(%esp),%edx
   2174a:	89 42 04             	mov    %eax,0x4(%edx)
	if (a->exponent < 0)                    // 是负数，则尾数用补码表示（取负值）。
   2174d:	8b 44 24 04          	mov    0x4(%esp),%eax
   21751:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21755:	66 85 c0             	test   %ax,%ax
   21758:	79 24                	jns    2177e <signify+0x67>
		NEGINT(a);
   2175a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2175e:	8b 10                	mov    (%eax),%edx
   21760:	8b 44 24 04          	mov    0x4(%esp),%eax
   21764:	8b 40 04             	mov    0x4(%eax),%eax
   21767:	f7 d2                	not    %edx
   21769:	f7 d0                	not    %eax
   2176b:	83 c2 01             	add    $0x1,%edx
   2176e:	83 d0 00             	adc    $0x0,%eax
   21771:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21775:	89 11                	mov    %edx,(%ecx)
   21777:	8b 54 24 04          	mov    0x4(%esp),%edx
   2177b:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                  // 去掉符号位（若有）。
   2177e:	8b 44 24 04          	mov    0x4(%esp),%eax
   21782:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21786:	66 25 ff 7f          	and    $0x7fff,%ax
   2178a:	89 c2                	mov    %eax,%edx
   2178c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21790:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21794:	90                   	nop
   21795:	c3                   	ret    

00021796 <unsignify>:
static void unsignify(temp_real * a)
{
// 对于值为0的数不用处理，直接返回。否则，我们先复位临时实数格式的符号位。然后判断尾数的高位long字段a->b是否带有符号位。
// 若有，则在exponent字段添加符号位，同时把尾数用无符号数形式表示（取补）。最后对尾数进行规格化处理，同时指数值作相应递
// 减。即执行左移操作，使得尾数最高有效位不为0（最后a->b值表现为负值）。
	if (!(a->a || a->b)) {                          // 若值为0就返回。
   21796:	8b 44 24 04          	mov    0x4(%esp),%eax
   2179a:	8b 00                	mov    (%eax),%eax
   2179c:	85 c0                	test   %eax,%eax
   2179e:	75 16                	jne    217b6 <unsignify+0x20>
   217a0:	8b 44 24 04          	mov    0x4(%esp),%eax
   217a4:	8b 40 04             	mov    0x4(%eax),%eax
   217a7:	85 c0                	test   %eax,%eax
   217a9:	75 0b                	jne    217b6 <unsignify+0x20>
		a->exponent = 0;
   217ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   217af:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   217b5:	c3                   	ret    
	}
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
   217b6:	8b 44 24 04          	mov    0x4(%esp),%eax
   217ba:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217be:	66 25 ff 7f          	and    $0x7fff,%ax
   217c2:	89 c2                	mov    %eax,%edx
   217c4:	8b 44 24 04          	mov    0x4(%esp),%eax
   217c8:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
   217cc:	8b 44 24 04          	mov    0x4(%esp),%eax
   217d0:	8b 40 04             	mov    0x4(%eax),%eax
   217d3:	85 c0                	test   %eax,%eax
   217d5:	79 6f                	jns    21846 <unsignify+0xb0>
		NEGINT(a);
   217d7:	8b 44 24 04          	mov    0x4(%esp),%eax
   217db:	8b 10                	mov    (%eax),%edx
   217dd:	8b 44 24 04          	mov    0x4(%esp),%eax
   217e1:	8b 40 04             	mov    0x4(%eax),%eax
   217e4:	f7 d2                	not    %edx
   217e6:	f7 d0                	not    %eax
   217e8:	83 c2 01             	add    $0x1,%edx
   217eb:	83 d0 00             	adc    $0x0,%eax
   217ee:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   217f2:	89 11                	mov    %edx,(%ecx)
   217f4:	8b 54 24 04          	mov    0x4(%esp),%edx
   217f8:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
   217fb:	8b 44 24 04          	mov    0x4(%esp),%eax
   217ff:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21803:	66 0d 00 80          	or     $0x8000,%ax
   21807:	89 c2                	mov    %eax,%edx
   21809:	8b 44 24 04          	mov    0x4(%esp),%eax
   2180d:	66 89 50 08          	mov    %dx,0x8(%eax)
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   21811:	eb 33                	jmp    21846 <unsignify+0xb0>
		a->exponent--;
   21813:	8b 44 24 04          	mov    0x4(%esp),%eax
   21817:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2181b:	83 e8 01             	sub    $0x1,%eax
   2181e:	89 c2                	mov    %eax,%edx
   21820:	8b 44 24 04          	mov    0x4(%esp),%eax
   21824:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   21828:	8b 44 24 04          	mov    0x4(%esp),%eax
   2182c:	8b 10                	mov    (%eax),%edx
   2182e:	8b 44 24 04          	mov    0x4(%esp),%eax
   21832:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   21835:	01 d2                	add    %edx,%edx
   21837:	11 c0                	adc    %eax,%eax
   21839:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   2183d:	89 11                	mov    %edx,(%ecx)
   2183f:	8b 54 24 04          	mov    0x4(%esp),%edx
   21843:	89 42 04             	mov    %eax,0x4(%edx)
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   21846:	8b 44 24 04          	mov    0x4(%esp),%eax
   2184a:	8b 40 04             	mov    0x4(%eax),%eax
   2184d:	85 c0                	test   %eax,%eax
   2184f:	79 c2                	jns    21813 <unsignify+0x7d>
	}
}
   21851:	c3                   	ret    

00021852 <fadd>:

// 仿真浮点加法指令运算。
// 临时实数参数src1 + src2 -> result。
void fadd(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21852:	53                   	push   %ebx
   21853:	83 ec 30             	sub    $0x30,%esp
	temp_real a,b;
	int x1,x2,shift;

// 首先取两个数的指数值x1、x2（去掉符号位）。然后让变量a等于基中最大值，shift为指数差值（即相差2的倍数值）。
	x1 = src1->exponent & 0x7fff;
   21856:	8b 44 24 38          	mov    0x38(%esp),%eax
   2185a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2185e:	98                   	cwtl   
   2185f:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21864:	89 44 24 28          	mov    %eax,0x28(%esp)
	x2 = src2->exponent & 0x7fff;
   21868:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   2186c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21870:	98                   	cwtl   
   21871:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21876:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (x1 > x2) {
   2187a:	8b 44 24 28          	mov    0x28(%esp),%eax
   2187e:	3b 44 24 24          	cmp    0x24(%esp),%eax
   21882:	7e 3e                	jle    218c2 <fadd+0x70>
		a = *src1;
   21884:	8b 44 24 38          	mov    0x38(%esp),%eax
   21888:	8b 10                	mov    (%eax),%edx
   2188a:	89 54 24 18          	mov    %edx,0x18(%esp)
   2188e:	8b 50 04             	mov    0x4(%eax),%edx
   21891:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   21895:	8b 40 08             	mov    0x8(%eax),%eax
   21898:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src2;
   2189c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   218a0:	8b 10                	mov    (%eax),%edx
   218a2:	89 54 24 0c          	mov    %edx,0xc(%esp)
   218a6:	8b 50 04             	mov    0x4(%eax),%edx
   218a9:	89 54 24 10          	mov    %edx,0x10(%esp)
   218ad:	8b 40 08             	mov    0x8(%eax),%eax
   218b0:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x1-x2;
   218b4:	8b 44 24 28          	mov    0x28(%esp),%eax
   218b8:	2b 44 24 24          	sub    0x24(%esp),%eax
   218bc:	89 44 24 2c          	mov    %eax,0x2c(%esp)
   218c0:	eb 3c                	jmp    218fe <fadd+0xac>
	} else {
		a = *src2;
   218c2:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   218c6:	8b 10                	mov    (%eax),%edx
   218c8:	89 54 24 18          	mov    %edx,0x18(%esp)
   218cc:	8b 50 04             	mov    0x4(%eax),%edx
   218cf:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   218d3:	8b 40 08             	mov    0x8(%eax),%eax
   218d6:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src1;
   218da:	8b 44 24 38          	mov    0x38(%esp),%eax
   218de:	8b 10                	mov    (%eax),%edx
   218e0:	89 54 24 0c          	mov    %edx,0xc(%esp)
   218e4:	8b 50 04             	mov    0x4(%eax),%edx
   218e7:	89 54 24 10          	mov    %edx,0x10(%esp)
   218eb:	8b 40 08             	mov    0x8(%eax),%eax
   218ee:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x2-x1;
   218f2:	8b 44 24 24          	mov    0x24(%esp),%eax
   218f6:	2b 44 24 28          	sub    0x28(%esp),%eax
   218fa:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	}
// 若两者相差太大，大于等于2的64次方，则我们可以忽略小的那个数，即b值。于是直接返回a值即可。否则，若相差大于等于2的32次
// 方，那么我们可以忽略小值b中的低32位值。于是我们把b的高long字段值b.b右移32位，即放到b.a中。然后把b的指数值相应地增加
// 32次方。即指数差值减去32。这样调整之后，相加的两个数的尾数基本上落在相同区域中。
	if (shift >= 64) {
   218fe:	83 7c 24 2c 3f       	cmpl   $0x3f,0x2c(%esp)
   21903:	7e 1d                	jle    21922 <fadd+0xd0>
		*result = a;
   21905:	8b 44 24 40          	mov    0x40(%esp),%eax
   21909:	8b 54 24 18          	mov    0x18(%esp),%edx
   2190d:	89 10                	mov    %edx,(%eax)
   2190f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21913:	89 50 04             	mov    %edx,0x4(%eax)
   21916:	8b 54 24 20          	mov    0x20(%esp),%edx
   2191a:	89 50 08             	mov    %edx,0x8(%eax)
   2191d:	e9 90 00 00 00       	jmp    219b2 <fadd+0x160>
		return;
	}
	if (shift >= 32) {
   21922:	83 7c 24 2c 1f       	cmpl   $0x1f,0x2c(%esp)
   21927:	7e 15                	jle    2193e <fadd+0xec>
		b.a = b.b;
   21929:	8b 44 24 10          	mov    0x10(%esp),%eax
   2192d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		b.b = 0;
   21931:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21938:	00 
		shift -= 32;
   21939:	83 6c 24 2c 20       	subl   $0x20,0x2c(%esp)
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
   2193e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   21942:	8b 44 24 10          	mov    0x10(%esp),%eax
   21946:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
   2194a:	0f ad c2             	shrd   %cl,%eax,%edx
   2194d:	d3 e8                	shr    %cl,%eax
   2194f:	89 54 24 0c          	mov    %edx,0xc(%esp)
   21953:	89 44 24 10          	mov    %eax,0x10(%esp)
	signify(&a);                                            // 变换格式。
   21957:	8d 44 24 18          	lea    0x18(%esp),%eax
   2195b:	50                   	push   %eax
   2195c:	e8 b6 fd ff ff       	call   21717 <signify>
   21961:	83 c4 04             	add    $0x4,%esp
	signify(&b);
   21964:	8d 44 24 0c          	lea    0xc(%esp),%eax
   21968:	50                   	push   %eax
   21969:	e8 a9 fd ff ff       	call   21717 <signify>
   2196e:	83 c4 04             	add    $0x4,%esp
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
   21971:	8b 54 24 18          	mov    0x18(%esp),%edx
   21975:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21979:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   2197d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
   21981:	01 ca                	add    %ecx,%edx
   21983:	11 d8                	adc    %ebx,%eax
   21985:	89 54 24 18          	mov    %edx,0x18(%esp)
   21989:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	unsignify(&a);                                          // 再变换回临时实数格式。
   2198d:	8d 44 24 18          	lea    0x18(%esp),%eax
   21991:	50                   	push   %eax
   21992:	e8 ff fd ff ff       	call   21796 <unsignify>
   21997:	83 c4 04             	add    $0x4,%esp
	*result = a;
   2199a:	8b 44 24 40          	mov    0x40(%esp),%eax
   2199e:	8b 54 24 18          	mov    0x18(%esp),%edx
   219a2:	89 10                	mov    %edx,(%eax)
   219a4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   219a8:	89 50 04             	mov    %edx,0x4(%eax)
   219ab:	8b 54 24 20          	mov    0x20(%esp),%edx
   219af:	89 50 08             	mov    %edx,0x8(%eax)
}
   219b2:	83 c4 30             	add    $0x30,%esp
   219b5:	5b                   	pop    %ebx
   219b6:	c3                   	ret    

000219b7 <shift>:
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   219b7:	8b 54 24 04          	mov    0x4(%esp),%edx
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   219bb:	8b 02                	mov    (%edx),%eax
   219bd:	01 02                	add    %eax,(%edx)
   219bf:	8b 42 04             	mov    0x4(%edx),%eax
   219c2:	11 42 04             	adc    %eax,0x4(%edx)
   219c5:	8b 42 08             	mov    0x8(%edx),%eax
   219c8:	11 42 08             	adc    %eax,0x8(%edx)
   219cb:	8b 42 0c             	mov    0xc(%edx),%eax
   219ce:	11 42 0c             	adc    %eax,0xc(%edx)
}
   219d1:	90                   	nop
   219d2:	c3                   	ret    

000219d3 <mul64>:

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
   219d3:	57                   	push   %edi
   219d4:	56                   	push   %esi
   219d5:	53                   	push   %ebx
		"movl 4(%0),%%eax\n\t"          // 取a->b的值到eax。
		"mull (%1)\n\t"                 // 与b->a的值相乘。
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
   219d6:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   219da:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   219de:	8b 74 24 18          	mov    0x18(%esp),%esi
	__asm__("movl (%0),%%eax\n\t"           // 取a->a的值到eax。
   219e2:	89 f7                	mov    %esi,%edi
   219e4:	8b 03                	mov    (%ebx),%eax
   219e6:	f7 21                	mull   (%ecx)
   219e8:	89 07                	mov    %eax,(%edi)
   219ea:	89 57 04             	mov    %edx,0x4(%edi)
   219ed:	8b 43 04             	mov    0x4(%ebx),%eax
   219f0:	f7 61 04             	mull   0x4(%ecx)
   219f3:	89 47 08             	mov    %eax,0x8(%edi)
   219f6:	89 57 0c             	mov    %edx,0xc(%edi)
   219f9:	8b 03                	mov    (%ebx),%eax
   219fb:	f7 61 04             	mull   0x4(%ecx)
   219fe:	01 47 04             	add    %eax,0x4(%edi)
   21a01:	11 57 08             	adc    %edx,0x8(%edi)
   21a04:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
   21a08:	8b 43 04             	mov    0x4(%ebx),%eax
   21a0b:	f7 21                	mull   (%ecx)
   21a0d:	01 47 04             	add    %eax,0x4(%edi)
   21a10:	11 57 08             	adc    %edx,0x8(%edi)
   21a13:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
		:"ax","dx");
}
   21a17:	90                   	nop
   21a18:	5b                   	pop    %ebx
   21a19:	5e                   	pop    %esi
   21a1a:	5f                   	pop    %edi
   21a1b:	c3                   	ret    

00021a1c <fmul>:

// 仿真浮点指令FMUL。
// 临时实数src1 * src2 -> result处。
void fmul(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21a1c:	83 ec 20             	sub    $0x20,%esp
	int i,sign;
	int tmp[4] = {0,0,0,0};
   21a1f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21a26:	00 
   21a27:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21a2e:	00 
   21a2f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21a36:	00 
   21a37:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21a3e:	00 

// 首先确定两数相乘的符号。符号值等于两者符号位异或值。然后计算乘后的指数值。相乘时指数值需要相加。但是由于指数使用偏置
// 格式保存，两个数的指数相加时偏置量也被加了两次，因此需要减掉一个偏置量值（临时实数的偏置量是16383）。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21a3f:	8b 44 24 24          	mov    0x24(%esp),%eax
   21a43:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21a47:	8b 44 24 28          	mov    0x28(%esp),%eax
   21a4b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a4f:	31 d0                	xor    %edx,%eax
   21a51:	98                   	cwtl   
   21a52:	25 00 80 00 00       	and    $0x8000,%eax
   21a57:	89 44 24 18          	mov    %eax,0x18(%esp)
	i = (src1->exponent & 0x7fff) + (src2->exponent & 0x7fff) - 16383 + 1;
   21a5b:	8b 44 24 24          	mov    0x24(%esp),%eax
   21a5f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a63:	98                   	cwtl   
   21a64:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a69:	89 c2                	mov    %eax,%edx
   21a6b:	8b 44 24 28          	mov    0x28(%esp),%eax
   21a6f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a73:	98                   	cwtl   
   21a74:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a79:	01 d0                	add    %edx,%eax
   21a7b:	2d fe 3f 00 00       	sub    $0x3ffe,%eax
   21a80:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 如果结果指数变成了负值，表示两数相乘后产生下溢。于是直接返回带符号的零值。如果结果指数大于0x7fff，表示产生上溢，于是
// 设置状态字溢出异常标志位，并返回。
	if (i<0) {
   21a84:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21a89:	79 2b                	jns    21ab6 <fmul+0x9a>
		result->exponent = sign;
   21a8b:	8b 44 24 18          	mov    0x18(%esp),%eax
   21a8f:	89 c2                	mov    %eax,%edx
   21a91:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a95:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;
   21a99:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a9d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21aa4:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21aa8:	8b 50 04             	mov    0x4(%eax),%edx
   21aab:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21aaf:	89 10                	mov    %edx,(%eax)
		return;
   21ab1:	e9 b6 00 00 00       	jmp    21b6c <fmul+0x150>
	}
	if (i>0x7fff) {
   21ab6:	81 7c 24 1c ff 7f 00 	cmpl   $0x7fff,0x1c(%esp)
   21abd:	00 
   21abe:	7e 1e                	jle    21ade <fmul+0xc2>
		set_OE();       // 置位溢出标志位。
   21ac0:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21ac5:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21acb:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21ad0:	83 ca 08             	or     $0x8,%edx
   21ad3:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21ad9:	e9 8e 00 00 00       	jmp    21b6c <fmul+0x150>
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
   21ade:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ae2:	50                   	push   %eax
   21ae3:	ff 74 24 2c          	pushl  0x2c(%esp)
   21ae7:	ff 74 24 2c          	pushl  0x2c(%esp)
   21aeb:	e8 e3 fe ff ff       	call   219d3 <mul64>
   21af0:	83 c4 0c             	add    $0xc,%esp
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21af3:	8b 44 24 08          	mov    0x8(%esp),%eax
   21af7:	85 c0                	test   %eax,%eax
   21af9:	75 2c                	jne    21b27 <fmul+0x10b>
   21afb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21aff:	85 c0                	test   %eax,%eax
   21b01:	75 24                	jne    21b27 <fmul+0x10b>
   21b03:	8b 44 24 10          	mov    0x10(%esp),%eax
   21b07:	85 c0                	test   %eax,%eax
   21b09:	75 1c                	jne    21b27 <fmul+0x10b>
   21b0b:	8b 44 24 14          	mov    0x14(%esp),%eax
   21b0f:	85 c0                	test   %eax,%eax
   21b11:	74 25                	je     21b38 <fmul+0x11c>
		while (i && tmp[3] >= 0) {
   21b13:	eb 12                	jmp    21b27 <fmul+0x10b>
			i--;
   21b15:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
			shift(tmp);
   21b1a:	8d 44 24 08          	lea    0x8(%esp),%eax
   21b1e:	50                   	push   %eax
   21b1f:	e8 93 fe ff ff       	call   219b7 <shift>
   21b24:	83 c4 04             	add    $0x4,%esp
		while (i && tmp[3] >= 0) {
   21b27:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21b2c:	74 14                	je     21b42 <fmul+0x126>
   21b2e:	8b 44 24 14          	mov    0x14(%esp),%eax
   21b32:	85 c0                	test   %eax,%eax
   21b34:	79 df                	jns    21b15 <fmul+0xf9>
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21b36:	eb 0a                	jmp    21b42 <fmul+0x126>
		}
	else
		i = 0;
   21b38:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21b3f:	00 
   21b40:	eb 01                	jmp    21b43 <fmul+0x127>
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21b42:	90                   	nop
	result->exponent = i | sign;
   21b43:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21b47:	89 c2                	mov    %eax,%edx
   21b49:	8b 44 24 18          	mov    0x18(%esp),%eax
   21b4d:	09 c2                	or     %eax,%edx
   21b4f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b53:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];
   21b57:	8b 54 24 10          	mov    0x10(%esp),%edx
   21b5b:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b5f:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21b61:	8b 54 24 14          	mov    0x14(%esp),%edx
   21b65:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b69:	89 50 04             	mov    %edx,0x4(%eax)
}
   21b6c:	83 c4 20             	add    $0x20,%esp
   21b6f:	c3                   	ret    

00021b70 <shift_left>:
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   21b70:	8b 54 24 04          	mov    0x4(%esp),%edx
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21b74:	8b 02                	mov    (%edx),%eax
   21b76:	01 02                	add    %eax,(%edx)
   21b78:	8b 42 04             	mov    0x4(%edx),%eax
   21b7b:	11 42 04             	adc    %eax,0x4(%edx)
   21b7e:	8b 42 08             	mov    0x8(%edx),%eax
   21b81:	11 42 08             	adc    %eax,0x8(%edx)
   21b84:	8b 42 0c             	mov    0xc(%edx),%eax
   21b87:	11 42 0c             	adc    %eax,0xc(%edx)
}
   21b8a:	90                   	nop
   21b8b:	c3                   	ret    

00021b8c <shift_right>:

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
		::"r" ((long) c));
   21b8c:	8b 44 24 04          	mov    0x4(%esp),%eax
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
   21b90:	d1 68 0c             	shrl   0xc(%eax)
   21b93:	d1 58 08             	rcrl   0x8(%eax)
   21b96:	d1 58 04             	rcrl   0x4(%eax)
   21b99:	d1 18                	rcrl   (%eax)
}
   21b9b:	90                   	nop
   21b9c:	c3                   	ret    

00021b9d <try_sub>:

// 减法运算。
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
   21b9d:	83 ec 10             	sub    $0x10,%esp

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
   21ba0:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ba4:	8b 54 24 18          	mov    0x18(%esp),%edx
	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
   21ba8:	89 c1                	mov    %eax,%ecx
   21baa:	8b 01                	mov    (%ecx),%eax
   21bac:	29 02                	sub    %eax,(%edx)
   21bae:	8b 41 04             	mov    0x4(%ecx),%eax
   21bb1:	19 42 04             	sbb    %eax,0x4(%edx)
   21bb4:	8b 41 08             	mov    0x8(%ecx),%eax
   21bb7:	19 42 08             	sbb    %eax,0x8(%edx)
   21bba:	8b 41 0c             	mov    0xc(%ecx),%eax
   21bbd:	19 42 0c             	sbb    %eax,0xc(%edx)
   21bc0:	0f 93 c0             	setae  %al
   21bc3:	88 44 24 0f          	mov    %al,0xf(%esp)
	return ok;
   21bc7:	0f be 44 24 0f       	movsbl 0xf(%esp),%eax
}
   21bcc:	83 c4 10             	add    $0x10,%esp
   21bcf:	c3                   	ret    

00021bd0 <div64>:

// 16字节除法。
// 参数a/b -> c。利用减法模拟多字节除法。
static void div64(int * a, int * b, int * c)
{
   21bd0:	83 ec 20             	sub    $0x20,%esp
	int tmp[4];     // 余数变量。
	int i;
	unsigned int mask = 0;  // 操作位。
   21bd3:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   21bda:	00 

	c += 4;
   21bdb:	83 44 24 2c 10       	addl   $0x10,0x2c(%esp)
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21be0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21be7:	00 
   21be8:	e9 ac 00 00 00       	jmp    21c99 <div64+0xc9>
		if (!(mask >>= 1)) {
   21bed:	d1 6c 24 18          	shrl   0x18(%esp)
   21bf1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   21bf6:	75 0d                	jne    21c05 <div64+0x35>
			c--;
   21bf8:	83 6c 24 2c 04       	subl   $0x4,0x2c(%esp)
			mask = 0x80000000;
   21bfd:	c7 44 24 18 00 00 00 	movl   $0x80000000,0x18(%esp)
   21c04:	80 
		}
// 把余数值tmp初始化为a值。
		tmp[0] = a[0]; tmp[1] = a[1];
   21c05:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c09:	8b 00                	mov    (%eax),%eax
   21c0b:	89 44 24 08          	mov    %eax,0x8(%esp)
   21c0f:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c13:	8b 40 04             	mov    0x4(%eax),%eax
   21c16:	89 44 24 0c          	mov    %eax,0xc(%esp)
		tmp[2] = a[2]; tmp[3] = a[3];
   21c1a:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c1e:	8b 40 08             	mov    0x8(%eax),%eax
   21c21:	89 44 24 10          	mov    %eax,0x10(%esp)
   21c25:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c29:	8b 40 0c             	mov    0xc(%eax),%eax
   21c2c:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (try_sub(b,tmp)) {           // 是否有借位。
   21c30:	8d 44 24 08          	lea    0x8(%esp),%eax
   21c34:	50                   	push   %eax
   21c35:	ff 74 24 2c          	pushl  0x2c(%esp)
   21c39:	e8 5f ff ff ff       	call   21b9d <try_sub>
   21c3e:	83 c4 08             	add    $0x8,%esp
   21c41:	85 c0                	test   %eax,%eax
   21c43:	74 43                	je     21c88 <div64+0xb8>
			*c |= mask;             // 如果无借位，置当前操作位，把余数存入a，用于下次操作。
   21c45:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21c49:	8b 00                	mov    (%eax),%eax
   21c4b:	0b 44 24 18          	or     0x18(%esp),%eax
   21c4f:	89 c2                	mov    %eax,%edx
   21c51:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21c55:	89 10                	mov    %edx,(%eax)
			a[0] = tmp[0]; a[1] = tmp[1];
   21c57:	8b 54 24 08          	mov    0x8(%esp),%edx
   21c5b:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c5f:	89 10                	mov    %edx,(%eax)
   21c61:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c65:	8d 50 04             	lea    0x4(%eax),%edx
   21c68:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21c6c:	89 02                	mov    %eax,(%edx)
			a[2] = tmp[2]; a[3] = tmp[3];
   21c6e:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c72:	8d 50 08             	lea    0x8(%eax),%edx
   21c75:	8b 44 24 10          	mov    0x10(%esp),%eax
   21c79:	89 02                	mov    %eax,(%edx)
   21c7b:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c7f:	8d 50 0c             	lea    0xc(%eax),%edx
   21c82:	8b 44 24 14          	mov    0x14(%esp),%eax
   21c86:	89 02                	mov    %eax,(%edx)
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
   21c88:	ff 74 24 28          	pushl  0x28(%esp)
   21c8c:	e8 fb fe ff ff       	call   21b8c <shift_right>
   21c91:	83 c4 04             	add    $0x4,%esp
	for (i = 0 ; i<64 ; i++) {
   21c94:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   21c99:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   21c9e:	0f 8e 49 ff ff ff    	jle    21bed <div64+0x1d>
	}
}
   21ca4:	90                   	nop
   21ca5:	83 c4 20             	add    $0x20,%esp
   21ca8:	c3                   	ret    

00021ca9 <fdiv>:

// 仿真浮点指令FDIV。
// 临时实数src1 / src2 -> result处。
void fdiv(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21ca9:	83 ec 40             	sub    $0x40,%esp
	int i,sign;
	int a[4],b[4],tmp[4] = {0,0,0,0};
   21cac:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21cb3:	00 
   21cb4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21cbb:	00 
   21cbc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21cc3:	00 
   21cc4:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21ccb:	00 

// 首先确定两个数相除的符号。符号值等于两者符号位异或值。然后判断除数src2值是否为0，如果是，则置被零除异常。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21ccc:	8b 44 24 44          	mov    0x44(%esp),%eax
   21cd0:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21cd4:	8b 44 24 48          	mov    0x48(%esp),%eax
   21cd8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21cdc:	31 d0                	xor    %edx,%eax
   21cde:	98                   	cwtl   
   21cdf:	25 00 80 00 00       	and    $0x8000,%eax
   21ce4:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (!(src2->a || src2->b)) {
   21ce8:	8b 44 24 48          	mov    0x48(%esp),%eax
   21cec:	8b 00                	mov    (%eax),%eax
   21cee:	85 c0                	test   %eax,%eax
   21cf0:	75 29                	jne    21d1b <fdiv+0x72>
   21cf2:	8b 44 24 48          	mov    0x48(%esp),%eax
   21cf6:	8b 40 04             	mov    0x4(%eax),%eax
   21cf9:	85 c0                	test   %eax,%eax
   21cfb:	75 1e                	jne    21d1b <fdiv+0x72>
		set_ZE();               // 置被零除异常。
   21cfd:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21d02:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21d08:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21d0d:	83 ca 04             	or     $0x4,%edx
   21d10:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21d16:	e9 d8 01 00 00       	jmp    21ef3 <fdiv+0x24a>
	}
// 然后计算除后的指数值。相除时指数值需要相减。但是由于指数使用偏置格式保存，两个数的指数相减时偏置量也被减去了，因此需
// 要加上偏置量值（临时实数的偏置量是16383）。
        i = (src1->exponent & 0x7fff) - (src2->exponent & 0x7fff) + 16383;
   21d1b:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d1f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21d23:	98                   	cwtl   
   21d24:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21d29:	89 c2                	mov    %eax,%edx
   21d2b:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d2f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21d33:	98                   	cwtl   
   21d34:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21d39:	29 c2                	sub    %eax,%edx
   21d3b:	89 d0                	mov    %edx,%eax
   21d3d:	05 ff 3f 00 00       	add    $0x3fff,%eax
   21d42:	89 44 24 3c          	mov    %eax,0x3c(%esp)
// 如果结果指数变成了负值，表示两数相除后产生下溢。于是直接返回带符号的零值。
	if (i<0) {
   21d46:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21d4b:	79 44                	jns    21d91 <fdiv+0xe8>
		set_UE();
   21d4d:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21d52:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21d58:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21d5d:	83 ca 10             	or     $0x10,%edx
   21d60:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		result->exponent = sign;        // 设置符号位。
   21d66:	8b 44 24 38          	mov    0x38(%esp),%eax
   21d6a:	89 c2                	mov    %eax,%edx
   21d6c:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d70:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;      // 设置返回值为0。
   21d74:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d78:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21d7f:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d83:	8b 50 04             	mov    0x4(%eax),%edx
   21d86:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d8a:	89 10                	mov    %edx,(%eax)
		return;
   21d8c:	e9 62 01 00 00       	jmp    21ef3 <fdiv+0x24a>
	}
// 把临时实数src1、src2有效数放入整型数组a和b。
	a[0] = a[1] = 0;
   21d91:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21d98:	00 
   21d99:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21d9d:	89 44 24 28          	mov    %eax,0x28(%esp)
	a[2] = src1->a;
   21da1:	8b 44 24 44          	mov    0x44(%esp),%eax
   21da5:	8b 00                	mov    (%eax),%eax
   21da7:	89 44 24 30          	mov    %eax,0x30(%esp)
	a[3] = src1->b;
   21dab:	8b 44 24 44          	mov    0x44(%esp),%eax
   21daf:	8b 40 04             	mov    0x4(%eax),%eax
   21db2:	89 44 24 34          	mov    %eax,0x34(%esp)
	b[0] = b[1] = 0;
   21db6:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21dbd:	00 
   21dbe:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21dc2:	89 44 24 18          	mov    %eax,0x18(%esp)
	b[2] = src2->a;
   21dc6:	8b 44 24 48          	mov    0x48(%esp),%eax
   21dca:	8b 00                	mov    (%eax),%eax
   21dcc:	89 44 24 20          	mov    %eax,0x20(%esp)
	b[3] = src2->b;
   21dd0:	8b 44 24 48          	mov    0x48(%esp),%eax
   21dd4:	8b 40 04             	mov    0x4(%eax),%eax
   21dd7:	89 44 24 24          	mov    %eax,0x24(%esp)
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21ddb:	eb 12                	jmp    21def <fdiv+0x146>
		i++;
   21ddd:	83 44 24 3c 01       	addl   $0x1,0x3c(%esp)
		shift_left(b);
   21de2:	8d 44 24 18          	lea    0x18(%esp),%eax
   21de6:	50                   	push   %eax
   21de7:	e8 84 fd ff ff       	call   21b70 <shift_left>
   21dec:	83 c4 04             	add    $0x4,%esp
	while (b[3] >= 0) {
   21def:	8b 44 24 24          	mov    0x24(%esp),%eax
   21df3:	85 c0                	test   %eax,%eax
   21df5:	79 e6                	jns    21ddd <fdiv+0x134>
	}
// 进行64位除法操作。
	div64(a,b,tmp);
   21df7:	8d 44 24 08          	lea    0x8(%esp),%eax
   21dfb:	50                   	push   %eax
   21dfc:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21e00:	50                   	push   %eax
   21e01:	8d 44 24 30          	lea    0x30(%esp),%eax
   21e05:	50                   	push   %eax
   21e06:	e8 c5 fd ff ff       	call   21bd0 <div64>
   21e0b:	83 c4 0c             	add    $0xc,%esp
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
   21e0e:	8b 44 24 08          	mov    0x8(%esp),%eax
   21e12:	85 c0                	test   %eax,%eax
   21e14:	75 2c                	jne    21e42 <fdiv+0x199>
   21e16:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21e1a:	85 c0                	test   %eax,%eax
   21e1c:	75 24                	jne    21e42 <fdiv+0x199>
   21e1e:	8b 44 24 10          	mov    0x10(%esp),%eax
   21e22:	85 c0                	test   %eax,%eax
   21e24:	75 1c                	jne    21e42 <fdiv+0x199>
   21e26:	8b 44 24 14          	mov    0x14(%esp),%eax
   21e2a:	85 c0                	test   %eax,%eax
   21e2c:	74 46                	je     21e74 <fdiv+0x1cb>
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21e2e:	eb 12                	jmp    21e42 <fdiv+0x199>
			i--;
   21e30:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
			shift_left(tmp);
   21e35:	8d 44 24 08          	lea    0x8(%esp),%eax
   21e39:	50                   	push   %eax
   21e3a:	e8 31 fd ff ff       	call   21b70 <shift_left>
   21e3f:	83 c4 04             	add    $0x4,%esp
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21e42:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21e47:	74 08                	je     21e51 <fdiv+0x1a8>
   21e49:	8b 44 24 14          	mov    0x14(%esp),%eax
   21e4d:	85 c0                	test   %eax,%eax
   21e4f:	79 df                	jns    21e30 <fdiv+0x187>
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21e51:	8b 44 24 14          	mov    0x14(%esp),%eax
   21e55:	85 c0                	test   %eax,%eax
   21e57:	78 23                	js     21e7c <fdiv+0x1d3>
			set_DE();
   21e59:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e5e:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21e64:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e69:	83 ca 02             	or     $0x2,%edx
   21e6c:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21e72:	eb 08                	jmp    21e7c <fdiv+0x1d3>
	} else
		i = 0;          // 设置结果指数为0。
   21e74:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   21e7b:	00 
// 如果结果指数大于0x7fff，表示产生上溢，于是设置状态字溢出异常标志位，并返回。
	if (i>0x7fff) {
   21e7c:	81 7c 24 3c ff 7f 00 	cmpl   $0x7fff,0x3c(%esp)
   21e83:	00 
   21e84:	7e 1b                	jle    21ea1 <fdiv+0x1f8>
		set_OE();
   21e86:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e8b:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21e91:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21e96:	83 ca 08             	or     $0x8,%edx
   21e99:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21e9f:	eb 52                	jmp    21ef3 <fdiv+0x24a>
	}
// 如果tmp[0]或tmp[1]不为0，则设置状态字精度异常标志位
	if (tmp[0] || tmp[1])
   21ea1:	8b 44 24 08          	mov    0x8(%esp),%eax
   21ea5:	85 c0                	test   %eax,%eax
   21ea7:	75 08                	jne    21eb1 <fdiv+0x208>
   21ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21ead:	85 c0                	test   %eax,%eax
   21eaf:	74 19                	je     21eca <fdiv+0x221>
		set_PE();
   21eb1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21eb6:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21ebc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21ec1:	83 ca 20             	or     $0x20,%edx
   21ec4:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	result->exponent = i | sign;            // 设置返回临时实数的符号位和指数值。
   21eca:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21ece:	89 c2                	mov    %eax,%edx
   21ed0:	8b 44 24 38          	mov    0x38(%esp),%eax
   21ed4:	09 c2                	or     %eax,%edx
   21ed6:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21eda:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];                     // 设置返回临时实数的有效值。
   21ede:	8b 54 24 10          	mov    0x10(%esp),%edx
   21ee2:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21ee6:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21ee8:	8b 54 24 14          	mov    0x14(%esp),%edx
   21eec:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21ef0:	89 50 04             	mov    %edx,0x4(%eax)
}
   21ef3:	83 c4 40             	add    $0x40,%esp
   21ef6:	c3                   	ret    

00021ef7 <normalize>:
#define clear_Cx() (I387.swd &= ~0x4500)

// 对临时实数a进行规格化处理。即表示成指数、有效数形式。
// 例如：102.345表示成1.02345 X 10^2。0.0001234表示成1.234 X 10^-1。当然，函数中是二进制表示。
static void normalize(temp_real * a)
{
   21ef7:	83 ec 10             	sub    $0x10,%esp
	int i = a->exponent & 0x7fff;           // 取指数值（略去符号位）。
   21efa:	8b 44 24 14          	mov    0x14(%esp),%eax
   21efe:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21f02:	98                   	cwtl   
   21f03:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21f08:	89 44 24 0c          	mov    %eax,0xc(%esp)
	int sign = a->exponent & 0x8000;        // 取符号位。
   21f0c:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f10:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21f14:	98                   	cwtl   
   21f15:	25 00 80 00 00       	and    $0x8000,%eax
   21f1a:	89 44 24 08          	mov    %eax,0x8(%esp)

// 如果临时实数a的64位有效数（尾数）为0，那么说明a等于0。于是清a的指数，返回。
	if (!(a->a || a->b)) {
   21f1e:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f22:	8b 00                	mov    (%eax),%eax
   21f24:	85 c0                	test   %eax,%eax
   21f26:	75 3a                	jne    21f62 <normalize+0x6b>
   21f28:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f2c:	8b 40 04             	mov    0x4(%eax),%eax
   21f2f:	85 c0                	test   %eax,%eax
   21f31:	75 2f                	jne    21f62 <normalize+0x6b>
		a->exponent = 0;
   21f33:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f37:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21f3d:	eb 49                	jmp    21f88 <normalize+0x91>
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
   21f3f:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   21f44:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f48:	8b 10                	mov    (%eax),%edx
   21f4a:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f4e:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   21f51:	01 d2                	add    %edx,%edx
   21f53:	11 c0                	adc    %eax,%eax
   21f55:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21f59:	89 11                	mov    %edx,(%ecx)
   21f5b:	8b 54 24 14          	mov    0x14(%esp),%edx
   21f5f:	89 42 04             	mov    %eax,0x4(%edx)
	while (i && a->b >= 0) {
   21f62:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   21f67:	74 0b                	je     21f74 <normalize+0x7d>
   21f69:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f6d:	8b 40 04             	mov    0x4(%eax),%eax
   21f70:	85 c0                	test   %eax,%eax
   21f72:	79 cb                	jns    21f3f <normalize+0x48>
	}
	a->exponent = i | sign;
   21f74:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21f78:	89 c2                	mov    %eax,%edx
   21f7a:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f7e:	09 c2                	or     %eax,%edx
   21f80:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f84:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21f88:	83 c4 10             	add    $0x10,%esp
   21f8b:	c3                   	ret    

00021f8c <ftst>:

// 仿真浮点指令FTST。
// 即栈定累加器ST(0)与0比较，并根据比较结果设置条件位。若ST > 0.0，则C3，C2，C0分别为000；若ST < 0.0，则条件位为001；若
// ST == 0.0，则条件位是100；若不可比较，则条件位为111。
void ftst(const temp_real * a)
{
   21f8c:	83 ec 10             	sub    $0x10,%esp
	temp_real b;

// 首先清状态字中条件标志位，并对比较值b（ST）进行规格化处理。若b不等于零并且设置了符号位（是负数），则设置条件位C0。否则设置
// 条件位C3。
	clear_Cx();
   21f8f:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21f94:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21f9a:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21f9f:	80 e6 ba             	and    $0xba,%dh
   21fa2:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	b = *a;
   21fa8:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fac:	8b 10                	mov    (%eax),%edx
   21fae:	89 54 24 04          	mov    %edx,0x4(%esp)
   21fb2:	8b 50 04             	mov    0x4(%eax),%edx
   21fb5:	89 54 24 08          	mov    %edx,0x8(%esp)
   21fb9:	8b 40 08             	mov    0x8(%eax),%eax
   21fbc:	89 44 24 0c          	mov    %eax,0xc(%esp)
	normalize(&b);
   21fc0:	8d 44 24 04          	lea    0x4(%esp),%eax
   21fc4:	50                   	push   %eax
   21fc5:	e8 2d ff ff ff       	call   21ef7 <normalize>
   21fca:	83 c4 04             	add    $0x4,%esp
	if (b.a || b.b || b.exponent) {
   21fcd:	8b 44 24 04          	mov    0x4(%esp),%eax
   21fd1:	85 c0                	test   %eax,%eax
   21fd3:	75 12                	jne    21fe7 <ftst+0x5b>
   21fd5:	8b 44 24 08          	mov    0x8(%esp),%eax
   21fd9:	85 c0                	test   %eax,%eax
   21fdb:	75 0a                	jne    21fe7 <ftst+0x5b>
   21fdd:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21fe2:	66 85 c0             	test   %ax,%ax
   21fe5:	74 25                	je     2200c <ftst+0x80>
		if (b.exponent < 0)
   21fe7:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21fec:	66 85 c0             	test   %ax,%ax
   21fef:	79 34                	jns    22025 <ftst+0x99>
			set_C0();
   21ff1:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   21ff6:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   21ffc:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22001:	80 ce 01             	or     $0x1,%dh
   22004:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		if (b.exponent < 0)
   2200a:	eb 19                	jmp    22025 <ftst+0x99>
	} else
		set_C3();
   2200c:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22011:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   22017:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2201c:	80 ce 40             	or     $0x40,%dh
   2201f:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   22025:	90                   	nop
   22026:	83 c4 10             	add    $0x10,%esp
   22029:	c3                   	ret    

0002202a <fcom>:

// 仿真浮点指令FCOM。
// 比较两个参数src1、src2。并根据比较结果设置条件位。若src1 > src2，则C3，C2，C0分别为000；若src1 < src2，则条件位为
// 001；若两者相等，则条件位是100。
void fcom(const temp_real * src1, const temp_real * src2)
{
   2202a:	83 ec 1c             	sub    $0x1c,%esp
	temp_real a;

	a = *src1;
   2202d:	8b 44 24 20          	mov    0x20(%esp),%eax
   22031:	8b 10                	mov    (%eax),%edx
   22033:	89 54 24 04          	mov    %edx,0x4(%esp)
   22037:	8b 50 04             	mov    0x4(%eax),%edx
   2203a:	89 54 24 08          	mov    %edx,0x8(%esp)
   2203e:	8b 40 08             	mov    0x8(%eax),%eax
   22041:	89 44 24 0c          	mov    %eax,0xc(%esp)
	a.exponent ^= 0x8000;           // 符号位取反。
   22045:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2204a:	66 35 00 80          	xor    $0x8000,%ax
   2204e:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	fadd(&a,src2,&a);               // 两者相加（即相减）。
   22053:	83 ec 04             	sub    $0x4,%esp
   22056:	8d 44 24 08          	lea    0x8(%esp),%eax
   2205a:	50                   	push   %eax
   2205b:	ff 74 24 2c          	pushl  0x2c(%esp)
   2205f:	8d 44 24 10          	lea    0x10(%esp),%eax
   22063:	50                   	push   %eax
   22064:	e8 e9 f7 ff ff       	call   21852 <fadd>
   22069:	83 c4 10             	add    $0x10,%esp
	ftst(&a);                       // 测试结果并设置条件位。
   2206c:	83 ec 0c             	sub    $0xc,%esp
   2206f:	8d 44 24 10          	lea    0x10(%esp),%eax
   22073:	50                   	push   %eax
   22074:	e8 13 ff ff ff       	call   21f8c <ftst>
   22079:	83 c4 10             	add    $0x10,%esp
}
   2207c:	90                   	nop
   2207d:	83 c4 1c             	add    $0x1c,%esp
   22080:	c3                   	ret    

00022081 <fucom>:

// 仿真浮点指令FUCOM（无次序比较）。
// 用于操作数之一是NaN的比较。
void fucom(const temp_real * src1, const temp_real * src2)
{
   22081:	83 ec 0c             	sub    $0xc,%esp
	fcom(src1,src2);
   22084:	83 ec 08             	sub    $0x8,%esp
   22087:	ff 74 24 1c          	pushl  0x1c(%esp)
   2208b:	ff 74 24 1c          	pushl  0x1c(%esp)
   2208f:	e8 96 ff ff ff       	call   2202a <fcom>
   22094:	83 c4 10             	add    $0x10,%esp
}
   22097:	90                   	nop
   22098:	83 c4 0c             	add    $0xc,%esp
   2209b:	c3                   	ret    

0002209c <short_to_temp>:
// 短实数长度是32位，基有效数（尾数）长度是23位，指数是8位，还有1个符号位。
void short_to_temp(const short_real * a, temp_real * b)
{
// 首先处理被转换的短实数是0的情况。若为0,则设置对应临时实数b的有效数为0。然后根据短实数符号位设置临时实数的符号位，即exponent
// 的最高有效位。
	if (!(*a & 0x7fffffff)) {
   2209c:	8b 44 24 04          	mov    0x4(%esp),%eax
   220a0:	8b 00                	mov    (%eax),%eax
   220a2:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   220a7:	85 c0                	test   %eax,%eax
   220a9:	75 38                	jne    220e3 <short_to_temp+0x47>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   220ab:	8b 44 24 08          	mov    0x8(%esp),%eax
   220af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   220b6:	8b 44 24 08          	mov    0x8(%esp),%eax
   220ba:	8b 50 04             	mov    0x4(%eax),%edx
   220bd:	8b 44 24 08          	mov    0x8(%esp),%eax
   220c1:	89 10                	mov    %edx,(%eax)
		if (*a)
   220c3:	8b 44 24 04          	mov    0x4(%esp),%eax
   220c7:	8b 00                	mov    (%eax),%eax
   220c9:	85 c0                	test   %eax,%eax
   220cb:	74 0b                	je     220d8 <short_to_temp+0x3c>
			b->exponent = 0x8000;   // 设置符号位。
   220cd:	8b 44 24 08          	mov    0x8(%esp),%eax
   220d1:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   220d7:	c3                   	ret    
			b->exponent = 0;
   220d8:	8b 44 24 08          	mov    0x8(%esp),%eax
   220dc:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   220e2:	c3                   	ret    
	}
// 对于一般短实数，先确定对应临时实数的指数值。这里需要用到整型数偏置表示方法的概念。短实数指数的偏置量是127，而临时实数指数的偏置
// 量是16383。因此在取出短实数中指数值后需要变更其中的偏置量为16383。此时就形成了临时实数格式的指数值exponent。另外，如果短实数
// 是负数，则需要设置临时实数的符号位（位79）。下一步设置尾数值。方法是把短实数左移8位，让23位尾数最高有效位处于临时实数的位62处。
// 而临时实数尾数位63处需要恒置一个1，即需要或上0x80000000。最后清掉临时实数低32位有效数。
	b->exponent = ((*a>>23) & 0xff)-127+16383;      // 取出短实数指数位，更换偏置量。
   220e3:	8b 44 24 04          	mov    0x4(%esp),%eax
   220e7:	8b 00                	mov    (%eax),%eax
   220e9:	c1 f8 17             	sar    $0x17,%eax
   220ec:	0f b6 c0             	movzbl %al,%eax
   220ef:	66 05 80 3f          	add    $0x3f80,%ax
   220f3:	89 c2                	mov    %eax,%edx
   220f5:	8b 44 24 08          	mov    0x8(%esp),%eax
   220f9:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (*a<0)
   220fd:	8b 44 24 04          	mov    0x4(%esp),%eax
   22101:	8b 00                	mov    (%eax),%eax
   22103:	85 c0                	test   %eax,%eax
   22105:	79 16                	jns    2211d <short_to_temp+0x81>
		b->exponent |= 0x8000;                  // 若为负数则设置符号位。
   22107:	8b 44 24 08          	mov    0x8(%esp),%eax
   2210b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2210f:	66 0d 00 80          	or     $0x8000,%ax
   22113:	89 c2                	mov    %eax,%edx
   22115:	8b 44 24 08          	mov    0x8(%esp),%eax
   22119:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = (*a<<8) | 0x80000000;                    // 放置尾数，添加固定1值。
   2211d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22121:	8b 00                	mov    (%eax),%eax
   22123:	c1 e0 08             	shl    $0x8,%eax
   22126:	0d 00 00 00 80       	or     $0x80000000,%eax
   2212b:	89 c2                	mov    %eax,%edx
   2212d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22131:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = 0;
   22134:	8b 44 24 08          	mov    0x8(%esp),%eax
   22138:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   2213e:	c3                   	ret    

0002213f <long_to_temp>:

// 长实数转换成临时实数格式。
// 方法与short_to_temp()安全一样。不过长实数指数偏置量是1034。
void long_to_temp(const long_real * a, temp_real * b)
{
	if (!a->a && !(a->b & 0x7fffffff)) {
   2213f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22143:	8b 00                	mov    (%eax),%eax
   22145:	85 c0                	test   %eax,%eax
   22147:	75 49                	jne    22192 <long_to_temp+0x53>
   22149:	8b 44 24 04          	mov    0x4(%esp),%eax
   2214d:	8b 40 04             	mov    0x4(%eax),%eax
   22150:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   22155:	85 c0                	test   %eax,%eax
   22157:	75 39                	jne    22192 <long_to_temp+0x53>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   22159:	8b 44 24 08          	mov    0x8(%esp),%eax
   2215d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   22164:	8b 44 24 08          	mov    0x8(%esp),%eax
   22168:	8b 50 04             	mov    0x4(%eax),%edx
   2216b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2216f:	89 10                	mov    %edx,(%eax)
		if (a->b)
   22171:	8b 44 24 04          	mov    0x4(%esp),%eax
   22175:	8b 40 04             	mov    0x4(%eax),%eax
   22178:	85 c0                	test   %eax,%eax
   2217a:	74 0b                	je     22187 <long_to_temp+0x48>
			b->exponent = 0x8000;   // 设置符号位。
   2217c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22180:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   22186:	c3                   	ret    
			b->exponent = 0;
   22187:	8b 44 24 08          	mov    0x8(%esp),%eax
   2218b:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22191:	c3                   	ret    
	}
	b->exponent = ((a->b >> 20) & 0x7ff)-1023+16383;        // 取长实数指数，更换偏置量。
   22192:	8b 44 24 04          	mov    0x4(%esp),%eax
   22196:	8b 40 04             	mov    0x4(%eax),%eax
   22199:	c1 f8 14             	sar    $0x14,%eax
   2219c:	66 25 ff 07          	and    $0x7ff,%ax
   221a0:	66 05 00 3c          	add    $0x3c00,%ax
   221a4:	89 c2                	mov    %eax,%edx
   221a6:	8b 44 24 08          	mov    0x8(%esp),%eax
   221aa:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b<0)
   221ae:	8b 44 24 04          	mov    0x4(%esp),%eax
   221b2:	8b 40 04             	mov    0x4(%eax),%eax
   221b5:	85 c0                	test   %eax,%eax
   221b7:	79 16                	jns    221cf <long_to_temp+0x90>
		b->exponent |= 0x8000;          // 若为负数则设置符号位。
   221b9:	8b 44 24 08          	mov    0x8(%esp),%eax
   221bd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221c1:	66 0d 00 80          	or     $0x8000,%ax
   221c5:	89 c2                	mov    %eax,%edx
   221c7:	8b 44 24 08          	mov    0x8(%esp),%eax
   221cb:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = 0x80000000 | (a->b<<11) | (((unsigned long)a->a)>>21);
   221cf:	8b 44 24 04          	mov    0x4(%esp),%eax
   221d3:	8b 40 04             	mov    0x4(%eax),%eax
   221d6:	c1 e0 0b             	shl    $0xb,%eax
   221d9:	89 c2                	mov    %eax,%edx
   221db:	8b 44 24 04          	mov    0x4(%esp),%eax
   221df:	8b 00                	mov    (%eax),%eax
   221e1:	c1 e8 15             	shr    $0x15,%eax
   221e4:	09 d0                	or     %edx,%eax
   221e6:	0d 00 00 00 80       	or     $0x80000000,%eax
   221eb:	89 c2                	mov    %eax,%edx
   221ed:	8b 44 24 08          	mov    0x8(%esp),%eax
   221f1:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->a<<11;                        // 放置尾数，添1。
   221f4:	8b 44 24 04          	mov    0x4(%esp),%eax
   221f8:	8b 00                	mov    (%eax),%eax
   221fa:	c1 e0 0b             	shl    $0xb,%eax
   221fd:	89 c2                	mov    %eax,%edx
   221ff:	8b 44 24 08          	mov    0x8(%esp),%eax
   22203:	89 10                	mov    %edx,(%eax)
}
   22205:	c3                   	ret    

00022206 <temp_to_short>:
// 临时实数转换成短实数格式。
// 过程与short_to_temp()相反，但需要处理精度和舍入问题。
void temp_to_short(const temp_real * a, short_real * b)
{
// 如果指数部分为0，则根据有无符号位设置短实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   22206:	8b 44 24 04          	mov    0x4(%esp),%eax
   2220a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2220e:	98                   	cwtl   
   2220f:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22214:	85 c0                	test   %eax,%eax
   22216:	75 20                	jne    22238 <temp_to_short+0x32>
		*b = (a->exponent)?0x80000000:0;
   22218:	8b 44 24 04          	mov    0x4(%esp),%eax
   2221c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22220:	66 85 c0             	test   %ax,%ax
   22223:	74 07                	je     2222c <temp_to_short+0x26>
   22225:	ba 00 00 00 80       	mov    $0x80000000,%edx
   2222a:	eb 05                	jmp    22231 <temp_to_short+0x2b>
   2222c:	ba 00 00 00 00       	mov    $0x0,%edx
   22231:	8b 44 24 08          	mov    0x8(%esp),%eax
   22235:	89 10                	mov    %edx,(%eax)
		return;
   22237:	c3                   	ret    
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为短实数的偏置量127。
	*b = ((((long) a->exponent)-16383+127) << 23) & 0x7f800000;
   22238:	8b 44 24 04          	mov    0x4(%esp),%eax
   2223c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22240:	98                   	cwtl   
   22241:	2d 80 3f 00 00       	sub    $0x3f80,%eax
   22246:	c1 e0 17             	shl    $0x17,%eax
   22249:	25 00 00 80 7f       	and    $0x7f800000,%eax
   2224e:	89 c2                	mov    %eax,%edx
   22250:	8b 44 24 08          	mov    0x8(%esp),%eax
   22254:	89 10                	mov    %edx,(%eax)
	if (a->exponent < 0)                    // 若是负数则设置符号位。
   22256:	8b 44 24 04          	mov    0x4(%esp),%eax
   2225a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2225e:	66 85 c0             	test   %ax,%ax
   22261:	79 13                	jns    22276 <temp_to_short+0x70>
		*b |= 0x80000000;
   22263:	8b 44 24 08          	mov    0x8(%esp),%eax
   22267:	8b 00                	mov    (%eax),%eax
   22269:	0d 00 00 00 80       	or     $0x80000000,%eax
   2226e:	89 c2                	mov    %eax,%edx
   22270:	8b 44 24 08          	mov    0x8(%esp),%eax
   22274:	89 10                	mov    %edx,(%eax)
	*b |= (a->b >> 8) & 0x007fffff;         // 取临时实数有效数高23位。
   22276:	8b 44 24 08          	mov    0x8(%esp),%eax
   2227a:	8b 10                	mov    (%eax),%edx
   2227c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22280:	8b 40 04             	mov    0x4(%eax),%eax
   22283:	c1 f8 08             	sar    $0x8,%eax
   22286:	25 ff ff 7f 00       	and    $0x7fffff,%eax
   2228b:	09 c2                	or     %eax,%edx
   2228d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22291:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   22293:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22298:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2229e:	c1 f8 0a             	sar    $0xa,%eax
   222a1:	83 e0 03             	and    $0x3,%eax
   222a4:	83 f8 01             	cmp    $0x1,%eax
   222a7:	74 2f                	je     222d8 <temp_to_short+0xd2>
   222a9:	83 f8 02             	cmp    $0x2,%eax
   222ac:	74 56                	je     22304 <temp_to_short+0xfe>
   222ae:	85 c0                	test   %eax,%eax
   222b0:	0f 85 80 00 00 00    	jne    22336 <temp_to_short+0x130>
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
   222b6:	8b 44 24 04          	mov    0x4(%esp),%eax
   222ba:	8b 40 04             	mov    0x4(%eax),%eax
   222bd:	0f b6 c0             	movzbl %al,%eax
   222c0:	3d 80 00 00 00       	cmp    $0x80,%eax
   222c5:	7e 6a                	jle    22331 <temp_to_short+0x12b>
				++*b;
   222c7:	8b 44 24 08          	mov    0x8(%esp),%eax
   222cb:	8b 00                	mov    (%eax),%eax
   222cd:	8d 50 01             	lea    0x1(%eax),%edx
   222d0:	8b 44 24 08          	mov    0x8(%esp),%eax
   222d4:	89 10                	mov    %edx,(%eax)
			break;
   222d6:	eb 59                	jmp    22331 <temp_to_short+0x12b>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   222d8:	8b 44 24 04          	mov    0x4(%esp),%eax
   222dc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222e0:	66 85 c0             	test   %ax,%ax
   222e3:	79 4e                	jns    22333 <temp_to_short+0x12d>
   222e5:	8b 44 24 04          	mov    0x4(%esp),%eax
   222e9:	8b 40 04             	mov    0x4(%eax),%eax
   222ec:	0f b6 c0             	movzbl %al,%eax
   222ef:	85 c0                	test   %eax,%eax
   222f1:	74 40                	je     22333 <temp_to_short+0x12d>
				++*b;
   222f3:	8b 44 24 08          	mov    0x8(%esp),%eax
   222f7:	8b 00                	mov    (%eax),%eax
   222f9:	8d 50 01             	lea    0x1(%eax),%edx
   222fc:	8b 44 24 08          	mov    0x8(%esp),%eax
   22300:	89 10                	mov    %edx,(%eax)
			break;
   22302:	eb 2f                	jmp    22333 <temp_to_short+0x12d>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   22304:	8b 44 24 04          	mov    0x4(%esp),%eax
   22308:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2230c:	66 85 c0             	test   %ax,%ax
   2230f:	78 24                	js     22335 <temp_to_short+0x12f>
   22311:	8b 44 24 04          	mov    0x4(%esp),%eax
   22315:	8b 40 04             	mov    0x4(%eax),%eax
   22318:	0f b6 c0             	movzbl %al,%eax
   2231b:	85 c0                	test   %eax,%eax
   2231d:	74 16                	je     22335 <temp_to_short+0x12f>
				++*b;
   2231f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22323:	8b 00                	mov    (%eax),%eax
   22325:	8d 50 01             	lea    0x1(%eax),%edx
   22328:	8b 44 24 08          	mov    0x8(%esp),%eax
   2232c:	89 10                	mov    %edx,(%eax)
			break;
   2232e:	90                   	nop
   2232f:	eb 04                	jmp    22335 <temp_to_short+0x12f>
			break;
   22331:	90                   	nop
   22332:	c3                   	ret    
			break;
   22333:	90                   	nop
   22334:	c3                   	ret    
			break;
   22335:	90                   	nop
	}
}
   22336:	c3                   	ret    

00022337 <temp_to_long>:

// 临时实数转换成长实数。
void temp_to_long(const temp_real * a, long_real * b)
{
// 如果指数部分为0，则根据有无符号位设置长实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   22337:	8b 44 24 04          	mov    0x4(%esp),%eax
   2233b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2233f:	98                   	cwtl   
   22340:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22345:	85 c0                	test   %eax,%eax
   22347:	75 2b                	jne    22374 <temp_to_long+0x3d>
		b->a = 0;
   22349:	8b 44 24 08          	mov    0x8(%esp),%eax
   2234d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		b->b = (a->exponent)?0x80000000:0;
   22353:	8b 44 24 04          	mov    0x4(%esp),%eax
   22357:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2235b:	66 85 c0             	test   %ax,%ax
   2235e:	74 07                	je     22367 <temp_to_long+0x30>
   22360:	ba 00 00 00 80       	mov    $0x80000000,%edx
   22365:	eb 05                	jmp    2236c <temp_to_long+0x35>
   22367:	ba 00 00 00 00       	mov    $0x0,%edx
   2236c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22370:	89 50 04             	mov    %edx,0x4(%eax)
		return;
   22373:	c3                   	ret    
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为长实数的偏置量1023.
	b->b = (((0x7fff & (long) a->exponent)-16383+1023) << 20) & 0x7ff00000;
   22374:	8b 44 24 04          	mov    0x4(%esp),%eax
   22378:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2237c:	98                   	cwtl   
   2237d:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22382:	2d 00 3c 00 00       	sub    $0x3c00,%eax
   22387:	c1 e0 14             	shl    $0x14,%eax
   2238a:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
   2238f:	89 c2                	mov    %eax,%edx
   22391:	8b 44 24 08          	mov    0x8(%esp),%eax
   22395:	89 50 04             	mov    %edx,0x4(%eax)
	if (a->exponent < 0)            // 若是负数则设置符号位。
   22398:	8b 44 24 04          	mov    0x4(%esp),%eax
   2239c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   223a0:	66 85 c0             	test   %ax,%ax
   223a3:	79 15                	jns    223ba <temp_to_long+0x83>
		b->b |= 0x80000000;
   223a5:	8b 44 24 08          	mov    0x8(%esp),%eax
   223a9:	8b 40 04             	mov    0x4(%eax),%eax
   223ac:	0d 00 00 00 80       	or     $0x80000000,%eax
   223b1:	89 c2                	mov    %eax,%edx
   223b3:	8b 44 24 08          	mov    0x8(%esp),%eax
   223b7:	89 50 04             	mov    %edx,0x4(%eax)
	b->b |= (a->b >> 11) & 0x000fffff;      // 取临时实数有效数高20位。
   223ba:	8b 44 24 08          	mov    0x8(%esp),%eax
   223be:	8b 50 04             	mov    0x4(%eax),%edx
   223c1:	8b 44 24 04          	mov    0x4(%esp),%eax
   223c5:	8b 40 04             	mov    0x4(%eax),%eax
   223c8:	c1 f8 0b             	sar    $0xb,%eax
   223cb:	25 ff ff 0f 00       	and    $0xfffff,%eax
   223d0:	09 c2                	or     %eax,%edx
   223d2:	8b 44 24 08          	mov    0x8(%esp),%eax
   223d6:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->b << 21;
   223d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   223dd:	8b 40 04             	mov    0x4(%eax),%eax
   223e0:	c1 e0 15             	shl    $0x15,%eax
   223e3:	89 c2                	mov    %eax,%edx
   223e5:	8b 44 24 08          	mov    0x8(%esp),%eax
   223e9:	89 10                	mov    %edx,(%eax)
	b->a |= (a->a >> 11) & 0x001fffff;
   223eb:	8b 44 24 08          	mov    0x8(%esp),%eax
   223ef:	8b 10                	mov    (%eax),%edx
   223f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   223f5:	8b 00                	mov    (%eax),%eax
   223f7:	c1 e8 0b             	shr    $0xb,%eax
   223fa:	09 c2                	or     %eax,%edx
   223fc:	8b 44 24 08          	mov    0x8(%esp),%eax
   22400:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   22402:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22407:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2240d:	c1 f8 0a             	sar    $0xa,%eax
   22410:	83 e0 03             	and    $0x3,%eax
   22413:	83 f8 01             	cmp    $0x1,%eax
   22416:	74 45                	je     2245d <temp_to_long+0x126>
   22418:	83 f8 02             	cmp    $0x2,%eax
   2241b:	74 7d                	je     2249a <temp_to_long+0x163>
   2241d:	85 c0                	test   %eax,%eax
   2241f:	0f 85 b8 00 00 00    	jne    224dd <temp_to_long+0x1a6>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
   22425:	8b 44 24 04          	mov    0x4(%esp),%eax
   22429:	8b 00                	mov    (%eax),%eax
   2242b:	25 ff 07 00 00       	and    $0x7ff,%eax
   22430:	3d 00 04 00 00       	cmp    $0x400,%eax
   22435:	0f 8e 9d 00 00 00    	jle    224d8 <temp_to_long+0x1a1>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2243b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2243f:	8b 10                	mov    (%eax),%edx
   22441:	8b 44 24 08          	mov    0x8(%esp),%eax
   22445:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22448:	83 c2 01             	add    $0x1,%edx
   2244b:	83 d0 00             	adc    $0x0,%eax
   2244e:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22452:	89 11                	mov    %edx,(%ecx)
   22454:	8b 54 24 08          	mov    0x8(%esp),%edx
   22458:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   2245b:	eb 7b                	jmp    224d8 <temp_to_long+0x1a1>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   2245d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22461:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22465:	66 85 c0             	test   %ax,%ax
   22468:	79 70                	jns    224da <temp_to_long+0x1a3>
   2246a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2246e:	8b 40 04             	mov    0x4(%eax),%eax
   22471:	0f b6 c0             	movzbl %al,%eax
   22474:	85 c0                	test   %eax,%eax
   22476:	74 62                	je     224da <temp_to_long+0x1a3>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22478:	8b 44 24 08          	mov    0x8(%esp),%eax
   2247c:	8b 10                	mov    (%eax),%edx
   2247e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22482:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22485:	83 c2 01             	add    $0x1,%edx
   22488:	83 d0 00             	adc    $0x0,%eax
   2248b:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   2248f:	89 11                	mov    %edx,(%ecx)
   22491:	8b 54 24 08          	mov    0x8(%esp),%edx
   22495:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   22498:	eb 40                	jmp    224da <temp_to_long+0x1a3>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   2249a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2249e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   224a2:	66 85 c0             	test   %ax,%ax
   224a5:	78 35                	js     224dc <temp_to_long+0x1a5>
   224a7:	8b 44 24 04          	mov    0x4(%esp),%eax
   224ab:	8b 40 04             	mov    0x4(%eax),%eax
   224ae:	0f b6 c0             	movzbl %al,%eax
   224b1:	85 c0                	test   %eax,%eax
   224b3:	74 27                	je     224dc <temp_to_long+0x1a5>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   224b5:	8b 44 24 08          	mov    0x8(%esp),%eax
   224b9:	8b 10                	mov    (%eax),%edx
   224bb:	8b 44 24 08          	mov    0x8(%esp),%eax
   224bf:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   224c2:	83 c2 01             	add    $0x1,%edx
   224c5:	83 d0 00             	adc    $0x0,%eax
   224c8:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   224cc:	89 11                	mov    %edx,(%ecx)
   224ce:	8b 54 24 08          	mov    0x8(%esp),%edx
   224d2:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   224d5:	90                   	nop
   224d6:	eb 04                	jmp    224dc <temp_to_long+0x1a5>
			break;
   224d8:	90                   	nop
   224d9:	c3                   	ret    
			break;
   224da:	90                   	nop
   224db:	c3                   	ret    
			break;
   224dc:	90                   	nop
	}
}
   224dd:	c3                   	ret    

000224de <real_to_int>:

// 临时实数转换成临时整数格式。
// 临时整数也用10字节表示。其中低8字节是无符号整数值，高2字节表示指数值和符号位。如果高2字节最高有效位为1，则表示是负数；
// 若位0，表示是正数。
void real_to_int(const temp_real * a, temp_int * b)
{
   224de:	53                   	push   %ebx
   224df:	83 ec 10             	sub    $0x10,%esp
// 整数值最大值是2的63次方，加上临时实数偏置值16383,表示一个整数值转换为临时实数，临时实数指数最大值，减去临时实数指数，
// 得到指数差值（相当于与最大整数值的差值）。
	int shift =  16383 + 63 - (a->exponent & 0x7fff);
   224e2:	8b 44 24 18          	mov    0x18(%esp),%eax
   224e6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   224ea:	98                   	cwtl   
   224eb:	25 ff 7f 00 00       	and    $0x7fff,%eax
   224f0:	ba 3e 40 00 00       	mov    $0x403e,%edx
   224f5:	29 c2                	sub    %eax,%edx
   224f7:	89 d0                	mov    %edx,%eax
   224f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned long underflow;

	b->a = b->b = underflow = 0;    // 初始化临时整数值为0。
   224fd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   22504:	00 
   22505:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22509:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   22510:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22514:	8b 50 04             	mov    0x4(%eax),%edx
   22517:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2251b:	89 10                	mov    %edx,(%eax)
	b->sign = (a->exponent < 0);    // 置临时整数符号与临时实数符号一致。
   2251d:	8b 44 24 18          	mov    0x18(%esp),%eax
   22521:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22525:	66 c1 e8 0f          	shr    $0xf,%ax
   22529:	0f b6 d0             	movzbl %al,%edx
   2252c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22530:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (shift < 0) {                // 如果指数差值小于0，说明这个临时实数不能放入临时整数中，
   22534:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22539:	79 1e                	jns    22559 <real_to_int+0x7b>
		set_OE();               // 置状态字溢出位。
   2253b:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22540:	8b 90 1c 04 00 00    	mov    0x41c(%eax),%edx
   22546:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   2254b:	83 ca 08             	or     $0x8,%edx
   2254e:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   22554:	e9 8b 01 00 00       	jmp    226e4 <real_to_int+0x206>
	}
// 如果两值差值小于2的32次方，直接把实数值放入整数值。
	if (shift < 32) {
   22559:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   2255e:	7f 1c                	jg     2257c <real_to_int+0x9e>
		b->b = a->b; b->a = a->a;
   22560:	8b 44 24 18          	mov    0x18(%esp),%eax
   22564:	8b 50 04             	mov    0x4(%eax),%edx
   22567:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2256b:	89 50 04             	mov    %edx,0x4(%eax)
   2256e:	8b 44 24 18          	mov    0x18(%esp),%eax
   22572:	8b 10                	mov    (%eax),%edx
   22574:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22578:	89 10                	mov    %edx,(%eax)
   2257a:	eb 40                	jmp    225bc <real_to_int+0xde>
// 如果两值差值介于2的32次方与64次方之间，把实数高位a->b放入整数低位b->a，然后把实数低位放入下溢出变量underflow，指数差值
// shift-32。
	} else if (shift < 64) {
   2257c:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   22581:	7f 1e                	jg     225a1 <real_to_int+0xc3>
		b->a = a->b; underflow = a->a;
   22583:	8b 44 24 18          	mov    0x18(%esp),%eax
   22587:	8b 50 04             	mov    0x4(%eax),%edx
   2258a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2258e:	89 10                	mov    %edx,(%eax)
   22590:	8b 44 24 18          	mov    0x18(%esp),%eax
   22594:	8b 00                	mov    (%eax),%eax
   22596:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 32;
   2259a:	83 6c 24 0c 20       	subl   $0x20,0xc(%esp)
   2259f:	eb 1b                	jmp    225bc <real_to_int+0xde>
// 如果两值差值介于2的64次方与96次方之间，把实数高位a->b放入下溢出变量underflow，指数差值shift-64。
	} else if (shift < 96) {
   225a1:	83 7c 24 0c 5f       	cmpl   $0x5f,0xc(%esp)
   225a6:	0f 8f 31 01 00 00    	jg     226dd <real_to_int+0x1ff>
		underflow = a->b;
   225ac:	8b 44 24 18          	mov    0x18(%esp),%eax
   225b0:	8b 40 04             	mov    0x4(%eax),%eax
   225b3:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 64;
   225b7:	83 6c 24 0c 40       	subl   $0x40,0xc(%esp)
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   225bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   225c0:	89 c1                	mov    %eax,%ecx
	__asm__("shrdl %2,%1,%0"
   225c2:	8b 54 24 08          	mov    0x8(%esp),%edx
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   225c6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225ca:	8b 00                	mov    (%eax),%eax
	__asm__("shrdl %2,%1,%0"
   225cc:	0f ad c2             	shrd   %cl,%eax,%edx
   225cf:	89 54 24 08          	mov    %edx,0x8(%esp)
   225d3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   225d7:	89 02                	mov    %eax,(%edx)
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
   225d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   225dd:	89 c1                	mov    %eax,%ecx
   225df:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225e3:	8b 10                	mov    (%eax),%edx
   225e5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225e9:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrdl %2,%1,%0"
   225ec:	0f ad c2             	shrd   %cl,%eax,%edx
   225ef:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   225f3:	89 11                	mov    %edx,(%ecx)
   225f5:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   225f9:	89 42 04             	mov    %eax,0x4(%edx)
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
   225fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22600:	89 c2                	mov    %eax,%edx
   22602:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22606:	8b 40 04             	mov    0x4(%eax),%eax
	__asm__("shrl %1,%0"
   22609:	89 d1                	mov    %edx,%ecx
   2260b:	d3 e8                	shr    %cl,%eax
   2260d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22611:	89 42 04             	mov    %eax,0x4(%edx)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   22614:	a1 a0 f1 02 00       	mov    0x2f1a0,%eax
   22619:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2261f:	c1 f8 0a             	sar    $0xa,%eax
   22622:	83 e0 03             	and    $0x3,%eax
   22625:	83 f8 01             	cmp    $0x1,%eax
   22628:	74 7b                	je     226a5 <real_to_int+0x1c7>
   2262a:	83 f8 02             	cmp    $0x2,%eax
   2262d:	74 3f                	je     2266e <real_to_int+0x190>
   2262f:	85 c0                	test   %eax,%eax
   22631:	0f 85 ad 00 00 00    	jne    226e4 <real_to_int+0x206>
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
   22637:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2263b:	8b 10                	mov    (%eax),%edx
   2263d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22641:	8b 58 04             	mov    0x4(%eax),%ebx
				,"r" (0x7fffffff + (b->a & 1))
   22644:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22648:	8b 00                	mov    (%eax),%eax
   2264a:	83 e0 01             	and    $0x1,%eax
   2264d:	8d 88 ff ff ff 7f    	lea    0x7fffffff(%eax),%ecx
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
   22653:	89 d8                	mov    %ebx,%eax
   22655:	01 4c 24 08          	add    %ecx,0x8(%esp)
   22659:	83 d2 00             	adc    $0x0,%edx
   2265c:	83 d0 00             	adc    $0x0,%eax
   2265f:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22663:	89 11                	mov    %edx,(%ecx)
   22665:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22669:	89 42 04             	mov    %eax,0x4(%edx)
				,"m" (*&underflow));
			break;
   2266c:	eb 76                	jmp    226e4 <real_to_int+0x206>
		case ROUND_UP:
			if (!b->sign && underflow)
   2266e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22672:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22676:	66 85 c0             	test   %ax,%ax
   22679:	75 65                	jne    226e0 <real_to_int+0x202>
   2267b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2267f:	85 c0                	test   %eax,%eax
   22681:	74 5d                	je     226e0 <real_to_int+0x202>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22683:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22687:	8b 10                	mov    (%eax),%edx
   22689:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2268d:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   22690:	83 c2 01             	add    $0x1,%edx
   22693:	83 d0 00             	adc    $0x0,%eax
   22696:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2269a:	89 11                	mov    %edx,(%ecx)
   2269c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   226a0:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   226a3:	eb 3b                	jmp    226e0 <real_to_int+0x202>
		case ROUND_DOWN:
			if (b->sign && underflow)
   226a5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226a9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   226ad:	66 85 c0             	test   %ax,%ax
   226b0:	74 31                	je     226e3 <real_to_int+0x205>
   226b2:	8b 44 24 08          	mov    0x8(%esp),%eax
   226b6:	85 c0                	test   %eax,%eax
   226b8:	74 29                	je     226e3 <real_to_int+0x205>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   226ba:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226be:	8b 10                	mov    (%eax),%edx
   226c0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226c4:	8b 40 04             	mov    0x4(%eax),%eax
				__asm__("addl $1,%0 ; adcl $0,%1"
   226c7:	83 c2 01             	add    $0x1,%edx
   226ca:	83 d0 00             	adc    $0x0,%eax
   226cd:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   226d1:	89 11                	mov    %edx,(%ecx)
   226d3:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   226d7:	89 42 04             	mov    %eax,0x4(%edx)
			break;
   226da:	90                   	nop
   226db:	eb 06                	jmp    226e3 <real_to_int+0x205>
		return;
   226dd:	90                   	nop
   226de:	eb 04                	jmp    226e4 <real_to_int+0x206>
			break;
   226e0:	90                   	nop
   226e1:	eb 01                	jmp    226e4 <real_to_int+0x206>
			break;
   226e3:	90                   	nop
	}
}
   226e4:	83 c4 10             	add    $0x10,%esp
   226e7:	5b                   	pop    %ebx
   226e8:	c3                   	ret    

000226e9 <int_to_real>:

// 临时整数转换成临时实数格式。
void int_to_real(const temp_int * a, temp_real * b)
{
// 由于原值是整数，所以转换成临时实数时指数除了需要加上偏置量16383外，还要加上63。表示
	b->a = a->a;
   226e9:	8b 44 24 04          	mov    0x4(%esp),%eax
   226ed:	8b 10                	mov    (%eax),%edx
   226ef:	8b 44 24 08          	mov    0x8(%esp),%eax
   226f3:	89 10                	mov    %edx,(%eax)
	b->b = a->b;
   226f5:	8b 44 24 04          	mov    0x4(%esp),%eax
   226f9:	8b 50 04             	mov    0x4(%eax),%edx
   226fc:	8b 44 24 08          	mov    0x8(%esp),%eax
   22700:	89 50 04             	mov    %edx,0x4(%eax)
	if (b->a || b->b)
   22703:	8b 44 24 08          	mov    0x8(%esp),%eax
   22707:	8b 00                	mov    (%eax),%eax
   22709:	85 c0                	test   %eax,%eax
   2270b:	75 0b                	jne    22718 <int_to_real+0x2f>
   2270d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22711:	8b 40 04             	mov    0x4(%eax),%eax
   22714:	85 c0                	test   %eax,%eax
   22716:	74 23                	je     2273b <int_to_real+0x52>
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
   22718:	8b 44 24 04          	mov    0x4(%esp),%eax
   2271c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22720:	66 85 c0             	test   %ax,%ax
   22723:	74 07                	je     2272c <int_to_real+0x43>
   22725:	ba 3e c0 ff ff       	mov    $0xffffc03e,%edx
   2272a:	eb 05                	jmp    22731 <int_to_real+0x48>
   2272c:	ba 3e 40 00 00       	mov    $0x403e,%edx
   22731:	8b 44 24 08          	mov    0x8(%esp),%eax
   22735:	66 89 50 08          	mov    %dx,0x8(%eax)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   22739:	eb 3e                	jmp    22779 <int_to_real+0x90>
		b->exponent = 0;
   2273b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2273f:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22745:	c3                   	ret    
		b->exponent--;
   22746:	8b 44 24 08          	mov    0x8(%esp),%eax
   2274a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2274e:	83 e8 01             	sub    $0x1,%eax
   22751:	89 c2                	mov    %eax,%edx
   22753:	8b 44 24 08          	mov    0x8(%esp),%eax
   22757:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
   2275b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2275f:	8b 10                	mov    (%eax),%edx
   22761:	8b 44 24 08          	mov    0x8(%esp),%eax
   22765:	8b 40 04             	mov    0x4(%eax),%eax
		__asm__("addl %0,%0 ; adcl %1,%1"
   22768:	01 d2                	add    %edx,%edx
   2276a:	11 c0                	adc    %eax,%eax
   2276c:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22770:	89 11                	mov    %edx,(%ecx)
   22772:	8b 54 24 08          	mov    0x8(%esp),%edx
   22776:	89 42 04             	mov    %eax,0x4(%edx)
	while (b->b >= 0) {
   22779:	8b 44 24 08          	mov    0x8(%esp),%eax
   2277d:	8b 40 04             	mov    0x4(%eax),%eax
   22780:	85 c0                	test   %eax,%eax
   22782:	79 c2                	jns    22746 <int_to_real+0x5d>
	}
}
   22784:	c3                   	ret    

00022785 <_exit>:
// 直接调用系统中断int 0x80,功能号__NR_exit.
// 参数:exit_code - 退出码.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未初始化变量的)
// 假警告信息.等同于gcc的函数属性说明:void do_exit(int error_code) __attribute__((noreturn));
void _exit(int exit_code)
{
   22785:	53                   	push   %ebx
	__asm__ __volatile__ ("int $0x80"::"a" (__NR_exit), "b" (exit_code));
   22786:	b8 01 00 00 00       	mov    $0x1,%eax
   2278b:	8b 54 24 08          	mov    0x8(%esp),%edx
   2278f:	89 d3                	mov    %edx,%ebx
   22791:	cd 80                	int    $0x80
}
   22793:	90                   	nop
   22794:	5b                   	pop    %ebx
   22795:	c3                   	ret    

00022796 <open>:
// 打开文件函数
// 打开并有可能创建一个文件.
// 参数:filname - 文件名;flag - 文件打开标志;...
// 返回:文件描述符,若出错则置出错码,并返回-1.
int open(const char * filename, int flag, ...)
{
   22796:	53                   	push   %ebx
   22797:	83 ec 10             	sub    $0x10,%esp

	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
   2279a:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2279e:	83 c0 04             	add    $0x4,%eax
   227a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
	__asm__(
   227a5:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
   227a9:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
   227ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227b2:	83 e8 04             	sub    $0x4,%eax
   227b5:	8b 10                	mov    (%eax),%edx
	__asm__(
   227b7:	b8 05 00 00 00       	mov    $0x5,%eax
   227bc:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   227c0:	cd 80                	int    $0x80
   227c2:	89 c3                	mov    %eax,%ebx
	// 系统中断调用返回值大于或等于0,表示是一个文件描述符,则直接返回之.
	if (res >= 0)
   227c4:	85 db                	test   %ebx,%ebx
   227c6:	78 04                	js     227cc <open+0x36>
		return res;
   227c8:	89 d8                	mov    %ebx,%eax
   227ca:	eb 0e                	jmp    227da <open+0x44>
	// 否则说明返回值小于0,则代表一个出错码.设置该出错码并返回-1.
	errno = -res;
   227cc:	89 d8                	mov    %ebx,%eax
   227ce:	f7 d8                	neg    %eax
   227d0:	a3 24 68 04 00       	mov    %eax,0x46824
	return -1;
   227d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   227da:	83 c4 10             	add    $0x10,%esp
   227dd:	5b                   	pop    %ebx
   227de:	c3                   	ret    

000227df <close>:
#define __LIBRARY__
#include <unistd.h>	                                // Linux标准头文件.定义了各种符号常数和类型,并声明了各种函数.

// 关闭文件函数
// 下面该调用宏函数对应:int close(int fd).直接调用了系统中断int 0x80,参数是__NR_close.其中fd是文件描述符.
_syscall1(int, close, int, fd)
   227df:	53                   	push   %ebx
   227e0:	83 ec 10             	sub    $0x10,%esp
   227e3:	b8 06 00 00 00       	mov    $0x6,%eax
   227e8:	8b 54 24 18          	mov    0x18(%esp),%edx
   227ec:	89 d3                	mov    %edx,%ebx
   227ee:	cd 80                	int    $0x80
   227f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   227f4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   227f9:	78 06                	js     22801 <close+0x22>
   227fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227ff:	eb 10                	jmp    22811 <close+0x32>
   22801:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22805:	f7 d8                	neg    %eax
   22807:	a3 24 68 04 00       	mov    %eax,0x46824
   2280c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22811:	83 c4 10             	add    $0x10,%esp
   22814:	5b                   	pop    %ebx
   22815:	c3                   	ret    

00022816 <write>:

// 写文件系统调用函函数.
// 该宏结构对应于函数:int write(int fd, const char * buf, off_t count)
// 参数:fd - 文件描述符;buf - 写缓冲指针; count - 写字节数.
// 返回:成功时返回写入的字节数(0表示写入0字节);出错时将返回-1,并且设置了出错号.
_syscall3(int, write, int, fd, const char *, buf, off_t, count)
   22816:	53                   	push   %ebx
   22817:	83 ec 10             	sub    $0x10,%esp
   2281a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2281e:	b8 04 00 00 00       	mov    $0x4,%eax
   22823:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22827:	8b 54 24 20          	mov    0x20(%esp),%edx
   2282b:	cd 80                	int    $0x80
   2282d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22831:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22836:	78 06                	js     2283e <write+0x28>
   22838:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2283c:	eb 10                	jmp    2284e <write+0x38>
   2283e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22842:	f7 d8                	neg    %eax
   22844:	a3 24 68 04 00       	mov    %eax,0x46824
   22849:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2284e:	83 c4 10             	add    $0x10,%esp
   22851:	5b                   	pop    %ebx
   22852:	c3                   	ret    

00022853 <dup>:
			                                    // 如定义了__LIBRARY__,则还含系统调用号和内嵌汇编_syscall0()等.

// 复制文件描述符函数.
// 下面该调用宏函数对应:int dup(int fd).直接调用了系统中断int 0x80,参数是__NR_dup.
// 其中fd是文件描述符.
_syscall1(int, dup, int, fd)
   22853:	53                   	push   %ebx
   22854:	83 ec 10             	sub    $0x10,%esp
   22857:	b8 29 00 00 00       	mov    $0x29,%eax
   2285c:	8b 54 24 18          	mov    0x18(%esp),%edx
   22860:	89 d3                	mov    %edx,%ebx
   22862:	cd 80                	int    $0x80
   22864:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22868:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   2286d:	78 06                	js     22875 <dup+0x22>
   2286f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22873:	eb 10                	jmp    22885 <dup+0x32>
   22875:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22879:	f7 d8                	neg    %eax
   2287b:	a3 24 68 04 00       	mov    %eax,0x46824
   22880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22885:	83 c4 10             	add    $0x10,%esp
   22888:	5b                   	pop    %ebx
   22889:	c3                   	ret    

0002288a <setsid>:
#include <unistd.h>

// 创建一个会话并设置进程组号。
// 下面系统调用宏对应于函数：pid_t setsid()。
// 返回：调用进程的会话标识符（session ID）。
_syscall0(pid_t, setsid)
   2288a:	83 ec 10             	sub    $0x10,%esp
   2288d:	b8 42 00 00 00       	mov    $0x42,%eax
   22892:	cd 80                	int    $0x80
   22894:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22898:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   2289d:	78 06                	js     228a5 <setsid+0x1b>
   2289f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228a3:	eb 10                	jmp    228b5 <setsid+0x2b>
   228a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228a9:	f7 d8                	neg    %eax
   228ab:	a3 24 68 04 00       	mov    %eax,0x46824
   228b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228b5:	83 c4 10             	add    $0x10,%esp
   228b8:	c3                   	ret    

000228b9 <execve>:

// 加载并执行子进程(其他程序)函数.
// 下面该调用宏函数对应:int execve(const char * file,char ** argv, char ** envp).
// 参数:file - 被执行程序文件名;argv - 命令行参数指针数组;envp - 环境变量指针数组.
// 直接调用了系统中断int 0x80,参数是__NR_execve.参见include/unistd.h和fs/exec.c程序.
_syscall3(int, execve, const char *, file, char **, argv, char **, envp)
   228b9:	53                   	push   %ebx
   228ba:	83 ec 10             	sub    $0x10,%esp
   228bd:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   228c1:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   228c5:	8b 54 24 20          	mov    0x20(%esp),%edx
   228c9:	b8 0b 00 00 00       	mov    $0xb,%eax
   228ce:	cd 80                	int    $0x80
   228d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   228d4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   228d9:	78 06                	js     228e1 <execve+0x28>
   228db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228df:	eb 10                	jmp    228f1 <execve+0x38>
   228e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228e5:	f7 d8                	neg    %eax
   228e7:	a3 24 68 04 00       	mov    %eax,0x46824
   228ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228f1:	83 c4 10             	add    $0x10,%esp
   228f4:	5b                   	pop    %ebx
   228f5:	c3                   	ret    

000228f6 <waitpid>:

// 等待进程终止系统调用函数.
// 该下面宏结构对应于函数:pid_t waitpid(pid_t pid,int * wait_stat,int options)
//
// 参数:pid - 等待被终止进程的进程id,或者是用于指定特殊情况的其他特定数值;wait_stat - 用于存放状态信息;options - WNOHANG或WUNTRACED或是0.
_syscall3(pid_t, waitpid, pid_t, pid, int *, wait_stat, int, options)
   228f6:	53                   	push   %ebx
   228f7:	83 ec 10             	sub    $0x10,%esp
   228fa:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   228fe:	b8 07 00 00 00       	mov    $0x7,%eax
   22903:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22907:	8b 54 24 20          	mov    0x20(%esp),%edx
   2290b:	cd 80                	int    $0x80
   2290d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22911:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22916:	78 06                	js     2291e <waitpid+0x28>
   22918:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2291c:	eb 10                	jmp    2292e <waitpid+0x38>
   2291e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22922:	f7 d8                	neg    %eax
   22924:	a3 24 68 04 00       	mov    %eax,0x46824
   22929:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2292e:	83 c4 10             	add    $0x10,%esp
   22931:	5b                   	pop    %ebx
   22932:	c3                   	ret    

00022933 <wait>:

// wait()系统调用.直接调用waitpid()函数.
pid_t wait(int * wait_stat)
{
	return waitpid(-1, wait_stat, 0);
   22933:	6a 00                	push   $0x0
   22935:	ff 74 24 08          	pushl  0x8(%esp)
   22939:	6a ff                	push   $0xffffffff
   2293b:	e8 b6 ff ff ff       	call   228f6 <waitpid>
   22940:	83 c4 0c             	add    $0xc,%esp
}
   22943:	c3                   	ret    

00022944 <Log>:

static unsigned short cur_log_level = LOG_INFO_TYPE;

// linux0.12 kernel log function
void Log(unsigned short log_level, const char *fmt, ...)
{
   22944:	83 ec 2c             	sub    $0x2c,%esp
   22947:	8b 44 24 30          	mov    0x30(%esp),%eax
   2294b:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
    if (log_level >= cur_log_level) {
   22950:	0f b7 05 e0 06 04 00 	movzwl 0x406e0,%eax
   22957:	66 39 44 24 0c       	cmp    %ax,0xc(%esp)
   2295c:	72 34                	jb     22992 <Log+0x4e>
        va_list args;                           // va_list实际上是一个字符指针类型.

        // 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
        // 函数并返回显示字符数.
        va_start(args, fmt);
   2295e:	8d 44 24 34          	lea    0x34(%esp),%eax
   22962:	83 c0 04             	add    $0x4,%eax
   22965:	89 44 24 1c          	mov    %eax,0x1c(%esp)
        vsprintf(log_buf, fmt, args);
   22969:	8b 44 24 34          	mov    0x34(%esp),%eax
   2296d:	83 ec 04             	sub    $0x4,%esp
   22970:	ff 74 24 20          	pushl  0x20(%esp)
   22974:	50                   	push   %eax
   22975:	68 e0 02 04 00       	push   $0x402e0
   2297a:	e8 f7 65 fe ff       	call   8f76 <vsprintf>
   2297f:	83 c4 10             	add    $0x10,%esp
        va_end(args);
        console_print(log_buf);                 // chr_drv/console.c
   22982:	83 ec 0c             	sub    $0xc,%esp
   22985:	68 e0 02 04 00       	push   $0x402e0
   2298a:	e8 42 ab ff ff       	call   1d4d1 <console_print>
   2298f:	83 c4 10             	add    $0x10,%esp
    }
}
   22992:	90                   	nop
   22993:	83 c4 2c             	add    $0x2c,%esp
   22996:	c3                   	ret    
